
projectmaicro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025f4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  08002794  08002794  00003794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cf8  08002cf8  00004064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002cf8  08002cf8  00003cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d00  08002d00  00004064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d00  08002d00  00003d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d04  08002d04  00003d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08002d08  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000064  08002d6c  00004064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08002d6c  0000423c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a08  00000000  00000000  00004094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000063b  00000000  00000000  00005a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000210  00000000  00000000  000060d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000192  00000000  00000000  000062e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff25  00000000  00000000  0000647a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ef7  00000000  00000000  0001639f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005744b  00000000  00000000  00018296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006f6e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001290  00000000  00000000  0006f724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000709b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800277c 	.word	0x0800277c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	0800277c 	.word	0x0800277c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	@ (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	6039      	str	r1, [r7, #0]
 80002c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	db0a      	blt.n	80002e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	490c      	ldr	r1, [pc, #48]	@ (8000308 <__NVIC_SetPriority+0x4c>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e4:	e00a      	b.n	80002fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4908      	ldr	r1, [pc, #32]	@ (800030c <__NVIC_SetPriority+0x50>)
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	f003 030f 	and.w	r3, r3, #15
 80002f2:	3b04      	subs	r3, #4
 80002f4:	0112      	lsls	r2, r2, #4
 80002f6:	b2d2      	uxtb	r2, r2
 80002f8:	440b      	add	r3, r1
 80002fa:	761a      	strb	r2, [r3, #24]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	e000e100 	.word	0xe000e100
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	3b01      	subs	r3, #1
 800031c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000320:	d301      	bcc.n	8000326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000322:	2301      	movs	r3, #1
 8000324:	e00f      	b.n	8000346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000326:	4a0a      	ldr	r2, [pc, #40]	@ (8000350 <SysTick_Config+0x40>)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	3b01      	subs	r3, #1
 800032c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800032e:	210f      	movs	r1, #15
 8000330:	f04f 30ff 	mov.w	r0, #4294967295
 8000334:	f7ff ffc2 	bl	80002bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000338:	4b05      	ldr	r3, [pc, #20]	@ (8000350 <SysTick_Config+0x40>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800033e:	4b04      	ldr	r3, [pc, #16]	@ (8000350 <SysTick_Config+0x40>)
 8000340:	2207      	movs	r2, #7
 8000342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000344:	2300      	movs	r3, #0
}
 8000346:	4618      	mov	r0, r3
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	e000e010 	.word	0xe000e010

08000354 <main>:

/* ============================================================================
 * MAIN ENTRY POINT
 * ============================================================================ */

int main(void) {
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
    // 1. Initialize all microcontroller peripherals
    SystemClock_Config();
 8000358:	f000 fdac 	bl	8000eb4 <SystemClock_Config>
    GPIO_Init();
 800035c:	f000 fdf0 	bl	8000f40 <GPIO_Init>
    USART2_Init();
 8000360:	f000 fe76 	bl	8001050 <USART2_Init>
    SysTick_Config(SystemCoreClock / 1000); // 1ms ticks
 8000364:	4b10      	ldr	r3, [pc, #64]	@ (80003a8 <main+0x54>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a10      	ldr	r2, [pc, #64]	@ (80003ac <main+0x58>)
 800036a:	fba2 2303 	umull	r2, r3, r2, r3
 800036e:	099b      	lsrs	r3, r3, #6
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ffcd 	bl	8000310 <SysTick_Config>
    NVIC_Init();
 8000376:	f000 fe89 	bl	800108c <NVIC_Init>
    ADC_Init();
 800037a:	f000 fe3d 	bl	8000ff8 <ADC_Init>

    // Enable Log_Print() now that UART is ready
    g_system_initialized = 1;
 800037e:	4b0c      	ldr	r3, [pc, #48]	@ (80003b0 <main+0x5c>)
 8000380:	2201      	movs	r2, #1
 8000382:	701a      	strb	r2, [r3, #0]

    // Start the first ADC conversion
    ADC_StartConversion();
 8000384:	f000 fe92 	bl	80010ac <ADC_StartConversion>
    Delay_ms(10); // Allow ADC to stabilize
 8000388:	200a      	movs	r0, #10
 800038a:	f000 fea7 	bl	80010dc <Delay_ms>

    // 2. Initialize the game logic
    Game_Init();
 800038e:	f000 f811 	bl	80003b4 <Game_Init>

    // 3. Main application loop
    while(1) {
        // Continuously monitor hardware inputs
        Monitor_Buttons();
 8000392:	f000 fc71 	bl	8000c78 <Monitor_Buttons>
        Monitor_ADC();
 8000396:	f000 fcf5 	bl	8000d84 <Monitor_ADC>

        // Run the game's state machine
        Game_Run();
 800039a:	f000 f831 	bl	8000400 <Game_Run>

        // Small delay to keep loop from running too fast
        Delay_ms(5);
 800039e:	2005      	movs	r0, #5
 80003a0:	f000 fe9c 	bl	80010dc <Delay_ms>
        Monitor_Buttons();
 80003a4:	bf00      	nop
 80003a6:	e7f4      	b.n	8000392 <main+0x3e>
 80003a8:	20000000 	.word	0x20000000
 80003ac:	10624dd3 	.word	0x10624dd3
 80003b0:	200000a0 	.word	0x200000a0

080003b4 <Game_Init>:

/* ============================================================================
 * GAME LOGIC IMPLEMENTATION
 * ============================================================================ */

void Game_Init(void) {
 80003b4:	b590      	push	{r4, r7, lr}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
    Log_Print("\r\n[GAME] Initializing Simon Game...\r\n");
 80003ba:	480e      	ldr	r0, [pc, #56]	@ (80003f4 <Game_Init+0x40>)
 80003bc:	f000 feb0 	bl	8001120 <Log_Print>
    uint32_t seed = g_adc_values[1] + g_adc_values[2] + GetTick();
 80003c0:	4b0d      	ldr	r3, [pc, #52]	@ (80003f8 <Game_Init+0x44>)
 80003c2:	885b      	ldrh	r3, [r3, #2]
 80003c4:	461a      	mov	r2, r3
 80003c6:	4b0c      	ldr	r3, [pc, #48]	@ (80003f8 <Game_Init+0x44>)
 80003c8:	889b      	ldrh	r3, [r3, #4]
 80003ca:	4413      	add	r3, r2
 80003cc:	461c      	mov	r4, r3
 80003ce:	f000 fe9b 	bl	8001108 <GetTick>
 80003d2:	4603      	mov	r3, r0
 80003d4:	4423      	add	r3, r4
 80003d6:	607b      	str	r3, [r7, #4]
    srand(seed);
 80003d8:	6878      	ldr	r0, [r7, #4]
 80003da:	f000 ffd3 	bl	8001384 <srand>
    Log_Print("[GAME] Random seed set to: %lu\r\n", seed);
 80003de:	6879      	ldr	r1, [r7, #4]
 80003e0:	4806      	ldr	r0, [pc, #24]	@ (80003fc <Game_Init+0x48>)
 80003e2:	f000 fe9d 	bl	8001120 <Log_Print>
    set_game_state(GAME_STATE_BOOT);
 80003e6:	2000      	movs	r0, #0
 80003e8:	f000 fab6 	bl	8000958 <set_game_state>
}
 80003ec:	bf00      	nop
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd90      	pop	{r4, r7, pc}
 80003f4:	08002794 	.word	0x08002794
 80003f8:	200000a4 	.word	0x200000a4
 80003fc:	080027bc 	.word	0x080027bc

08000400 <Game_Run>:

void Game_Run(void) {
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
    if (g_last_state_logged != g_game_state) {
 8000404:	4b4c      	ldr	r3, [pc, #304]	@ (8000538 <Game_Run+0x138>)
 8000406:	781a      	ldrb	r2, [r3, #0]
 8000408:	4b4c      	ldr	r3, [pc, #304]	@ (800053c <Game_Run+0x13c>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	429a      	cmp	r2, r3
 800040e:	d053      	beq.n	80004b8 <Game_Run+0xb8>
        switch(g_game_state) {
 8000410:	4b4a      	ldr	r3, [pc, #296]	@ (800053c <Game_Run+0x13c>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b07      	cmp	r3, #7
 8000416:	d84b      	bhi.n	80004b0 <Game_Run+0xb0>
 8000418:	a201      	add	r2, pc, #4	@ (adr r2, 8000420 <Game_Run+0x20>)
 800041a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800041e:	bf00      	nop
 8000420:	08000441 	.word	0x08000441
 8000424:	0800044f 	.word	0x0800044f
 8000428:	0800045d 	.word	0x0800045d
 800042c:	0800046b 	.word	0x0800046b
 8000430:	08000479 	.word	0x08000479
 8000434:	08000487 	.word	0x08000487
 8000438:	08000495 	.word	0x08000495
 800043c:	080004a3 	.word	0x080004a3
            case GAME_STATE_BOOT:
                Log_Print("[STATE] -> BOOT\r\n");
 8000440:	483f      	ldr	r0, [pc, #252]	@ (8000540 <Game_Run+0x140>)
 8000442:	f000 fe6d 	bl	8001120 <Log_Print>
                Log_Print("Welcome! Use the potentiometer to select difficulty, then press and hold any button to confirm.\r\n");
 8000446:	483f      	ldr	r0, [pc, #252]	@ (8000544 <Game_Run+0x144>)
 8000448:	f000 fe6a 	bl	8001120 <Log_Print>
                break;
 800044c:	e030      	b.n	80004b0 <Game_Run+0xb0>
            case GAME_STATE_DIFFICULTY_SELECT:
                Log_Print("[STATE] -> DIFFICULTY_SELECT\r\n");
 800044e:	483e      	ldr	r0, [pc, #248]	@ (8000548 <Game_Run+0x148>)
 8000450:	f000 fe66 	bl	8001120 <Log_Print>
                Log_Print("Select difficulty with potentiometer. Press and hold any button to confirm.\r\n");
 8000454:	483d      	ldr	r0, [pc, #244]	@ (800054c <Game_Run+0x14c>)
 8000456:	f000 fe63 	bl	8001120 <Log_Print>
                break;
 800045a:	e029      	b.n	80004b0 <Game_Run+0xb0>
            case GAME_STATE_LEVEL_INTRO:
                Log_Print("[STATE] -> LEVEL_INTRO\r\n");
 800045c:	483c      	ldr	r0, [pc, #240]	@ (8000550 <Game_Run+0x150>)
 800045e:	f000 fe5f 	bl	8001120 <Log_Print>
                Log_Print("Get ready! Watch the LED pattern.\r\n");
 8000462:	483c      	ldr	r0, [pc, #240]	@ (8000554 <Game_Run+0x154>)
 8000464:	f000 fe5c 	bl	8001120 <Log_Print>
                break;
 8000468:	e022      	b.n	80004b0 <Game_Run+0xb0>
            case GAME_STATE_PATTERN_DISPLAY:
                Log_Print("[STATE] -> PATTERN_DISPLAY\r\n");
 800046a:	483b      	ldr	r0, [pc, #236]	@ (8000558 <Game_Run+0x158>)
 800046c:	f000 fe58 	bl	8001120 <Log_Print>
                Log_Print("Memorize the pattern!\r\n");
 8000470:	483a      	ldr	r0, [pc, #232]	@ (800055c <Game_Run+0x15c>)
 8000472:	f000 fe55 	bl	8001120 <Log_Print>
                break;
 8000476:	e01b      	b.n	80004b0 <Game_Run+0xb0>
            case GAME_STATE_INPUT_WAIT:
                Log_Print("[STATE] -> INPUT_WAIT\r\n");
 8000478:	4839      	ldr	r0, [pc, #228]	@ (8000560 <Game_Run+0x160>)
 800047a:	f000 fe51 	bl	8001120 <Log_Print>
                Log_Print("Repeat the pattern using the buttons.\r\n");
 800047e:	4839      	ldr	r0, [pc, #228]	@ (8000564 <Game_Run+0x164>)
 8000480:	f000 fe4e 	bl	8001120 <Log_Print>
                break;
 8000484:	e014      	b.n	80004b0 <Game_Run+0xb0>
            case GAME_STATE_RESULT_PROCESS:
                Log_Print("[STATE] -> RESULT_PROCESS\r\n");
 8000486:	4838      	ldr	r0, [pc, #224]	@ (8000568 <Game_Run+0x168>)
 8000488:	f000 fe4a 	bl	8001120 <Log_Print>
                Log_Print("Checking your answer...\r\n");
 800048c:	4837      	ldr	r0, [pc, #220]	@ (800056c <Game_Run+0x16c>)
 800048e:	f000 fe47 	bl	8001120 <Log_Print>
                break;
 8000492:	e00d      	b.n	80004b0 <Game_Run+0xb0>
            case GAME_STATE_VICTORY:
                Log_Print("[STATE] -> VICTORY\r\n");
 8000494:	4836      	ldr	r0, [pc, #216]	@ (8000570 <Game_Run+0x170>)
 8000496:	f000 fe43 	bl	8001120 <Log_Print>
                Log_Print("Congratulations! You won!\r\n");
 800049a:	4836      	ldr	r0, [pc, #216]	@ (8000574 <Game_Run+0x174>)
 800049c:	f000 fe40 	bl	8001120 <Log_Print>
                break;
 80004a0:	e006      	b.n	80004b0 <Game_Run+0xb0>
            case GAME_STATE_GAME_DEATH:
                Log_Print("[STATE] -> GAME_DEATH\r\n");
 80004a2:	4835      	ldr	r0, [pc, #212]	@ (8000578 <Game_Run+0x178>)
 80004a4:	f000 fe3c 	bl	8001120 <Log_Print>
                Log_Print("Game over! Try again.\r\n");
 80004a8:	4834      	ldr	r0, [pc, #208]	@ (800057c <Game_Run+0x17c>)
 80004aa:	f000 fe39 	bl	8001120 <Log_Print>
                break;
 80004ae:	bf00      	nop
        }
        g_last_state_logged = g_game_state;
 80004b0:	4b22      	ldr	r3, [pc, #136]	@ (800053c <Game_Run+0x13c>)
 80004b2:	781a      	ldrb	r2, [r3, #0]
 80004b4:	4b20      	ldr	r3, [pc, #128]	@ (8000538 <Game_Run+0x138>)
 80004b6:	701a      	strb	r2, [r3, #0]
    }
    switch(g_game_state) {
 80004b8:	4b20      	ldr	r3, [pc, #128]	@ (800053c <Game_Run+0x13c>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b07      	cmp	r3, #7
 80004be:	d82b      	bhi.n	8000518 <Game_Run+0x118>
 80004c0:	a201      	add	r2, pc, #4	@ (adr r2, 80004c8 <Game_Run+0xc8>)
 80004c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004c6:	bf00      	nop
 80004c8:	080004e9 	.word	0x080004e9
 80004cc:	080004ef 	.word	0x080004ef
 80004d0:	080004f5 	.word	0x080004f5
 80004d4:	080004fb 	.word	0x080004fb
 80004d8:	08000501 	.word	0x08000501
 80004dc:	08000507 	.word	0x08000507
 80004e0:	0800050d 	.word	0x0800050d
 80004e4:	08000513 	.word	0x08000513
        case GAME_STATE_BOOT:              handle_boot();              break;
 80004e8:	f000 faba 	bl	8000a60 <handle_boot>
 80004ec:	e022      	b.n	8000534 <Game_Run+0x134>
        case GAME_STATE_DIFFICULTY_SELECT: handle_difficulty_select(); break;
 80004ee:	f000 fadf 	bl	8000ab0 <handle_difficulty_select>
 80004f2:	e01f      	b.n	8000534 <Game_Run+0x134>
        case GAME_STATE_LEVEL_INTRO:       handle_level_intro();       break;
 80004f4:	f000 f88c 	bl	8000610 <handle_level_intro>
 80004f8:	e01c      	b.n	8000534 <Game_Run+0x134>
        case GAME_STATE_PATTERN_DISPLAY:   handle_pattern_display();   break;
 80004fa:	f000 f8bf 	bl	800067c <handle_pattern_display>
 80004fe:	e019      	b.n	8000534 <Game_Run+0x134>
        case GAME_STATE_INPUT_WAIT:        handle_input_wait();        break;
 8000500:	f000 f8f4 	bl	80006ec <handle_input_wait>
 8000504:	e016      	b.n	8000534 <Game_Run+0x134>
        case GAME_STATE_RESULT_PROCESS:    handle_result_process();    break;
 8000506:	f000 f941 	bl	800078c <handle_result_process>
 800050a:	e013      	b.n	8000534 <Game_Run+0x134>
        case GAME_STATE_VICTORY:           handle_victory();          break;
 800050c:	f000 f998 	bl	8000840 <handle_victory>
 8000510:	e010      	b.n	8000534 <Game_Run+0x134>
        case GAME_STATE_GAME_DEATH:        handle_game_death();       break;
 8000512:	f000 f9db 	bl	80008cc <handle_game_death>
 8000516:	e00d      	b.n	8000534 <Game_Run+0x134>
        default:
            Log_Print("[TODO] State %d not yet implemented!\r\n", g_game_state);
 8000518:	4b08      	ldr	r3, [pc, #32]	@ (800053c <Game_Run+0x13c>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	4818      	ldr	r0, [pc, #96]	@ (8000580 <Game_Run+0x180>)
 8000520:	f000 fdfe 	bl	8001120 <Log_Print>
            set_game_state(GAME_STATE_DIFFICULTY_SELECT); // Go back for now
 8000524:	2001      	movs	r0, #1
 8000526:	f000 fa17 	bl	8000958 <set_game_state>
            Delay_ms(1000);
 800052a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800052e:	f000 fdd5 	bl	80010dc <Delay_ms>
            break;
 8000532:	bf00      	nop
    }
}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20000005 	.word	0x20000005
 800053c:	200000b1 	.word	0x200000b1
 8000540:	080027e0 	.word	0x080027e0
 8000544:	080027f4 	.word	0x080027f4
 8000548:	08002858 	.word	0x08002858
 800054c:	08002878 	.word	0x08002878
 8000550:	080028c8 	.word	0x080028c8
 8000554:	080028e4 	.word	0x080028e4
 8000558:	08002908 	.word	0x08002908
 800055c:	08002928 	.word	0x08002928
 8000560:	08002940 	.word	0x08002940
 8000564:	08002958 	.word	0x08002958
 8000568:	08002980 	.word	0x08002980
 800056c:	0800299c 	.word	0x0800299c
 8000570:	080029b8 	.word	0x080029b8
 8000574:	080029d0 	.word	0x080029d0
 8000578:	080029ec 	.word	0x080029ec
 800057c:	08002a04 	.word	0x08002a04
 8000580:	08002a1c 	.word	0x08002a1c

08000584 <generate_pattern>:

// Helper: Generate random pattern
static void generate_pattern(uint8_t length) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < length; i++) {
 800058e:	2300      	movs	r3, #0
 8000590:	73fb      	strb	r3, [r7, #15]
 8000592:	e010      	b.n	80005b6 <generate_pattern+0x32>
        g_pattern[i] = rand() % 4; // 0-3 for 4 buttons/LEDs
 8000594:	f000 ff24 	bl	80013e0 <rand>
 8000598:	4603      	mov	r3, r0
 800059a:	425a      	negs	r2, r3
 800059c:	f003 0303 	and.w	r3, r3, #3
 80005a0:	f002 0203 	and.w	r2, r2, #3
 80005a4:	bf58      	it	pl
 80005a6:	4253      	negpl	r3, r2
 80005a8:	7bfa      	ldrb	r2, [r7, #15]
 80005aa:	b2d9      	uxtb	r1, r3
 80005ac:	4b07      	ldr	r3, [pc, #28]	@ (80005cc <generate_pattern+0x48>)
 80005ae:	5499      	strb	r1, [r3, r2]
    for (uint8_t i = 0; i < length; i++) {
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	3301      	adds	r3, #1
 80005b4:	73fb      	strb	r3, [r7, #15]
 80005b6:	7bfa      	ldrb	r2, [r7, #15]
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d3ea      	bcc.n	8000594 <generate_pattern+0x10>
    }
    g_pattern_length = length;
 80005be:	4a04      	ldr	r2, [pc, #16]	@ (80005d0 <generate_pattern+0x4c>)
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	7013      	strb	r3, [r2, #0]
}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200000c4 	.word	0x200000c4
 80005d0:	200000e4 	.word	0x200000e4

080005d4 <show_led>:

// Helper: Show one LED
static void show_led(uint8_t idx) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
    // Map button index to correct LED bit
    LED_SetPattern(1 << button_to_led_map[idx]);
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	4a06      	ldr	r2, [pc, #24]	@ (80005fc <show_led+0x28>)
 80005e2:	5cd3      	ldrb	r3, [r2, r3]
 80005e4:	461a      	mov	r2, r3
 80005e6:	2301      	movs	r3, #1
 80005e8:	4093      	lsls	r3, r2
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fbd1 	bl	8000d94 <LED_SetPattern>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	08002c14 	.word	0x08002c14

08000600 <clear_leds>:

// Helper: Turn off all LEDs
static void clear_leds(void) {
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
    LED_SetPattern(0);
 8000604:	2000      	movs	r0, #0
 8000606:	f000 fbc5 	bl	8000d94 <LED_SetPattern>
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <handle_level_intro>:

static void handle_level_intro(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
    Log_Print("Level %u. Lives: %u. Score: %lu\r\n", g_level, g_lives, g_score);
 8000614:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <handle_level_intro+0x50>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	4619      	mov	r1, r3
 800061a:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <handle_level_intro+0x54>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	461a      	mov	r2, r3
 8000620:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <handle_level_intro+0x58>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4811      	ldr	r0, [pc, #68]	@ (800066c <handle_level_intro+0x5c>)
 8000626:	f000 fd7b 	bl	8001120 <Log_Print>
    Log_Print("Memorize the pattern!\r\n");
 800062a:	4811      	ldr	r0, [pc, #68]	@ (8000670 <handle_level_intro+0x60>)
 800062c:	f000 fd78 	bl	8001120 <Log_Print>
    Delay_ms(1000);
 8000630:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000634:	f000 fd52 	bl	80010dc <Delay_ms>
    // Generate new pattern for this level
    generate_pattern(g_level + g_difficulty - 1); // pattern length increases
 8000638:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <handle_level_intro+0x50>)
 800063a:	781a      	ldrb	r2, [r3, #0]
 800063c:	4b0d      	ldr	r3, [pc, #52]	@ (8000674 <handle_level_intro+0x64>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	4413      	add	r3, r2
 8000642:	b2db      	uxtb	r3, r3
 8000644:	3b01      	subs	r3, #1
 8000646:	b2db      	uxtb	r3, r3
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ff9b 	bl	8000584 <generate_pattern>
    g_pattern_index = 0;
 800064e:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <handle_level_intro+0x68>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
    set_game_state(GAME_STATE_PATTERN_DISPLAY);
 8000654:	2003      	movs	r0, #3
 8000656:	f000 f97f 	bl	8000958 <set_game_state>
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200000b3 	.word	0x200000b3
 8000664:	200000b8 	.word	0x200000b8
 8000668:	200000b4 	.word	0x200000b4
 800066c:	08002a44 	.word	0x08002a44
 8000670:	08002928 	.word	0x08002928
 8000674:	200000b2 	.word	0x200000b2
 8000678:	200000e5 	.word	0x200000e5

0800067c <handle_pattern_display>:

static void handle_pattern_display(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
    // Show each LED in pattern sequence
    if (g_pattern_index < g_pattern_length) {
 8000680:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <handle_pattern_display+0x5c>)
 8000682:	781a      	ldrb	r2, [r3, #0]
 8000684:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <handle_pattern_display+0x60>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	429a      	cmp	r2, r3
 800068a:	d217      	bcs.n	80006bc <handle_pattern_display+0x40>
        show_led(g_pattern[g_pattern_index]);
 800068c:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <handle_pattern_display+0x5c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	461a      	mov	r2, r3
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <handle_pattern_display+0x64>)
 8000694:	5c9b      	ldrb	r3, [r3, r2]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff9c 	bl	80005d4 <show_led>
        Delay_ms(500);
 800069c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006a0:	f000 fd1c 	bl	80010dc <Delay_ms>
        clear_leds();
 80006a4:	f7ff ffac 	bl	8000600 <clear_leds>
        Delay_ms(250);
 80006a8:	20fa      	movs	r0, #250	@ 0xfa
 80006aa:	f000 fd17 	bl	80010dc <Delay_ms>
        g_pattern_index++;
 80006ae:	4b0a      	ldr	r3, [pc, #40]	@ (80006d8 <handle_pattern_display+0x5c>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	3301      	adds	r3, #1
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <handle_pattern_display+0x5c>)
 80006b8:	701a      	strb	r2, [r3, #0]
        g_pattern_index = 0;
        g_input_index = 0;
        g_input_correct = 1;
        set_game_state(GAME_STATE_INPUT_WAIT);
    }
}
 80006ba:	e00b      	b.n	80006d4 <handle_pattern_display+0x58>
        g_pattern_index = 0;
 80006bc:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <handle_pattern_display+0x5c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
        g_input_index = 0;
 80006c2:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <handle_pattern_display+0x68>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
        g_input_correct = 1;
 80006c8:	4b07      	ldr	r3, [pc, #28]	@ (80006e8 <handle_pattern_display+0x6c>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	701a      	strb	r2, [r3, #0]
        set_game_state(GAME_STATE_INPUT_WAIT);
 80006ce:	2004      	movs	r0, #4
 80006d0:	f000 f942 	bl	8000958 <set_game_state>
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200000e5 	.word	0x200000e5
 80006dc:	200000e4 	.word	0x200000e4
 80006e0:	200000c4 	.word	0x200000c4
 80006e4:	200000e6 	.word	0x200000e6
 80006e8:	20000004 	.word	0x20000004

080006ec <handle_input_wait>:

static void handle_input_wait(void) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
//    Log_Print("Repeat the pattern by pressing the buttons!\r\n");
    // Wait for user input, one button at a time
    if (g_input_index < g_pattern_length) {
 80006f2:	4b21      	ldr	r3, [pc, #132]	@ (8000778 <handle_input_wait+0x8c>)
 80006f4:	781a      	ldrb	r2, [r3, #0]
 80006f6:	4b21      	ldr	r3, [pc, #132]	@ (800077c <handle_input_wait+0x90>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d234      	bcs.n	8000768 <handle_input_wait+0x7c>
        for (int i = 0; i < 4; i++) {
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	e02d      	b.n	8000760 <handle_input_wait+0x74>
            if (g_buttons[i].current_state == 1 && g_buttons[i].previous_state == 0) {
 8000704:	4a1e      	ldr	r2, [pc, #120]	@ (8000780 <handle_input_wait+0x94>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d124      	bne.n	800075a <handle_input_wait+0x6e>
 8000710:	4a1b      	ldr	r2, [pc, #108]	@ (8000780 <handle_input_wait+0x94>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	00db      	lsls	r3, r3, #3
 8000716:	4413      	add	r3, r2
 8000718:	785b      	ldrb	r3, [r3, #1]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d11d      	bne.n	800075a <handle_input_wait+0x6e>
                // Button pressed
                show_led(i);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	b2db      	uxtb	r3, r3
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff ff56 	bl	80005d4 <show_led>
                Delay_ms(200);
 8000728:	20c8      	movs	r0, #200	@ 0xc8
 800072a:	f000 fcd7 	bl	80010dc <Delay_ms>
                clear_leds();
 800072e:	f7ff ff67 	bl	8000600 <clear_leds>
                if (i != g_pattern[g_input_index]) {
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <handle_input_wait+0x8c>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	461a      	mov	r2, r3
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <handle_input_wait+0x98>)
 800073a:	5c9b      	ldrb	r3, [r3, r2]
 800073c:	461a      	mov	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4293      	cmp	r3, r2
 8000742:	d002      	beq.n	800074a <handle_input_wait+0x5e>
                    g_input_correct = 0;
 8000744:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <handle_input_wait+0x9c>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
                }
                g_input_index++;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <handle_input_wait+0x8c>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	3301      	adds	r3, #1
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <handle_input_wait+0x8c>)
 8000754:	701a      	strb	r2, [r3, #0]
                break;
 8000756:	bf00      	nop
            }
        }
    } else {
        set_game_state(GAME_STATE_RESULT_PROCESS);
    }
}
 8000758:	e009      	b.n	800076e <handle_input_wait+0x82>
        for (int i = 0; i < 4; i++) {
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	3301      	adds	r3, #1
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b03      	cmp	r3, #3
 8000764:	ddce      	ble.n	8000704 <handle_input_wait+0x18>
}
 8000766:	e002      	b.n	800076e <handle_input_wait+0x82>
        set_game_state(GAME_STATE_RESULT_PROCESS);
 8000768:	2005      	movs	r0, #5
 800076a:	f000 f8f5 	bl	8000958 <set_game_state>
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200000e6 	.word	0x200000e6
 800077c:	200000e4 	.word	0x200000e4
 8000780:	20000080 	.word	0x20000080
 8000784:	200000c4 	.word	0x200000c4
 8000788:	20000004 	.word	0x20000004

0800078c <handle_result_process>:

static void handle_result_process(void) {
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
    if (g_input_correct) {
 8000790:	4b23      	ldr	r3, [pc, #140]	@ (8000820 <handle_result_process+0x94>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d025      	beq.n	80007e4 <handle_result_process+0x58>
        Log_Print("Correct!\r\n");
 8000798:	4822      	ldr	r0, [pc, #136]	@ (8000824 <handle_result_process+0x98>)
 800079a:	f000 fcc1 	bl	8001120 <Log_Print>
        g_score += 10 * g_level * g_difficulty;
 800079e:	4b22      	ldr	r3, [pc, #136]	@ (8000828 <handle_result_process+0x9c>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	4b21      	ldr	r3, [pc, #132]	@ (800082c <handle_result_process+0xa0>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	fb03 f202 	mul.w	r2, r3, r2
 80007ac:	4613      	mov	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000830 <handle_result_process+0xa4>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4413      	add	r3, r2
 80007bc:	4a1c      	ldr	r2, [pc, #112]	@ (8000830 <handle_result_process+0xa4>)
 80007be:	6013      	str	r3, [r2, #0]
        g_level++;
 80007c0:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <handle_result_process+0x9c>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <handle_result_process+0x9c>)
 80007ca:	701a      	strb	r2, [r3, #0]
        if (g_level > 5) {
 80007cc:	4b16      	ldr	r3, [pc, #88]	@ (8000828 <handle_result_process+0x9c>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b05      	cmp	r3, #5
 80007d2:	d903      	bls.n	80007dc <handle_result_process+0x50>
            set_game_state(GAME_STATE_VICTORY);
 80007d4:	2006      	movs	r0, #6
 80007d6:	f000 f8bf 	bl	8000958 <set_game_state>
        } else {
            Log_Print("Try again!\r\n");
            set_game_state(GAME_STATE_LEVEL_INTRO);
        }
    }
}
 80007da:	e01e      	b.n	800081a <handle_result_process+0x8e>
            set_game_state(GAME_STATE_LEVEL_INTRO);
 80007dc:	2002      	movs	r0, #2
 80007de:	f000 f8bb 	bl	8000958 <set_game_state>
}
 80007e2:	e01a      	b.n	800081a <handle_result_process+0x8e>
        Log_Print("Incorrect!\r\n");
 80007e4:	4813      	ldr	r0, [pc, #76]	@ (8000834 <handle_result_process+0xa8>)
 80007e6:	f000 fc9b 	bl	8001120 <Log_Print>
        if (g_lives > 0) g_lives--;
 80007ea:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <handle_result_process+0xac>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d005      	beq.n	80007fe <handle_result_process+0x72>
 80007f2:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <handle_result_process+0xac>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	3b01      	subs	r3, #1
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <handle_result_process+0xac>)
 80007fc:	701a      	strb	r2, [r3, #0]
        if (g_lives == 0) {
 80007fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <handle_result_process+0xac>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d103      	bne.n	800080e <handle_result_process+0x82>
            set_game_state(GAME_STATE_GAME_DEATH);
 8000806:	2007      	movs	r0, #7
 8000808:	f000 f8a6 	bl	8000958 <set_game_state>
}
 800080c:	e005      	b.n	800081a <handle_result_process+0x8e>
            Log_Print("Try again!\r\n");
 800080e:	480b      	ldr	r0, [pc, #44]	@ (800083c <handle_result_process+0xb0>)
 8000810:	f000 fc86 	bl	8001120 <Log_Print>
            set_game_state(GAME_STATE_LEVEL_INTRO);
 8000814:	2002      	movs	r0, #2
 8000816:	f000 f89f 	bl	8000958 <set_game_state>
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000004 	.word	0x20000004
 8000824:	08002a68 	.word	0x08002a68
 8000828:	200000b3 	.word	0x200000b3
 800082c:	200000b2 	.word	0x200000b2
 8000830:	200000b4 	.word	0x200000b4
 8000834:	08002a74 	.word	0x08002a74
 8000838:	200000b8 	.word	0x200000b8
 800083c:	08002a84 	.word	0x08002a84

08000840 <handle_victory>:

static void handle_victory(void) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
    Log_Print("Congratulations! You completed all levels! Final Score: %lu\r\n", g_score);
 8000846:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <handle_victory+0x70>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4619      	mov	r1, r3
 800084c:	4819      	ldr	r0, [pc, #100]	@ (80008b4 <handle_victory+0x74>)
 800084e:	f000 fc67 	bl	8001120 <Log_Print>
    Log_Print("Press any button to restart.\r\n");
 8000852:	4819      	ldr	r0, [pc, #100]	@ (80008b8 <handle_victory+0x78>)
 8000854:	f000 fc64 	bl	8001120 <Log_Print>
    for (int i = 0; i < 4; i++) {
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	e01f      	b.n	800089e <handle_victory+0x5e>
        if (g_buttons[i].current_state == 1 && g_buttons[i].previous_state == 0) {
 800085e:	4a17      	ldr	r2, [pc, #92]	@ (80008bc <handle_victory+0x7c>)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d116      	bne.n	8000898 <handle_victory+0x58>
 800086a:	4a14      	ldr	r2, [pc, #80]	@ (80008bc <handle_victory+0x7c>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	4413      	add	r3, r2
 8000872:	785b      	ldrb	r3, [r3, #1]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d10f      	bne.n	8000898 <handle_victory+0x58>
            g_level = 1;
 8000878:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <handle_victory+0x80>)
 800087a:	2201      	movs	r2, #1
 800087c:	701a      	strb	r2, [r3, #0]
            g_score = 0;
 800087e:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <handle_victory+0x70>)
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
            g_lives = INITIAL_LIVES;
 8000884:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <handle_victory+0x84>)
 8000886:	2204      	movs	r2, #4
 8000888:	701a      	strb	r2, [r3, #0]
            g_difficulty_locked = 0;
 800088a:	4b0f      	ldr	r3, [pc, #60]	@ (80008c8 <handle_victory+0x88>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
            set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 8000890:	2001      	movs	r0, #1
 8000892:	f000 f861 	bl	8000958 <set_game_state>
            break;
 8000896:	e006      	b.n	80008a6 <handle_victory+0x66>
    for (int i = 0; i < 4; i++) {
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3301      	adds	r3, #1
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b03      	cmp	r3, #3
 80008a2:	dddc      	ble.n	800085e <handle_victory+0x1e>
        }
    }
}
 80008a4:	bf00      	nop
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200000b4 	.word	0x200000b4
 80008b4:	08002a94 	.word	0x08002a94
 80008b8:	08002ad4 	.word	0x08002ad4
 80008bc:	20000080 	.word	0x20000080
 80008c0:	200000b3 	.word	0x200000b3
 80008c4:	200000b8 	.word	0x200000b8
 80008c8:	200000c0 	.word	0x200000c0

080008cc <handle_game_death>:

static void handle_game_death(void) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
    Log_Print("Game Over! Final Score: %lu\r\n", g_score);
 80008d2:	4b1a      	ldr	r3, [pc, #104]	@ (800093c <handle_game_death+0x70>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4619      	mov	r1, r3
 80008d8:	4819      	ldr	r0, [pc, #100]	@ (8000940 <handle_game_death+0x74>)
 80008da:	f000 fc21 	bl	8001120 <Log_Print>
    Log_Print("Press any button to restart.\r\n");
 80008de:	4819      	ldr	r0, [pc, #100]	@ (8000944 <handle_game_death+0x78>)
 80008e0:	f000 fc1e 	bl	8001120 <Log_Print>
    for (int i = 0; i < 4; i++) {
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	e01f      	b.n	800092a <handle_game_death+0x5e>
        if (g_buttons[i].current_state == 1 && g_buttons[i].previous_state == 0) {
 80008ea:	4a17      	ldr	r2, [pc, #92]	@ (8000948 <handle_game_death+0x7c>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d116      	bne.n	8000924 <handle_game_death+0x58>
 80008f6:	4a14      	ldr	r2, [pc, #80]	@ (8000948 <handle_game_death+0x7c>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	00db      	lsls	r3, r3, #3
 80008fc:	4413      	add	r3, r2
 80008fe:	785b      	ldrb	r3, [r3, #1]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d10f      	bne.n	8000924 <handle_game_death+0x58>
            g_level = 1;
 8000904:	4b11      	ldr	r3, [pc, #68]	@ (800094c <handle_game_death+0x80>)
 8000906:	2201      	movs	r2, #1
 8000908:	701a      	strb	r2, [r3, #0]
            g_score = 0;
 800090a:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <handle_game_death+0x70>)
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
            g_lives = INITIAL_LIVES;
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <handle_game_death+0x84>)
 8000912:	2204      	movs	r2, #4
 8000914:	701a      	strb	r2, [r3, #0]
            g_difficulty_locked = 0;
 8000916:	4b0f      	ldr	r3, [pc, #60]	@ (8000954 <handle_game_death+0x88>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
            set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 800091c:	2001      	movs	r0, #1
 800091e:	f000 f81b 	bl	8000958 <set_game_state>
            break;
 8000922:	e006      	b.n	8000932 <handle_game_death+0x66>
    for (int i = 0; i < 4; i++) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3301      	adds	r3, #1
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2b03      	cmp	r3, #3
 800092e:	dddc      	ble.n	80008ea <handle_game_death+0x1e>
        }
    }
}
 8000930:	bf00      	nop
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200000b4 	.word	0x200000b4
 8000940:	08002af4 	.word	0x08002af4
 8000944:	08002ad4 	.word	0x08002ad4
 8000948:	20000080 	.word	0x20000080
 800094c:	200000b3 	.word	0x200000b3
 8000950:	200000b8 	.word	0x200000b8
 8000954:	200000c0 	.word	0x200000c0

08000958 <set_game_state>:


static void set_game_state(GameState_t new_state) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
    g_game_state = new_state;
 8000962:	4a2d      	ldr	r2, [pc, #180]	@ (8000a18 <set_game_state+0xc0>)
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	7013      	strb	r3, [r2, #0]
    g_state_entry_time = GetTick();
 8000968:	f000 fbce 	bl	8001108 <GetTick>
 800096c:	4603      	mov	r3, r0
 800096e:	4a2b      	ldr	r2, [pc, #172]	@ (8000a1c <set_game_state+0xc4>)
 8000970:	6013      	str	r3, [r2, #0]
    switch(new_state) {
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b07      	cmp	r3, #7
 8000976:	d84b      	bhi.n	8000a10 <set_game_state+0xb8>
 8000978:	a201      	add	r2, pc, #4	@ (adr r2, 8000980 <set_game_state+0x28>)
 800097a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097e:	bf00      	nop
 8000980:	080009a1 	.word	0x080009a1
 8000984:	080009af 	.word	0x080009af
 8000988:	080009bd 	.word	0x080009bd
 800098c:	080009cb 	.word	0x080009cb
 8000990:	080009d9 	.word	0x080009d9
 8000994:	080009e7 	.word	0x080009e7
 8000998:	080009f5 	.word	0x080009f5
 800099c:	08000a03 	.word	0x08000a03
        case GAME_STATE_BOOT:
            Log_Print("[STATE] -> BOOT\r\n");
 80009a0:	481f      	ldr	r0, [pc, #124]	@ (8000a20 <set_game_state+0xc8>)
 80009a2:	f000 fbbd 	bl	8001120 <Log_Print>
            Log_Print("Welcome! Use the potentiometer to select difficulty, then press and hold any button to confirm.\r\n");
 80009a6:	481f      	ldr	r0, [pc, #124]	@ (8000a24 <set_game_state+0xcc>)
 80009a8:	f000 fbba 	bl	8001120 <Log_Print>
            break;
 80009ac:	e030      	b.n	8000a10 <set_game_state+0xb8>
        case GAME_STATE_DIFFICULTY_SELECT:
            Log_Print("[STATE] -> DIFFICULTY_SELECT\r\n");
 80009ae:	481e      	ldr	r0, [pc, #120]	@ (8000a28 <set_game_state+0xd0>)
 80009b0:	f000 fbb6 	bl	8001120 <Log_Print>
            Log_Print("Select difficulty with potentiometer. Press and hold any button to confirm.\r\n");
 80009b4:	481d      	ldr	r0, [pc, #116]	@ (8000a2c <set_game_state+0xd4>)
 80009b6:	f000 fbb3 	bl	8001120 <Log_Print>
            break;
 80009ba:	e029      	b.n	8000a10 <set_game_state+0xb8>
        case GAME_STATE_LEVEL_INTRO:
            Log_Print("[STATE] -> LEVEL_INTRO\r\n");
 80009bc:	481c      	ldr	r0, [pc, #112]	@ (8000a30 <set_game_state+0xd8>)
 80009be:	f000 fbaf 	bl	8001120 <Log_Print>
            Log_Print("Get ready! Watch the LED pattern.\r\n");
 80009c2:	481c      	ldr	r0, [pc, #112]	@ (8000a34 <set_game_state+0xdc>)
 80009c4:	f000 fbac 	bl	8001120 <Log_Print>
            break;
 80009c8:	e022      	b.n	8000a10 <set_game_state+0xb8>
        case GAME_STATE_PATTERN_DISPLAY:
            Log_Print("[STATE] -> PATTERN_DISPLAY\r\n");
 80009ca:	481b      	ldr	r0, [pc, #108]	@ (8000a38 <set_game_state+0xe0>)
 80009cc:	f000 fba8 	bl	8001120 <Log_Print>
            Log_Print("Memorize the pattern!\r\n");
 80009d0:	481a      	ldr	r0, [pc, #104]	@ (8000a3c <set_game_state+0xe4>)
 80009d2:	f000 fba5 	bl	8001120 <Log_Print>
            break;
 80009d6:	e01b      	b.n	8000a10 <set_game_state+0xb8>
        case GAME_STATE_INPUT_WAIT:
            Log_Print("[STATE] -> INPUT_WAIT\r\n");
 80009d8:	4819      	ldr	r0, [pc, #100]	@ (8000a40 <set_game_state+0xe8>)
 80009da:	f000 fba1 	bl	8001120 <Log_Print>
            Log_Print("Repeat the pattern using the buttons.\r\n");
 80009de:	4819      	ldr	r0, [pc, #100]	@ (8000a44 <set_game_state+0xec>)
 80009e0:	f000 fb9e 	bl	8001120 <Log_Print>
            break;
 80009e4:	e014      	b.n	8000a10 <set_game_state+0xb8>
        case GAME_STATE_RESULT_PROCESS:
            Log_Print("[STATE] -> RESULT_PROCESS\r\n");
 80009e6:	4818      	ldr	r0, [pc, #96]	@ (8000a48 <set_game_state+0xf0>)
 80009e8:	f000 fb9a 	bl	8001120 <Log_Print>
            Log_Print("Checking your answer...\r\n");
 80009ec:	4817      	ldr	r0, [pc, #92]	@ (8000a4c <set_game_state+0xf4>)
 80009ee:	f000 fb97 	bl	8001120 <Log_Print>
            break;
 80009f2:	e00d      	b.n	8000a10 <set_game_state+0xb8>
        case GAME_STATE_VICTORY:
            Log_Print("[STATE] -> VICTORY\r\n");
 80009f4:	4816      	ldr	r0, [pc, #88]	@ (8000a50 <set_game_state+0xf8>)
 80009f6:	f000 fb93 	bl	8001120 <Log_Print>
            Log_Print("Congratulations! You won!\r\n");
 80009fa:	4816      	ldr	r0, [pc, #88]	@ (8000a54 <set_game_state+0xfc>)
 80009fc:	f000 fb90 	bl	8001120 <Log_Print>
            break;
 8000a00:	e006      	b.n	8000a10 <set_game_state+0xb8>
        case GAME_STATE_GAME_DEATH:
            Log_Print("[STATE] -> GAME_DEATH\r\n");
 8000a02:	4815      	ldr	r0, [pc, #84]	@ (8000a58 <set_game_state+0x100>)
 8000a04:	f000 fb8c 	bl	8001120 <Log_Print>
            Log_Print("Game over! Try again.\r\n");
 8000a08:	4814      	ldr	r0, [pc, #80]	@ (8000a5c <set_game_state+0x104>)
 8000a0a:	f000 fb89 	bl	8001120 <Log_Print>
            break;
 8000a0e:	bf00      	nop
    }
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200000b1 	.word	0x200000b1
 8000a1c:	200000bc 	.word	0x200000bc
 8000a20:	080027e0 	.word	0x080027e0
 8000a24:	080027f4 	.word	0x080027f4
 8000a28:	08002858 	.word	0x08002858
 8000a2c:	08002878 	.word	0x08002878
 8000a30:	080028c8 	.word	0x080028c8
 8000a34:	080028e4 	.word	0x080028e4
 8000a38:	08002908 	.word	0x08002908
 8000a3c:	08002928 	.word	0x08002928
 8000a40:	08002940 	.word	0x08002940
 8000a44:	08002958 	.word	0x08002958
 8000a48:	08002980 	.word	0x08002980
 8000a4c:	0800299c 	.word	0x0800299c
 8000a50:	080029b8 	.word	0x080029b8
 8000a54:	080029d0 	.word	0x080029d0
 8000a58:	080029ec 	.word	0x080029ec
 8000a5c:	08002a04 	.word	0x08002a04

08000a60 <handle_boot>:

static void handle_boot(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
    Log_Print("[BOOT] Welcome to Simon!\r\n");
 8000a64:	480d      	ldr	r0, [pc, #52]	@ (8000a9c <handle_boot+0x3c>)
 8000a66:	f000 fb5b 	bl	8001120 <Log_Print>
    g_level = 1;
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa0 <handle_boot+0x40>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	701a      	strb	r2, [r3, #0]
    g_score = 0;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <handle_boot+0x44>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
    g_lives = INITIAL_LIVES;
 8000a76:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <handle_boot+0x48>)
 8000a78:	2204      	movs	r2, #4
 8000a7a:	701a      	strb	r2, [r3, #0]
    Log_Print("[GAME] Level:%u, Lives:%u, Score:%lu\r\n", g_level, g_lives, g_score);
 8000a7c:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <handle_boot+0x40>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <handle_boot+0x48>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <handle_boot+0x44>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4807      	ldr	r0, [pc, #28]	@ (8000aac <handle_boot+0x4c>)
 8000a8e:	f000 fb47 	bl	8001120 <Log_Print>
    set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 8000a92:	2001      	movs	r0, #1
 8000a94:	f7ff ff60 	bl	8000958 <set_game_state>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	08002b14 	.word	0x08002b14
 8000aa0:	200000b3 	.word	0x200000b3
 8000aa4:	200000b4 	.word	0x200000b4
 8000aa8:	200000b8 	.word	0x200000b8
 8000aac:	08002b30 	.word	0x08002b30

08000ab0 <handle_difficulty_select>:

static void handle_difficulty_select(void) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
    uint32_t current_time = GetTick();
 8000ab6:	f000 fb27 	bl	8001108 <GetTick>
 8000aba:	60b8      	str	r0, [r7, #8]
    static uint32_t last_log_time = 0;
    static uint8_t last_difficulty = 0;

    if (!g_difficulty_locked) {
 8000abc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ba8 <handle_difficulty_select+0xf8>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d169      	bne.n	8000b98 <handle_difficulty_select+0xe8>
        uint16_t pot_value = g_adc_values[0];
 8000ac4:	4b39      	ldr	r3, [pc, #228]	@ (8000bac <handle_difficulty_select+0xfc>)
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	80fb      	strh	r3, [r7, #6]
        if (pot_value < 256) {
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	2bff      	cmp	r3, #255	@ 0xff
 8000ace:	d803      	bhi.n	8000ad8 <handle_difficulty_select+0x28>
            g_difficulty = 1;
 8000ad0:	4b37      	ldr	r3, [pc, #220]	@ (8000bb0 <handle_difficulty_select+0x100>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	e012      	b.n	8000afe <handle_difficulty_select+0x4e>
        } else if (pot_value < 512) {
 8000ad8:	88fb      	ldrh	r3, [r7, #6]
 8000ada:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ade:	d203      	bcs.n	8000ae8 <handle_difficulty_select+0x38>
            g_difficulty = 2;
 8000ae0:	4b33      	ldr	r3, [pc, #204]	@ (8000bb0 <handle_difficulty_select+0x100>)
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	701a      	strb	r2, [r3, #0]
 8000ae6:	e00a      	b.n	8000afe <handle_difficulty_select+0x4e>
        } else if (pot_value < 768) {
 8000ae8:	88fb      	ldrh	r3, [r7, #6]
 8000aea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000aee:	d203      	bcs.n	8000af8 <handle_difficulty_select+0x48>
            g_difficulty = 3;
 8000af0:	4b2f      	ldr	r3, [pc, #188]	@ (8000bb0 <handle_difficulty_select+0x100>)
 8000af2:	2203      	movs	r2, #3
 8000af4:	701a      	strb	r2, [r3, #0]
 8000af6:	e002      	b.n	8000afe <handle_difficulty_select+0x4e>
        } else {
            g_difficulty = 4;
 8000af8:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb0 <handle_difficulty_select+0x100>)
 8000afa:	2204      	movs	r2, #4
 8000afc:	701a      	strb	r2, [r3, #0]
        }
        SevenSeg_Display(g_difficulty);
 8000afe:	4b2c      	ldr	r3, [pc, #176]	@ (8000bb0 <handle_difficulty_select+0x100>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f98a 	bl	8000e1c <SevenSeg_Display>
        if (g_difficulty != last_difficulty || (current_time - last_log_time) > 1000) {
 8000b08:	4b29      	ldr	r3, [pc, #164]	@ (8000bb0 <handle_difficulty_select+0x100>)
 8000b0a:	781a      	ldrb	r2, [r3, #0]
 8000b0c:	4b29      	ldr	r3, [pc, #164]	@ (8000bb4 <handle_difficulty_select+0x104>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d106      	bne.n	8000b22 <handle_difficulty_select+0x72>
 8000b14:	4b28      	ldr	r3, [pc, #160]	@ (8000bb8 <handle_difficulty_select+0x108>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	68ba      	ldr	r2, [r7, #8]
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b20:	d90d      	bls.n	8000b3e <handle_difficulty_select+0x8e>
            Log_Print("[DIFFICULTY] Pot value: %u -> Difficulty: %u\r\n", pot_value, g_difficulty);
 8000b22:	88fb      	ldrh	r3, [r7, #6]
 8000b24:	4a22      	ldr	r2, [pc, #136]	@ (8000bb0 <handle_difficulty_select+0x100>)
 8000b26:	7812      	ldrb	r2, [r2, #0]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4824      	ldr	r0, [pc, #144]	@ (8000bbc <handle_difficulty_select+0x10c>)
 8000b2c:	f000 faf8 	bl	8001120 <Log_Print>
            last_log_time = current_time;
 8000b30:	4a21      	ldr	r2, [pc, #132]	@ (8000bb8 <handle_difficulty_select+0x108>)
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	6013      	str	r3, [r2, #0]
            last_difficulty = g_difficulty;
 8000b36:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb0 <handle_difficulty_select+0x100>)
 8000b38:	781a      	ldrb	r2, [r3, #0]
 8000b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb4 <handle_difficulty_select+0x104>)
 8000b3c:	701a      	strb	r2, [r3, #0]
        }
        for (int i = 0; i < 4; i++) {
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	e025      	b.n	8000b90 <handle_difficulty_select+0xe0>
            if (g_buttons[i].current_state == 1) {
 8000b44:	4a1e      	ldr	r2, [pc, #120]	@ (8000bc0 <handle_difficulty_select+0x110>)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d11c      	bne.n	8000b8a <handle_difficulty_select+0xda>
                if ((current_time - g_buttons[i].last_change_time) >= LONG_PRESS_DURATION_MS) {
 8000b50:	4a1b      	ldr	r2, [pc, #108]	@ (8000bc0 <handle_difficulty_select+0x110>)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	4413      	add	r3, r2
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000b62:	d312      	bcc.n	8000b8a <handle_difficulty_select+0xda>
                    g_difficulty_locked = 1;
 8000b64:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <handle_difficulty_select+0xf8>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	701a      	strb	r2, [r3, #0]
                    Log_Print("[GAME] Difficulty %u confirmed by holding BTN%d!\r\n", g_difficulty, i + 1);
 8000b6a:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <handle_difficulty_select+0x100>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	3301      	adds	r3, #1
 8000b74:	461a      	mov	r2, r3
 8000b76:	4813      	ldr	r0, [pc, #76]	@ (8000bc4 <handle_difficulty_select+0x114>)
 8000b78:	f000 fad2 	bl	8001120 <Log_Print>
                    Log_Print("Difficulty locked. Get ready for the game!\r\n");
 8000b7c:	4812      	ldr	r0, [pc, #72]	@ (8000bc8 <handle_difficulty_select+0x118>)
 8000b7e:	f000 facf 	bl	8001120 <Log_Print>
                    set_game_state(GAME_STATE_LEVEL_INTRO);
 8000b82:	2002      	movs	r0, #2
 8000b84:	f7ff fee8 	bl	8000958 <set_game_state>
                    return;
 8000b88:	e00b      	b.n	8000ba2 <handle_difficulty_select+0xf2>
        for (int i = 0; i < 4; i++) {
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2b03      	cmp	r3, #3
 8000b94:	ddd6      	ble.n	8000b44 <handle_difficulty_select+0x94>
 8000b96:	e004      	b.n	8000ba2 <handle_difficulty_select+0xf2>
                }
            }
        }
    } else {
        // Difficulty is locked, do not read or log potentiometer
        SevenSeg_Display(g_difficulty); // Still show locked difficulty
 8000b98:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <handle_difficulty_select+0x100>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 f93d 	bl	8000e1c <SevenSeg_Display>
    }
}
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	200000c0 	.word	0x200000c0
 8000bac:	200000a4 	.word	0x200000a4
 8000bb0:	200000b2 	.word	0x200000b2
 8000bb4:	200000e7 	.word	0x200000e7
 8000bb8:	200000e8 	.word	0x200000e8
 8000bbc:	08002b58 	.word	0x08002b58
 8000bc0:	20000080 	.word	0x20000080
 8000bc4:	08002b88 	.word	0x08002b88
 8000bc8:	08002bbc 	.word	0x08002bbc

08000bcc <SysTick_Handler>:

/* ============================================================================
 * INTERRUPT HANDLERS
 * ============================================================================ */

void SysTick_Handler(void) {
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
    g_tick_counter++;
 8000bd0:	4b04      	ldr	r3, [pc, #16]	@ (8000be4 <SysTick_Handler+0x18>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	4a03      	ldr	r2, [pc, #12]	@ (8000be4 <SysTick_Handler+0x18>)
 8000bd8:	6013      	str	r3, [r2, #0]
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	200000ac 	.word	0x200000ac

08000be8 <ADC_IRQHandler>:

void ADC_IRQHandler(void) {
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
    if(ADC1->SR & ADC_SR_EOC) {
 8000bec:	4b1e      	ldr	r3, [pc, #120]	@ (8000c68 <ADC_IRQHandler+0x80>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f003 0302 	and.w	r3, r3, #2
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d031      	beq.n	8000c5c <ADC_IRQHandler+0x74>
        g_adc_values[g_current_adc_channel] = ADC1->DR;
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c68 <ADC_IRQHandler+0x80>)
 8000bfa:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c6c <ADC_IRQHandler+0x84>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	b289      	uxth	r1, r1
 8000c04:	4b1a      	ldr	r3, [pc, #104]	@ (8000c70 <ADC_IRQHandler+0x88>)
 8000c06:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        g_current_adc_channel = (g_current_adc_channel + 1) % 3;
 8000c0a:	4b18      	ldr	r3, [pc, #96]	@ (8000c6c <ADC_IRQHandler+0x84>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	1c5a      	adds	r2, r3, #1
 8000c10:	4b18      	ldr	r3, [pc, #96]	@ (8000c74 <ADC_IRQHandler+0x8c>)
 8000c12:	fb83 3102 	smull	r3, r1, r3, r2
 8000c16:	17d3      	asrs	r3, r2, #31
 8000c18:	1ac9      	subs	r1, r1, r3
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	440b      	add	r3, r1
 8000c20:	1ad1      	subs	r1, r2, r3
 8000c22:	b2ca      	uxtb	r2, r1
 8000c24:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <ADC_IRQHandler+0x84>)
 8000c26:	701a      	strb	r2, [r3, #0]
        ADC1->SQR3 = (ADC1->SQR3 & ~ADC_SQR3_SQ1) | (g_current_adc_channel == 0 ? POT_PIN : (g_current_adc_channel == 1 ? TEMP_PIN : LIGHT_PIN));
 8000c28:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <ADC_IRQHandler+0x80>)
 8000c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c2c:	f023 021f 	bic.w	r2, r3, #31
 8000c30:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <ADC_IRQHandler+0x84>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d007      	beq.n	8000c48 <ADC_IRQHandler+0x60>
 8000c38:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <ADC_IRQHandler+0x84>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d101      	bne.n	8000c44 <ADC_IRQHandler+0x5c>
 8000c40:	2301      	movs	r3, #1
 8000c42:	e002      	b.n	8000c4a <ADC_IRQHandler+0x62>
 8000c44:	2300      	movs	r3, #0
 8000c46:	e000      	b.n	8000c4a <ADC_IRQHandler+0x62>
 8000c48:	2304      	movs	r3, #4
 8000c4a:	4907      	ldr	r1, [pc, #28]	@ (8000c68 <ADC_IRQHandler+0x80>)
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	634b      	str	r3, [r1, #52]	@ 0x34
        ADC1->CR2 |= ADC_CR2_SWSTART;
 8000c50:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <ADC_IRQHandler+0x80>)
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	4a04      	ldr	r2, [pc, #16]	@ (8000c68 <ADC_IRQHandler+0x80>)
 8000c56:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000c5a:	6093      	str	r3, [r2, #8]
    }
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40012000 	.word	0x40012000
 8000c6c:	200000b0 	.word	0x200000b0
 8000c70:	200000a4 	.word	0x200000a4
 8000c74:	55555556 	.word	0x55555556

08000c78 <Monitor_Buttons>:

/* ============================================================================
 * HARDWARE MONITORING FUNCTIONS
 * ============================================================================ */

void Monitor_Buttons(void) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
    uint32_t current_time = GetTick();
 8000c7e:	f000 fa43 	bl	8001108 <GetTick>
 8000c82:	60b8      	str	r0, [r7, #8]
    uint8_t readings[4] = {
        !(BTN0_PORT->IDR & (1 << BTN0_PIN)),
 8000c84:	4b3a      	ldr	r3, [pc, #232]	@ (8000d70 <Monitor_Buttons+0xf8>)
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	bf0c      	ite	eq
 8000c90:	2301      	moveq	r3, #1
 8000c92:	2300      	movne	r3, #0
 8000c94:	b2db      	uxtb	r3, r3
    uint8_t readings[4] = {
 8000c96:	713b      	strb	r3, [r7, #4]
        !(BTN1_PORT->IDR & (1 << BTN1_PIN)),
 8000c98:	4b36      	ldr	r3, [pc, #216]	@ (8000d74 <Monitor_Buttons+0xfc>)
 8000c9a:	691b      	ldr	r3, [r3, #16]
 8000c9c:	f003 0308 	and.w	r3, r3, #8
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	bf0c      	ite	eq
 8000ca4:	2301      	moveq	r3, #1
 8000ca6:	2300      	movne	r3, #0
 8000ca8:	b2db      	uxtb	r3, r3
    uint8_t readings[4] = {
 8000caa:	717b      	strb	r3, [r7, #5]
        !(BTN2_PORT->IDR & (1 << BTN2_PIN)),
 8000cac:	4b31      	ldr	r3, [pc, #196]	@ (8000d74 <Monitor_Buttons+0xfc>)
 8000cae:	691b      	ldr	r3, [r3, #16]
 8000cb0:	f003 0320 	and.w	r3, r3, #32
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	bf0c      	ite	eq
 8000cb8:	2301      	moveq	r3, #1
 8000cba:	2300      	movne	r3, #0
 8000cbc:	b2db      	uxtb	r3, r3
    uint8_t readings[4] = {
 8000cbe:	71bb      	strb	r3, [r7, #6]
        !(BTN3_PORT->IDR & (1 << BTN3_PIN))
 8000cc0:	4b2c      	ldr	r3, [pc, #176]	@ (8000d74 <Monitor_Buttons+0xfc>)
 8000cc2:	691b      	ldr	r3, [r3, #16]
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	bf0c      	ite	eq
 8000ccc:	2301      	moveq	r3, #1
 8000cce:	2300      	movne	r3, #0
 8000cd0:	b2db      	uxtb	r3, r3
    uint8_t readings[4] = {
 8000cd2:	71fb      	strb	r3, [r7, #7]
    };

    for(int i = 0; i < 4; i++) {
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	e041      	b.n	8000d5e <Monitor_Buttons+0xe6>
        g_buttons[i].previous_state = g_buttons[i].current_state;
 8000cda:	4a27      	ldr	r2, [pc, #156]	@ (8000d78 <Monitor_Buttons+0x100>)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
 8000ce2:	4a25      	ldr	r2, [pc, #148]	@ (8000d78 <Monitor_Buttons+0x100>)
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	4413      	add	r3, r2
 8000cea:	460a      	mov	r2, r1
 8000cec:	705a      	strb	r2, [r3, #1]
        g_buttons[i].current_state = readings[i];
 8000cee:	1d3a      	adds	r2, r7, #4
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	7819      	ldrb	r1, [r3, #0]
 8000cf6:	4a20      	ldr	r2, [pc, #128]	@ (8000d78 <Monitor_Buttons+0x100>)
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]

        if(g_buttons[i].current_state != g_buttons[i].previous_state) {
 8000cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8000d78 <Monitor_Buttons+0x100>)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8000d06:	491c      	ldr	r1, [pc, #112]	@ (8000d78 <Monitor_Buttons+0x100>)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	440b      	add	r3, r1
 8000d0e:	785b      	ldrb	r3, [r3, #1]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d021      	beq.n	8000d58 <Monitor_Buttons+0xe0>
            if((current_time - g_buttons[i].last_change_time) >= BUTTON_DEBOUNCE_MS) {
 8000d14:	4a18      	ldr	r2, [pc, #96]	@ (8000d78 <Monitor_Buttons+0x100>)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	4413      	add	r3, r2
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b31      	cmp	r3, #49	@ 0x31
 8000d24:	d918      	bls.n	8000d58 <Monitor_Buttons+0xe0>
                g_buttons[i].last_change_time = current_time;
 8000d26:	4a14      	ldr	r2, [pc, #80]	@ (8000d78 <Monitor_Buttons+0x100>)
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	4413      	add	r3, r2
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	605a      	str	r2, [r3, #4]
                if(g_buttons[i].current_state == 1) {
 8000d32:	4a11      	ldr	r2, [pc, #68]	@ (8000d78 <Monitor_Buttons+0x100>)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d106      	bne.n	8000d4c <Monitor_Buttons+0xd4>
                    Log_Print("[BTN%d] PRESSED\r\n", i + 1);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	3301      	adds	r3, #1
 8000d42:	4619      	mov	r1, r3
 8000d44:	480d      	ldr	r0, [pc, #52]	@ (8000d7c <Monitor_Buttons+0x104>)
 8000d46:	f000 f9eb 	bl	8001120 <Log_Print>
 8000d4a:	e005      	b.n	8000d58 <Monitor_Buttons+0xe0>
                } else {
                    Log_Print("[BTN%d] RELEASED\r\n", i + 1);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	4619      	mov	r1, r3
 8000d52:	480b      	ldr	r0, [pc, #44]	@ (8000d80 <Monitor_Buttons+0x108>)
 8000d54:	f000 f9e4 	bl	8001120 <Log_Print>
    for(int i = 0; i < 4; i++) {
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	ddba      	ble.n	8000cda <Monitor_Buttons+0x62>
                }
            }
        }
    }
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40020000 	.word	0x40020000
 8000d74:	40020400 	.word	0x40020400
 8000d78:	20000080 	.word	0x20000080
 8000d7c:	08002bec 	.word	0x08002bec
 8000d80:	08002c00 	.word	0x08002c00

08000d84 <Monitor_ADC>:

void Monitor_ADC(void) { /* ADC is handled by interrupt, this can be a placeholder */ }
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <LED_SetPattern>:

/* ============================================================================
 * HARDWARE CONTROL FUNCTIONS
 * ============================================================================ */

void LED_SetPattern(uint8_t pattern) {
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
    (pattern & 0x01) ? (LED1_PORT->BSRR = (1 << LED1_PIN)) : (LED1_PORT->BSRR = (1 << (LED1_PIN + 16)));
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d003      	beq.n	8000db0 <LED_SetPattern+0x1c>
 8000da8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <LED_SetPattern+0x80>)
 8000daa:	2220      	movs	r2, #32
 8000dac:	619a      	str	r2, [r3, #24]
 8000dae:	e003      	b.n	8000db8 <LED_SetPattern+0x24>
 8000db0:	4b18      	ldr	r3, [pc, #96]	@ (8000e14 <LED_SetPattern+0x80>)
 8000db2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000db6:	619a      	str	r2, [r3, #24]
    (pattern & 0x02) ? (LED2_PORT->BSRR = (1 << LED2_PIN)) : (LED2_PORT->BSRR = (1 << (LED2_PIN + 16)));
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <LED_SetPattern+0x36>
 8000dc2:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <LED_SetPattern+0x80>)
 8000dc4:	2240      	movs	r2, #64	@ 0x40
 8000dc6:	619a      	str	r2, [r3, #24]
 8000dc8:	e003      	b.n	8000dd2 <LED_SetPattern+0x3e>
 8000dca:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <LED_SetPattern+0x80>)
 8000dcc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000dd0:	619a      	str	r2, [r3, #24]
    (pattern & 0x04) ? (LED3_PORT->BSRR = (1 << LED3_PIN)) : (LED3_PORT->BSRR = (1 << (LED3_PIN + 16)));
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f003 0304 	and.w	r3, r3, #4
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d003      	beq.n	8000de4 <LED_SetPattern+0x50>
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8000e14 <LED_SetPattern+0x80>)
 8000dde:	2280      	movs	r2, #128	@ 0x80
 8000de0:	619a      	str	r2, [r3, #24]
 8000de2:	e003      	b.n	8000dec <LED_SetPattern+0x58>
 8000de4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e14 <LED_SetPattern+0x80>)
 8000de6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000dea:	619a      	str	r2, [r3, #24]
    (pattern & 0x08) ? (LED4_PORT->BSRR = (1 << LED4_PIN)) : (LED4_PORT->BSRR = (1 << (LED4_PIN + 16)));
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 0308 	and.w	r3, r3, #8
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <LED_SetPattern+0x6a>
 8000df6:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <LED_SetPattern+0x84>)
 8000df8:	2240      	movs	r2, #64	@ 0x40
 8000dfa:	619a      	str	r2, [r3, #24]
}
 8000dfc:	e003      	b.n	8000e06 <LED_SetPattern+0x72>
    (pattern & 0x08) ? (LED4_PORT->BSRR = (1 << LED4_PIN)) : (LED4_PORT->BSRR = (1 << (LED4_PIN + 16)));
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <LED_SetPattern+0x84>)
 8000e00:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e04:	619a      	str	r2, [r3, #24]
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40020000 	.word	0x40020000
 8000e18:	40020400 	.word	0x40020400

08000e1c <SevenSeg_Display>:

void SevenSeg_Display(uint8_t digit) {
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
    if(digit > 9) return;
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	2b09      	cmp	r3, #9
 8000e2a:	d837      	bhi.n	8000e9c <SevenSeg_Display+0x80>
    (digit & 0x01) ? (BCD_2_0_PORT->BSRR = (1 << BCD_2_0_PIN)) : (BCD_2_0_PORT->BSRR = (1 << (BCD_2_0_PIN + 16)));
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <SevenSeg_Display+0x22>
 8000e36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <SevenSeg_Display+0x8c>)
 8000e38:	2280      	movs	r2, #128	@ 0x80
 8000e3a:	619a      	str	r2, [r3, #24]
 8000e3c:	e003      	b.n	8000e46 <SevenSeg_Display+0x2a>
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea8 <SevenSeg_Display+0x8c>)
 8000e40:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e44:	619a      	str	r2, [r3, #24]
    (digit & 0x02) ? (BCD_2_1_PORT->BSRR = (1 << BCD_2_1_PIN)) : (BCD_2_1_PORT->BSRR = (1 << (BCD_2_1_PIN + 16)));
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d004      	beq.n	8000e5a <SevenSeg_Display+0x3e>
 8000e50:	4b16      	ldr	r3, [pc, #88]	@ (8000eac <SevenSeg_Display+0x90>)
 8000e52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e56:	619a      	str	r2, [r3, #24]
 8000e58:	e003      	b.n	8000e62 <SevenSeg_Display+0x46>
 8000e5a:	4b14      	ldr	r3, [pc, #80]	@ (8000eac <SevenSeg_Display+0x90>)
 8000e5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000e60:	619a      	str	r2, [r3, #24]
    (digit & 0x04) ? (BCD_2_2_PORT->BSRR = (1 << BCD_2_2_PIN)) : (BCD_2_2_PORT->BSRR = (1 << (BCD_2_2_PIN + 16)));
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d004      	beq.n	8000e76 <SevenSeg_Display+0x5a>
 8000e6c:	4b10      	ldr	r3, [pc, #64]	@ (8000eb0 <SevenSeg_Display+0x94>)
 8000e6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e72:	619a      	str	r2, [r3, #24]
 8000e74:	e003      	b.n	8000e7e <SevenSeg_Display+0x62>
 8000e76:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <SevenSeg_Display+0x94>)
 8000e78:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000e7c:	619a      	str	r2, [r3, #24]
    (digit & 0x08) ? (BCD_2_3_PORT->BSRR = (1 << BCD_2_3_PIN)) : (BCD_2_3_PORT->BSRR = (1 << (BCD_2_3_PIN + 16)));
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	f003 0308 	and.w	r3, r3, #8
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d004      	beq.n	8000e92 <SevenSeg_Display+0x76>
 8000e88:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <SevenSeg_Display+0x90>)
 8000e8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e8e:	619a      	str	r2, [r3, #24]
 8000e90:	e005      	b.n	8000e9e <SevenSeg_Display+0x82>
 8000e92:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <SevenSeg_Display+0x90>)
 8000e94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e98:	619a      	str	r2, [r3, #24]
 8000e9a:	e000      	b.n	8000e9e <SevenSeg_Display+0x82>
    if(digit > 9) return;
 8000e9c:	bf00      	nop
}
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	40020800 	.word	0x40020800
 8000eac:	40020000 	.word	0x40020000
 8000eb0:	40020400 	.word	0x40020400

08000eb4 <SystemClock_Config>:

/* ============================================================================
 * SYSTEM INITIALIZATION
 * ============================================================================ */

void SystemClock_Config(void) {
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
    RCC->CR |= RCC_CR_HSION;
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f30 <SystemClock_Config+0x7c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a1c      	ldr	r2, [pc, #112]	@ (8000f30 <SystemClock_Config+0x7c>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_HSIRDY));
 8000ec4:	bf00      	nop
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f30 <SystemClock_Config+0x7c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d0f9      	beq.n	8000ec6 <SystemClock_Config+0x12>
    RCC->PLLCFGR = (RCC_PLLCFGR_PLLSRC_HSI) | (16 << RCC_PLLCFGR_PLLM_Pos) | (168 << RCC_PLLCFGR_PLLN_Pos) | (0 << RCC_PLLCFGR_PLLP_Pos);
 8000ed2:	4b17      	ldr	r3, [pc, #92]	@ (8000f30 <SystemClock_Config+0x7c>)
 8000ed4:	f642 2210 	movw	r2, #10768	@ 0x2a10
 8000ed8:	605a      	str	r2, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 8000eda:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <SystemClock_Config+0x7c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a14      	ldr	r2, [pc, #80]	@ (8000f30 <SystemClock_Config+0x7c>)
 8000ee0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ee4:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_PLLRDY));
 8000ee6:	bf00      	nop
 8000ee8:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <SystemClock_Config+0x7c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d0f9      	beq.n	8000ee8 <SystemClock_Config+0x34>
    FLASH->ACR = FLASH_ACR_LATENCY_2WS;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <SystemClock_Config+0x80>)
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	601a      	str	r2, [r3, #0]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV2 | RCC_CFGR_PPRE2_DIV1;
 8000efa:	4b0d      	ldr	r3, [pc, #52]	@ (8000f30 <SystemClock_Config+0x7c>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	4a0c      	ldr	r2, [pc, #48]	@ (8000f30 <SystemClock_Config+0x7c>)
 8000f00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f04:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000f06:	4b0a      	ldr	r3, [pc, #40]	@ (8000f30 <SystemClock_Config+0x7c>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	4a09      	ldr	r2, [pc, #36]	@ (8000f30 <SystemClock_Config+0x7c>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	6093      	str	r3, [r2, #8]
    while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000f12:	bf00      	nop
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <SystemClock_Config+0x7c>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f003 030c 	and.w	r3, r3, #12
 8000f1c:	2b08      	cmp	r3, #8
 8000f1e:	d1f9      	bne.n	8000f14 <SystemClock_Config+0x60>
    SystemCoreClock = 84000000;
 8000f20:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <SystemClock_Config+0x84>)
 8000f22:	4a06      	ldr	r2, [pc, #24]	@ (8000f3c <SystemClock_Config+0x88>)
 8000f24:	601a      	str	r2, [r3, #0]
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40023c00 	.word	0x40023c00
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	0501bd00 	.word	0x0501bd00

08000f40 <GPIO_Init>:

void GPIO_Init(void) {
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;
 8000f44:	4b28      	ldr	r3, [pc, #160]	@ (8000fe8 <GPIO_Init+0xa8>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f48:	4a27      	ldr	r2, [pc, #156]	@ (8000fe8 <GPIO_Init+0xa8>)
 8000f4a:	f043 0307 	orr.w	r3, r3, #7
 8000f4e:	6313      	str	r3, [r2, #48]	@ 0x30
    // LEDs
    GPIOA->MODER |= (1 << (LED1_PIN*2)) | (1 << (LED2_PIN*2)) | (1 << (LED3_PIN*2));
 8000f50:	4b26      	ldr	r3, [pc, #152]	@ (8000fec <GPIO_Init+0xac>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a25      	ldr	r2, [pc, #148]	@ (8000fec <GPIO_Init+0xac>)
 8000f56:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 8000f5a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (1 << (LED4_PIN*2));
 8000f5c:	4b24      	ldr	r3, [pc, #144]	@ (8000ff0 <GPIO_Init+0xb0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a23      	ldr	r2, [pc, #140]	@ (8000ff0 <GPIO_Init+0xb0>)
 8000f62:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f66:	6013      	str	r3, [r2, #0]
    // Buttons
    GPIOA->PUPDR |= (1 << (BTN0_PIN*2)) | (1 << (BTN3_PIN*2));
 8000f68:	4b20      	ldr	r3, [pc, #128]	@ (8000fec <GPIO_Init+0xac>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8000fec <GPIO_Init+0xac>)
 8000f6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000f72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f76:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (1 << (BTN1_PIN*2)) | (1 << (BTN2_PIN*2));
 8000f78:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff0 <GPIO_Init+0xb0>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff0 <GPIO_Init+0xb0>)
 8000f7e:	f443 6388 	orr.w	r3, r3, #1088	@ 0x440
 8000f82:	60d3      	str	r3, [r2, #12]
    // ADC
    GPIOA->MODER |= (3 << (POT_PIN*2)) | (3 << (TEMP_PIN*2)) | (3 << (LIGHT_PIN*2));
 8000f84:	4b19      	ldr	r3, [pc, #100]	@ (8000fec <GPIO_Init+0xac>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a18      	ldr	r2, [pc, #96]	@ (8000fec <GPIO_Init+0xac>)
 8000f8a:	f443 7343 	orr.w	r3, r3, #780	@ 0x30c
 8000f8e:	f043 0303 	orr.w	r3, r3, #3
 8000f92:	6013      	str	r3, [r2, #0]
    // UART
    GPIOA->MODER |= (2 << (2*2)) | (2 << (3*2));
 8000f94:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <GPIO_Init+0xac>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a14      	ldr	r2, [pc, #80]	@ (8000fec <GPIO_Init+0xac>)
 8000f9a:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000f9e:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (7 << (2*4)) | (7 << (3*4));
 8000fa0:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <GPIO_Init+0xac>)
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	4a11      	ldr	r2, [pc, #68]	@ (8000fec <GPIO_Init+0xac>)
 8000fa6:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000faa:	6213      	str	r3, [r2, #32]
    // 7-Segment (BCD inputs) — ตั้งตามพอร์ตจริง
    GPIOC->MODER = (GPIOC->MODER & ~(3U << (BCD_2_0_PIN*2))) | (1U << (BCD_2_0_PIN*2));   // PC7
 8000fac:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <GPIO_Init+0xb4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fb4:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff4 <GPIO_Init+0xb4>)
 8000fb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fba:	6013      	str	r3, [r2, #0]
    GPIOA->MODER = (GPIOA->MODER & ~((3U << (BCD_2_1_PIN*2)) | (3U << (BCD_2_3_PIN*2))))
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <GPIO_Init+0xac>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000fc4:	4a09      	ldr	r2, [pc, #36]	@ (8000fec <GPIO_Init+0xac>)
                                 |  (1U << (BCD_2_1_PIN*2)) | (1U << (BCD_2_3_PIN*2));     // PA8, PA9
 8000fc6:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
    GPIOA->MODER = (GPIOA->MODER & ~((3U << (BCD_2_1_PIN*2)) | (3U << (BCD_2_3_PIN*2))))
 8000fca:	6013      	str	r3, [r2, #0]
    GPIOB->MODER = (GPIOB->MODER & ~(3U << (BCD_2_2_PIN*2))) | (1U << (BCD_2_2_PIN*2));   // PB10
 8000fcc:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <GPIO_Init+0xb0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000fd4:	4a06      	ldr	r2, [pc, #24]	@ (8000ff0 <GPIO_Init+0xb0>)
 8000fd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	40020400 	.word	0x40020400
 8000ff4:	40020800 	.word	0x40020800

08000ff8 <ADC_Init>:

void ADC_Init(void) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <ADC_Init+0x50>)
 8000ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001000:	4a11      	ldr	r2, [pc, #68]	@ (8001048 <ADC_Init+0x50>)
 8001002:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001006:	6453      	str	r3, [r2, #68]	@ 0x44
    ADC1->CR2 |= ADC_CR2_ADON;
 8001008:	4b10      	ldr	r3, [pc, #64]	@ (800104c <ADC_Init+0x54>)
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	4a0f      	ldr	r2, [pc, #60]	@ (800104c <ADC_Init+0x54>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6093      	str	r3, [r2, #8]
    ADC1->CR1 |= ADC_CR1_EOCIE;
 8001014:	4b0d      	ldr	r3, [pc, #52]	@ (800104c <ADC_Init+0x54>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	4a0c      	ldr	r2, [pc, #48]	@ (800104c <ADC_Init+0x54>)
 800101a:	f043 0320 	orr.w	r3, r3, #32
 800101e:	6053      	str	r3, [r2, #4]
    ADC1->CR1 |= (1 << ADC_CR1_RES_Pos); // 10-bit
 8001020:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <ADC_Init+0x54>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	4a09      	ldr	r2, [pc, #36]	@ (800104c <ADC_Init+0x54>)
 8001026:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800102a:	6053      	str	r3, [r2, #4]
    ADC1->SMPR2 |= (7 << ADC_SMPR2_SMP0_Pos) | (7 << ADC_SMPR2_SMP1_Pos) | (7 << ADC_SMPR2_SMP4_Pos);
 800102c:	4b07      	ldr	r3, [pc, #28]	@ (800104c <ADC_Init+0x54>)
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	4a06      	ldr	r2, [pc, #24]	@ (800104c <ADC_Init+0x54>)
 8001032:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8001036:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 800103a:	6113      	str	r3, [r2, #16]
    Delay_ms(2);
 800103c:	2002      	movs	r0, #2
 800103e:	f000 f84d 	bl	80010dc <Delay_ms>
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800
 800104c:	40012000 	.word	0x40012000

08001050 <USART2_Init>:

void USART2_Init(void) {
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001054:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <USART2_Init+0x34>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001058:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <USART2_Init+0x34>)
 800105a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800105e:	6413      	str	r3, [r2, #64]	@ 0x40
    USART2->BRR = 0x16C; // 115200 baud @ 42MHz
 8001060:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <USART2_Init+0x38>)
 8001062:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8001066:	609a      	str	r2, [r3, #8]
    USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8001068:	4b07      	ldr	r3, [pc, #28]	@ (8001088 <USART2_Init+0x38>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	4a06      	ldr	r2, [pc, #24]	@ (8001088 <USART2_Init+0x38>)
 800106e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001072:	f043 030c 	orr.w	r3, r3, #12
 8001076:	60d3      	str	r3, [r2, #12]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800
 8001088:	40004400 	.word	0x40004400

0800108c <NVIC_Init>:

void NVIC_Init(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(ADC_IRQn);
 8001090:	2012      	movs	r0, #18
 8001092:	f7ff f8f5 	bl	8000280 <__NVIC_EnableIRQ>
    NVIC_SetPriority(ADC_IRQn, 1);
 8001096:	2101      	movs	r1, #1
 8001098:	2012      	movs	r0, #18
 800109a:	f7ff f90f 	bl	80002bc <__NVIC_SetPriority>
    NVIC_SetPriority(SysTick_IRQn, 0);
 800109e:	2100      	movs	r1, #0
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f7ff f90a 	bl	80002bc <__NVIC_SetPriority>
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}

080010ac <ADC_StartConversion>:

void ADC_StartConversion(void) {
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
    ADC1->SQR3 = (ADC1->SQR3 & ~ADC_SQR3_SQ1) | POT_PIN;
 80010b0:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <ADC_StartConversion+0x2c>)
 80010b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010b4:	f023 031f 	bic.w	r3, r3, #31
 80010b8:	4a07      	ldr	r2, [pc, #28]	@ (80010d8 <ADC_StartConversion+0x2c>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	6353      	str	r3, [r2, #52]	@ 0x34
    ADC1->CR2 |= ADC_CR2_SWSTART;
 80010c0:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <ADC_StartConversion+0x2c>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	4a04      	ldr	r2, [pc, #16]	@ (80010d8 <ADC_StartConversion+0x2c>)
 80010c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80010ca:	6093      	str	r3, [r2, #8]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40012000 	.word	0x40012000

080010dc <Delay_ms>:

/* ============================================================================
 * UTILITY FUNCTIONS
 * ============================================================================ */

void Delay_ms(uint32_t ms) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
    uint32_t start = GetTick();
 80010e4:	f000 f810 	bl	8001108 <GetTick>
 80010e8:	60f8      	str	r0, [r7, #12]
    while((GetTick() - start) < ms);
 80010ea:	bf00      	nop
 80010ec:	f000 f80c 	bl	8001108 <GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d8f7      	bhi.n	80010ec <Delay_ms+0x10>
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <GetTick>:

uint32_t GetTick(void) {
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
    return g_tick_counter;
 800110c:	4b03      	ldr	r3, [pc, #12]	@ (800111c <GetTick+0x14>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	200000ac 	.word	0x200000ac

08001120 <Log_Print>:

void Log_Print(const char* format, ...) {
 8001120:	b40f      	push	{r0, r1, r2, r3}
 8001122:	b580      	push	{r7, lr}
 8001124:	b0c2      	sub	sp, #264	@ 0x108
 8001126:	af00      	add	r7, sp, #0
    if(!g_system_initialized) return;
 8001128:	4b1c      	ldr	r3, [pc, #112]	@ (800119c <Log_Print+0x7c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d02d      	beq.n	800118c <Log_Print+0x6c>
    char buffer[256];
    va_list args;
    va_start(args, format);
 8001130:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8001134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800113c:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 800113e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001142:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001146:	1d38      	adds	r0, r7, #4
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800114e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001152:	f000 fab7 	bl	80016c4 <vsniprintf>
    va_end(args);
    for(char* p = buffer; *p; p++) {
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800115c:	e010      	b.n	8001180 <Log_Print+0x60>
        while(!(USART2->SR & USART_SR_TXE));
 800115e:	bf00      	nop
 8001160:	4b0f      	ldr	r3, [pc, #60]	@ (80011a0 <Log_Print+0x80>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0f9      	beq.n	8001160 <Log_Print+0x40>
        USART2->DR = *p;
 800116c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001170:	781a      	ldrb	r2, [r3, #0]
 8001172:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <Log_Print+0x80>)
 8001174:	605a      	str	r2, [r3, #4]
    for(char* p = buffer; *p; p++) {
 8001176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800117a:	3301      	adds	r3, #1
 800117c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1e9      	bne.n	800115e <Log_Print+0x3e>
 800118a:	e000      	b.n	800118e <Log_Print+0x6e>
    if(!g_system_initialized) return;
 800118c:	bf00      	nop
    }
}
 800118e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001192:	46bd      	mov	sp, r7
 8001194:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001198:	b004      	add	sp, #16
 800119a:	4770      	bx	lr
 800119c:	200000a0 	.word	0x200000a0
 80011a0:	40004400 	.word	0x40004400

080011a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return 1;
 80011a8:	2301      	movs	r3, #1
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <_kill>:

int _kill(int pid, int sig)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011be:	f000 fadd 	bl	800177c <__errno>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2216      	movs	r2, #22
 80011c6:	601a      	str	r2, [r3, #0]
  return -1;
 80011c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <_exit>:

void _exit (int status)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011dc:	f04f 31ff 	mov.w	r1, #4294967295
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ffe7 	bl	80011b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80011e6:	bf00      	nop
 80011e8:	e7fd      	b.n	80011e6 <_exit+0x12>

080011ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b086      	sub	sp, #24
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	60f8      	str	r0, [r7, #12]
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	e00a      	b.n	8001212 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011fc:	f3af 8000 	nop.w
 8001200:	4601      	mov	r1, r0
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	1c5a      	adds	r2, r3, #1
 8001206:	60ba      	str	r2, [r7, #8]
 8001208:	b2ca      	uxtb	r2, r1
 800120a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	3301      	adds	r3, #1
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	429a      	cmp	r2, r3
 8001218:	dbf0      	blt.n	80011fc <_read+0x12>
  }

  return len;
 800121a:	687b      	ldr	r3, [r7, #4]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	e009      	b.n	800124a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	1c5a      	adds	r2, r3, #1
 800123a:	60ba      	str	r2, [r7, #8]
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	3301      	adds	r3, #1
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	429a      	cmp	r2, r3
 8001250:	dbf1      	blt.n	8001236 <_write+0x12>
  }
  return len;
 8001252:	687b      	ldr	r3, [r7, #4]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <_close>:

int _close(int file)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001264:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001268:	4618      	mov	r0, r3
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001284:	605a      	str	r2, [r3, #4]
  return 0;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <_isatty>:

int _isatty(int file)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800129c:	2301      	movs	r3, #1
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b085      	sub	sp, #20
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	60f8      	str	r0, [r7, #12]
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012cc:	4a14      	ldr	r2, [pc, #80]	@ (8001320 <_sbrk+0x5c>)
 80012ce:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <_sbrk+0x60>)
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d8:	4b13      	ldr	r3, [pc, #76]	@ (8001328 <_sbrk+0x64>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d102      	bne.n	80012e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e0:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <_sbrk+0x64>)
 80012e2:	4a12      	ldr	r2, [pc, #72]	@ (800132c <_sbrk+0x68>)
 80012e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012e6:	4b10      	ldr	r3, [pc, #64]	@ (8001328 <_sbrk+0x64>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d207      	bcs.n	8001304 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f4:	f000 fa42 	bl	800177c <__errno>
 80012f8:	4603      	mov	r3, r0
 80012fa:	220c      	movs	r2, #12
 80012fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	e009      	b.n	8001318 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001304:	4b08      	ldr	r3, [pc, #32]	@ (8001328 <_sbrk+0x64>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800130a:	4b07      	ldr	r3, [pc, #28]	@ (8001328 <_sbrk+0x64>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	4a05      	ldr	r2, [pc, #20]	@ (8001328 <_sbrk+0x64>)
 8001314:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001316:	68fb      	ldr	r3, [r7, #12]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20020000 	.word	0x20020000
 8001324:	00000400 	.word	0x00000400
 8001328:	200000ec 	.word	0x200000ec
 800132c:	20000240 	.word	0x20000240

08001330 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001330:	480d      	ldr	r0, [pc, #52]	@ (8001368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001332:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001334:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001338:	480c      	ldr	r0, [pc, #48]	@ (800136c <LoopForever+0x6>)
  ldr r1, =_edata
 800133a:	490d      	ldr	r1, [pc, #52]	@ (8001370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800133c:	4a0d      	ldr	r2, [pc, #52]	@ (8001374 <LoopForever+0xe>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001340:	e002      	b.n	8001348 <LoopCopyDataInit>

08001342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001346:	3304      	adds	r3, #4

08001348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800134c:	d3f9      	bcc.n	8001342 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134e:	4a0a      	ldr	r2, [pc, #40]	@ (8001378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001350:	4c0a      	ldr	r4, [pc, #40]	@ (800137c <LoopForever+0x16>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001354:	e001      	b.n	800135a <LoopFillZerobss>

08001356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001358:	3204      	adds	r2, #4

0800135a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800135c:	d3fb      	bcc.n	8001356 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800135e:	f000 fa13 	bl	8001788 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8001362:	f7fe fff7 	bl	8000354 <main>

08001366 <LoopForever>:

LoopForever:
  b LoopForever
 8001366:	e7fe      	b.n	8001366 <LoopForever>
  ldr   r0, =_estack
 8001368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800136c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001370:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001374:	08002d08 	.word	0x08002d08
  ldr r2, =_sbss
 8001378:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800137c:	2000023c 	.word	0x2000023c

08001380 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <BusFault_Handler>
	...

08001384 <srand>:
 8001384:	b538      	push	{r3, r4, r5, lr}
 8001386:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <srand+0x44>)
 8001388:	681d      	ldr	r5, [r3, #0]
 800138a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800138c:	4604      	mov	r4, r0
 800138e:	b9b3      	cbnz	r3, 80013be <srand+0x3a>
 8001390:	2018      	movs	r0, #24
 8001392:	f000 fa89 	bl	80018a8 <malloc>
 8001396:	4602      	mov	r2, r0
 8001398:	6328      	str	r0, [r5, #48]	@ 0x30
 800139a:	b920      	cbnz	r0, 80013a6 <srand+0x22>
 800139c:	4b0b      	ldr	r3, [pc, #44]	@ (80013cc <srand+0x48>)
 800139e:	480c      	ldr	r0, [pc, #48]	@ (80013d0 <srand+0x4c>)
 80013a0:	2146      	movs	r1, #70	@ 0x46
 80013a2:	f000 fa19 	bl	80017d8 <__assert_func>
 80013a6:	490b      	ldr	r1, [pc, #44]	@ (80013d4 <srand+0x50>)
 80013a8:	4b0b      	ldr	r3, [pc, #44]	@ (80013d8 <srand+0x54>)
 80013aa:	e9c0 1300 	strd	r1, r3, [r0]
 80013ae:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <srand+0x58>)
 80013b0:	6083      	str	r3, [r0, #8]
 80013b2:	230b      	movs	r3, #11
 80013b4:	8183      	strh	r3, [r0, #12]
 80013b6:	2100      	movs	r1, #0
 80013b8:	2001      	movs	r0, #1
 80013ba:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80013be:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80013c0:	2200      	movs	r2, #0
 80013c2:	611c      	str	r4, [r3, #16]
 80013c4:	615a      	str	r2, [r3, #20]
 80013c6:	bd38      	pop	{r3, r4, r5, pc}
 80013c8:	20000014 	.word	0x20000014
 80013cc:	08002c18 	.word	0x08002c18
 80013d0:	08002c2f 	.word	0x08002c2f
 80013d4:	abcd330e 	.word	0xabcd330e
 80013d8:	e66d1234 	.word	0xe66d1234
 80013dc:	0005deec 	.word	0x0005deec

080013e0 <rand>:
 80013e0:	4b16      	ldr	r3, [pc, #88]	@ (800143c <rand+0x5c>)
 80013e2:	b510      	push	{r4, lr}
 80013e4:	681c      	ldr	r4, [r3, #0]
 80013e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80013e8:	b9b3      	cbnz	r3, 8001418 <rand+0x38>
 80013ea:	2018      	movs	r0, #24
 80013ec:	f000 fa5c 	bl	80018a8 <malloc>
 80013f0:	4602      	mov	r2, r0
 80013f2:	6320      	str	r0, [r4, #48]	@ 0x30
 80013f4:	b920      	cbnz	r0, 8001400 <rand+0x20>
 80013f6:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <rand+0x60>)
 80013f8:	4812      	ldr	r0, [pc, #72]	@ (8001444 <rand+0x64>)
 80013fa:	2152      	movs	r1, #82	@ 0x52
 80013fc:	f000 f9ec 	bl	80017d8 <__assert_func>
 8001400:	4911      	ldr	r1, [pc, #68]	@ (8001448 <rand+0x68>)
 8001402:	4b12      	ldr	r3, [pc, #72]	@ (800144c <rand+0x6c>)
 8001404:	e9c0 1300 	strd	r1, r3, [r0]
 8001408:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <rand+0x70>)
 800140a:	6083      	str	r3, [r0, #8]
 800140c:	230b      	movs	r3, #11
 800140e:	8183      	strh	r3, [r0, #12]
 8001410:	2100      	movs	r1, #0
 8001412:	2001      	movs	r0, #1
 8001414:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001418:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800141a:	480e      	ldr	r0, [pc, #56]	@ (8001454 <rand+0x74>)
 800141c:	690b      	ldr	r3, [r1, #16]
 800141e:	694c      	ldr	r4, [r1, #20]
 8001420:	4a0d      	ldr	r2, [pc, #52]	@ (8001458 <rand+0x78>)
 8001422:	4358      	muls	r0, r3
 8001424:	fb02 0004 	mla	r0, r2, r4, r0
 8001428:	fba3 3202 	umull	r3, r2, r3, r2
 800142c:	3301      	adds	r3, #1
 800142e:	eb40 0002 	adc.w	r0, r0, r2
 8001432:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8001436:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800143a:	bd10      	pop	{r4, pc}
 800143c:	20000014 	.word	0x20000014
 8001440:	08002c18 	.word	0x08002c18
 8001444:	08002c2f 	.word	0x08002c2f
 8001448:	abcd330e 	.word	0xabcd330e
 800144c:	e66d1234 	.word	0xe66d1234
 8001450:	0005deec 	.word	0x0005deec
 8001454:	5851f42d 	.word	0x5851f42d
 8001458:	4c957f2d 	.word	0x4c957f2d

0800145c <std>:
 800145c:	2300      	movs	r3, #0
 800145e:	b510      	push	{r4, lr}
 8001460:	4604      	mov	r4, r0
 8001462:	e9c0 3300 	strd	r3, r3, [r0]
 8001466:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800146a:	6083      	str	r3, [r0, #8]
 800146c:	8181      	strh	r1, [r0, #12]
 800146e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001470:	81c2      	strh	r2, [r0, #14]
 8001472:	6183      	str	r3, [r0, #24]
 8001474:	4619      	mov	r1, r3
 8001476:	2208      	movs	r2, #8
 8001478:	305c      	adds	r0, #92	@ 0x5c
 800147a:	f000 f931 	bl	80016e0 <memset>
 800147e:	4b0d      	ldr	r3, [pc, #52]	@ (80014b4 <std+0x58>)
 8001480:	6263      	str	r3, [r4, #36]	@ 0x24
 8001482:	4b0d      	ldr	r3, [pc, #52]	@ (80014b8 <std+0x5c>)
 8001484:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001486:	4b0d      	ldr	r3, [pc, #52]	@ (80014bc <std+0x60>)
 8001488:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800148a:	4b0d      	ldr	r3, [pc, #52]	@ (80014c0 <std+0x64>)
 800148c:	6323      	str	r3, [r4, #48]	@ 0x30
 800148e:	4b0d      	ldr	r3, [pc, #52]	@ (80014c4 <std+0x68>)
 8001490:	6224      	str	r4, [r4, #32]
 8001492:	429c      	cmp	r4, r3
 8001494:	d006      	beq.n	80014a4 <std+0x48>
 8001496:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800149a:	4294      	cmp	r4, r2
 800149c:	d002      	beq.n	80014a4 <std+0x48>
 800149e:	33d0      	adds	r3, #208	@ 0xd0
 80014a0:	429c      	cmp	r4, r3
 80014a2:	d105      	bne.n	80014b0 <std+0x54>
 80014a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80014a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014ac:	f000 b990 	b.w	80017d0 <__retarget_lock_init_recursive>
 80014b0:	bd10      	pop	{r4, pc}
 80014b2:	bf00      	nop
 80014b4:	080015e1 	.word	0x080015e1
 80014b8:	08001603 	.word	0x08001603
 80014bc:	0800163b 	.word	0x0800163b
 80014c0:	0800165f 	.word	0x0800165f
 80014c4:	200000f0 	.word	0x200000f0

080014c8 <stdio_exit_handler>:
 80014c8:	4a02      	ldr	r2, [pc, #8]	@ (80014d4 <stdio_exit_handler+0xc>)
 80014ca:	4903      	ldr	r1, [pc, #12]	@ (80014d8 <stdio_exit_handler+0x10>)
 80014cc:	4803      	ldr	r0, [pc, #12]	@ (80014dc <stdio_exit_handler+0x14>)
 80014ce:	f000 b869 	b.w	80015a4 <_fwalk_sglue>
 80014d2:	bf00      	nop
 80014d4:	20000008 	.word	0x20000008
 80014d8:	080020e5 	.word	0x080020e5
 80014dc:	20000018 	.word	0x20000018

080014e0 <cleanup_stdio>:
 80014e0:	6841      	ldr	r1, [r0, #4]
 80014e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <cleanup_stdio+0x34>)
 80014e4:	4299      	cmp	r1, r3
 80014e6:	b510      	push	{r4, lr}
 80014e8:	4604      	mov	r4, r0
 80014ea:	d001      	beq.n	80014f0 <cleanup_stdio+0x10>
 80014ec:	f000 fdfa 	bl	80020e4 <_fflush_r>
 80014f0:	68a1      	ldr	r1, [r4, #8]
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <cleanup_stdio+0x38>)
 80014f4:	4299      	cmp	r1, r3
 80014f6:	d002      	beq.n	80014fe <cleanup_stdio+0x1e>
 80014f8:	4620      	mov	r0, r4
 80014fa:	f000 fdf3 	bl	80020e4 <_fflush_r>
 80014fe:	68e1      	ldr	r1, [r4, #12]
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <cleanup_stdio+0x3c>)
 8001502:	4299      	cmp	r1, r3
 8001504:	d004      	beq.n	8001510 <cleanup_stdio+0x30>
 8001506:	4620      	mov	r0, r4
 8001508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800150c:	f000 bdea 	b.w	80020e4 <_fflush_r>
 8001510:	bd10      	pop	{r4, pc}
 8001512:	bf00      	nop
 8001514:	200000f0 	.word	0x200000f0
 8001518:	20000158 	.word	0x20000158
 800151c:	200001c0 	.word	0x200001c0

08001520 <global_stdio_init.part.0>:
 8001520:	b510      	push	{r4, lr}
 8001522:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <global_stdio_init.part.0+0x30>)
 8001524:	4c0b      	ldr	r4, [pc, #44]	@ (8001554 <global_stdio_init.part.0+0x34>)
 8001526:	4a0c      	ldr	r2, [pc, #48]	@ (8001558 <global_stdio_init.part.0+0x38>)
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	4620      	mov	r0, r4
 800152c:	2200      	movs	r2, #0
 800152e:	2104      	movs	r1, #4
 8001530:	f7ff ff94 	bl	800145c <std>
 8001534:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001538:	2201      	movs	r2, #1
 800153a:	2109      	movs	r1, #9
 800153c:	f7ff ff8e 	bl	800145c <std>
 8001540:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001544:	2202      	movs	r2, #2
 8001546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800154a:	2112      	movs	r1, #18
 800154c:	f7ff bf86 	b.w	800145c <std>
 8001550:	20000228 	.word	0x20000228
 8001554:	200000f0 	.word	0x200000f0
 8001558:	080014c9 	.word	0x080014c9

0800155c <__sfp_lock_acquire>:
 800155c:	4801      	ldr	r0, [pc, #4]	@ (8001564 <__sfp_lock_acquire+0x8>)
 800155e:	f000 b938 	b.w	80017d2 <__retarget_lock_acquire_recursive>
 8001562:	bf00      	nop
 8001564:	20000231 	.word	0x20000231

08001568 <__sfp_lock_release>:
 8001568:	4801      	ldr	r0, [pc, #4]	@ (8001570 <__sfp_lock_release+0x8>)
 800156a:	f000 b933 	b.w	80017d4 <__retarget_lock_release_recursive>
 800156e:	bf00      	nop
 8001570:	20000231 	.word	0x20000231

08001574 <__sinit>:
 8001574:	b510      	push	{r4, lr}
 8001576:	4604      	mov	r4, r0
 8001578:	f7ff fff0 	bl	800155c <__sfp_lock_acquire>
 800157c:	6a23      	ldr	r3, [r4, #32]
 800157e:	b11b      	cbz	r3, 8001588 <__sinit+0x14>
 8001580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001584:	f7ff bff0 	b.w	8001568 <__sfp_lock_release>
 8001588:	4b04      	ldr	r3, [pc, #16]	@ (800159c <__sinit+0x28>)
 800158a:	6223      	str	r3, [r4, #32]
 800158c:	4b04      	ldr	r3, [pc, #16]	@ (80015a0 <__sinit+0x2c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1f5      	bne.n	8001580 <__sinit+0xc>
 8001594:	f7ff ffc4 	bl	8001520 <global_stdio_init.part.0>
 8001598:	e7f2      	b.n	8001580 <__sinit+0xc>
 800159a:	bf00      	nop
 800159c:	080014e1 	.word	0x080014e1
 80015a0:	20000228 	.word	0x20000228

080015a4 <_fwalk_sglue>:
 80015a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015a8:	4607      	mov	r7, r0
 80015aa:	4688      	mov	r8, r1
 80015ac:	4614      	mov	r4, r2
 80015ae:	2600      	movs	r6, #0
 80015b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80015b4:	f1b9 0901 	subs.w	r9, r9, #1
 80015b8:	d505      	bpl.n	80015c6 <_fwalk_sglue+0x22>
 80015ba:	6824      	ldr	r4, [r4, #0]
 80015bc:	2c00      	cmp	r4, #0
 80015be:	d1f7      	bne.n	80015b0 <_fwalk_sglue+0xc>
 80015c0:	4630      	mov	r0, r6
 80015c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015c6:	89ab      	ldrh	r3, [r5, #12]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d907      	bls.n	80015dc <_fwalk_sglue+0x38>
 80015cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80015d0:	3301      	adds	r3, #1
 80015d2:	d003      	beq.n	80015dc <_fwalk_sglue+0x38>
 80015d4:	4629      	mov	r1, r5
 80015d6:	4638      	mov	r0, r7
 80015d8:	47c0      	blx	r8
 80015da:	4306      	orrs	r6, r0
 80015dc:	3568      	adds	r5, #104	@ 0x68
 80015de:	e7e9      	b.n	80015b4 <_fwalk_sglue+0x10>

080015e0 <__sread>:
 80015e0:	b510      	push	{r4, lr}
 80015e2:	460c      	mov	r4, r1
 80015e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015e8:	f000 f8a4 	bl	8001734 <_read_r>
 80015ec:	2800      	cmp	r0, #0
 80015ee:	bfab      	itete	ge
 80015f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80015f2:	89a3      	ldrhlt	r3, [r4, #12]
 80015f4:	181b      	addge	r3, r3, r0
 80015f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80015fa:	bfac      	ite	ge
 80015fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80015fe:	81a3      	strhlt	r3, [r4, #12]
 8001600:	bd10      	pop	{r4, pc}

08001602 <__swrite>:
 8001602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001606:	461f      	mov	r7, r3
 8001608:	898b      	ldrh	r3, [r1, #12]
 800160a:	05db      	lsls	r3, r3, #23
 800160c:	4605      	mov	r5, r0
 800160e:	460c      	mov	r4, r1
 8001610:	4616      	mov	r6, r2
 8001612:	d505      	bpl.n	8001620 <__swrite+0x1e>
 8001614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001618:	2302      	movs	r3, #2
 800161a:	2200      	movs	r2, #0
 800161c:	f000 f878 	bl	8001710 <_lseek_r>
 8001620:	89a3      	ldrh	r3, [r4, #12]
 8001622:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001626:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800162a:	81a3      	strh	r3, [r4, #12]
 800162c:	4632      	mov	r2, r6
 800162e:	463b      	mov	r3, r7
 8001630:	4628      	mov	r0, r5
 8001632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001636:	f000 b88f 	b.w	8001758 <_write_r>

0800163a <__sseek>:
 800163a:	b510      	push	{r4, lr}
 800163c:	460c      	mov	r4, r1
 800163e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001642:	f000 f865 	bl	8001710 <_lseek_r>
 8001646:	1c43      	adds	r3, r0, #1
 8001648:	89a3      	ldrh	r3, [r4, #12]
 800164a:	bf15      	itete	ne
 800164c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800164e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001652:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001656:	81a3      	strheq	r3, [r4, #12]
 8001658:	bf18      	it	ne
 800165a:	81a3      	strhne	r3, [r4, #12]
 800165c:	bd10      	pop	{r4, pc}

0800165e <__sclose>:
 800165e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001662:	f000 b845 	b.w	80016f0 <_close_r>

08001666 <_vsniprintf_r>:
 8001666:	b530      	push	{r4, r5, lr}
 8001668:	4614      	mov	r4, r2
 800166a:	2c00      	cmp	r4, #0
 800166c:	b09b      	sub	sp, #108	@ 0x6c
 800166e:	4605      	mov	r5, r0
 8001670:	461a      	mov	r2, r3
 8001672:	da05      	bge.n	8001680 <_vsniprintf_r+0x1a>
 8001674:	238b      	movs	r3, #139	@ 0x8b
 8001676:	6003      	str	r3, [r0, #0]
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	b01b      	add	sp, #108	@ 0x6c
 800167e:	bd30      	pop	{r4, r5, pc}
 8001680:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8001684:	f8ad 300c 	strh.w	r3, [sp, #12]
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	9319      	str	r3, [sp, #100]	@ 0x64
 800168e:	bf14      	ite	ne
 8001690:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001694:	4623      	moveq	r3, r4
 8001696:	9302      	str	r3, [sp, #8]
 8001698:	9305      	str	r3, [sp, #20]
 800169a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800169e:	9100      	str	r1, [sp, #0]
 80016a0:	9104      	str	r1, [sp, #16]
 80016a2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80016a6:	4669      	mov	r1, sp
 80016a8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80016aa:	f000 fa0f 	bl	8001acc <_svfiprintf_r>
 80016ae:	1c43      	adds	r3, r0, #1
 80016b0:	bfbc      	itt	lt
 80016b2:	238b      	movlt	r3, #139	@ 0x8b
 80016b4:	602b      	strlt	r3, [r5, #0]
 80016b6:	2c00      	cmp	r4, #0
 80016b8:	d0e0      	beq.n	800167c <_vsniprintf_r+0x16>
 80016ba:	9b00      	ldr	r3, [sp, #0]
 80016bc:	2200      	movs	r2, #0
 80016be:	701a      	strb	r2, [r3, #0]
 80016c0:	e7dc      	b.n	800167c <_vsniprintf_r+0x16>
	...

080016c4 <vsniprintf>:
 80016c4:	b507      	push	{r0, r1, r2, lr}
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	4613      	mov	r3, r2
 80016ca:	460a      	mov	r2, r1
 80016cc:	4601      	mov	r1, r0
 80016ce:	4803      	ldr	r0, [pc, #12]	@ (80016dc <vsniprintf+0x18>)
 80016d0:	6800      	ldr	r0, [r0, #0]
 80016d2:	f7ff ffc8 	bl	8001666 <_vsniprintf_r>
 80016d6:	b003      	add	sp, #12
 80016d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80016dc:	20000014 	.word	0x20000014

080016e0 <memset>:
 80016e0:	4402      	add	r2, r0
 80016e2:	4603      	mov	r3, r0
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d100      	bne.n	80016ea <memset+0xa>
 80016e8:	4770      	bx	lr
 80016ea:	f803 1b01 	strb.w	r1, [r3], #1
 80016ee:	e7f9      	b.n	80016e4 <memset+0x4>

080016f0 <_close_r>:
 80016f0:	b538      	push	{r3, r4, r5, lr}
 80016f2:	4d06      	ldr	r5, [pc, #24]	@ (800170c <_close_r+0x1c>)
 80016f4:	2300      	movs	r3, #0
 80016f6:	4604      	mov	r4, r0
 80016f8:	4608      	mov	r0, r1
 80016fa:	602b      	str	r3, [r5, #0]
 80016fc:	f7ff fdae 	bl	800125c <_close>
 8001700:	1c43      	adds	r3, r0, #1
 8001702:	d102      	bne.n	800170a <_close_r+0x1a>
 8001704:	682b      	ldr	r3, [r5, #0]
 8001706:	b103      	cbz	r3, 800170a <_close_r+0x1a>
 8001708:	6023      	str	r3, [r4, #0]
 800170a:	bd38      	pop	{r3, r4, r5, pc}
 800170c:	2000022c 	.word	0x2000022c

08001710 <_lseek_r>:
 8001710:	b538      	push	{r3, r4, r5, lr}
 8001712:	4d07      	ldr	r5, [pc, #28]	@ (8001730 <_lseek_r+0x20>)
 8001714:	4604      	mov	r4, r0
 8001716:	4608      	mov	r0, r1
 8001718:	4611      	mov	r1, r2
 800171a:	2200      	movs	r2, #0
 800171c:	602a      	str	r2, [r5, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	f7ff fdc3 	bl	80012aa <_lseek>
 8001724:	1c43      	adds	r3, r0, #1
 8001726:	d102      	bne.n	800172e <_lseek_r+0x1e>
 8001728:	682b      	ldr	r3, [r5, #0]
 800172a:	b103      	cbz	r3, 800172e <_lseek_r+0x1e>
 800172c:	6023      	str	r3, [r4, #0]
 800172e:	bd38      	pop	{r3, r4, r5, pc}
 8001730:	2000022c 	.word	0x2000022c

08001734 <_read_r>:
 8001734:	b538      	push	{r3, r4, r5, lr}
 8001736:	4d07      	ldr	r5, [pc, #28]	@ (8001754 <_read_r+0x20>)
 8001738:	4604      	mov	r4, r0
 800173a:	4608      	mov	r0, r1
 800173c:	4611      	mov	r1, r2
 800173e:	2200      	movs	r2, #0
 8001740:	602a      	str	r2, [r5, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	f7ff fd51 	bl	80011ea <_read>
 8001748:	1c43      	adds	r3, r0, #1
 800174a:	d102      	bne.n	8001752 <_read_r+0x1e>
 800174c:	682b      	ldr	r3, [r5, #0]
 800174e:	b103      	cbz	r3, 8001752 <_read_r+0x1e>
 8001750:	6023      	str	r3, [r4, #0]
 8001752:	bd38      	pop	{r3, r4, r5, pc}
 8001754:	2000022c 	.word	0x2000022c

08001758 <_write_r>:
 8001758:	b538      	push	{r3, r4, r5, lr}
 800175a:	4d07      	ldr	r5, [pc, #28]	@ (8001778 <_write_r+0x20>)
 800175c:	4604      	mov	r4, r0
 800175e:	4608      	mov	r0, r1
 8001760:	4611      	mov	r1, r2
 8001762:	2200      	movs	r2, #0
 8001764:	602a      	str	r2, [r5, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	f7ff fd5c 	bl	8001224 <_write>
 800176c:	1c43      	adds	r3, r0, #1
 800176e:	d102      	bne.n	8001776 <_write_r+0x1e>
 8001770:	682b      	ldr	r3, [r5, #0]
 8001772:	b103      	cbz	r3, 8001776 <_write_r+0x1e>
 8001774:	6023      	str	r3, [r4, #0]
 8001776:	bd38      	pop	{r3, r4, r5, pc}
 8001778:	2000022c 	.word	0x2000022c

0800177c <__errno>:
 800177c:	4b01      	ldr	r3, [pc, #4]	@ (8001784 <__errno+0x8>)
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000014 	.word	0x20000014

08001788 <__libc_init_array>:
 8001788:	b570      	push	{r4, r5, r6, lr}
 800178a:	4d0d      	ldr	r5, [pc, #52]	@ (80017c0 <__libc_init_array+0x38>)
 800178c:	4c0d      	ldr	r4, [pc, #52]	@ (80017c4 <__libc_init_array+0x3c>)
 800178e:	1b64      	subs	r4, r4, r5
 8001790:	10a4      	asrs	r4, r4, #2
 8001792:	2600      	movs	r6, #0
 8001794:	42a6      	cmp	r6, r4
 8001796:	d109      	bne.n	80017ac <__libc_init_array+0x24>
 8001798:	4d0b      	ldr	r5, [pc, #44]	@ (80017c8 <__libc_init_array+0x40>)
 800179a:	4c0c      	ldr	r4, [pc, #48]	@ (80017cc <__libc_init_array+0x44>)
 800179c:	f000 ffee 	bl	800277c <_init>
 80017a0:	1b64      	subs	r4, r4, r5
 80017a2:	10a4      	asrs	r4, r4, #2
 80017a4:	2600      	movs	r6, #0
 80017a6:	42a6      	cmp	r6, r4
 80017a8:	d105      	bne.n	80017b6 <__libc_init_array+0x2e>
 80017aa:	bd70      	pop	{r4, r5, r6, pc}
 80017ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80017b0:	4798      	blx	r3
 80017b2:	3601      	adds	r6, #1
 80017b4:	e7ee      	b.n	8001794 <__libc_init_array+0xc>
 80017b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80017ba:	4798      	blx	r3
 80017bc:	3601      	adds	r6, #1
 80017be:	e7f2      	b.n	80017a6 <__libc_init_array+0x1e>
 80017c0:	08002d00 	.word	0x08002d00
 80017c4:	08002d00 	.word	0x08002d00
 80017c8:	08002d00 	.word	0x08002d00
 80017cc:	08002d04 	.word	0x08002d04

080017d0 <__retarget_lock_init_recursive>:
 80017d0:	4770      	bx	lr

080017d2 <__retarget_lock_acquire_recursive>:
 80017d2:	4770      	bx	lr

080017d4 <__retarget_lock_release_recursive>:
 80017d4:	4770      	bx	lr
	...

080017d8 <__assert_func>:
 80017d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80017da:	4614      	mov	r4, r2
 80017dc:	461a      	mov	r2, r3
 80017de:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <__assert_func+0x2c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4605      	mov	r5, r0
 80017e4:	68d8      	ldr	r0, [r3, #12]
 80017e6:	b14c      	cbz	r4, 80017fc <__assert_func+0x24>
 80017e8:	4b07      	ldr	r3, [pc, #28]	@ (8001808 <__assert_func+0x30>)
 80017ea:	9100      	str	r1, [sp, #0]
 80017ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80017f0:	4906      	ldr	r1, [pc, #24]	@ (800180c <__assert_func+0x34>)
 80017f2:	462b      	mov	r3, r5
 80017f4:	f000 fc9e 	bl	8002134 <fiprintf>
 80017f8:	f000 fce6 	bl	80021c8 <abort>
 80017fc:	4b04      	ldr	r3, [pc, #16]	@ (8001810 <__assert_func+0x38>)
 80017fe:	461c      	mov	r4, r3
 8001800:	e7f3      	b.n	80017ea <__assert_func+0x12>
 8001802:	bf00      	nop
 8001804:	20000014 	.word	0x20000014
 8001808:	08002c87 	.word	0x08002c87
 800180c:	08002c94 	.word	0x08002c94
 8001810:	08002cc2 	.word	0x08002cc2

08001814 <_free_r>:
 8001814:	b538      	push	{r3, r4, r5, lr}
 8001816:	4605      	mov	r5, r0
 8001818:	2900      	cmp	r1, #0
 800181a:	d041      	beq.n	80018a0 <_free_r+0x8c>
 800181c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001820:	1f0c      	subs	r4, r1, #4
 8001822:	2b00      	cmp	r3, #0
 8001824:	bfb8      	it	lt
 8001826:	18e4      	addlt	r4, r4, r3
 8001828:	f000 f8e8 	bl	80019fc <__malloc_lock>
 800182c:	4a1d      	ldr	r2, [pc, #116]	@ (80018a4 <_free_r+0x90>)
 800182e:	6813      	ldr	r3, [r2, #0]
 8001830:	b933      	cbnz	r3, 8001840 <_free_r+0x2c>
 8001832:	6063      	str	r3, [r4, #4]
 8001834:	6014      	str	r4, [r2, #0]
 8001836:	4628      	mov	r0, r5
 8001838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800183c:	f000 b8e4 	b.w	8001a08 <__malloc_unlock>
 8001840:	42a3      	cmp	r3, r4
 8001842:	d908      	bls.n	8001856 <_free_r+0x42>
 8001844:	6820      	ldr	r0, [r4, #0]
 8001846:	1821      	adds	r1, r4, r0
 8001848:	428b      	cmp	r3, r1
 800184a:	bf01      	itttt	eq
 800184c:	6819      	ldreq	r1, [r3, #0]
 800184e:	685b      	ldreq	r3, [r3, #4]
 8001850:	1809      	addeq	r1, r1, r0
 8001852:	6021      	streq	r1, [r4, #0]
 8001854:	e7ed      	b.n	8001832 <_free_r+0x1e>
 8001856:	461a      	mov	r2, r3
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	b10b      	cbz	r3, 8001860 <_free_r+0x4c>
 800185c:	42a3      	cmp	r3, r4
 800185e:	d9fa      	bls.n	8001856 <_free_r+0x42>
 8001860:	6811      	ldr	r1, [r2, #0]
 8001862:	1850      	adds	r0, r2, r1
 8001864:	42a0      	cmp	r0, r4
 8001866:	d10b      	bne.n	8001880 <_free_r+0x6c>
 8001868:	6820      	ldr	r0, [r4, #0]
 800186a:	4401      	add	r1, r0
 800186c:	1850      	adds	r0, r2, r1
 800186e:	4283      	cmp	r3, r0
 8001870:	6011      	str	r1, [r2, #0]
 8001872:	d1e0      	bne.n	8001836 <_free_r+0x22>
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	6053      	str	r3, [r2, #4]
 800187a:	4408      	add	r0, r1
 800187c:	6010      	str	r0, [r2, #0]
 800187e:	e7da      	b.n	8001836 <_free_r+0x22>
 8001880:	d902      	bls.n	8001888 <_free_r+0x74>
 8001882:	230c      	movs	r3, #12
 8001884:	602b      	str	r3, [r5, #0]
 8001886:	e7d6      	b.n	8001836 <_free_r+0x22>
 8001888:	6820      	ldr	r0, [r4, #0]
 800188a:	1821      	adds	r1, r4, r0
 800188c:	428b      	cmp	r3, r1
 800188e:	bf04      	itt	eq
 8001890:	6819      	ldreq	r1, [r3, #0]
 8001892:	685b      	ldreq	r3, [r3, #4]
 8001894:	6063      	str	r3, [r4, #4]
 8001896:	bf04      	itt	eq
 8001898:	1809      	addeq	r1, r1, r0
 800189a:	6021      	streq	r1, [r4, #0]
 800189c:	6054      	str	r4, [r2, #4]
 800189e:	e7ca      	b.n	8001836 <_free_r+0x22>
 80018a0:	bd38      	pop	{r3, r4, r5, pc}
 80018a2:	bf00      	nop
 80018a4:	20000238 	.word	0x20000238

080018a8 <malloc>:
 80018a8:	4b02      	ldr	r3, [pc, #8]	@ (80018b4 <malloc+0xc>)
 80018aa:	4601      	mov	r1, r0
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	f000 b825 	b.w	80018fc <_malloc_r>
 80018b2:	bf00      	nop
 80018b4:	20000014 	.word	0x20000014

080018b8 <sbrk_aligned>:
 80018b8:	b570      	push	{r4, r5, r6, lr}
 80018ba:	4e0f      	ldr	r6, [pc, #60]	@ (80018f8 <sbrk_aligned+0x40>)
 80018bc:	460c      	mov	r4, r1
 80018be:	6831      	ldr	r1, [r6, #0]
 80018c0:	4605      	mov	r5, r0
 80018c2:	b911      	cbnz	r1, 80018ca <sbrk_aligned+0x12>
 80018c4:	f000 fc62 	bl	800218c <_sbrk_r>
 80018c8:	6030      	str	r0, [r6, #0]
 80018ca:	4621      	mov	r1, r4
 80018cc:	4628      	mov	r0, r5
 80018ce:	f000 fc5d 	bl	800218c <_sbrk_r>
 80018d2:	1c43      	adds	r3, r0, #1
 80018d4:	d103      	bne.n	80018de <sbrk_aligned+0x26>
 80018d6:	f04f 34ff 	mov.w	r4, #4294967295
 80018da:	4620      	mov	r0, r4
 80018dc:	bd70      	pop	{r4, r5, r6, pc}
 80018de:	1cc4      	adds	r4, r0, #3
 80018e0:	f024 0403 	bic.w	r4, r4, #3
 80018e4:	42a0      	cmp	r0, r4
 80018e6:	d0f8      	beq.n	80018da <sbrk_aligned+0x22>
 80018e8:	1a21      	subs	r1, r4, r0
 80018ea:	4628      	mov	r0, r5
 80018ec:	f000 fc4e 	bl	800218c <_sbrk_r>
 80018f0:	3001      	adds	r0, #1
 80018f2:	d1f2      	bne.n	80018da <sbrk_aligned+0x22>
 80018f4:	e7ef      	b.n	80018d6 <sbrk_aligned+0x1e>
 80018f6:	bf00      	nop
 80018f8:	20000234 	.word	0x20000234

080018fc <_malloc_r>:
 80018fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001900:	1ccd      	adds	r5, r1, #3
 8001902:	f025 0503 	bic.w	r5, r5, #3
 8001906:	3508      	adds	r5, #8
 8001908:	2d0c      	cmp	r5, #12
 800190a:	bf38      	it	cc
 800190c:	250c      	movcc	r5, #12
 800190e:	2d00      	cmp	r5, #0
 8001910:	4606      	mov	r6, r0
 8001912:	db01      	blt.n	8001918 <_malloc_r+0x1c>
 8001914:	42a9      	cmp	r1, r5
 8001916:	d904      	bls.n	8001922 <_malloc_r+0x26>
 8001918:	230c      	movs	r3, #12
 800191a:	6033      	str	r3, [r6, #0]
 800191c:	2000      	movs	r0, #0
 800191e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001922:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80019f8 <_malloc_r+0xfc>
 8001926:	f000 f869 	bl	80019fc <__malloc_lock>
 800192a:	f8d8 3000 	ldr.w	r3, [r8]
 800192e:	461c      	mov	r4, r3
 8001930:	bb44      	cbnz	r4, 8001984 <_malloc_r+0x88>
 8001932:	4629      	mov	r1, r5
 8001934:	4630      	mov	r0, r6
 8001936:	f7ff ffbf 	bl	80018b8 <sbrk_aligned>
 800193a:	1c43      	adds	r3, r0, #1
 800193c:	4604      	mov	r4, r0
 800193e:	d158      	bne.n	80019f2 <_malloc_r+0xf6>
 8001940:	f8d8 4000 	ldr.w	r4, [r8]
 8001944:	4627      	mov	r7, r4
 8001946:	2f00      	cmp	r7, #0
 8001948:	d143      	bne.n	80019d2 <_malloc_r+0xd6>
 800194a:	2c00      	cmp	r4, #0
 800194c:	d04b      	beq.n	80019e6 <_malloc_r+0xea>
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	4639      	mov	r1, r7
 8001952:	4630      	mov	r0, r6
 8001954:	eb04 0903 	add.w	r9, r4, r3
 8001958:	f000 fc18 	bl	800218c <_sbrk_r>
 800195c:	4581      	cmp	r9, r0
 800195e:	d142      	bne.n	80019e6 <_malloc_r+0xea>
 8001960:	6821      	ldr	r1, [r4, #0]
 8001962:	1a6d      	subs	r5, r5, r1
 8001964:	4629      	mov	r1, r5
 8001966:	4630      	mov	r0, r6
 8001968:	f7ff ffa6 	bl	80018b8 <sbrk_aligned>
 800196c:	3001      	adds	r0, #1
 800196e:	d03a      	beq.n	80019e6 <_malloc_r+0xea>
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	442b      	add	r3, r5
 8001974:	6023      	str	r3, [r4, #0]
 8001976:	f8d8 3000 	ldr.w	r3, [r8]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	bb62      	cbnz	r2, 80019d8 <_malloc_r+0xdc>
 800197e:	f8c8 7000 	str.w	r7, [r8]
 8001982:	e00f      	b.n	80019a4 <_malloc_r+0xa8>
 8001984:	6822      	ldr	r2, [r4, #0]
 8001986:	1b52      	subs	r2, r2, r5
 8001988:	d420      	bmi.n	80019cc <_malloc_r+0xd0>
 800198a:	2a0b      	cmp	r2, #11
 800198c:	d917      	bls.n	80019be <_malloc_r+0xc2>
 800198e:	1961      	adds	r1, r4, r5
 8001990:	42a3      	cmp	r3, r4
 8001992:	6025      	str	r5, [r4, #0]
 8001994:	bf18      	it	ne
 8001996:	6059      	strne	r1, [r3, #4]
 8001998:	6863      	ldr	r3, [r4, #4]
 800199a:	bf08      	it	eq
 800199c:	f8c8 1000 	streq.w	r1, [r8]
 80019a0:	5162      	str	r2, [r4, r5]
 80019a2:	604b      	str	r3, [r1, #4]
 80019a4:	4630      	mov	r0, r6
 80019a6:	f000 f82f 	bl	8001a08 <__malloc_unlock>
 80019aa:	f104 000b 	add.w	r0, r4, #11
 80019ae:	1d23      	adds	r3, r4, #4
 80019b0:	f020 0007 	bic.w	r0, r0, #7
 80019b4:	1ac2      	subs	r2, r0, r3
 80019b6:	bf1c      	itt	ne
 80019b8:	1a1b      	subne	r3, r3, r0
 80019ba:	50a3      	strne	r3, [r4, r2]
 80019bc:	e7af      	b.n	800191e <_malloc_r+0x22>
 80019be:	6862      	ldr	r2, [r4, #4]
 80019c0:	42a3      	cmp	r3, r4
 80019c2:	bf0c      	ite	eq
 80019c4:	f8c8 2000 	streq.w	r2, [r8]
 80019c8:	605a      	strne	r2, [r3, #4]
 80019ca:	e7eb      	b.n	80019a4 <_malloc_r+0xa8>
 80019cc:	4623      	mov	r3, r4
 80019ce:	6864      	ldr	r4, [r4, #4]
 80019d0:	e7ae      	b.n	8001930 <_malloc_r+0x34>
 80019d2:	463c      	mov	r4, r7
 80019d4:	687f      	ldr	r7, [r7, #4]
 80019d6:	e7b6      	b.n	8001946 <_malloc_r+0x4a>
 80019d8:	461a      	mov	r2, r3
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	42a3      	cmp	r3, r4
 80019de:	d1fb      	bne.n	80019d8 <_malloc_r+0xdc>
 80019e0:	2300      	movs	r3, #0
 80019e2:	6053      	str	r3, [r2, #4]
 80019e4:	e7de      	b.n	80019a4 <_malloc_r+0xa8>
 80019e6:	230c      	movs	r3, #12
 80019e8:	6033      	str	r3, [r6, #0]
 80019ea:	4630      	mov	r0, r6
 80019ec:	f000 f80c 	bl	8001a08 <__malloc_unlock>
 80019f0:	e794      	b.n	800191c <_malloc_r+0x20>
 80019f2:	6005      	str	r5, [r0, #0]
 80019f4:	e7d6      	b.n	80019a4 <_malloc_r+0xa8>
 80019f6:	bf00      	nop
 80019f8:	20000238 	.word	0x20000238

080019fc <__malloc_lock>:
 80019fc:	4801      	ldr	r0, [pc, #4]	@ (8001a04 <__malloc_lock+0x8>)
 80019fe:	f7ff bee8 	b.w	80017d2 <__retarget_lock_acquire_recursive>
 8001a02:	bf00      	nop
 8001a04:	20000230 	.word	0x20000230

08001a08 <__malloc_unlock>:
 8001a08:	4801      	ldr	r0, [pc, #4]	@ (8001a10 <__malloc_unlock+0x8>)
 8001a0a:	f7ff bee3 	b.w	80017d4 <__retarget_lock_release_recursive>
 8001a0e:	bf00      	nop
 8001a10:	20000230 	.word	0x20000230

08001a14 <__ssputs_r>:
 8001a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a18:	688e      	ldr	r6, [r1, #8]
 8001a1a:	461f      	mov	r7, r3
 8001a1c:	42be      	cmp	r6, r7
 8001a1e:	680b      	ldr	r3, [r1, #0]
 8001a20:	4682      	mov	sl, r0
 8001a22:	460c      	mov	r4, r1
 8001a24:	4690      	mov	r8, r2
 8001a26:	d82d      	bhi.n	8001a84 <__ssputs_r+0x70>
 8001a28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001a2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001a30:	d026      	beq.n	8001a80 <__ssputs_r+0x6c>
 8001a32:	6965      	ldr	r5, [r4, #20]
 8001a34:	6909      	ldr	r1, [r1, #16]
 8001a36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001a3a:	eba3 0901 	sub.w	r9, r3, r1
 8001a3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001a42:	1c7b      	adds	r3, r7, #1
 8001a44:	444b      	add	r3, r9
 8001a46:	106d      	asrs	r5, r5, #1
 8001a48:	429d      	cmp	r5, r3
 8001a4a:	bf38      	it	cc
 8001a4c:	461d      	movcc	r5, r3
 8001a4e:	0553      	lsls	r3, r2, #21
 8001a50:	d527      	bpl.n	8001aa2 <__ssputs_r+0x8e>
 8001a52:	4629      	mov	r1, r5
 8001a54:	f7ff ff52 	bl	80018fc <_malloc_r>
 8001a58:	4606      	mov	r6, r0
 8001a5a:	b360      	cbz	r0, 8001ab6 <__ssputs_r+0xa2>
 8001a5c:	6921      	ldr	r1, [r4, #16]
 8001a5e:	464a      	mov	r2, r9
 8001a60:	f000 fba4 	bl	80021ac <memcpy>
 8001a64:	89a3      	ldrh	r3, [r4, #12]
 8001a66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a6e:	81a3      	strh	r3, [r4, #12]
 8001a70:	6126      	str	r6, [r4, #16]
 8001a72:	6165      	str	r5, [r4, #20]
 8001a74:	444e      	add	r6, r9
 8001a76:	eba5 0509 	sub.w	r5, r5, r9
 8001a7a:	6026      	str	r6, [r4, #0]
 8001a7c:	60a5      	str	r5, [r4, #8]
 8001a7e:	463e      	mov	r6, r7
 8001a80:	42be      	cmp	r6, r7
 8001a82:	d900      	bls.n	8001a86 <__ssputs_r+0x72>
 8001a84:	463e      	mov	r6, r7
 8001a86:	6820      	ldr	r0, [r4, #0]
 8001a88:	4632      	mov	r2, r6
 8001a8a:	4641      	mov	r1, r8
 8001a8c:	f000 fb64 	bl	8002158 <memmove>
 8001a90:	68a3      	ldr	r3, [r4, #8]
 8001a92:	1b9b      	subs	r3, r3, r6
 8001a94:	60a3      	str	r3, [r4, #8]
 8001a96:	6823      	ldr	r3, [r4, #0]
 8001a98:	4433      	add	r3, r6
 8001a9a:	6023      	str	r3, [r4, #0]
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001aa2:	462a      	mov	r2, r5
 8001aa4:	f000 fb97 	bl	80021d6 <_realloc_r>
 8001aa8:	4606      	mov	r6, r0
 8001aaa:	2800      	cmp	r0, #0
 8001aac:	d1e0      	bne.n	8001a70 <__ssputs_r+0x5c>
 8001aae:	6921      	ldr	r1, [r4, #16]
 8001ab0:	4650      	mov	r0, sl
 8001ab2:	f7ff feaf 	bl	8001814 <_free_r>
 8001ab6:	230c      	movs	r3, #12
 8001ab8:	f8ca 3000 	str.w	r3, [sl]
 8001abc:	89a3      	ldrh	r3, [r4, #12]
 8001abe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ac2:	81a3      	strh	r3, [r4, #12]
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	e7e9      	b.n	8001a9e <__ssputs_r+0x8a>
	...

08001acc <_svfiprintf_r>:
 8001acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ad0:	4698      	mov	r8, r3
 8001ad2:	898b      	ldrh	r3, [r1, #12]
 8001ad4:	061b      	lsls	r3, r3, #24
 8001ad6:	b09d      	sub	sp, #116	@ 0x74
 8001ad8:	4607      	mov	r7, r0
 8001ada:	460d      	mov	r5, r1
 8001adc:	4614      	mov	r4, r2
 8001ade:	d510      	bpl.n	8001b02 <_svfiprintf_r+0x36>
 8001ae0:	690b      	ldr	r3, [r1, #16]
 8001ae2:	b973      	cbnz	r3, 8001b02 <_svfiprintf_r+0x36>
 8001ae4:	2140      	movs	r1, #64	@ 0x40
 8001ae6:	f7ff ff09 	bl	80018fc <_malloc_r>
 8001aea:	6028      	str	r0, [r5, #0]
 8001aec:	6128      	str	r0, [r5, #16]
 8001aee:	b930      	cbnz	r0, 8001afe <_svfiprintf_r+0x32>
 8001af0:	230c      	movs	r3, #12
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	f04f 30ff 	mov.w	r0, #4294967295
 8001af8:	b01d      	add	sp, #116	@ 0x74
 8001afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001afe:	2340      	movs	r3, #64	@ 0x40
 8001b00:	616b      	str	r3, [r5, #20]
 8001b02:	2300      	movs	r3, #0
 8001b04:	9309      	str	r3, [sp, #36]	@ 0x24
 8001b06:	2320      	movs	r3, #32
 8001b08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001b0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001b10:	2330      	movs	r3, #48	@ 0x30
 8001b12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001cb0 <_svfiprintf_r+0x1e4>
 8001b16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001b1a:	f04f 0901 	mov.w	r9, #1
 8001b1e:	4623      	mov	r3, r4
 8001b20:	469a      	mov	sl, r3
 8001b22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001b26:	b10a      	cbz	r2, 8001b2c <_svfiprintf_r+0x60>
 8001b28:	2a25      	cmp	r2, #37	@ 0x25
 8001b2a:	d1f9      	bne.n	8001b20 <_svfiprintf_r+0x54>
 8001b2c:	ebba 0b04 	subs.w	fp, sl, r4
 8001b30:	d00b      	beq.n	8001b4a <_svfiprintf_r+0x7e>
 8001b32:	465b      	mov	r3, fp
 8001b34:	4622      	mov	r2, r4
 8001b36:	4629      	mov	r1, r5
 8001b38:	4638      	mov	r0, r7
 8001b3a:	f7ff ff6b 	bl	8001a14 <__ssputs_r>
 8001b3e:	3001      	adds	r0, #1
 8001b40:	f000 80a7 	beq.w	8001c92 <_svfiprintf_r+0x1c6>
 8001b44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001b46:	445a      	add	r2, fp
 8001b48:	9209      	str	r2, [sp, #36]	@ 0x24
 8001b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 809f 	beq.w	8001c92 <_svfiprintf_r+0x1c6>
 8001b54:	2300      	movs	r3, #0
 8001b56:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b5e:	f10a 0a01 	add.w	sl, sl, #1
 8001b62:	9304      	str	r3, [sp, #16]
 8001b64:	9307      	str	r3, [sp, #28]
 8001b66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001b6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8001b6c:	4654      	mov	r4, sl
 8001b6e:	2205      	movs	r2, #5
 8001b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b74:	484e      	ldr	r0, [pc, #312]	@ (8001cb0 <_svfiprintf_r+0x1e4>)
 8001b76:	f7fe fb33 	bl	80001e0 <memchr>
 8001b7a:	9a04      	ldr	r2, [sp, #16]
 8001b7c:	b9d8      	cbnz	r0, 8001bb6 <_svfiprintf_r+0xea>
 8001b7e:	06d0      	lsls	r0, r2, #27
 8001b80:	bf44      	itt	mi
 8001b82:	2320      	movmi	r3, #32
 8001b84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b88:	0711      	lsls	r1, r2, #28
 8001b8a:	bf44      	itt	mi
 8001b8c:	232b      	movmi	r3, #43	@ 0x2b
 8001b8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b92:	f89a 3000 	ldrb.w	r3, [sl]
 8001b96:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b98:	d015      	beq.n	8001bc6 <_svfiprintf_r+0xfa>
 8001b9a:	9a07      	ldr	r2, [sp, #28]
 8001b9c:	4654      	mov	r4, sl
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f04f 0c0a 	mov.w	ip, #10
 8001ba4:	4621      	mov	r1, r4
 8001ba6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001baa:	3b30      	subs	r3, #48	@ 0x30
 8001bac:	2b09      	cmp	r3, #9
 8001bae:	d94b      	bls.n	8001c48 <_svfiprintf_r+0x17c>
 8001bb0:	b1b0      	cbz	r0, 8001be0 <_svfiprintf_r+0x114>
 8001bb2:	9207      	str	r2, [sp, #28]
 8001bb4:	e014      	b.n	8001be0 <_svfiprintf_r+0x114>
 8001bb6:	eba0 0308 	sub.w	r3, r0, r8
 8001bba:	fa09 f303 	lsl.w	r3, r9, r3
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	9304      	str	r3, [sp, #16]
 8001bc2:	46a2      	mov	sl, r4
 8001bc4:	e7d2      	b.n	8001b6c <_svfiprintf_r+0xa0>
 8001bc6:	9b03      	ldr	r3, [sp, #12]
 8001bc8:	1d19      	adds	r1, r3, #4
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	9103      	str	r1, [sp, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	bfbb      	ittet	lt
 8001bd2:	425b      	neglt	r3, r3
 8001bd4:	f042 0202 	orrlt.w	r2, r2, #2
 8001bd8:	9307      	strge	r3, [sp, #28]
 8001bda:	9307      	strlt	r3, [sp, #28]
 8001bdc:	bfb8      	it	lt
 8001bde:	9204      	strlt	r2, [sp, #16]
 8001be0:	7823      	ldrb	r3, [r4, #0]
 8001be2:	2b2e      	cmp	r3, #46	@ 0x2e
 8001be4:	d10a      	bne.n	8001bfc <_svfiprintf_r+0x130>
 8001be6:	7863      	ldrb	r3, [r4, #1]
 8001be8:	2b2a      	cmp	r3, #42	@ 0x2a
 8001bea:	d132      	bne.n	8001c52 <_svfiprintf_r+0x186>
 8001bec:	9b03      	ldr	r3, [sp, #12]
 8001bee:	1d1a      	adds	r2, r3, #4
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	9203      	str	r2, [sp, #12]
 8001bf4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001bf8:	3402      	adds	r4, #2
 8001bfa:	9305      	str	r3, [sp, #20]
 8001bfc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001cc0 <_svfiprintf_r+0x1f4>
 8001c00:	7821      	ldrb	r1, [r4, #0]
 8001c02:	2203      	movs	r2, #3
 8001c04:	4650      	mov	r0, sl
 8001c06:	f7fe faeb 	bl	80001e0 <memchr>
 8001c0a:	b138      	cbz	r0, 8001c1c <_svfiprintf_r+0x150>
 8001c0c:	9b04      	ldr	r3, [sp, #16]
 8001c0e:	eba0 000a 	sub.w	r0, r0, sl
 8001c12:	2240      	movs	r2, #64	@ 0x40
 8001c14:	4082      	lsls	r2, r0
 8001c16:	4313      	orrs	r3, r2
 8001c18:	3401      	adds	r4, #1
 8001c1a:	9304      	str	r3, [sp, #16]
 8001c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c20:	4824      	ldr	r0, [pc, #144]	@ (8001cb4 <_svfiprintf_r+0x1e8>)
 8001c22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001c26:	2206      	movs	r2, #6
 8001c28:	f7fe fada 	bl	80001e0 <memchr>
 8001c2c:	2800      	cmp	r0, #0
 8001c2e:	d036      	beq.n	8001c9e <_svfiprintf_r+0x1d2>
 8001c30:	4b21      	ldr	r3, [pc, #132]	@ (8001cb8 <_svfiprintf_r+0x1ec>)
 8001c32:	bb1b      	cbnz	r3, 8001c7c <_svfiprintf_r+0x1b0>
 8001c34:	9b03      	ldr	r3, [sp, #12]
 8001c36:	3307      	adds	r3, #7
 8001c38:	f023 0307 	bic.w	r3, r3, #7
 8001c3c:	3308      	adds	r3, #8
 8001c3e:	9303      	str	r3, [sp, #12]
 8001c40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001c42:	4433      	add	r3, r6
 8001c44:	9309      	str	r3, [sp, #36]	@ 0x24
 8001c46:	e76a      	b.n	8001b1e <_svfiprintf_r+0x52>
 8001c48:	fb0c 3202 	mla	r2, ip, r2, r3
 8001c4c:	460c      	mov	r4, r1
 8001c4e:	2001      	movs	r0, #1
 8001c50:	e7a8      	b.n	8001ba4 <_svfiprintf_r+0xd8>
 8001c52:	2300      	movs	r3, #0
 8001c54:	3401      	adds	r4, #1
 8001c56:	9305      	str	r3, [sp, #20]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f04f 0c0a 	mov.w	ip, #10
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c64:	3a30      	subs	r2, #48	@ 0x30
 8001c66:	2a09      	cmp	r2, #9
 8001c68:	d903      	bls.n	8001c72 <_svfiprintf_r+0x1a6>
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0c6      	beq.n	8001bfc <_svfiprintf_r+0x130>
 8001c6e:	9105      	str	r1, [sp, #20]
 8001c70:	e7c4      	b.n	8001bfc <_svfiprintf_r+0x130>
 8001c72:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c76:	4604      	mov	r4, r0
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e7f0      	b.n	8001c5e <_svfiprintf_r+0x192>
 8001c7c:	ab03      	add	r3, sp, #12
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	462a      	mov	r2, r5
 8001c82:	4b0e      	ldr	r3, [pc, #56]	@ (8001cbc <_svfiprintf_r+0x1f0>)
 8001c84:	a904      	add	r1, sp, #16
 8001c86:	4638      	mov	r0, r7
 8001c88:	f3af 8000 	nop.w
 8001c8c:	1c42      	adds	r2, r0, #1
 8001c8e:	4606      	mov	r6, r0
 8001c90:	d1d6      	bne.n	8001c40 <_svfiprintf_r+0x174>
 8001c92:	89ab      	ldrh	r3, [r5, #12]
 8001c94:	065b      	lsls	r3, r3, #25
 8001c96:	f53f af2d 	bmi.w	8001af4 <_svfiprintf_r+0x28>
 8001c9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001c9c:	e72c      	b.n	8001af8 <_svfiprintf_r+0x2c>
 8001c9e:	ab03      	add	r3, sp, #12
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	462a      	mov	r2, r5
 8001ca4:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <_svfiprintf_r+0x1f0>)
 8001ca6:	a904      	add	r1, sp, #16
 8001ca8:	4638      	mov	r0, r7
 8001caa:	f000 f879 	bl	8001da0 <_printf_i>
 8001cae:	e7ed      	b.n	8001c8c <_svfiprintf_r+0x1c0>
 8001cb0:	08002cc3 	.word	0x08002cc3
 8001cb4:	08002ccd 	.word	0x08002ccd
 8001cb8:	00000000 	.word	0x00000000
 8001cbc:	08001a15 	.word	0x08001a15
 8001cc0:	08002cc9 	.word	0x08002cc9

08001cc4 <_printf_common>:
 8001cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cc8:	4616      	mov	r6, r2
 8001cca:	4698      	mov	r8, r3
 8001ccc:	688a      	ldr	r2, [r1, #8]
 8001cce:	690b      	ldr	r3, [r1, #16]
 8001cd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	bfb8      	it	lt
 8001cd8:	4613      	movlt	r3, r2
 8001cda:	6033      	str	r3, [r6, #0]
 8001cdc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001ce0:	4607      	mov	r7, r0
 8001ce2:	460c      	mov	r4, r1
 8001ce4:	b10a      	cbz	r2, 8001cea <_printf_common+0x26>
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	6033      	str	r3, [r6, #0]
 8001cea:	6823      	ldr	r3, [r4, #0]
 8001cec:	0699      	lsls	r1, r3, #26
 8001cee:	bf42      	ittt	mi
 8001cf0:	6833      	ldrmi	r3, [r6, #0]
 8001cf2:	3302      	addmi	r3, #2
 8001cf4:	6033      	strmi	r3, [r6, #0]
 8001cf6:	6825      	ldr	r5, [r4, #0]
 8001cf8:	f015 0506 	ands.w	r5, r5, #6
 8001cfc:	d106      	bne.n	8001d0c <_printf_common+0x48>
 8001cfe:	f104 0a19 	add.w	sl, r4, #25
 8001d02:	68e3      	ldr	r3, [r4, #12]
 8001d04:	6832      	ldr	r2, [r6, #0]
 8001d06:	1a9b      	subs	r3, r3, r2
 8001d08:	42ab      	cmp	r3, r5
 8001d0a:	dc26      	bgt.n	8001d5a <_printf_common+0x96>
 8001d0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001d10:	6822      	ldr	r2, [r4, #0]
 8001d12:	3b00      	subs	r3, #0
 8001d14:	bf18      	it	ne
 8001d16:	2301      	movne	r3, #1
 8001d18:	0692      	lsls	r2, r2, #26
 8001d1a:	d42b      	bmi.n	8001d74 <_printf_common+0xb0>
 8001d1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001d20:	4641      	mov	r1, r8
 8001d22:	4638      	mov	r0, r7
 8001d24:	47c8      	blx	r9
 8001d26:	3001      	adds	r0, #1
 8001d28:	d01e      	beq.n	8001d68 <_printf_common+0xa4>
 8001d2a:	6823      	ldr	r3, [r4, #0]
 8001d2c:	6922      	ldr	r2, [r4, #16]
 8001d2e:	f003 0306 	and.w	r3, r3, #6
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	bf02      	ittt	eq
 8001d36:	68e5      	ldreq	r5, [r4, #12]
 8001d38:	6833      	ldreq	r3, [r6, #0]
 8001d3a:	1aed      	subeq	r5, r5, r3
 8001d3c:	68a3      	ldr	r3, [r4, #8]
 8001d3e:	bf0c      	ite	eq
 8001d40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d44:	2500      	movne	r5, #0
 8001d46:	4293      	cmp	r3, r2
 8001d48:	bfc4      	itt	gt
 8001d4a:	1a9b      	subgt	r3, r3, r2
 8001d4c:	18ed      	addgt	r5, r5, r3
 8001d4e:	2600      	movs	r6, #0
 8001d50:	341a      	adds	r4, #26
 8001d52:	42b5      	cmp	r5, r6
 8001d54:	d11a      	bne.n	8001d8c <_printf_common+0xc8>
 8001d56:	2000      	movs	r0, #0
 8001d58:	e008      	b.n	8001d6c <_printf_common+0xa8>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	4652      	mov	r2, sl
 8001d5e:	4641      	mov	r1, r8
 8001d60:	4638      	mov	r0, r7
 8001d62:	47c8      	blx	r9
 8001d64:	3001      	adds	r0, #1
 8001d66:	d103      	bne.n	8001d70 <_printf_common+0xac>
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d70:	3501      	adds	r5, #1
 8001d72:	e7c6      	b.n	8001d02 <_printf_common+0x3e>
 8001d74:	18e1      	adds	r1, r4, r3
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	2030      	movs	r0, #48	@ 0x30
 8001d7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001d7e:	4422      	add	r2, r4
 8001d80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001d84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001d88:	3302      	adds	r3, #2
 8001d8a:	e7c7      	b.n	8001d1c <_printf_common+0x58>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	4622      	mov	r2, r4
 8001d90:	4641      	mov	r1, r8
 8001d92:	4638      	mov	r0, r7
 8001d94:	47c8      	blx	r9
 8001d96:	3001      	adds	r0, #1
 8001d98:	d0e6      	beq.n	8001d68 <_printf_common+0xa4>
 8001d9a:	3601      	adds	r6, #1
 8001d9c:	e7d9      	b.n	8001d52 <_printf_common+0x8e>
	...

08001da0 <_printf_i>:
 8001da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001da4:	7e0f      	ldrb	r7, [r1, #24]
 8001da6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001da8:	2f78      	cmp	r7, #120	@ 0x78
 8001daa:	4691      	mov	r9, r2
 8001dac:	4680      	mov	r8, r0
 8001dae:	460c      	mov	r4, r1
 8001db0:	469a      	mov	sl, r3
 8001db2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001db6:	d807      	bhi.n	8001dc8 <_printf_i+0x28>
 8001db8:	2f62      	cmp	r7, #98	@ 0x62
 8001dba:	d80a      	bhi.n	8001dd2 <_printf_i+0x32>
 8001dbc:	2f00      	cmp	r7, #0
 8001dbe:	f000 80d1 	beq.w	8001f64 <_printf_i+0x1c4>
 8001dc2:	2f58      	cmp	r7, #88	@ 0x58
 8001dc4:	f000 80b8 	beq.w	8001f38 <_printf_i+0x198>
 8001dc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001dcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001dd0:	e03a      	b.n	8001e48 <_printf_i+0xa8>
 8001dd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001dd6:	2b15      	cmp	r3, #21
 8001dd8:	d8f6      	bhi.n	8001dc8 <_printf_i+0x28>
 8001dda:	a101      	add	r1, pc, #4	@ (adr r1, 8001de0 <_printf_i+0x40>)
 8001ddc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001de0:	08001e39 	.word	0x08001e39
 8001de4:	08001e4d 	.word	0x08001e4d
 8001de8:	08001dc9 	.word	0x08001dc9
 8001dec:	08001dc9 	.word	0x08001dc9
 8001df0:	08001dc9 	.word	0x08001dc9
 8001df4:	08001dc9 	.word	0x08001dc9
 8001df8:	08001e4d 	.word	0x08001e4d
 8001dfc:	08001dc9 	.word	0x08001dc9
 8001e00:	08001dc9 	.word	0x08001dc9
 8001e04:	08001dc9 	.word	0x08001dc9
 8001e08:	08001dc9 	.word	0x08001dc9
 8001e0c:	08001f4b 	.word	0x08001f4b
 8001e10:	08001e77 	.word	0x08001e77
 8001e14:	08001f05 	.word	0x08001f05
 8001e18:	08001dc9 	.word	0x08001dc9
 8001e1c:	08001dc9 	.word	0x08001dc9
 8001e20:	08001f6d 	.word	0x08001f6d
 8001e24:	08001dc9 	.word	0x08001dc9
 8001e28:	08001e77 	.word	0x08001e77
 8001e2c:	08001dc9 	.word	0x08001dc9
 8001e30:	08001dc9 	.word	0x08001dc9
 8001e34:	08001f0d 	.word	0x08001f0d
 8001e38:	6833      	ldr	r3, [r6, #0]
 8001e3a:	1d1a      	adds	r2, r3, #4
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6032      	str	r2, [r6, #0]
 8001e40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001e44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e09c      	b.n	8001f86 <_printf_i+0x1e6>
 8001e4c:	6833      	ldr	r3, [r6, #0]
 8001e4e:	6820      	ldr	r0, [r4, #0]
 8001e50:	1d19      	adds	r1, r3, #4
 8001e52:	6031      	str	r1, [r6, #0]
 8001e54:	0606      	lsls	r6, r0, #24
 8001e56:	d501      	bpl.n	8001e5c <_printf_i+0xbc>
 8001e58:	681d      	ldr	r5, [r3, #0]
 8001e5a:	e003      	b.n	8001e64 <_printf_i+0xc4>
 8001e5c:	0645      	lsls	r5, r0, #25
 8001e5e:	d5fb      	bpl.n	8001e58 <_printf_i+0xb8>
 8001e60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001e64:	2d00      	cmp	r5, #0
 8001e66:	da03      	bge.n	8001e70 <_printf_i+0xd0>
 8001e68:	232d      	movs	r3, #45	@ 0x2d
 8001e6a:	426d      	negs	r5, r5
 8001e6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e70:	4858      	ldr	r0, [pc, #352]	@ (8001fd4 <_printf_i+0x234>)
 8001e72:	230a      	movs	r3, #10
 8001e74:	e011      	b.n	8001e9a <_printf_i+0xfa>
 8001e76:	6821      	ldr	r1, [r4, #0]
 8001e78:	6833      	ldr	r3, [r6, #0]
 8001e7a:	0608      	lsls	r0, r1, #24
 8001e7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001e80:	d402      	bmi.n	8001e88 <_printf_i+0xe8>
 8001e82:	0649      	lsls	r1, r1, #25
 8001e84:	bf48      	it	mi
 8001e86:	b2ad      	uxthmi	r5, r5
 8001e88:	2f6f      	cmp	r7, #111	@ 0x6f
 8001e8a:	4852      	ldr	r0, [pc, #328]	@ (8001fd4 <_printf_i+0x234>)
 8001e8c:	6033      	str	r3, [r6, #0]
 8001e8e:	bf14      	ite	ne
 8001e90:	230a      	movne	r3, #10
 8001e92:	2308      	moveq	r3, #8
 8001e94:	2100      	movs	r1, #0
 8001e96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001e9a:	6866      	ldr	r6, [r4, #4]
 8001e9c:	60a6      	str	r6, [r4, #8]
 8001e9e:	2e00      	cmp	r6, #0
 8001ea0:	db05      	blt.n	8001eae <_printf_i+0x10e>
 8001ea2:	6821      	ldr	r1, [r4, #0]
 8001ea4:	432e      	orrs	r6, r5
 8001ea6:	f021 0104 	bic.w	r1, r1, #4
 8001eaa:	6021      	str	r1, [r4, #0]
 8001eac:	d04b      	beq.n	8001f46 <_printf_i+0x1a6>
 8001eae:	4616      	mov	r6, r2
 8001eb0:	fbb5 f1f3 	udiv	r1, r5, r3
 8001eb4:	fb03 5711 	mls	r7, r3, r1, r5
 8001eb8:	5dc7      	ldrb	r7, [r0, r7]
 8001eba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001ebe:	462f      	mov	r7, r5
 8001ec0:	42bb      	cmp	r3, r7
 8001ec2:	460d      	mov	r5, r1
 8001ec4:	d9f4      	bls.n	8001eb0 <_printf_i+0x110>
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d10b      	bne.n	8001ee2 <_printf_i+0x142>
 8001eca:	6823      	ldr	r3, [r4, #0]
 8001ecc:	07df      	lsls	r7, r3, #31
 8001ece:	d508      	bpl.n	8001ee2 <_printf_i+0x142>
 8001ed0:	6923      	ldr	r3, [r4, #16]
 8001ed2:	6861      	ldr	r1, [r4, #4]
 8001ed4:	4299      	cmp	r1, r3
 8001ed6:	bfde      	ittt	le
 8001ed8:	2330      	movle	r3, #48	@ 0x30
 8001eda:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001ede:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001ee2:	1b92      	subs	r2, r2, r6
 8001ee4:	6122      	str	r2, [r4, #16]
 8001ee6:	f8cd a000 	str.w	sl, [sp]
 8001eea:	464b      	mov	r3, r9
 8001eec:	aa03      	add	r2, sp, #12
 8001eee:	4621      	mov	r1, r4
 8001ef0:	4640      	mov	r0, r8
 8001ef2:	f7ff fee7 	bl	8001cc4 <_printf_common>
 8001ef6:	3001      	adds	r0, #1
 8001ef8:	d14a      	bne.n	8001f90 <_printf_i+0x1f0>
 8001efa:	f04f 30ff 	mov.w	r0, #4294967295
 8001efe:	b004      	add	sp, #16
 8001f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f04:	6823      	ldr	r3, [r4, #0]
 8001f06:	f043 0320 	orr.w	r3, r3, #32
 8001f0a:	6023      	str	r3, [r4, #0]
 8001f0c:	4832      	ldr	r0, [pc, #200]	@ (8001fd8 <_printf_i+0x238>)
 8001f0e:	2778      	movs	r7, #120	@ 0x78
 8001f10:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001f14:	6823      	ldr	r3, [r4, #0]
 8001f16:	6831      	ldr	r1, [r6, #0]
 8001f18:	061f      	lsls	r7, r3, #24
 8001f1a:	f851 5b04 	ldr.w	r5, [r1], #4
 8001f1e:	d402      	bmi.n	8001f26 <_printf_i+0x186>
 8001f20:	065f      	lsls	r7, r3, #25
 8001f22:	bf48      	it	mi
 8001f24:	b2ad      	uxthmi	r5, r5
 8001f26:	6031      	str	r1, [r6, #0]
 8001f28:	07d9      	lsls	r1, r3, #31
 8001f2a:	bf44      	itt	mi
 8001f2c:	f043 0320 	orrmi.w	r3, r3, #32
 8001f30:	6023      	strmi	r3, [r4, #0]
 8001f32:	b11d      	cbz	r5, 8001f3c <_printf_i+0x19c>
 8001f34:	2310      	movs	r3, #16
 8001f36:	e7ad      	b.n	8001e94 <_printf_i+0xf4>
 8001f38:	4826      	ldr	r0, [pc, #152]	@ (8001fd4 <_printf_i+0x234>)
 8001f3a:	e7e9      	b.n	8001f10 <_printf_i+0x170>
 8001f3c:	6823      	ldr	r3, [r4, #0]
 8001f3e:	f023 0320 	bic.w	r3, r3, #32
 8001f42:	6023      	str	r3, [r4, #0]
 8001f44:	e7f6      	b.n	8001f34 <_printf_i+0x194>
 8001f46:	4616      	mov	r6, r2
 8001f48:	e7bd      	b.n	8001ec6 <_printf_i+0x126>
 8001f4a:	6833      	ldr	r3, [r6, #0]
 8001f4c:	6825      	ldr	r5, [r4, #0]
 8001f4e:	6961      	ldr	r1, [r4, #20]
 8001f50:	1d18      	adds	r0, r3, #4
 8001f52:	6030      	str	r0, [r6, #0]
 8001f54:	062e      	lsls	r6, r5, #24
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	d501      	bpl.n	8001f5e <_printf_i+0x1be>
 8001f5a:	6019      	str	r1, [r3, #0]
 8001f5c:	e002      	b.n	8001f64 <_printf_i+0x1c4>
 8001f5e:	0668      	lsls	r0, r5, #25
 8001f60:	d5fb      	bpl.n	8001f5a <_printf_i+0x1ba>
 8001f62:	8019      	strh	r1, [r3, #0]
 8001f64:	2300      	movs	r3, #0
 8001f66:	6123      	str	r3, [r4, #16]
 8001f68:	4616      	mov	r6, r2
 8001f6a:	e7bc      	b.n	8001ee6 <_printf_i+0x146>
 8001f6c:	6833      	ldr	r3, [r6, #0]
 8001f6e:	1d1a      	adds	r2, r3, #4
 8001f70:	6032      	str	r2, [r6, #0]
 8001f72:	681e      	ldr	r6, [r3, #0]
 8001f74:	6862      	ldr	r2, [r4, #4]
 8001f76:	2100      	movs	r1, #0
 8001f78:	4630      	mov	r0, r6
 8001f7a:	f7fe f931 	bl	80001e0 <memchr>
 8001f7e:	b108      	cbz	r0, 8001f84 <_printf_i+0x1e4>
 8001f80:	1b80      	subs	r0, r0, r6
 8001f82:	6060      	str	r0, [r4, #4]
 8001f84:	6863      	ldr	r3, [r4, #4]
 8001f86:	6123      	str	r3, [r4, #16]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f8e:	e7aa      	b.n	8001ee6 <_printf_i+0x146>
 8001f90:	6923      	ldr	r3, [r4, #16]
 8001f92:	4632      	mov	r2, r6
 8001f94:	4649      	mov	r1, r9
 8001f96:	4640      	mov	r0, r8
 8001f98:	47d0      	blx	sl
 8001f9a:	3001      	adds	r0, #1
 8001f9c:	d0ad      	beq.n	8001efa <_printf_i+0x15a>
 8001f9e:	6823      	ldr	r3, [r4, #0]
 8001fa0:	079b      	lsls	r3, r3, #30
 8001fa2:	d413      	bmi.n	8001fcc <_printf_i+0x22c>
 8001fa4:	68e0      	ldr	r0, [r4, #12]
 8001fa6:	9b03      	ldr	r3, [sp, #12]
 8001fa8:	4298      	cmp	r0, r3
 8001faa:	bfb8      	it	lt
 8001fac:	4618      	movlt	r0, r3
 8001fae:	e7a6      	b.n	8001efe <_printf_i+0x15e>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	4632      	mov	r2, r6
 8001fb4:	4649      	mov	r1, r9
 8001fb6:	4640      	mov	r0, r8
 8001fb8:	47d0      	blx	sl
 8001fba:	3001      	adds	r0, #1
 8001fbc:	d09d      	beq.n	8001efa <_printf_i+0x15a>
 8001fbe:	3501      	adds	r5, #1
 8001fc0:	68e3      	ldr	r3, [r4, #12]
 8001fc2:	9903      	ldr	r1, [sp, #12]
 8001fc4:	1a5b      	subs	r3, r3, r1
 8001fc6:	42ab      	cmp	r3, r5
 8001fc8:	dcf2      	bgt.n	8001fb0 <_printf_i+0x210>
 8001fca:	e7eb      	b.n	8001fa4 <_printf_i+0x204>
 8001fcc:	2500      	movs	r5, #0
 8001fce:	f104 0619 	add.w	r6, r4, #25
 8001fd2:	e7f5      	b.n	8001fc0 <_printf_i+0x220>
 8001fd4:	08002cd4 	.word	0x08002cd4
 8001fd8:	08002ce5 	.word	0x08002ce5

08001fdc <__sflush_r>:
 8001fdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fe4:	0716      	lsls	r6, r2, #28
 8001fe6:	4605      	mov	r5, r0
 8001fe8:	460c      	mov	r4, r1
 8001fea:	d454      	bmi.n	8002096 <__sflush_r+0xba>
 8001fec:	684b      	ldr	r3, [r1, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	dc02      	bgt.n	8001ff8 <__sflush_r+0x1c>
 8001ff2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	dd48      	ble.n	800208a <__sflush_r+0xae>
 8001ff8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001ffa:	2e00      	cmp	r6, #0
 8001ffc:	d045      	beq.n	800208a <__sflush_r+0xae>
 8001ffe:	2300      	movs	r3, #0
 8002000:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002004:	682f      	ldr	r7, [r5, #0]
 8002006:	6a21      	ldr	r1, [r4, #32]
 8002008:	602b      	str	r3, [r5, #0]
 800200a:	d030      	beq.n	800206e <__sflush_r+0x92>
 800200c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800200e:	89a3      	ldrh	r3, [r4, #12]
 8002010:	0759      	lsls	r1, r3, #29
 8002012:	d505      	bpl.n	8002020 <__sflush_r+0x44>
 8002014:	6863      	ldr	r3, [r4, #4]
 8002016:	1ad2      	subs	r2, r2, r3
 8002018:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800201a:	b10b      	cbz	r3, 8002020 <__sflush_r+0x44>
 800201c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800201e:	1ad2      	subs	r2, r2, r3
 8002020:	2300      	movs	r3, #0
 8002022:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002024:	6a21      	ldr	r1, [r4, #32]
 8002026:	4628      	mov	r0, r5
 8002028:	47b0      	blx	r6
 800202a:	1c43      	adds	r3, r0, #1
 800202c:	89a3      	ldrh	r3, [r4, #12]
 800202e:	d106      	bne.n	800203e <__sflush_r+0x62>
 8002030:	6829      	ldr	r1, [r5, #0]
 8002032:	291d      	cmp	r1, #29
 8002034:	d82b      	bhi.n	800208e <__sflush_r+0xb2>
 8002036:	4a2a      	ldr	r2, [pc, #168]	@ (80020e0 <__sflush_r+0x104>)
 8002038:	40ca      	lsrs	r2, r1
 800203a:	07d6      	lsls	r6, r2, #31
 800203c:	d527      	bpl.n	800208e <__sflush_r+0xb2>
 800203e:	2200      	movs	r2, #0
 8002040:	6062      	str	r2, [r4, #4]
 8002042:	04d9      	lsls	r1, r3, #19
 8002044:	6922      	ldr	r2, [r4, #16]
 8002046:	6022      	str	r2, [r4, #0]
 8002048:	d504      	bpl.n	8002054 <__sflush_r+0x78>
 800204a:	1c42      	adds	r2, r0, #1
 800204c:	d101      	bne.n	8002052 <__sflush_r+0x76>
 800204e:	682b      	ldr	r3, [r5, #0]
 8002050:	b903      	cbnz	r3, 8002054 <__sflush_r+0x78>
 8002052:	6560      	str	r0, [r4, #84]	@ 0x54
 8002054:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002056:	602f      	str	r7, [r5, #0]
 8002058:	b1b9      	cbz	r1, 800208a <__sflush_r+0xae>
 800205a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800205e:	4299      	cmp	r1, r3
 8002060:	d002      	beq.n	8002068 <__sflush_r+0x8c>
 8002062:	4628      	mov	r0, r5
 8002064:	f7ff fbd6 	bl	8001814 <_free_r>
 8002068:	2300      	movs	r3, #0
 800206a:	6363      	str	r3, [r4, #52]	@ 0x34
 800206c:	e00d      	b.n	800208a <__sflush_r+0xae>
 800206e:	2301      	movs	r3, #1
 8002070:	4628      	mov	r0, r5
 8002072:	47b0      	blx	r6
 8002074:	4602      	mov	r2, r0
 8002076:	1c50      	adds	r0, r2, #1
 8002078:	d1c9      	bne.n	800200e <__sflush_r+0x32>
 800207a:	682b      	ldr	r3, [r5, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0c6      	beq.n	800200e <__sflush_r+0x32>
 8002080:	2b1d      	cmp	r3, #29
 8002082:	d001      	beq.n	8002088 <__sflush_r+0xac>
 8002084:	2b16      	cmp	r3, #22
 8002086:	d11e      	bne.n	80020c6 <__sflush_r+0xea>
 8002088:	602f      	str	r7, [r5, #0]
 800208a:	2000      	movs	r0, #0
 800208c:	e022      	b.n	80020d4 <__sflush_r+0xf8>
 800208e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002092:	b21b      	sxth	r3, r3
 8002094:	e01b      	b.n	80020ce <__sflush_r+0xf2>
 8002096:	690f      	ldr	r7, [r1, #16]
 8002098:	2f00      	cmp	r7, #0
 800209a:	d0f6      	beq.n	800208a <__sflush_r+0xae>
 800209c:	0793      	lsls	r3, r2, #30
 800209e:	680e      	ldr	r6, [r1, #0]
 80020a0:	bf08      	it	eq
 80020a2:	694b      	ldreq	r3, [r1, #20]
 80020a4:	600f      	str	r7, [r1, #0]
 80020a6:	bf18      	it	ne
 80020a8:	2300      	movne	r3, #0
 80020aa:	eba6 0807 	sub.w	r8, r6, r7
 80020ae:	608b      	str	r3, [r1, #8]
 80020b0:	f1b8 0f00 	cmp.w	r8, #0
 80020b4:	dde9      	ble.n	800208a <__sflush_r+0xae>
 80020b6:	6a21      	ldr	r1, [r4, #32]
 80020b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80020ba:	4643      	mov	r3, r8
 80020bc:	463a      	mov	r2, r7
 80020be:	4628      	mov	r0, r5
 80020c0:	47b0      	blx	r6
 80020c2:	2800      	cmp	r0, #0
 80020c4:	dc08      	bgt.n	80020d8 <__sflush_r+0xfc>
 80020c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020ce:	81a3      	strh	r3, [r4, #12]
 80020d0:	f04f 30ff 	mov.w	r0, #4294967295
 80020d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020d8:	4407      	add	r7, r0
 80020da:	eba8 0800 	sub.w	r8, r8, r0
 80020de:	e7e7      	b.n	80020b0 <__sflush_r+0xd4>
 80020e0:	20400001 	.word	0x20400001

080020e4 <_fflush_r>:
 80020e4:	b538      	push	{r3, r4, r5, lr}
 80020e6:	690b      	ldr	r3, [r1, #16]
 80020e8:	4605      	mov	r5, r0
 80020ea:	460c      	mov	r4, r1
 80020ec:	b913      	cbnz	r3, 80020f4 <_fflush_r+0x10>
 80020ee:	2500      	movs	r5, #0
 80020f0:	4628      	mov	r0, r5
 80020f2:	bd38      	pop	{r3, r4, r5, pc}
 80020f4:	b118      	cbz	r0, 80020fe <_fflush_r+0x1a>
 80020f6:	6a03      	ldr	r3, [r0, #32]
 80020f8:	b90b      	cbnz	r3, 80020fe <_fflush_r+0x1a>
 80020fa:	f7ff fa3b 	bl	8001574 <__sinit>
 80020fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f3      	beq.n	80020ee <_fflush_r+0xa>
 8002106:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002108:	07d0      	lsls	r0, r2, #31
 800210a:	d404      	bmi.n	8002116 <_fflush_r+0x32>
 800210c:	0599      	lsls	r1, r3, #22
 800210e:	d402      	bmi.n	8002116 <_fflush_r+0x32>
 8002110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002112:	f7ff fb5e 	bl	80017d2 <__retarget_lock_acquire_recursive>
 8002116:	4628      	mov	r0, r5
 8002118:	4621      	mov	r1, r4
 800211a:	f7ff ff5f 	bl	8001fdc <__sflush_r>
 800211e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002120:	07da      	lsls	r2, r3, #31
 8002122:	4605      	mov	r5, r0
 8002124:	d4e4      	bmi.n	80020f0 <_fflush_r+0xc>
 8002126:	89a3      	ldrh	r3, [r4, #12]
 8002128:	059b      	lsls	r3, r3, #22
 800212a:	d4e1      	bmi.n	80020f0 <_fflush_r+0xc>
 800212c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800212e:	f7ff fb51 	bl	80017d4 <__retarget_lock_release_recursive>
 8002132:	e7dd      	b.n	80020f0 <_fflush_r+0xc>

08002134 <fiprintf>:
 8002134:	b40e      	push	{r1, r2, r3}
 8002136:	b503      	push	{r0, r1, lr}
 8002138:	4601      	mov	r1, r0
 800213a:	ab03      	add	r3, sp, #12
 800213c:	4805      	ldr	r0, [pc, #20]	@ (8002154 <fiprintf+0x20>)
 800213e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002142:	6800      	ldr	r0, [r0, #0]
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	f000 f89d 	bl	8002284 <_vfiprintf_r>
 800214a:	b002      	add	sp, #8
 800214c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002150:	b003      	add	sp, #12
 8002152:	4770      	bx	lr
 8002154:	20000014 	.word	0x20000014

08002158 <memmove>:
 8002158:	4288      	cmp	r0, r1
 800215a:	b510      	push	{r4, lr}
 800215c:	eb01 0402 	add.w	r4, r1, r2
 8002160:	d902      	bls.n	8002168 <memmove+0x10>
 8002162:	4284      	cmp	r4, r0
 8002164:	4623      	mov	r3, r4
 8002166:	d807      	bhi.n	8002178 <memmove+0x20>
 8002168:	1e43      	subs	r3, r0, #1
 800216a:	42a1      	cmp	r1, r4
 800216c:	d008      	beq.n	8002180 <memmove+0x28>
 800216e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002172:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002176:	e7f8      	b.n	800216a <memmove+0x12>
 8002178:	4402      	add	r2, r0
 800217a:	4601      	mov	r1, r0
 800217c:	428a      	cmp	r2, r1
 800217e:	d100      	bne.n	8002182 <memmove+0x2a>
 8002180:	bd10      	pop	{r4, pc}
 8002182:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002186:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800218a:	e7f7      	b.n	800217c <memmove+0x24>

0800218c <_sbrk_r>:
 800218c:	b538      	push	{r3, r4, r5, lr}
 800218e:	4d06      	ldr	r5, [pc, #24]	@ (80021a8 <_sbrk_r+0x1c>)
 8002190:	2300      	movs	r3, #0
 8002192:	4604      	mov	r4, r0
 8002194:	4608      	mov	r0, r1
 8002196:	602b      	str	r3, [r5, #0]
 8002198:	f7ff f894 	bl	80012c4 <_sbrk>
 800219c:	1c43      	adds	r3, r0, #1
 800219e:	d102      	bne.n	80021a6 <_sbrk_r+0x1a>
 80021a0:	682b      	ldr	r3, [r5, #0]
 80021a2:	b103      	cbz	r3, 80021a6 <_sbrk_r+0x1a>
 80021a4:	6023      	str	r3, [r4, #0]
 80021a6:	bd38      	pop	{r3, r4, r5, pc}
 80021a8:	2000022c 	.word	0x2000022c

080021ac <memcpy>:
 80021ac:	440a      	add	r2, r1
 80021ae:	4291      	cmp	r1, r2
 80021b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80021b4:	d100      	bne.n	80021b8 <memcpy+0xc>
 80021b6:	4770      	bx	lr
 80021b8:	b510      	push	{r4, lr}
 80021ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80021c2:	4291      	cmp	r1, r2
 80021c4:	d1f9      	bne.n	80021ba <memcpy+0xe>
 80021c6:	bd10      	pop	{r4, pc}

080021c8 <abort>:
 80021c8:	b508      	push	{r3, lr}
 80021ca:	2006      	movs	r0, #6
 80021cc:	f000 fa2e 	bl	800262c <raise>
 80021d0:	2001      	movs	r0, #1
 80021d2:	f7fe ffff 	bl	80011d4 <_exit>

080021d6 <_realloc_r>:
 80021d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021da:	4607      	mov	r7, r0
 80021dc:	4614      	mov	r4, r2
 80021de:	460d      	mov	r5, r1
 80021e0:	b921      	cbnz	r1, 80021ec <_realloc_r+0x16>
 80021e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021e6:	4611      	mov	r1, r2
 80021e8:	f7ff bb88 	b.w	80018fc <_malloc_r>
 80021ec:	b92a      	cbnz	r2, 80021fa <_realloc_r+0x24>
 80021ee:	f7ff fb11 	bl	8001814 <_free_r>
 80021f2:	4625      	mov	r5, r4
 80021f4:	4628      	mov	r0, r5
 80021f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021fa:	f000 fa33 	bl	8002664 <_malloc_usable_size_r>
 80021fe:	4284      	cmp	r4, r0
 8002200:	4606      	mov	r6, r0
 8002202:	d802      	bhi.n	800220a <_realloc_r+0x34>
 8002204:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002208:	d8f4      	bhi.n	80021f4 <_realloc_r+0x1e>
 800220a:	4621      	mov	r1, r4
 800220c:	4638      	mov	r0, r7
 800220e:	f7ff fb75 	bl	80018fc <_malloc_r>
 8002212:	4680      	mov	r8, r0
 8002214:	b908      	cbnz	r0, 800221a <_realloc_r+0x44>
 8002216:	4645      	mov	r5, r8
 8002218:	e7ec      	b.n	80021f4 <_realloc_r+0x1e>
 800221a:	42b4      	cmp	r4, r6
 800221c:	4622      	mov	r2, r4
 800221e:	4629      	mov	r1, r5
 8002220:	bf28      	it	cs
 8002222:	4632      	movcs	r2, r6
 8002224:	f7ff ffc2 	bl	80021ac <memcpy>
 8002228:	4629      	mov	r1, r5
 800222a:	4638      	mov	r0, r7
 800222c:	f7ff faf2 	bl	8001814 <_free_r>
 8002230:	e7f1      	b.n	8002216 <_realloc_r+0x40>

08002232 <__sfputc_r>:
 8002232:	6893      	ldr	r3, [r2, #8]
 8002234:	3b01      	subs	r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	b410      	push	{r4}
 800223a:	6093      	str	r3, [r2, #8]
 800223c:	da08      	bge.n	8002250 <__sfputc_r+0x1e>
 800223e:	6994      	ldr	r4, [r2, #24]
 8002240:	42a3      	cmp	r3, r4
 8002242:	db01      	blt.n	8002248 <__sfputc_r+0x16>
 8002244:	290a      	cmp	r1, #10
 8002246:	d103      	bne.n	8002250 <__sfputc_r+0x1e>
 8002248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800224c:	f000 b932 	b.w	80024b4 <__swbuf_r>
 8002250:	6813      	ldr	r3, [r2, #0]
 8002252:	1c58      	adds	r0, r3, #1
 8002254:	6010      	str	r0, [r2, #0]
 8002256:	7019      	strb	r1, [r3, #0]
 8002258:	4608      	mov	r0, r1
 800225a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800225e:	4770      	bx	lr

08002260 <__sfputs_r>:
 8002260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002262:	4606      	mov	r6, r0
 8002264:	460f      	mov	r7, r1
 8002266:	4614      	mov	r4, r2
 8002268:	18d5      	adds	r5, r2, r3
 800226a:	42ac      	cmp	r4, r5
 800226c:	d101      	bne.n	8002272 <__sfputs_r+0x12>
 800226e:	2000      	movs	r0, #0
 8002270:	e007      	b.n	8002282 <__sfputs_r+0x22>
 8002272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002276:	463a      	mov	r2, r7
 8002278:	4630      	mov	r0, r6
 800227a:	f7ff ffda 	bl	8002232 <__sfputc_r>
 800227e:	1c43      	adds	r3, r0, #1
 8002280:	d1f3      	bne.n	800226a <__sfputs_r+0xa>
 8002282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002284 <_vfiprintf_r>:
 8002284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002288:	460d      	mov	r5, r1
 800228a:	b09d      	sub	sp, #116	@ 0x74
 800228c:	4614      	mov	r4, r2
 800228e:	4698      	mov	r8, r3
 8002290:	4606      	mov	r6, r0
 8002292:	b118      	cbz	r0, 800229c <_vfiprintf_r+0x18>
 8002294:	6a03      	ldr	r3, [r0, #32]
 8002296:	b90b      	cbnz	r3, 800229c <_vfiprintf_r+0x18>
 8002298:	f7ff f96c 	bl	8001574 <__sinit>
 800229c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800229e:	07d9      	lsls	r1, r3, #31
 80022a0:	d405      	bmi.n	80022ae <_vfiprintf_r+0x2a>
 80022a2:	89ab      	ldrh	r3, [r5, #12]
 80022a4:	059a      	lsls	r2, r3, #22
 80022a6:	d402      	bmi.n	80022ae <_vfiprintf_r+0x2a>
 80022a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80022aa:	f7ff fa92 	bl	80017d2 <__retarget_lock_acquire_recursive>
 80022ae:	89ab      	ldrh	r3, [r5, #12]
 80022b0:	071b      	lsls	r3, r3, #28
 80022b2:	d501      	bpl.n	80022b8 <_vfiprintf_r+0x34>
 80022b4:	692b      	ldr	r3, [r5, #16]
 80022b6:	b99b      	cbnz	r3, 80022e0 <_vfiprintf_r+0x5c>
 80022b8:	4629      	mov	r1, r5
 80022ba:	4630      	mov	r0, r6
 80022bc:	f000 f938 	bl	8002530 <__swsetup_r>
 80022c0:	b170      	cbz	r0, 80022e0 <_vfiprintf_r+0x5c>
 80022c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80022c4:	07dc      	lsls	r4, r3, #31
 80022c6:	d504      	bpl.n	80022d2 <_vfiprintf_r+0x4e>
 80022c8:	f04f 30ff 	mov.w	r0, #4294967295
 80022cc:	b01d      	add	sp, #116	@ 0x74
 80022ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022d2:	89ab      	ldrh	r3, [r5, #12]
 80022d4:	0598      	lsls	r0, r3, #22
 80022d6:	d4f7      	bmi.n	80022c8 <_vfiprintf_r+0x44>
 80022d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80022da:	f7ff fa7b 	bl	80017d4 <__retarget_lock_release_recursive>
 80022de:	e7f3      	b.n	80022c8 <_vfiprintf_r+0x44>
 80022e0:	2300      	movs	r3, #0
 80022e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80022e4:	2320      	movs	r3, #32
 80022e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80022ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80022ee:	2330      	movs	r3, #48	@ 0x30
 80022f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80024a0 <_vfiprintf_r+0x21c>
 80022f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80022f8:	f04f 0901 	mov.w	r9, #1
 80022fc:	4623      	mov	r3, r4
 80022fe:	469a      	mov	sl, r3
 8002300:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002304:	b10a      	cbz	r2, 800230a <_vfiprintf_r+0x86>
 8002306:	2a25      	cmp	r2, #37	@ 0x25
 8002308:	d1f9      	bne.n	80022fe <_vfiprintf_r+0x7a>
 800230a:	ebba 0b04 	subs.w	fp, sl, r4
 800230e:	d00b      	beq.n	8002328 <_vfiprintf_r+0xa4>
 8002310:	465b      	mov	r3, fp
 8002312:	4622      	mov	r2, r4
 8002314:	4629      	mov	r1, r5
 8002316:	4630      	mov	r0, r6
 8002318:	f7ff ffa2 	bl	8002260 <__sfputs_r>
 800231c:	3001      	adds	r0, #1
 800231e:	f000 80a7 	beq.w	8002470 <_vfiprintf_r+0x1ec>
 8002322:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002324:	445a      	add	r2, fp
 8002326:	9209      	str	r2, [sp, #36]	@ 0x24
 8002328:	f89a 3000 	ldrb.w	r3, [sl]
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 809f 	beq.w	8002470 <_vfiprintf_r+0x1ec>
 8002332:	2300      	movs	r3, #0
 8002334:	f04f 32ff 	mov.w	r2, #4294967295
 8002338:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800233c:	f10a 0a01 	add.w	sl, sl, #1
 8002340:	9304      	str	r3, [sp, #16]
 8002342:	9307      	str	r3, [sp, #28]
 8002344:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002348:	931a      	str	r3, [sp, #104]	@ 0x68
 800234a:	4654      	mov	r4, sl
 800234c:	2205      	movs	r2, #5
 800234e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002352:	4853      	ldr	r0, [pc, #332]	@ (80024a0 <_vfiprintf_r+0x21c>)
 8002354:	f7fd ff44 	bl	80001e0 <memchr>
 8002358:	9a04      	ldr	r2, [sp, #16]
 800235a:	b9d8      	cbnz	r0, 8002394 <_vfiprintf_r+0x110>
 800235c:	06d1      	lsls	r1, r2, #27
 800235e:	bf44      	itt	mi
 8002360:	2320      	movmi	r3, #32
 8002362:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002366:	0713      	lsls	r3, r2, #28
 8002368:	bf44      	itt	mi
 800236a:	232b      	movmi	r3, #43	@ 0x2b
 800236c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002370:	f89a 3000 	ldrb.w	r3, [sl]
 8002374:	2b2a      	cmp	r3, #42	@ 0x2a
 8002376:	d015      	beq.n	80023a4 <_vfiprintf_r+0x120>
 8002378:	9a07      	ldr	r2, [sp, #28]
 800237a:	4654      	mov	r4, sl
 800237c:	2000      	movs	r0, #0
 800237e:	f04f 0c0a 	mov.w	ip, #10
 8002382:	4621      	mov	r1, r4
 8002384:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002388:	3b30      	subs	r3, #48	@ 0x30
 800238a:	2b09      	cmp	r3, #9
 800238c:	d94b      	bls.n	8002426 <_vfiprintf_r+0x1a2>
 800238e:	b1b0      	cbz	r0, 80023be <_vfiprintf_r+0x13a>
 8002390:	9207      	str	r2, [sp, #28]
 8002392:	e014      	b.n	80023be <_vfiprintf_r+0x13a>
 8002394:	eba0 0308 	sub.w	r3, r0, r8
 8002398:	fa09 f303 	lsl.w	r3, r9, r3
 800239c:	4313      	orrs	r3, r2
 800239e:	9304      	str	r3, [sp, #16]
 80023a0:	46a2      	mov	sl, r4
 80023a2:	e7d2      	b.n	800234a <_vfiprintf_r+0xc6>
 80023a4:	9b03      	ldr	r3, [sp, #12]
 80023a6:	1d19      	adds	r1, r3, #4
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	9103      	str	r1, [sp, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	bfbb      	ittet	lt
 80023b0:	425b      	neglt	r3, r3
 80023b2:	f042 0202 	orrlt.w	r2, r2, #2
 80023b6:	9307      	strge	r3, [sp, #28]
 80023b8:	9307      	strlt	r3, [sp, #28]
 80023ba:	bfb8      	it	lt
 80023bc:	9204      	strlt	r2, [sp, #16]
 80023be:	7823      	ldrb	r3, [r4, #0]
 80023c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80023c2:	d10a      	bne.n	80023da <_vfiprintf_r+0x156>
 80023c4:	7863      	ldrb	r3, [r4, #1]
 80023c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80023c8:	d132      	bne.n	8002430 <_vfiprintf_r+0x1ac>
 80023ca:	9b03      	ldr	r3, [sp, #12]
 80023cc:	1d1a      	adds	r2, r3, #4
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	9203      	str	r2, [sp, #12]
 80023d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80023d6:	3402      	adds	r4, #2
 80023d8:	9305      	str	r3, [sp, #20]
 80023da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80024b0 <_vfiprintf_r+0x22c>
 80023de:	7821      	ldrb	r1, [r4, #0]
 80023e0:	2203      	movs	r2, #3
 80023e2:	4650      	mov	r0, sl
 80023e4:	f7fd fefc 	bl	80001e0 <memchr>
 80023e8:	b138      	cbz	r0, 80023fa <_vfiprintf_r+0x176>
 80023ea:	9b04      	ldr	r3, [sp, #16]
 80023ec:	eba0 000a 	sub.w	r0, r0, sl
 80023f0:	2240      	movs	r2, #64	@ 0x40
 80023f2:	4082      	lsls	r2, r0
 80023f4:	4313      	orrs	r3, r2
 80023f6:	3401      	adds	r4, #1
 80023f8:	9304      	str	r3, [sp, #16]
 80023fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023fe:	4829      	ldr	r0, [pc, #164]	@ (80024a4 <_vfiprintf_r+0x220>)
 8002400:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002404:	2206      	movs	r2, #6
 8002406:	f7fd feeb 	bl	80001e0 <memchr>
 800240a:	2800      	cmp	r0, #0
 800240c:	d03f      	beq.n	800248e <_vfiprintf_r+0x20a>
 800240e:	4b26      	ldr	r3, [pc, #152]	@ (80024a8 <_vfiprintf_r+0x224>)
 8002410:	bb1b      	cbnz	r3, 800245a <_vfiprintf_r+0x1d6>
 8002412:	9b03      	ldr	r3, [sp, #12]
 8002414:	3307      	adds	r3, #7
 8002416:	f023 0307 	bic.w	r3, r3, #7
 800241a:	3308      	adds	r3, #8
 800241c:	9303      	str	r3, [sp, #12]
 800241e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002420:	443b      	add	r3, r7
 8002422:	9309      	str	r3, [sp, #36]	@ 0x24
 8002424:	e76a      	b.n	80022fc <_vfiprintf_r+0x78>
 8002426:	fb0c 3202 	mla	r2, ip, r2, r3
 800242a:	460c      	mov	r4, r1
 800242c:	2001      	movs	r0, #1
 800242e:	e7a8      	b.n	8002382 <_vfiprintf_r+0xfe>
 8002430:	2300      	movs	r3, #0
 8002432:	3401      	adds	r4, #1
 8002434:	9305      	str	r3, [sp, #20]
 8002436:	4619      	mov	r1, r3
 8002438:	f04f 0c0a 	mov.w	ip, #10
 800243c:	4620      	mov	r0, r4
 800243e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002442:	3a30      	subs	r2, #48	@ 0x30
 8002444:	2a09      	cmp	r2, #9
 8002446:	d903      	bls.n	8002450 <_vfiprintf_r+0x1cc>
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0c6      	beq.n	80023da <_vfiprintf_r+0x156>
 800244c:	9105      	str	r1, [sp, #20]
 800244e:	e7c4      	b.n	80023da <_vfiprintf_r+0x156>
 8002450:	fb0c 2101 	mla	r1, ip, r1, r2
 8002454:	4604      	mov	r4, r0
 8002456:	2301      	movs	r3, #1
 8002458:	e7f0      	b.n	800243c <_vfiprintf_r+0x1b8>
 800245a:	ab03      	add	r3, sp, #12
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	462a      	mov	r2, r5
 8002460:	4b12      	ldr	r3, [pc, #72]	@ (80024ac <_vfiprintf_r+0x228>)
 8002462:	a904      	add	r1, sp, #16
 8002464:	4630      	mov	r0, r6
 8002466:	f3af 8000 	nop.w
 800246a:	4607      	mov	r7, r0
 800246c:	1c78      	adds	r0, r7, #1
 800246e:	d1d6      	bne.n	800241e <_vfiprintf_r+0x19a>
 8002470:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002472:	07d9      	lsls	r1, r3, #31
 8002474:	d405      	bmi.n	8002482 <_vfiprintf_r+0x1fe>
 8002476:	89ab      	ldrh	r3, [r5, #12]
 8002478:	059a      	lsls	r2, r3, #22
 800247a:	d402      	bmi.n	8002482 <_vfiprintf_r+0x1fe>
 800247c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800247e:	f7ff f9a9 	bl	80017d4 <__retarget_lock_release_recursive>
 8002482:	89ab      	ldrh	r3, [r5, #12]
 8002484:	065b      	lsls	r3, r3, #25
 8002486:	f53f af1f 	bmi.w	80022c8 <_vfiprintf_r+0x44>
 800248a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800248c:	e71e      	b.n	80022cc <_vfiprintf_r+0x48>
 800248e:	ab03      	add	r3, sp, #12
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	462a      	mov	r2, r5
 8002494:	4b05      	ldr	r3, [pc, #20]	@ (80024ac <_vfiprintf_r+0x228>)
 8002496:	a904      	add	r1, sp, #16
 8002498:	4630      	mov	r0, r6
 800249a:	f7ff fc81 	bl	8001da0 <_printf_i>
 800249e:	e7e4      	b.n	800246a <_vfiprintf_r+0x1e6>
 80024a0:	08002cc3 	.word	0x08002cc3
 80024a4:	08002ccd 	.word	0x08002ccd
 80024a8:	00000000 	.word	0x00000000
 80024ac:	08002261 	.word	0x08002261
 80024b0:	08002cc9 	.word	0x08002cc9

080024b4 <__swbuf_r>:
 80024b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b6:	460e      	mov	r6, r1
 80024b8:	4614      	mov	r4, r2
 80024ba:	4605      	mov	r5, r0
 80024bc:	b118      	cbz	r0, 80024c6 <__swbuf_r+0x12>
 80024be:	6a03      	ldr	r3, [r0, #32]
 80024c0:	b90b      	cbnz	r3, 80024c6 <__swbuf_r+0x12>
 80024c2:	f7ff f857 	bl	8001574 <__sinit>
 80024c6:	69a3      	ldr	r3, [r4, #24]
 80024c8:	60a3      	str	r3, [r4, #8]
 80024ca:	89a3      	ldrh	r3, [r4, #12]
 80024cc:	071a      	lsls	r2, r3, #28
 80024ce:	d501      	bpl.n	80024d4 <__swbuf_r+0x20>
 80024d0:	6923      	ldr	r3, [r4, #16]
 80024d2:	b943      	cbnz	r3, 80024e6 <__swbuf_r+0x32>
 80024d4:	4621      	mov	r1, r4
 80024d6:	4628      	mov	r0, r5
 80024d8:	f000 f82a 	bl	8002530 <__swsetup_r>
 80024dc:	b118      	cbz	r0, 80024e6 <__swbuf_r+0x32>
 80024de:	f04f 37ff 	mov.w	r7, #4294967295
 80024e2:	4638      	mov	r0, r7
 80024e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024e6:	6823      	ldr	r3, [r4, #0]
 80024e8:	6922      	ldr	r2, [r4, #16]
 80024ea:	1a98      	subs	r0, r3, r2
 80024ec:	6963      	ldr	r3, [r4, #20]
 80024ee:	b2f6      	uxtb	r6, r6
 80024f0:	4283      	cmp	r3, r0
 80024f2:	4637      	mov	r7, r6
 80024f4:	dc05      	bgt.n	8002502 <__swbuf_r+0x4e>
 80024f6:	4621      	mov	r1, r4
 80024f8:	4628      	mov	r0, r5
 80024fa:	f7ff fdf3 	bl	80020e4 <_fflush_r>
 80024fe:	2800      	cmp	r0, #0
 8002500:	d1ed      	bne.n	80024de <__swbuf_r+0x2a>
 8002502:	68a3      	ldr	r3, [r4, #8]
 8002504:	3b01      	subs	r3, #1
 8002506:	60a3      	str	r3, [r4, #8]
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	6022      	str	r2, [r4, #0]
 800250e:	701e      	strb	r6, [r3, #0]
 8002510:	6962      	ldr	r2, [r4, #20]
 8002512:	1c43      	adds	r3, r0, #1
 8002514:	429a      	cmp	r2, r3
 8002516:	d004      	beq.n	8002522 <__swbuf_r+0x6e>
 8002518:	89a3      	ldrh	r3, [r4, #12]
 800251a:	07db      	lsls	r3, r3, #31
 800251c:	d5e1      	bpl.n	80024e2 <__swbuf_r+0x2e>
 800251e:	2e0a      	cmp	r6, #10
 8002520:	d1df      	bne.n	80024e2 <__swbuf_r+0x2e>
 8002522:	4621      	mov	r1, r4
 8002524:	4628      	mov	r0, r5
 8002526:	f7ff fddd 	bl	80020e4 <_fflush_r>
 800252a:	2800      	cmp	r0, #0
 800252c:	d0d9      	beq.n	80024e2 <__swbuf_r+0x2e>
 800252e:	e7d6      	b.n	80024de <__swbuf_r+0x2a>

08002530 <__swsetup_r>:
 8002530:	b538      	push	{r3, r4, r5, lr}
 8002532:	4b29      	ldr	r3, [pc, #164]	@ (80025d8 <__swsetup_r+0xa8>)
 8002534:	4605      	mov	r5, r0
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	460c      	mov	r4, r1
 800253a:	b118      	cbz	r0, 8002544 <__swsetup_r+0x14>
 800253c:	6a03      	ldr	r3, [r0, #32]
 800253e:	b90b      	cbnz	r3, 8002544 <__swsetup_r+0x14>
 8002540:	f7ff f818 	bl	8001574 <__sinit>
 8002544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002548:	0719      	lsls	r1, r3, #28
 800254a:	d422      	bmi.n	8002592 <__swsetup_r+0x62>
 800254c:	06da      	lsls	r2, r3, #27
 800254e:	d407      	bmi.n	8002560 <__swsetup_r+0x30>
 8002550:	2209      	movs	r2, #9
 8002552:	602a      	str	r2, [r5, #0]
 8002554:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002558:	81a3      	strh	r3, [r4, #12]
 800255a:	f04f 30ff 	mov.w	r0, #4294967295
 800255e:	e033      	b.n	80025c8 <__swsetup_r+0x98>
 8002560:	0758      	lsls	r0, r3, #29
 8002562:	d512      	bpl.n	800258a <__swsetup_r+0x5a>
 8002564:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002566:	b141      	cbz	r1, 800257a <__swsetup_r+0x4a>
 8002568:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800256c:	4299      	cmp	r1, r3
 800256e:	d002      	beq.n	8002576 <__swsetup_r+0x46>
 8002570:	4628      	mov	r0, r5
 8002572:	f7ff f94f 	bl	8001814 <_free_r>
 8002576:	2300      	movs	r3, #0
 8002578:	6363      	str	r3, [r4, #52]	@ 0x34
 800257a:	89a3      	ldrh	r3, [r4, #12]
 800257c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002580:	81a3      	strh	r3, [r4, #12]
 8002582:	2300      	movs	r3, #0
 8002584:	6063      	str	r3, [r4, #4]
 8002586:	6923      	ldr	r3, [r4, #16]
 8002588:	6023      	str	r3, [r4, #0]
 800258a:	89a3      	ldrh	r3, [r4, #12]
 800258c:	f043 0308 	orr.w	r3, r3, #8
 8002590:	81a3      	strh	r3, [r4, #12]
 8002592:	6923      	ldr	r3, [r4, #16]
 8002594:	b94b      	cbnz	r3, 80025aa <__swsetup_r+0x7a>
 8002596:	89a3      	ldrh	r3, [r4, #12]
 8002598:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800259c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025a0:	d003      	beq.n	80025aa <__swsetup_r+0x7a>
 80025a2:	4621      	mov	r1, r4
 80025a4:	4628      	mov	r0, r5
 80025a6:	f000 f88b 	bl	80026c0 <__smakebuf_r>
 80025aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025ae:	f013 0201 	ands.w	r2, r3, #1
 80025b2:	d00a      	beq.n	80025ca <__swsetup_r+0x9a>
 80025b4:	2200      	movs	r2, #0
 80025b6:	60a2      	str	r2, [r4, #8]
 80025b8:	6962      	ldr	r2, [r4, #20]
 80025ba:	4252      	negs	r2, r2
 80025bc:	61a2      	str	r2, [r4, #24]
 80025be:	6922      	ldr	r2, [r4, #16]
 80025c0:	b942      	cbnz	r2, 80025d4 <__swsetup_r+0xa4>
 80025c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80025c6:	d1c5      	bne.n	8002554 <__swsetup_r+0x24>
 80025c8:	bd38      	pop	{r3, r4, r5, pc}
 80025ca:	0799      	lsls	r1, r3, #30
 80025cc:	bf58      	it	pl
 80025ce:	6962      	ldrpl	r2, [r4, #20]
 80025d0:	60a2      	str	r2, [r4, #8]
 80025d2:	e7f4      	b.n	80025be <__swsetup_r+0x8e>
 80025d4:	2000      	movs	r0, #0
 80025d6:	e7f7      	b.n	80025c8 <__swsetup_r+0x98>
 80025d8:	20000014 	.word	0x20000014

080025dc <_raise_r>:
 80025dc:	291f      	cmp	r1, #31
 80025de:	b538      	push	{r3, r4, r5, lr}
 80025e0:	4605      	mov	r5, r0
 80025e2:	460c      	mov	r4, r1
 80025e4:	d904      	bls.n	80025f0 <_raise_r+0x14>
 80025e6:	2316      	movs	r3, #22
 80025e8:	6003      	str	r3, [r0, #0]
 80025ea:	f04f 30ff 	mov.w	r0, #4294967295
 80025ee:	bd38      	pop	{r3, r4, r5, pc}
 80025f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80025f2:	b112      	cbz	r2, 80025fa <_raise_r+0x1e>
 80025f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80025f8:	b94b      	cbnz	r3, 800260e <_raise_r+0x32>
 80025fa:	4628      	mov	r0, r5
 80025fc:	f000 f830 	bl	8002660 <_getpid_r>
 8002600:	4622      	mov	r2, r4
 8002602:	4601      	mov	r1, r0
 8002604:	4628      	mov	r0, r5
 8002606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800260a:	f000 b817 	b.w	800263c <_kill_r>
 800260e:	2b01      	cmp	r3, #1
 8002610:	d00a      	beq.n	8002628 <_raise_r+0x4c>
 8002612:	1c59      	adds	r1, r3, #1
 8002614:	d103      	bne.n	800261e <_raise_r+0x42>
 8002616:	2316      	movs	r3, #22
 8002618:	6003      	str	r3, [r0, #0]
 800261a:	2001      	movs	r0, #1
 800261c:	e7e7      	b.n	80025ee <_raise_r+0x12>
 800261e:	2100      	movs	r1, #0
 8002620:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8002624:	4620      	mov	r0, r4
 8002626:	4798      	blx	r3
 8002628:	2000      	movs	r0, #0
 800262a:	e7e0      	b.n	80025ee <_raise_r+0x12>

0800262c <raise>:
 800262c:	4b02      	ldr	r3, [pc, #8]	@ (8002638 <raise+0xc>)
 800262e:	4601      	mov	r1, r0
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	f7ff bfd3 	b.w	80025dc <_raise_r>
 8002636:	bf00      	nop
 8002638:	20000014 	.word	0x20000014

0800263c <_kill_r>:
 800263c:	b538      	push	{r3, r4, r5, lr}
 800263e:	4d07      	ldr	r5, [pc, #28]	@ (800265c <_kill_r+0x20>)
 8002640:	2300      	movs	r3, #0
 8002642:	4604      	mov	r4, r0
 8002644:	4608      	mov	r0, r1
 8002646:	4611      	mov	r1, r2
 8002648:	602b      	str	r3, [r5, #0]
 800264a:	f7fe fdb3 	bl	80011b4 <_kill>
 800264e:	1c43      	adds	r3, r0, #1
 8002650:	d102      	bne.n	8002658 <_kill_r+0x1c>
 8002652:	682b      	ldr	r3, [r5, #0]
 8002654:	b103      	cbz	r3, 8002658 <_kill_r+0x1c>
 8002656:	6023      	str	r3, [r4, #0]
 8002658:	bd38      	pop	{r3, r4, r5, pc}
 800265a:	bf00      	nop
 800265c:	2000022c 	.word	0x2000022c

08002660 <_getpid_r>:
 8002660:	f7fe bda0 	b.w	80011a4 <_getpid>

08002664 <_malloc_usable_size_r>:
 8002664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002668:	1f18      	subs	r0, r3, #4
 800266a:	2b00      	cmp	r3, #0
 800266c:	bfbc      	itt	lt
 800266e:	580b      	ldrlt	r3, [r1, r0]
 8002670:	18c0      	addlt	r0, r0, r3
 8002672:	4770      	bx	lr

08002674 <__swhatbuf_r>:
 8002674:	b570      	push	{r4, r5, r6, lr}
 8002676:	460c      	mov	r4, r1
 8002678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800267c:	2900      	cmp	r1, #0
 800267e:	b096      	sub	sp, #88	@ 0x58
 8002680:	4615      	mov	r5, r2
 8002682:	461e      	mov	r6, r3
 8002684:	da0d      	bge.n	80026a2 <__swhatbuf_r+0x2e>
 8002686:	89a3      	ldrh	r3, [r4, #12]
 8002688:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800268c:	f04f 0100 	mov.w	r1, #0
 8002690:	bf14      	ite	ne
 8002692:	2340      	movne	r3, #64	@ 0x40
 8002694:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002698:	2000      	movs	r0, #0
 800269a:	6031      	str	r1, [r6, #0]
 800269c:	602b      	str	r3, [r5, #0]
 800269e:	b016      	add	sp, #88	@ 0x58
 80026a0:	bd70      	pop	{r4, r5, r6, pc}
 80026a2:	466a      	mov	r2, sp
 80026a4:	f000 f848 	bl	8002738 <_fstat_r>
 80026a8:	2800      	cmp	r0, #0
 80026aa:	dbec      	blt.n	8002686 <__swhatbuf_r+0x12>
 80026ac:	9901      	ldr	r1, [sp, #4]
 80026ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80026b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80026b6:	4259      	negs	r1, r3
 80026b8:	4159      	adcs	r1, r3
 80026ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026be:	e7eb      	b.n	8002698 <__swhatbuf_r+0x24>

080026c0 <__smakebuf_r>:
 80026c0:	898b      	ldrh	r3, [r1, #12]
 80026c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80026c4:	079d      	lsls	r5, r3, #30
 80026c6:	4606      	mov	r6, r0
 80026c8:	460c      	mov	r4, r1
 80026ca:	d507      	bpl.n	80026dc <__smakebuf_r+0x1c>
 80026cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80026d0:	6023      	str	r3, [r4, #0]
 80026d2:	6123      	str	r3, [r4, #16]
 80026d4:	2301      	movs	r3, #1
 80026d6:	6163      	str	r3, [r4, #20]
 80026d8:	b003      	add	sp, #12
 80026da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026dc:	ab01      	add	r3, sp, #4
 80026de:	466a      	mov	r2, sp
 80026e0:	f7ff ffc8 	bl	8002674 <__swhatbuf_r>
 80026e4:	9f00      	ldr	r7, [sp, #0]
 80026e6:	4605      	mov	r5, r0
 80026e8:	4639      	mov	r1, r7
 80026ea:	4630      	mov	r0, r6
 80026ec:	f7ff f906 	bl	80018fc <_malloc_r>
 80026f0:	b948      	cbnz	r0, 8002706 <__smakebuf_r+0x46>
 80026f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026f6:	059a      	lsls	r2, r3, #22
 80026f8:	d4ee      	bmi.n	80026d8 <__smakebuf_r+0x18>
 80026fa:	f023 0303 	bic.w	r3, r3, #3
 80026fe:	f043 0302 	orr.w	r3, r3, #2
 8002702:	81a3      	strh	r3, [r4, #12]
 8002704:	e7e2      	b.n	80026cc <__smakebuf_r+0xc>
 8002706:	89a3      	ldrh	r3, [r4, #12]
 8002708:	6020      	str	r0, [r4, #0]
 800270a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800270e:	81a3      	strh	r3, [r4, #12]
 8002710:	9b01      	ldr	r3, [sp, #4]
 8002712:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002716:	b15b      	cbz	r3, 8002730 <__smakebuf_r+0x70>
 8002718:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800271c:	4630      	mov	r0, r6
 800271e:	f000 f81d 	bl	800275c <_isatty_r>
 8002722:	b128      	cbz	r0, 8002730 <__smakebuf_r+0x70>
 8002724:	89a3      	ldrh	r3, [r4, #12]
 8002726:	f023 0303 	bic.w	r3, r3, #3
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	81a3      	strh	r3, [r4, #12]
 8002730:	89a3      	ldrh	r3, [r4, #12]
 8002732:	431d      	orrs	r5, r3
 8002734:	81a5      	strh	r5, [r4, #12]
 8002736:	e7cf      	b.n	80026d8 <__smakebuf_r+0x18>

08002738 <_fstat_r>:
 8002738:	b538      	push	{r3, r4, r5, lr}
 800273a:	4d07      	ldr	r5, [pc, #28]	@ (8002758 <_fstat_r+0x20>)
 800273c:	2300      	movs	r3, #0
 800273e:	4604      	mov	r4, r0
 8002740:	4608      	mov	r0, r1
 8002742:	4611      	mov	r1, r2
 8002744:	602b      	str	r3, [r5, #0]
 8002746:	f7fe fd95 	bl	8001274 <_fstat>
 800274a:	1c43      	adds	r3, r0, #1
 800274c:	d102      	bne.n	8002754 <_fstat_r+0x1c>
 800274e:	682b      	ldr	r3, [r5, #0]
 8002750:	b103      	cbz	r3, 8002754 <_fstat_r+0x1c>
 8002752:	6023      	str	r3, [r4, #0]
 8002754:	bd38      	pop	{r3, r4, r5, pc}
 8002756:	bf00      	nop
 8002758:	2000022c 	.word	0x2000022c

0800275c <_isatty_r>:
 800275c:	b538      	push	{r3, r4, r5, lr}
 800275e:	4d06      	ldr	r5, [pc, #24]	@ (8002778 <_isatty_r+0x1c>)
 8002760:	2300      	movs	r3, #0
 8002762:	4604      	mov	r4, r0
 8002764:	4608      	mov	r0, r1
 8002766:	602b      	str	r3, [r5, #0]
 8002768:	f7fe fd94 	bl	8001294 <_isatty>
 800276c:	1c43      	adds	r3, r0, #1
 800276e:	d102      	bne.n	8002776 <_isatty_r+0x1a>
 8002770:	682b      	ldr	r3, [r5, #0]
 8002772:	b103      	cbz	r3, 8002776 <_isatty_r+0x1a>
 8002774:	6023      	str	r3, [r4, #0]
 8002776:	bd38      	pop	{r3, r4, r5, pc}
 8002778:	2000022c 	.word	0x2000022c

0800277c <_init>:
 800277c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277e:	bf00      	nop
 8002780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002782:	bc08      	pop	{r3}
 8002784:	469e      	mov	lr, r3
 8002786:	4770      	bx	lr

08002788 <_fini>:
 8002788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800278a:	bf00      	nop
 800278c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800278e:	bc08      	pop	{r3}
 8002790:	469e      	mov	lr, r3
 8002792:	4770      	bx	lr
