
projectmaicro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a10  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08002bb0  08002bb0  00003bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f80  08002f80  00004064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002f80  08002f80  00003f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f88  08002f88  00004064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f88  08002f88  00003f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f8c  08002f8c  00003f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08002f90  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000064  08002ff4  00004064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08002ff4  0000423c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001dbc  00000000  00000000  00004094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006a7  00000000  00000000  00005e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000280  00000000  00000000  000064f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001ea  00000000  00000000  00006778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff31  00000000  00000000  00006962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000237a  00000000  00000000  00016893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057574  00000000  00000000  00018c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00070181  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001478  00000000  00000000  000701c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0007163c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002b98 	.word	0x08002b98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08002b98 	.word	0x08002b98

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	@ (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	6039      	str	r1, [r7, #0]
 80002c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	db0a      	blt.n	80002e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	490c      	ldr	r1, [pc, #48]	@ (8000308 <__NVIC_SetPriority+0x4c>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e4:	e00a      	b.n	80002fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4908      	ldr	r1, [pc, #32]	@ (800030c <__NVIC_SetPriority+0x50>)
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	f003 030f 	and.w	r3, r3, #15
 80002f2:	3b04      	subs	r3, #4
 80002f4:	0112      	lsls	r2, r2, #4
 80002f6:	b2d2      	uxtb	r2, r2
 80002f8:	440b      	add	r3, r1
 80002fa:	761a      	strb	r2, [r3, #24]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	e000e100 	.word	0xe000e100
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	3b01      	subs	r3, #1
 800031c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000320:	d301      	bcc.n	8000326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000322:	2301      	movs	r3, #1
 8000324:	e00f      	b.n	8000346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000326:	4a0a      	ldr	r2, [pc, #40]	@ (8000350 <SysTick_Config+0x40>)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	3b01      	subs	r3, #1
 800032c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800032e:	210f      	movs	r1, #15
 8000330:	f04f 30ff 	mov.w	r0, #4294967295
 8000334:	f7ff ffc2 	bl	80002bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000338:	4b05      	ldr	r3, [pc, #20]	@ (8000350 <SysTick_Config+0x40>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800033e:	4b04      	ldr	r3, [pc, #16]	@ (8000350 <SysTick_Config+0x40>)
 8000340:	2207      	movs	r2, #7
 8000342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000344:	2300      	movs	r3, #0
}
 8000346:	4618      	mov	r0, r3
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	e000e010 	.word	0xe000e010

08000354 <I2C1_Init_OLED>:
 * OLED (SH1106/SSD1306 over I2C1 PB8=SCL, PB9=SDA)
 * ============================================================================ */
#define OLED_ADDR       0x3C
#define OLED_COL_OFFSET 2   /* SH1106 = 2, SSD1306 = 0 */

static void I2C1_Init_OLED(void){
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000358:	4b2d      	ldr	r3, [pc, #180]	@ (8000410 <I2C1_Init_OLED+0xbc>)
 800035a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800035c:	4a2c      	ldr	r2, [pc, #176]	@ (8000410 <I2C1_Init_OLED+0xbc>)
 800035e:	f043 0302 	orr.w	r3, r3, #2
 8000362:	6313      	str	r3, [r2, #48]	@ 0x30
    // PB8, PB9 AF4, OD, PU, High speed
    GPIOB->MODER &= ~((3u<<(8*2))|(3u<<(9*2)));
 8000364:	4b2b      	ldr	r3, [pc, #172]	@ (8000414 <I2C1_Init_OLED+0xc0>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a2a      	ldr	r2, [pc, #168]	@ (8000414 <I2C1_Init_OLED+0xc0>)
 800036a:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800036e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  ((2u<<(8*2))|(2u<<(9*2)));
 8000370:	4b28      	ldr	r3, [pc, #160]	@ (8000414 <I2C1_Init_OLED+0xc0>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a27      	ldr	r2, [pc, #156]	@ (8000414 <I2C1_Init_OLED+0xc0>)
 8000376:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 800037a:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |=  (1u<<8)|(1u<<9);
 800037c:	4b25      	ldr	r3, [pc, #148]	@ (8000414 <I2C1_Init_OLED+0xc0>)
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	4a24      	ldr	r2, [pc, #144]	@ (8000414 <I2C1_Init_OLED+0xc0>)
 8000382:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000386:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR|=  (3u<<(8*2))|(3u<<(9*2));
 8000388:	4b22      	ldr	r3, [pc, #136]	@ (8000414 <I2C1_Init_OLED+0xc0>)
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	4a21      	ldr	r2, [pc, #132]	@ (8000414 <I2C1_Init_OLED+0xc0>)
 800038e:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8000392:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR  &= ~((3u<<(8*2))|(3u<<(9*2)));
 8000394:	4b1f      	ldr	r3, [pc, #124]	@ (8000414 <I2C1_Init_OLED+0xc0>)
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	4a1e      	ldr	r2, [pc, #120]	@ (8000414 <I2C1_Init_OLED+0xc0>)
 800039a:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800039e:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR  |=  ((1u<<(8*2))|(1u<<(9*2)));
 80003a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000414 <I2C1_Init_OLED+0xc0>)
 80003a2:	68db      	ldr	r3, [r3, #12]
 80003a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000414 <I2C1_Init_OLED+0xc0>)
 80003a6:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 80003aa:	60d3      	str	r3, [r2, #12]
    GPIOB->AFR[1] &= ~((0xFu<<0)|(0xFu<<4));
 80003ac:	4b19      	ldr	r3, [pc, #100]	@ (8000414 <I2C1_Init_OLED+0xc0>)
 80003ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003b0:	4a18      	ldr	r2, [pc, #96]	@ (8000414 <I2C1_Init_OLED+0xc0>)
 80003b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80003b6:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  ((4u<<0) |(4u<<4));
 80003b8:	4b16      	ldr	r3, [pc, #88]	@ (8000414 <I2C1_Init_OLED+0xc0>)
 80003ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003bc:	4a15      	ldr	r2, [pc, #84]	@ (8000414 <I2C1_Init_OLED+0xc0>)
 80003be:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80003c2:	6253      	str	r3, [r2, #36]	@ 0x24

    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80003c4:	4b12      	ldr	r3, [pc, #72]	@ (8000410 <I2C1_Init_OLED+0xbc>)
 80003c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003c8:	4a11      	ldr	r2, [pc, #68]	@ (8000410 <I2C1_Init_OLED+0xbc>)
 80003ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003ce:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->APB1RSTR |= RCC_APB1RSTR_I2C1RST; RCC->APB1RSTR &= ~RCC_APB1RSTR_I2C1RST;
 80003d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000410 <I2C1_Init_OLED+0xbc>)
 80003d2:	6a1b      	ldr	r3, [r3, #32]
 80003d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000410 <I2C1_Init_OLED+0xbc>)
 80003d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003da:	6213      	str	r3, [r2, #32]
 80003dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <I2C1_Init_OLED+0xbc>)
 80003de:	6a1b      	ldr	r3, [r3, #32]
 80003e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000410 <I2C1_Init_OLED+0xbc>)
 80003e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80003e6:	6213      	str	r3, [r2, #32]

    I2C1->CR1 = 0;
 80003e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000418 <I2C1_Init_OLED+0xc4>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
    I2C1->CR2 = 42;          // APB1=42MHz
 80003ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000418 <I2C1_Init_OLED+0xc4>)
 80003f0:	222a      	movs	r2, #42	@ 0x2a
 80003f2:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 210;         // 100kHz
 80003f4:	4b08      	ldr	r3, [pc, #32]	@ (8000418 <I2C1_Init_OLED+0xc4>)
 80003f6:	22d2      	movs	r2, #210	@ 0xd2
 80003f8:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 43;
 80003fa:	4b07      	ldr	r3, [pc, #28]	@ (8000418 <I2C1_Init_OLED+0xc4>)
 80003fc:	222b      	movs	r2, #43	@ 0x2b
 80003fe:	621a      	str	r2, [r3, #32]
    I2C1->CR1 = I2C_CR1_PE;
 8000400:	4b05      	ldr	r3, [pc, #20]	@ (8000418 <I2C1_Init_OLED+0xc4>)
 8000402:	2201      	movs	r2, #1
 8000404:	601a      	str	r2, [r3, #0]
}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	40023800 	.word	0x40023800
 8000414:	40020400 	.word	0x40020400
 8000418:	40005400 	.word	0x40005400

0800041c <i2c_start>:

static void i2c_start(uint8_t addr){
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	71fb      	strb	r3, [r7, #7]
    I2C1->CR1 |= I2C_CR1_START;
 8000426:	4b12      	ldr	r3, [pc, #72]	@ (8000470 <i2c_start+0x54>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a11      	ldr	r2, [pc, #68]	@ (8000470 <i2c_start+0x54>)
 800042c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000430:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));
 8000432:	bf00      	nop
 8000434:	4b0e      	ldr	r3, [pc, #56]	@ (8000470 <i2c_start+0x54>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	f003 0301 	and.w	r3, r3, #1
 800043c:	2b00      	cmp	r3, #0
 800043e:	d0f9      	beq.n	8000434 <i2c_start+0x18>
    (void)I2C1->SR1;
 8000440:	4b0b      	ldr	r3, [pc, #44]	@ (8000470 <i2c_start+0x54>)
 8000442:	695b      	ldr	r3, [r3, #20]
    I2C1->DR = addr<<1;                // write
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	4a0a      	ldr	r2, [pc, #40]	@ (8000470 <i2c_start+0x54>)
 8000448:	005b      	lsls	r3, r3, #1
 800044a:	6113      	str	r3, [r2, #16]
    while(!(I2C1->SR1 & I2C_SR1_ADDR));
 800044c:	bf00      	nop
 800044e:	4b08      	ldr	r3, [pc, #32]	@ (8000470 <i2c_start+0x54>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f003 0302 	and.w	r3, r3, #2
 8000456:	2b00      	cmp	r3, #0
 8000458:	d0f9      	beq.n	800044e <i2c_start+0x32>
    (void)I2C1->SR1; (void)I2C1->SR2;
 800045a:	4b05      	ldr	r3, [pc, #20]	@ (8000470 <i2c_start+0x54>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	4b04      	ldr	r3, [pc, #16]	@ (8000470 <i2c_start+0x54>)
 8000460:	699b      	ldr	r3, [r3, #24]
}
 8000462:	bf00      	nop
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	40005400 	.word	0x40005400

08000474 <i2c_w>:
static void i2c_w(uint8_t b){
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
    while(!(I2C1->SR1 & I2C_SR1_TXE));
 800047e:	bf00      	nop
 8000480:	4b0b      	ldr	r3, [pc, #44]	@ (80004b0 <i2c_w+0x3c>)
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000488:	2b00      	cmp	r3, #0
 800048a:	d0f9      	beq.n	8000480 <i2c_w+0xc>
    I2C1->DR = b;
 800048c:	4a08      	ldr	r2, [pc, #32]	@ (80004b0 <i2c_w+0x3c>)
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	6113      	str	r3, [r2, #16]
    while(!(I2C1->SR1 & I2C_SR1_BTF));
 8000492:	bf00      	nop
 8000494:	4b06      	ldr	r3, [pc, #24]	@ (80004b0 <i2c_w+0x3c>)
 8000496:	695b      	ldr	r3, [r3, #20]
 8000498:	f003 0304 	and.w	r3, r3, #4
 800049c:	2b00      	cmp	r3, #0
 800049e:	d0f9      	beq.n	8000494 <i2c_w+0x20>
}
 80004a0:	bf00      	nop
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40005400 	.word	0x40005400

080004b4 <i2c_stop>:
static void i2c_stop(void){ I2C1->CR1 |= I2C_CR1_STOP; }
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	4b05      	ldr	r3, [pc, #20]	@ (80004d0 <i2c_stop+0x1c>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a04      	ldr	r2, [pc, #16]	@ (80004d0 <i2c_stop+0x1c>)
 80004be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004c2:	6013      	str	r3, [r2, #0]
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	40005400 	.word	0x40005400

080004d4 <oled_cmd>:

static void oled_cmd(uint8_t c){ i2c_start(OLED_ADDR); i2c_w(0x00); i2c_w(c); i2c_stop(); }
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
 80004de:	203c      	movs	r0, #60	@ 0x3c
 80004e0:	f7ff ff9c 	bl	800041c <i2c_start>
 80004e4:	2000      	movs	r0, #0
 80004e6:	f7ff ffc5 	bl	8000474 <i2c_w>
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	4618      	mov	r0, r3
 80004ee:	f7ff ffc1 	bl	8000474 <i2c_w>
 80004f2:	f7ff ffdf 	bl	80004b4 <i2c_stop>
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <oled_data>:
static void oled_data(const uint8_t* p, uint16_t n){ i2c_start(OLED_ADDR); i2c_w(0x40); while(n--) i2c_w(*p++); i2c_stop(); }
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
 8000506:	460b      	mov	r3, r1
 8000508:	807b      	strh	r3, [r7, #2]
 800050a:	203c      	movs	r0, #60	@ 0x3c
 800050c:	f7ff ff86 	bl	800041c <i2c_start>
 8000510:	2040      	movs	r0, #64	@ 0x40
 8000512:	f7ff ffaf 	bl	8000474 <i2c_w>
 8000516:	e006      	b.n	8000526 <oled_data+0x28>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	1c5a      	adds	r2, r3, #1
 800051c:	607a      	str	r2, [r7, #4]
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff ffa7 	bl	8000474 <i2c_w>
 8000526:	887b      	ldrh	r3, [r7, #2]
 8000528:	1e5a      	subs	r2, r3, #1
 800052a:	807a      	strh	r2, [r7, #2]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d1f3      	bne.n	8000518 <oled_data+0x1a>
 8000530:	f7ff ffc0 	bl	80004b4 <i2c_stop>
 8000534:	bf00      	nop
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <oled_setpos>:

static void oled_setpos(uint8_t page, uint8_t col){
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	460a      	mov	r2, r1
 8000546:	71fb      	strb	r3, [r7, #7]
 8000548:	4613      	mov	r3, r2
 800054a:	71bb      	strb	r3, [r7, #6]
    col += OLED_COL_OFFSET;
 800054c:	79bb      	ldrb	r3, [r7, #6]
 800054e:	3302      	adds	r3, #2
 8000550:	71bb      	strb	r3, [r7, #6]
    oled_cmd(0xB0 | (page & 7));
 8000552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000556:	f003 0307 	and.w	r3, r3, #7
 800055a:	b25b      	sxtb	r3, r3
 800055c:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8000560:	b25b      	sxtb	r3, r3
 8000562:	b2db      	uxtb	r3, r3
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff ffb5 	bl	80004d4 <oled_cmd>
    oled_cmd(0x00 | (col & 0x0F));
 800056a:	79bb      	ldrb	r3, [r7, #6]
 800056c:	f003 030f 	and.w	r3, r3, #15
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ffae 	bl	80004d4 <oled_cmd>
    oled_cmd(0x10 | (col >> 4));
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	091b      	lsrs	r3, r3, #4
 800057c:	b2db      	uxtb	r3, r3
 800057e:	f043 0310 	orr.w	r3, r3, #16
 8000582:	b2db      	uxtb	r3, r3
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ffa5 	bl	80004d4 <oled_cmd>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <oled_clear>:
static void oled_clear(void){
 8000592:	b580      	push	{r7, lr}
 8000594:	b0a2      	sub	sp, #136	@ 0x88
 8000596:	af00      	add	r7, sp, #0
    uint8_t z[128] = {0};
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2280      	movs	r2, #128	@ 0x80
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 faac 	bl	8001afc <memset>
    for(uint8_t p=0;p<8;p++){ oled_setpos(p,0); oled_data(z,128); }
 80005a4:	2300      	movs	r3, #0
 80005a6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80005aa:	e00f      	b.n	80005cc <oled_clear+0x3a>
 80005ac:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff ffc2 	bl	800053c <oled_setpos>
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2180      	movs	r1, #128	@ 0x80
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ff9e 	bl	80004fe <oled_data>
 80005c2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80005c6:	3301      	adds	r3, #1
 80005c8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80005cc:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80005d0:	2b07      	cmp	r3, #7
 80005d2:	d9eb      	bls.n	80005ac <oled_clear+0x1a>
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	3788      	adds	r7, #136	@ 0x88
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}

080005de <oled_init>:
static void oled_init(void){
 80005de:	b580      	push	{r7, lr}
 80005e0:	af00      	add	r7, sp, #0
    I2C1_Init_OLED();
 80005e2:	f7ff feb7 	bl	8000354 <I2C1_Init_OLED>
    // init sequence
    oled_cmd(0xAE); oled_cmd(0xD5); oled_cmd(0x80);
 80005e6:	20ae      	movs	r0, #174	@ 0xae
 80005e8:	f7ff ff74 	bl	80004d4 <oled_cmd>
 80005ec:	20d5      	movs	r0, #213	@ 0xd5
 80005ee:	f7ff ff71 	bl	80004d4 <oled_cmd>
 80005f2:	2080      	movs	r0, #128	@ 0x80
 80005f4:	f7ff ff6e 	bl	80004d4 <oled_cmd>
    oled_cmd(0xA8); oled_cmd(0x3F); oled_cmd(0xD3); oled_cmd(0x00);
 80005f8:	20a8      	movs	r0, #168	@ 0xa8
 80005fa:	f7ff ff6b 	bl	80004d4 <oled_cmd>
 80005fe:	203f      	movs	r0, #63	@ 0x3f
 8000600:	f7ff ff68 	bl	80004d4 <oled_cmd>
 8000604:	20d3      	movs	r0, #211	@ 0xd3
 8000606:	f7ff ff65 	bl	80004d4 <oled_cmd>
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ff62 	bl	80004d4 <oled_cmd>
    oled_cmd(0x40); oled_cmd(0x8D); oled_cmd(0x14);
 8000610:	2040      	movs	r0, #64	@ 0x40
 8000612:	f7ff ff5f 	bl	80004d4 <oled_cmd>
 8000616:	208d      	movs	r0, #141	@ 0x8d
 8000618:	f7ff ff5c 	bl	80004d4 <oled_cmd>
 800061c:	2014      	movs	r0, #20
 800061e:	f7ff ff59 	bl	80004d4 <oled_cmd>
    oled_cmd(0x20); oled_cmd(0x00); oled_cmd(0xA1); oled_cmd(0xC8);
 8000622:	2020      	movs	r0, #32
 8000624:	f7ff ff56 	bl	80004d4 <oled_cmd>
 8000628:	2000      	movs	r0, #0
 800062a:	f7ff ff53 	bl	80004d4 <oled_cmd>
 800062e:	20a1      	movs	r0, #161	@ 0xa1
 8000630:	f7ff ff50 	bl	80004d4 <oled_cmd>
 8000634:	20c8      	movs	r0, #200	@ 0xc8
 8000636:	f7ff ff4d 	bl	80004d4 <oled_cmd>
    oled_cmd(0xDA); oled_cmd(0x12); oled_cmd(0x81); oled_cmd(0x7F);
 800063a:	20da      	movs	r0, #218	@ 0xda
 800063c:	f7ff ff4a 	bl	80004d4 <oled_cmd>
 8000640:	2012      	movs	r0, #18
 8000642:	f7ff ff47 	bl	80004d4 <oled_cmd>
 8000646:	2081      	movs	r0, #129	@ 0x81
 8000648:	f7ff ff44 	bl	80004d4 <oled_cmd>
 800064c:	207f      	movs	r0, #127	@ 0x7f
 800064e:	f7ff ff41 	bl	80004d4 <oled_cmd>
    oled_cmd(0xD9); oled_cmd(0xF1); oled_cmd(0xDB); oled_cmd(0x40);
 8000652:	20d9      	movs	r0, #217	@ 0xd9
 8000654:	f7ff ff3e 	bl	80004d4 <oled_cmd>
 8000658:	20f1      	movs	r0, #241	@ 0xf1
 800065a:	f7ff ff3b 	bl	80004d4 <oled_cmd>
 800065e:	20db      	movs	r0, #219	@ 0xdb
 8000660:	f7ff ff38 	bl	80004d4 <oled_cmd>
 8000664:	2040      	movs	r0, #64	@ 0x40
 8000666:	f7ff ff35 	bl	80004d4 <oled_cmd>
    oled_cmd(0xA4); oled_cmd(0xA6); oled_cmd(0xAF);
 800066a:	20a4      	movs	r0, #164	@ 0xa4
 800066c:	f7ff ff32 	bl	80004d4 <oled_cmd>
 8000670:	20a6      	movs	r0, #166	@ 0xa6
 8000672:	f7ff ff2f 	bl	80004d4 <oled_cmd>
 8000676:	20af      	movs	r0, #175	@ 0xaf
 8000678:	f7ff ff2c 	bl	80004d4 <oled_cmd>
    oled_clear();
 800067c:	f7ff ff89 	bl	8000592 <oled_clear>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}

08000684 <oled_draw_digit>:
 /*Y*/{0x07,0x08,0x70,0x08,0x07,0x00},/*Z*/{0x61,0x51,0x49,0x45,0x43,0x00}
};
static const uint8_t FONT5x7_SPACE[6] = {0,0,0,0,0,0};
static const uint8_t FONT5x7_MINUS[6] = {0x08,0x08,0x08,0x08,0x08,0x00};

static void oled_draw_digit(uint8_t x,uint8_t page,int d){
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	603a      	str	r2, [r7, #0]
 800068e:	71fb      	strb	r3, [r7, #7]
 8000690:	460b      	mov	r3, r1
 8000692:	71bb      	strb	r3, [r7, #6]
    if(d>=0 && d<=9){ oled_setpos(page,x); oled_data(FONT5x7_DIGIT[d],6); }
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	db13      	blt.n	80006c2 <oled_draw_digit+0x3e>
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	2b09      	cmp	r3, #9
 800069e:	dc10      	bgt.n	80006c2 <oled_draw_digit+0x3e>
 80006a0:	79fa      	ldrb	r2, [r7, #7]
 80006a2:	79bb      	ldrb	r3, [r7, #6]
 80006a4:	4611      	mov	r1, r2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff48 	bl	800053c <oled_setpos>
 80006ac:	683a      	ldr	r2, [r7, #0]
 80006ae:	4613      	mov	r3, r2
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	4413      	add	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4a05      	ldr	r2, [pc, #20]	@ (80006cc <oled_draw_digit+0x48>)
 80006b8:	4413      	add	r3, r2
 80006ba:	2106      	movs	r1, #6
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff1e 	bl	80004fe <oled_data>
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	08002dbc 	.word	0x08002dbc

080006d0 <oled_draw_letter>:
static void oled_draw_letter(uint8_t x,uint8_t page,char c){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
 80006da:	460b      	mov	r3, r1
 80006dc:	71bb      	strb	r3, [r7, #6]
 80006de:	4613      	mov	r3, r2
 80006e0:	717b      	strb	r3, [r7, #5]
    const uint8_t* g = FONT5x7_SPACE;
 80006e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000750 <oled_draw_letter+0x80>)
 80006e4:	60fb      	str	r3, [r7, #12]
    if(c>='A' && c<='Z') g = FONT5x7_LET[c-'A'];
 80006e6:	797b      	ldrb	r3, [r7, #5]
 80006e8:	2b40      	cmp	r3, #64	@ 0x40
 80006ea:	d90d      	bls.n	8000708 <oled_draw_letter+0x38>
 80006ec:	797b      	ldrb	r3, [r7, #5]
 80006ee:	2b5a      	cmp	r3, #90	@ 0x5a
 80006f0:	d80a      	bhi.n	8000708 <oled_draw_letter+0x38>
 80006f2:	797b      	ldrb	r3, [r7, #5]
 80006f4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80006f8:	4613      	mov	r3, r2
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	4413      	add	r3, r2
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	4a14      	ldr	r2, [pc, #80]	@ (8000754 <oled_draw_letter+0x84>)
 8000702:	4413      	add	r3, r2
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	e015      	b.n	8000734 <oled_draw_letter+0x64>
    else if(c>='0' && c<='9') g = FONT5x7_DIGIT[c-'0'];
 8000708:	797b      	ldrb	r3, [r7, #5]
 800070a:	2b2f      	cmp	r3, #47	@ 0x2f
 800070c:	d90d      	bls.n	800072a <oled_draw_letter+0x5a>
 800070e:	797b      	ldrb	r3, [r7, #5]
 8000710:	2b39      	cmp	r3, #57	@ 0x39
 8000712:	d80a      	bhi.n	800072a <oled_draw_letter+0x5a>
 8000714:	797b      	ldrb	r3, [r7, #5]
 8000716:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800071a:	4613      	mov	r3, r2
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	4413      	add	r3, r2
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	4a0d      	ldr	r2, [pc, #52]	@ (8000758 <oled_draw_letter+0x88>)
 8000724:	4413      	add	r3, r2
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	e004      	b.n	8000734 <oled_draw_letter+0x64>
    else if(c=='-') g = FONT5x7_MINUS;
 800072a:	797b      	ldrb	r3, [r7, #5]
 800072c:	2b2d      	cmp	r3, #45	@ 0x2d
 800072e:	d101      	bne.n	8000734 <oled_draw_letter+0x64>
 8000730:	4b0a      	ldr	r3, [pc, #40]	@ (800075c <oled_draw_letter+0x8c>)
 8000732:	60fb      	str	r3, [r7, #12]
    oled_setpos(page,x); oled_data(g,6);
 8000734:	79fa      	ldrb	r2, [r7, #7]
 8000736:	79bb      	ldrb	r3, [r7, #6]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fefe 	bl	800053c <oled_setpos>
 8000740:	2106      	movs	r1, #6
 8000742:	68f8      	ldr	r0, [r7, #12]
 8000744:	f7ff fedb 	bl	80004fe <oled_data>
}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	08002e94 	.word	0x08002e94
 8000754:	08002df8 	.word	0x08002df8
 8000758:	08002dbc 	.word	0x08002dbc
 800075c:	08002e9c 	.word	0x08002e9c

08000760 <oled_print_text>:
static void oled_print_text(uint8_t x,uint8_t page,const char* s){
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	603a      	str	r2, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]
 800076c:	460b      	mov	r3, r1
 800076e:	71bb      	strb	r3, [r7, #6]
    while(*s){ oled_draw_letter(x,page, (*s>='a'&&*s<='z')?(*s-32):*s ); x+=6; s++; }
 8000770:	e019      	b.n	80007a6 <oled_print_text+0x46>
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b60      	cmp	r3, #96	@ 0x60
 8000778:	d908      	bls.n	800078c <oled_print_text+0x2c>
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b7a      	cmp	r3, #122	@ 0x7a
 8000780:	d804      	bhi.n	800078c <oled_print_text+0x2c>
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	3b20      	subs	r3, #32
 8000788:	b2db      	uxtb	r3, r3
 800078a:	e001      	b.n	8000790 <oled_print_text+0x30>
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	79b9      	ldrb	r1, [r7, #6]
 8000792:	79f8      	ldrb	r0, [r7, #7]
 8000794:	461a      	mov	r2, r3
 8000796:	f7ff ff9b 	bl	80006d0 <oled_draw_letter>
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	3306      	adds	r3, #6
 800079e:	71fb      	strb	r3, [r7, #7]
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	3301      	adds	r3, #1
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1e1      	bne.n	8000772 <oled_print_text+0x12>
}
 80007ae:	bf00      	nop
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <oled_print_uint>:
static void oled_print_uint(uint8_t x,uint8_t page,unsigned v){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	603a      	str	r2, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
 80007c4:	460b      	mov	r3, r1
 80007c6:	71bb      	strb	r3, [r7, #6]
    char buf[10]; int n=0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
    if(v==0){ oled_draw_digit(x,page,0); return; }
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d120      	bne.n	8000814 <oled_print_uint+0x5c>
 80007d2:	79b9      	ldrb	r1, [r7, #6]
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	2200      	movs	r2, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff53 	bl	8000684 <oled_draw_digit>
 80007de:	e038      	b.n	8000852 <oled_print_uint+0x9a>
    while(v && n<10){ buf[n++] = '0' + (v%10); v/=10; }
 80007e0:	6839      	ldr	r1, [r7, #0]
 80007e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000858 <oled_print_uint+0xa0>)
 80007e4:	fba3 2301 	umull	r2, r3, r3, r1
 80007e8:	08da      	lsrs	r2, r3, #3
 80007ea:	4613      	mov	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	4413      	add	r3, r2
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	1aca      	subs	r2, r1, r3
 80007f4:	b2d2      	uxtb	r2, r2
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	1c59      	adds	r1, r3, #1
 80007fa:	61f9      	str	r1, [r7, #28]
 80007fc:	3230      	adds	r2, #48	@ 0x30
 80007fe:	b2d2      	uxtb	r2, r2
 8000800:	3320      	adds	r3, #32
 8000802:	443b      	add	r3, r7
 8000804:	f803 2c14 	strb.w	r2, [r3, #-20]
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	4a13      	ldr	r2, [pc, #76]	@ (8000858 <oled_print_uint+0xa0>)
 800080c:	fba2 2303 	umull	r2, r3, r2, r3
 8000810:	08db      	lsrs	r3, r3, #3
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d002      	beq.n	8000820 <oled_print_uint+0x68>
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	2b09      	cmp	r3, #9
 800081e:	dddf      	ble.n	80007e0 <oled_print_uint+0x28>
    for(int i=n-1;i>=0;i--,x+=6) oled_draw_digit(x,page, buf[i]-'0');
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	3b01      	subs	r3, #1
 8000824:	61bb      	str	r3, [r7, #24]
 8000826:	e011      	b.n	800084c <oled_print_uint+0x94>
 8000828:	f107 020c 	add.w	r2, r7, #12
 800082c:	69bb      	ldr	r3, [r7, #24]
 800082e:	4413      	add	r3, r2
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000836:	79b9      	ldrb	r1, [r7, #6]
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff22 	bl	8000684 <oled_draw_digit>
 8000840:	69bb      	ldr	r3, [r7, #24]
 8000842:	3b01      	subs	r3, #1
 8000844:	61bb      	str	r3, [r7, #24]
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	3306      	adds	r3, #6
 800084a:	71fb      	strb	r3, [r7, #7]
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	2b00      	cmp	r3, #0
 8000850:	daea      	bge.n	8000828 <oled_print_uint+0x70>
}
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	cccccccd 	.word	0xcccccccd

0800085c <OLED_ShowStatus>:

/* แสดงสถานะเกมบน OLED */
static void OLED_ShowStatus(void){
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
    oled_clear();
 8000860:	f7ff fe97 	bl	8000592 <oled_clear>
    // LEVEL
    oled_print_text(0, 0, "LEVEL");
 8000864:	4a2f      	ldr	r2, [pc, #188]	@ (8000924 <OLED_ShowStatus+0xc8>)
 8000866:	2100      	movs	r1, #0
 8000868:	2000      	movs	r0, #0
 800086a:	f7ff ff79 	bl	8000760 <oled_print_text>
    oled_print_uint(6*6, 0, g_level);
 800086e:	4b2e      	ldr	r3, [pc, #184]	@ (8000928 <OLED_ShowStatus+0xcc>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	461a      	mov	r2, r3
 8000874:	2100      	movs	r1, #0
 8000876:	2024      	movs	r0, #36	@ 0x24
 8000878:	f7ff ff9e 	bl	80007b8 <oled_print_uint>

    // LIVES
    oled_print_text(0, 2, "LIVES");
 800087c:	4a2b      	ldr	r2, [pc, #172]	@ (800092c <OLED_ShowStatus+0xd0>)
 800087e:	2102      	movs	r1, #2
 8000880:	2000      	movs	r0, #0
 8000882:	f7ff ff6d 	bl	8000760 <oled_print_text>
    oled_print_uint(6*6, 2, g_lives);
 8000886:	4b2a      	ldr	r3, [pc, #168]	@ (8000930 <OLED_ShowStatus+0xd4>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	461a      	mov	r2, r3
 800088c:	2102      	movs	r1, #2
 800088e:	2024      	movs	r0, #36	@ 0x24
 8000890:	f7ff ff92 	bl	80007b8 <oled_print_uint>

    // SCORE
    oled_print_text(0, 4, "SCORE");
 8000894:	4a27      	ldr	r2, [pc, #156]	@ (8000934 <OLED_ShowStatus+0xd8>)
 8000896:	2104      	movs	r1, #4
 8000898:	2000      	movs	r0, #0
 800089a:	f7ff ff61 	bl	8000760 <oled_print_text>
    oled_print_uint(6*6, 4, g_score);
 800089e:	4b26      	ldr	r3, [pc, #152]	@ (8000938 <OLED_ShowStatus+0xdc>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	461a      	mov	r2, r3
 80008a4:	2104      	movs	r1, #4
 80008a6:	2024      	movs	r0, #36	@ 0x24
 80008a8:	f7ff ff86 	bl	80007b8 <oled_print_uint>

    // STATE
    switch(g_game_state){
 80008ac:	4b23      	ldr	r3, [pc, #140]	@ (800093c <OLED_ShowStatus+0xe0>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	3b01      	subs	r3, #1
 80008b2:	2b06      	cmp	r3, #6
 80008b4:	d82e      	bhi.n	8000914 <OLED_ShowStatus+0xb8>
 80008b6:	a201      	add	r2, pc, #4	@ (adr r2, 80008bc <OLED_ShowStatus+0x60>)
 80008b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008bc:	08000909 	.word	0x08000909
 80008c0:	08000915 	.word	0x08000915
 80008c4:	080008f1 	.word	0x080008f1
 80008c8:	080008fd 	.word	0x080008fd
 80008cc:	08000915 	.word	0x08000915
 80008d0:	080008d9 	.word	0x080008d9
 80008d4:	080008e5 	.word	0x080008e5
        case GAME_STATE_VICTORY:      oled_print_text(0, 6, "VICTORY"); break;
 80008d8:	4a19      	ldr	r2, [pc, #100]	@ (8000940 <OLED_ShowStatus+0xe4>)
 80008da:	2106      	movs	r1, #6
 80008dc:	2000      	movs	r0, #0
 80008de:	f7ff ff3f 	bl	8000760 <oled_print_text>
 80008e2:	e01d      	b.n	8000920 <OLED_ShowStatus+0xc4>
        case GAME_STATE_GAME_DEATH:   oled_print_text(0, 6, "GAME-OVER"); break;
 80008e4:	4a17      	ldr	r2, [pc, #92]	@ (8000944 <OLED_ShowStatus+0xe8>)
 80008e6:	2106      	movs	r1, #6
 80008e8:	2000      	movs	r0, #0
 80008ea:	f7ff ff39 	bl	8000760 <oled_print_text>
 80008ee:	e017      	b.n	8000920 <OLED_ShowStatus+0xc4>
        case GAME_STATE_PATTERN_DISPLAY: oled_print_text(0, 6, "SHOW"); break;
 80008f0:	4a15      	ldr	r2, [pc, #84]	@ (8000948 <OLED_ShowStatus+0xec>)
 80008f2:	2106      	movs	r1, #6
 80008f4:	2000      	movs	r0, #0
 80008f6:	f7ff ff33 	bl	8000760 <oled_print_text>
 80008fa:	e011      	b.n	8000920 <OLED_ShowStatus+0xc4>
        case GAME_STATE_INPUT_WAIT:   oled_print_text(0, 6, "INPUT"); break;
 80008fc:	4a13      	ldr	r2, [pc, #76]	@ (800094c <OLED_ShowStatus+0xf0>)
 80008fe:	2106      	movs	r1, #6
 8000900:	2000      	movs	r0, #0
 8000902:	f7ff ff2d 	bl	8000760 <oled_print_text>
 8000906:	e00b      	b.n	8000920 <OLED_ShowStatus+0xc4>
        case GAME_STATE_DIFFICULTY_SELECT: oled_print_text(0,6,"DIFF"); break;
 8000908:	4a11      	ldr	r2, [pc, #68]	@ (8000950 <OLED_ShowStatus+0xf4>)
 800090a:	2106      	movs	r1, #6
 800090c:	2000      	movs	r0, #0
 800090e:	f7ff ff27 	bl	8000760 <oled_print_text>
 8000912:	e005      	b.n	8000920 <OLED_ShowStatus+0xc4>
        default:                      oled_print_text(0, 6, "PLAY"); break;
 8000914:	4a0f      	ldr	r2, [pc, #60]	@ (8000954 <OLED_ShowStatus+0xf8>)
 8000916:	2106      	movs	r1, #6
 8000918:	2000      	movs	r0, #0
 800091a:	f7ff ff21 	bl	8000760 <oled_print_text>
 800091e:	bf00      	nop
    }
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	08002bb0 	.word	0x08002bb0
 8000928:	200000b3 	.word	0x200000b3
 800092c:	08002bb8 	.word	0x08002bb8
 8000930:	200000b8 	.word	0x200000b8
 8000934:	08002bc0 	.word	0x08002bc0
 8000938:	200000b4 	.word	0x200000b4
 800093c:	200000b1 	.word	0x200000b1
 8000940:	08002bc8 	.word	0x08002bc8
 8000944:	08002bd0 	.word	0x08002bd0
 8000948:	08002bdc 	.word	0x08002bdc
 800094c:	08002be4 	.word	0x08002be4
 8000950:	08002bec 	.word	0x08002bec
 8000954:	08002bf4 	.word	0x08002bf4

08000958 <main>:
void Log_Print(const char* format, ...);

/* ============================================================================
 * MAIN
 * ============================================================================ */
int main(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
    SystemClock_Config();
 800095c:	f000 fcba 	bl	80012d4 <SystemClock_Config>
    GPIO_Init();
 8000960:	f000 fcfe 	bl	8001360 <GPIO_Init>
    USART2_Init();
 8000964:	f000 fd82 	bl	800146c <USART2_Init>
    SysTick_Config(SystemCoreClock / 1000); // 1ms ticks
 8000968:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <main+0x5c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a12      	ldr	r2, [pc, #72]	@ (80009b8 <main+0x60>)
 800096e:	fba2 2303 	umull	r2, r3, r2, r3
 8000972:	099b      	lsrs	r3, r3, #6
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fccb 	bl	8000310 <SysTick_Config>
    NVIC_Init();
 800097a:	f000 fd95 	bl	80014a8 <NVIC_Init>
    ADC_Init();
 800097e:	f000 fd49 	bl	8001414 <ADC_Init>

    // OLED HUD
    oled_init();
 8000982:	f7ff fe2c 	bl	80005de <oled_init>
    oled_clear();
 8000986:	f7ff fe04 	bl	8000592 <oled_clear>

    g_system_initialized = 1;
 800098a:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <main+0x64>)
 800098c:	2201      	movs	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]

    ADC_StartConversion();
 8000990:	f000 fd9a 	bl	80014c8 <ADC_StartConversion>
    Delay_ms(10);
 8000994:	200a      	movs	r0, #10
 8000996:	f000 fdaf 	bl	80014f8 <Delay_ms>

    Game_Init();
 800099a:	f000 f811 	bl	80009c0 <Game_Init>

    while(1) {
        Monitor_Buttons();
 800099e:	f000 fb93 	bl	80010c8 <Monitor_Buttons>
        Monitor_ADC();
 80009a2:	f000 fbff 	bl	80011a4 <Monitor_ADC>
        Game_Run();
 80009a6:	f000 f831 	bl	8000a0c <Game_Run>
        Delay_ms(5);
 80009aa:	2005      	movs	r0, #5
 80009ac:	f000 fda4 	bl	80014f8 <Delay_ms>
        Monitor_Buttons();
 80009b0:	bf00      	nop
 80009b2:	e7f4      	b.n	800099e <main+0x46>
 80009b4:	20000000 	.word	0x20000000
 80009b8:	10624dd3 	.word	0x10624dd3
 80009bc:	200000a0 	.word	0x200000a0

080009c0 <Game_Init>:
}

/* ============================================================================
 * GAME LOGIC IMPLEMENTATION
 * ============================================================================ */
void Game_Init(void) {
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
    Log_Print("\r\n[GAME] Initializing Simon Game...\r\n");
 80009c6:	480e      	ldr	r0, [pc, #56]	@ (8000a00 <Game_Init+0x40>)
 80009c8:	f000 fdb8 	bl	800153c <Log_Print>
    uint32_t seed = g_adc_values[1] + g_adc_values[2] + GetTick();
 80009cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000a04 <Game_Init+0x44>)
 80009ce:	885b      	ldrh	r3, [r3, #2]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <Game_Init+0x44>)
 80009d4:	889b      	ldrh	r3, [r3, #4]
 80009d6:	4413      	add	r3, r2
 80009d8:	461c      	mov	r4, r3
 80009da:	f000 fda3 	bl	8001524 <GetTick>
 80009de:	4603      	mov	r3, r0
 80009e0:	4423      	add	r3, r4
 80009e2:	607b      	str	r3, [r7, #4]
    srand(seed);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f000 fedb 	bl	80017a0 <srand>
    Log_Print("[GAME] Random seed set to: %lu\r\n", seed);
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	4806      	ldr	r0, [pc, #24]	@ (8000a08 <Game_Init+0x48>)
 80009ee:	f000 fda5 	bl	800153c <Log_Print>
    set_game_state(GAME_STATE_BOOT);
 80009f2:	2000      	movs	r0, #0
 80009f4:	f000 fa76 	bl	8000ee4 <set_game_state>
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd90      	pop	{r4, r7, pc}
 8000a00:	08002bfc 	.word	0x08002bfc
 8000a04:	200000a4 	.word	0x200000a4
 8000a08:	08002c24 	.word	0x08002c24

08000a0c <Game_Run>:

void Game_Run(void) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
    if (g_last_state_logged != g_game_state) {
 8000a10:	4b3e      	ldr	r3, [pc, #248]	@ (8000b0c <Game_Run+0x100>)
 8000a12:	781a      	ldrb	r2, [r3, #0]
 8000a14:	4b3e      	ldr	r3, [pc, #248]	@ (8000b10 <Game_Run+0x104>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d03d      	beq.n	8000a98 <Game_Run+0x8c>
        switch(g_game_state) {
 8000a1c:	4b3c      	ldr	r3, [pc, #240]	@ (8000b10 <Game_Run+0x104>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b07      	cmp	r3, #7
 8000a22:	d833      	bhi.n	8000a8c <Game_Run+0x80>
 8000a24:	a201      	add	r2, pc, #4	@ (adr r2, 8000a2c <Game_Run+0x20>)
 8000a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2a:	bf00      	nop
 8000a2c:	08000a4d 	.word	0x08000a4d
 8000a30:	08000a55 	.word	0x08000a55
 8000a34:	08000a5d 	.word	0x08000a5d
 8000a38:	08000a65 	.word	0x08000a65
 8000a3c:	08000a6d 	.word	0x08000a6d
 8000a40:	08000a75 	.word	0x08000a75
 8000a44:	08000a7d 	.word	0x08000a7d
 8000a48:	08000a85 	.word	0x08000a85
            case GAME_STATE_BOOT:
                Log_Print("[STATE] -> BOOT\r\n");
 8000a4c:	4831      	ldr	r0, [pc, #196]	@ (8000b14 <Game_Run+0x108>)
 8000a4e:	f000 fd75 	bl	800153c <Log_Print>
                break;
 8000a52:	e01b      	b.n	8000a8c <Game_Run+0x80>
            case GAME_STATE_DIFFICULTY_SELECT:
                Log_Print("[STATE] -> DIFFICULTY_SELECT\r\n");
 8000a54:	4830      	ldr	r0, [pc, #192]	@ (8000b18 <Game_Run+0x10c>)
 8000a56:	f000 fd71 	bl	800153c <Log_Print>
                break;
 8000a5a:	e017      	b.n	8000a8c <Game_Run+0x80>
            case GAME_STATE_LEVEL_INTRO:
                Log_Print("[STATE] -> LEVEL_INTRO\r\n");
 8000a5c:	482f      	ldr	r0, [pc, #188]	@ (8000b1c <Game_Run+0x110>)
 8000a5e:	f000 fd6d 	bl	800153c <Log_Print>
                break;
 8000a62:	e013      	b.n	8000a8c <Game_Run+0x80>
            case GAME_STATE_PATTERN_DISPLAY:
                Log_Print("[STATE] -> PATTERN_DISPLAY\r\n");
 8000a64:	482e      	ldr	r0, [pc, #184]	@ (8000b20 <Game_Run+0x114>)
 8000a66:	f000 fd69 	bl	800153c <Log_Print>
                break;
 8000a6a:	e00f      	b.n	8000a8c <Game_Run+0x80>
            case GAME_STATE_INPUT_WAIT:
                Log_Print("[STATE] -> INPUT_WAIT\r\n");
 8000a6c:	482d      	ldr	r0, [pc, #180]	@ (8000b24 <Game_Run+0x118>)
 8000a6e:	f000 fd65 	bl	800153c <Log_Print>
                break;
 8000a72:	e00b      	b.n	8000a8c <Game_Run+0x80>
            case GAME_STATE_RESULT_PROCESS:
                Log_Print("[STATE] -> RESULT_PROCESS\r\n");
 8000a74:	482c      	ldr	r0, [pc, #176]	@ (8000b28 <Game_Run+0x11c>)
 8000a76:	f000 fd61 	bl	800153c <Log_Print>
                break;
 8000a7a:	e007      	b.n	8000a8c <Game_Run+0x80>
            case GAME_STATE_VICTORY:
                Log_Print("[STATE] -> VICTORY\r\n");
 8000a7c:	482b      	ldr	r0, [pc, #172]	@ (8000b2c <Game_Run+0x120>)
 8000a7e:	f000 fd5d 	bl	800153c <Log_Print>
                break;
 8000a82:	e003      	b.n	8000a8c <Game_Run+0x80>
            case GAME_STATE_GAME_DEATH:
                Log_Print("[STATE] -> GAME_DEATH\r\n");
 8000a84:	482a      	ldr	r0, [pc, #168]	@ (8000b30 <Game_Run+0x124>)
 8000a86:	f000 fd59 	bl	800153c <Log_Print>
                break;
 8000a8a:	bf00      	nop
        }
        g_last_state_logged = g_game_state;
 8000a8c:	4b20      	ldr	r3, [pc, #128]	@ (8000b10 <Game_Run+0x104>)
 8000a8e:	781a      	ldrb	r2, [r3, #0]
 8000a90:	4b1e      	ldr	r3, [pc, #120]	@ (8000b0c <Game_Run+0x100>)
 8000a92:	701a      	strb	r2, [r3, #0]
        OLED_ShowStatus(); // อัปเดตจอทุกครั้งที่เข้าสถานะใหม่
 8000a94:	f7ff fee2 	bl	800085c <OLED_ShowStatus>
    }
    switch(g_game_state) {
 8000a98:	4b1d      	ldr	r3, [pc, #116]	@ (8000b10 <Game_Run+0x104>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b07      	cmp	r3, #7
 8000a9e:	d82b      	bhi.n	8000af8 <Game_Run+0xec>
 8000aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8000aa8 <Game_Run+0x9c>)
 8000aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa6:	bf00      	nop
 8000aa8:	08000ac9 	.word	0x08000ac9
 8000aac:	08000acf 	.word	0x08000acf
 8000ab0:	08000ad5 	.word	0x08000ad5
 8000ab4:	08000adb 	.word	0x08000adb
 8000ab8:	08000ae1 	.word	0x08000ae1
 8000abc:	08000ae7 	.word	0x08000ae7
 8000ac0:	08000aed 	.word	0x08000aed
 8000ac4:	08000af3 	.word	0x08000af3
        case GAME_STATE_BOOT:              handle_boot();              break;
 8000ac8:	f000 fa22 	bl	8000f10 <handle_boot>
 8000acc:	e01c      	b.n	8000b08 <Game_Run+0xfc>
        case GAME_STATE_DIFFICULTY_SELECT: handle_difficulty_select(); break;
 8000ace:	f000 fa35 	bl	8000f3c <handle_difficulty_select>
 8000ad2:	e019      	b.n	8000b08 <Game_Run+0xfc>
        case GAME_STATE_LEVEL_INTRO:       handle_level_intro();       break;
 8000ad4:	f000 f874 	bl	8000bc0 <handle_level_intro>
 8000ad8:	e016      	b.n	8000b08 <Game_Run+0xfc>
        case GAME_STATE_PATTERN_DISPLAY:   handle_pattern_display();   break;
 8000ada:	f000 f8a3 	bl	8000c24 <handle_pattern_display>
 8000ade:	e013      	b.n	8000b08 <Game_Run+0xfc>
        case GAME_STATE_INPUT_WAIT:        handle_input_wait();        break;
 8000ae0:	f000 f8d8 	bl	8000c94 <handle_input_wait>
 8000ae4:	e010      	b.n	8000b08 <Game_Run+0xfc>
        case GAME_STATE_RESULT_PROCESS:    handle_result_process();    break;
 8000ae6:	f000 f925 	bl	8000d34 <handle_result_process>
 8000aea:	e00d      	b.n	8000b08 <Game_Run+0xfc>
        case GAME_STATE_VICTORY:           handle_victory();           break;
 8000aec:	f000 f976 	bl	8000ddc <handle_victory>
 8000af0:	e00a      	b.n	8000b08 <Game_Run+0xfc>
        case GAME_STATE_GAME_DEATH:        handle_game_death();        break;
 8000af2:	f000 f9b5 	bl	8000e60 <handle_game_death>
 8000af6:	e007      	b.n	8000b08 <Game_Run+0xfc>
        default:
            set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f000 f9f3 	bl	8000ee4 <set_game_state>
            Delay_ms(1000);
 8000afe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b02:	f000 fcf9 	bl	80014f8 <Delay_ms>
            break;
 8000b06:	bf00      	nop
    }
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000005 	.word	0x20000005
 8000b10:	200000b1 	.word	0x200000b1
 8000b14:	08002c48 	.word	0x08002c48
 8000b18:	08002c5c 	.word	0x08002c5c
 8000b1c:	08002c7c 	.word	0x08002c7c
 8000b20:	08002c98 	.word	0x08002c98
 8000b24:	08002cb8 	.word	0x08002cb8
 8000b28:	08002cd0 	.word	0x08002cd0
 8000b2c:	08002cec 	.word	0x08002cec
 8000b30:	08002d04 	.word	0x08002d04

08000b34 <generate_pattern>:

static void generate_pattern(uint8_t length) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < length; i++) g_pattern[i] = rand() % 4;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	73fb      	strb	r3, [r7, #15]
 8000b42:	e010      	b.n	8000b66 <generate_pattern+0x32>
 8000b44:	f000 fe5a 	bl	80017fc <rand>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	425a      	negs	r2, r3
 8000b4c:	f003 0303 	and.w	r3, r3, #3
 8000b50:	f002 0203 	and.w	r2, r2, #3
 8000b54:	bf58      	it	pl
 8000b56:	4253      	negpl	r3, r2
 8000b58:	7bfa      	ldrb	r2, [r7, #15]
 8000b5a:	b2d9      	uxtb	r1, r3
 8000b5c:	4b07      	ldr	r3, [pc, #28]	@ (8000b7c <generate_pattern+0x48>)
 8000b5e:	5499      	strb	r1, [r3, r2]
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	3301      	adds	r3, #1
 8000b64:	73fb      	strb	r3, [r7, #15]
 8000b66:	7bfa      	ldrb	r2, [r7, #15]
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d3ea      	bcc.n	8000b44 <generate_pattern+0x10>
    g_pattern_length = length;
 8000b6e:	4a04      	ldr	r2, [pc, #16]	@ (8000b80 <generate_pattern+0x4c>)
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	7013      	strb	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200000c4 	.word	0x200000c4
 8000b80:	200000e4 	.word	0x200000e4

08000b84 <show_led>:

static void show_led(uint8_t idx) { LED_SetPattern(1 << button_to_led_map[idx]); }
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	4a06      	ldr	r2, [pc, #24]	@ (8000bac <show_led+0x28>)
 8000b92:	5cd3      	ldrb	r3, [r2, r3]
 8000b94:	461a      	mov	r2, r3
 8000b96:	2301      	movs	r3, #1
 8000b98:	4093      	lsls	r3, r2
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 fb09 	bl	80011b4 <LED_SetPattern>
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	08002db8 	.word	0x08002db8

08000bb0 <clear_leds>:
static void clear_leds(void) { LED_SetPattern(0); }
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f000 fafd 	bl	80011b4 <LED_SetPattern>
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <handle_level_intro>:

static void handle_level_intro(void) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
    Log_Print("Level %u. Lives: %u. Score: %lu\r\n", g_level, g_lives, g_score);
 8000bc4:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <handle_level_intro+0x4c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <handle_level_intro+0x50>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <handle_level_intro+0x54>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4810      	ldr	r0, [pc, #64]	@ (8000c18 <handle_level_intro+0x58>)
 8000bd6:	f000 fcb1 	bl	800153c <Log_Print>
    OLED_ShowStatus();
 8000bda:	f7ff fe3f 	bl	800085c <OLED_ShowStatus>
    Delay_ms(800);
 8000bde:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000be2:	f000 fc89 	bl	80014f8 <Delay_ms>
    generate_pattern(g_level + g_difficulty - 1);
 8000be6:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <handle_level_intro+0x4c>)
 8000be8:	781a      	ldrb	r2, [r3, #0]
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <handle_level_intro+0x5c>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff ff9c 	bl	8000b34 <generate_pattern>
    g_pattern_index = 0;
 8000bfc:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <handle_level_intro+0x60>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	701a      	strb	r2, [r3, #0]
    set_game_state(GAME_STATE_PATTERN_DISPLAY);
 8000c02:	2003      	movs	r0, #3
 8000c04:	f000 f96e 	bl	8000ee4 <set_game_state>
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	200000b3 	.word	0x200000b3
 8000c10:	200000b8 	.word	0x200000b8
 8000c14:	200000b4 	.word	0x200000b4
 8000c18:	08002d1c 	.word	0x08002d1c
 8000c1c:	200000b2 	.word	0x200000b2
 8000c20:	200000e5 	.word	0x200000e5

08000c24 <handle_pattern_display>:

static void handle_pattern_display(void) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
    if (g_pattern_index < g_pattern_length) {
 8000c28:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <handle_pattern_display+0x5c>)
 8000c2a:	781a      	ldrb	r2, [r3, #0]
 8000c2c:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <handle_pattern_display+0x60>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d217      	bcs.n	8000c64 <handle_pattern_display+0x40>
        show_led(g_pattern[g_pattern_index]); Delay_ms(500);
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <handle_pattern_display+0x5c>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b13      	ldr	r3, [pc, #76]	@ (8000c88 <handle_pattern_display+0x64>)
 8000c3c:	5c9b      	ldrb	r3, [r3, r2]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ffa0 	bl	8000b84 <show_led>
 8000c44:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c48:	f000 fc56 	bl	80014f8 <Delay_ms>
        clear_leds();                          Delay_ms(250);
 8000c4c:	f7ff ffb0 	bl	8000bb0 <clear_leds>
 8000c50:	20fa      	movs	r0, #250	@ 0xfa
 8000c52:	f000 fc51 	bl	80014f8 <Delay_ms>
        g_pattern_index++;
 8000c56:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <handle_pattern_display+0x5c>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <handle_pattern_display+0x5c>)
 8000c60:	701a      	strb	r2, [r3, #0]
        g_pattern_index = 0;
        g_input_index = 0;
        g_input_correct = 1;
        set_game_state(GAME_STATE_INPUT_WAIT);
    }
}
 8000c62:	e00b      	b.n	8000c7c <handle_pattern_display+0x58>
        g_pattern_index = 0;
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <handle_pattern_display+0x5c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
        g_input_index = 0;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <handle_pattern_display+0x68>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]
        g_input_correct = 1;
 8000c70:	4b07      	ldr	r3, [pc, #28]	@ (8000c90 <handle_pattern_display+0x6c>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
        set_game_state(GAME_STATE_INPUT_WAIT);
 8000c76:	2004      	movs	r0, #4
 8000c78:	f000 f934 	bl	8000ee4 <set_game_state>
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200000e5 	.word	0x200000e5
 8000c84:	200000e4 	.word	0x200000e4
 8000c88:	200000c4 	.word	0x200000c4
 8000c8c:	200000e6 	.word	0x200000e6
 8000c90:	20000004 	.word	0x20000004

08000c94 <handle_input_wait>:

static void handle_input_wait(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
    if (g_input_index < g_pattern_length) {
 8000c9a:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <handle_input_wait+0x8c>)
 8000c9c:	781a      	ldrb	r2, [r3, #0]
 8000c9e:	4b21      	ldr	r3, [pc, #132]	@ (8000d24 <handle_input_wait+0x90>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d234      	bcs.n	8000d10 <handle_input_wait+0x7c>
        for (int i = 0; i < 4; i++) {
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	e02d      	b.n	8000d08 <handle_input_wait+0x74>
            if (g_buttons[i].current_state == 1 && g_buttons[i].previous_state == 0) {
 8000cac:	4a1e      	ldr	r2, [pc, #120]	@ (8000d28 <handle_input_wait+0x94>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d124      	bne.n	8000d02 <handle_input_wait+0x6e>
 8000cb8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d28 <handle_input_wait+0x94>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	785b      	ldrb	r3, [r3, #1]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d11d      	bne.n	8000d02 <handle_input_wait+0x6e>
                show_led(i); Delay_ms(200); clear_leds();
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff5a 	bl	8000b84 <show_led>
 8000cd0:	20c8      	movs	r0, #200	@ 0xc8
 8000cd2:	f000 fc11 	bl	80014f8 <Delay_ms>
 8000cd6:	f7ff ff6b 	bl	8000bb0 <clear_leds>
                if (i != g_pattern[g_input_index]) g_input_correct = 0;
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <handle_input_wait+0x8c>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <handle_input_wait+0x98>)
 8000ce2:	5c9b      	ldrb	r3, [r3, r2]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d002      	beq.n	8000cf2 <handle_input_wait+0x5e>
 8000cec:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <handle_input_wait+0x9c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
                g_input_index++;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <handle_input_wait+0x8c>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <handle_input_wait+0x8c>)
 8000cfc:	701a      	strb	r2, [r3, #0]
                break;
 8000cfe:	bf00      	nop
            }
        }
    } else {
        set_game_state(GAME_STATE_RESULT_PROCESS);
    }
}
 8000d00:	e009      	b.n	8000d16 <handle_input_wait+0x82>
        for (int i = 0; i < 4; i++) {
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3301      	adds	r3, #1
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b03      	cmp	r3, #3
 8000d0c:	ddce      	ble.n	8000cac <handle_input_wait+0x18>
}
 8000d0e:	e002      	b.n	8000d16 <handle_input_wait+0x82>
        set_game_state(GAME_STATE_RESULT_PROCESS);
 8000d10:	2005      	movs	r0, #5
 8000d12:	f000 f8e7 	bl	8000ee4 <set_game_state>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200000e6 	.word	0x200000e6
 8000d24:	200000e4 	.word	0x200000e4
 8000d28:	20000080 	.word	0x20000080
 8000d2c:	200000c4 	.word	0x200000c4
 8000d30:	20000004 	.word	0x20000004

08000d34 <handle_result_process>:

static void handle_result_process(void) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
    if (g_input_correct) {
 8000d38:	4b22      	ldr	r3, [pc, #136]	@ (8000dc4 <handle_result_process+0x90>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d024      	beq.n	8000d8a <handle_result_process+0x56>
        g_score += 10 * g_level * g_difficulty;
 8000d40:	4b21      	ldr	r3, [pc, #132]	@ (8000dc8 <handle_result_process+0x94>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b21      	ldr	r3, [pc, #132]	@ (8000dcc <handle_result_process+0x98>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	fb03 f202 	mul.w	r2, r3, r2
 8000d4e:	4613      	mov	r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	4413      	add	r3, r2
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	461a      	mov	r2, r3
 8000d58:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd0 <handle_result_process+0x9c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd0 <handle_result_process+0x9c>)
 8000d60:	6013      	str	r3, [r2, #0]
        g_level++;
 8000d62:	4b19      	ldr	r3, [pc, #100]	@ (8000dc8 <handle_result_process+0x94>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	3301      	adds	r3, #1
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <handle_result_process+0x94>)
 8000d6c:	701a      	strb	r2, [r3, #0]
        OLED_ShowStatus();
 8000d6e:	f7ff fd75 	bl	800085c <OLED_ShowStatus>
        if (g_level > 5) set_game_state(GAME_STATE_VICTORY);
 8000d72:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <handle_result_process+0x94>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b05      	cmp	r3, #5
 8000d78:	d903      	bls.n	8000d82 <handle_result_process+0x4e>
 8000d7a:	2006      	movs	r0, #6
 8000d7c:	f000 f8b2 	bl	8000ee4 <set_game_state>
        if (g_lives > 0) g_lives--;
        OLED_ShowStatus();
        if (g_lives == 0) set_game_state(GAME_STATE_GAME_DEATH);
        else { Log_Print("Try again!\r\n"); set_game_state(GAME_STATE_LEVEL_INTRO); }
    }
}
 8000d80:	e01d      	b.n	8000dbe <handle_result_process+0x8a>
        else             set_game_state(GAME_STATE_LEVEL_INTRO);
 8000d82:	2002      	movs	r0, #2
 8000d84:	f000 f8ae 	bl	8000ee4 <set_game_state>
}
 8000d88:	e019      	b.n	8000dbe <handle_result_process+0x8a>
        if (g_lives > 0) g_lives--;
 8000d8a:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <handle_result_process+0xa0>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d005      	beq.n	8000d9e <handle_result_process+0x6a>
 8000d92:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <handle_result_process+0xa0>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd4 <handle_result_process+0xa0>)
 8000d9c:	701a      	strb	r2, [r3, #0]
        OLED_ShowStatus();
 8000d9e:	f7ff fd5d 	bl	800085c <OLED_ShowStatus>
        if (g_lives == 0) set_game_state(GAME_STATE_GAME_DEATH);
 8000da2:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <handle_result_process+0xa0>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d103      	bne.n	8000db2 <handle_result_process+0x7e>
 8000daa:	2007      	movs	r0, #7
 8000dac:	f000 f89a 	bl	8000ee4 <set_game_state>
}
 8000db0:	e005      	b.n	8000dbe <handle_result_process+0x8a>
        else { Log_Print("Try again!\r\n"); set_game_state(GAME_STATE_LEVEL_INTRO); }
 8000db2:	4809      	ldr	r0, [pc, #36]	@ (8000dd8 <handle_result_process+0xa4>)
 8000db4:	f000 fbc2 	bl	800153c <Log_Print>
 8000db8:	2002      	movs	r0, #2
 8000dba:	f000 f893 	bl	8000ee4 <set_game_state>
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000004 	.word	0x20000004
 8000dc8:	200000b3 	.word	0x200000b3
 8000dcc:	200000b2 	.word	0x200000b2
 8000dd0:	200000b4 	.word	0x200000b4
 8000dd4:	200000b8 	.word	0x200000b8
 8000dd8:	08002d40 	.word	0x08002d40

08000ddc <handle_victory>:

static void handle_victory(void) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
    Log_Print("Congratulations! Final Score: %lu\r\n", g_score);
 8000de2:	4b19      	ldr	r3, [pc, #100]	@ (8000e48 <handle_victory+0x6c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4619      	mov	r1, r3
 8000de8:	4818      	ldr	r0, [pc, #96]	@ (8000e4c <handle_victory+0x70>)
 8000dea:	f000 fba7 	bl	800153c <Log_Print>
    OLED_ShowStatus();
 8000dee:	f7ff fd35 	bl	800085c <OLED_ShowStatus>
    for (int i = 0; i < 4; i++) {
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	e01f      	b.n	8000e38 <handle_victory+0x5c>
        if (g_buttons[i].current_state == 1 && g_buttons[i].previous_state == 0) {
 8000df8:	4a15      	ldr	r2, [pc, #84]	@ (8000e50 <handle_victory+0x74>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d116      	bne.n	8000e32 <handle_victory+0x56>
 8000e04:	4a12      	ldr	r2, [pc, #72]	@ (8000e50 <handle_victory+0x74>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	4413      	add	r3, r2
 8000e0c:	785b      	ldrb	r3, [r3, #1]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10f      	bne.n	8000e32 <handle_victory+0x56>
            g_level = 1; g_score = 0; g_lives = INITIAL_LIVES; g_difficulty_locked = 0;
 8000e12:	4b10      	ldr	r3, [pc, #64]	@ (8000e54 <handle_victory+0x78>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	701a      	strb	r2, [r3, #0]
 8000e18:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <handle_victory+0x6c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <handle_victory+0x7c>)
 8000e20:	2204      	movs	r2, #4
 8000e22:	701a      	strb	r2, [r3, #0]
 8000e24:	4b0d      	ldr	r3, [pc, #52]	@ (8000e5c <handle_victory+0x80>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
            set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f000 f85a 	bl	8000ee4 <set_game_state>
            break;
 8000e30:	e006      	b.n	8000e40 <handle_victory+0x64>
    for (int i = 0; i < 4; i++) {
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3301      	adds	r3, #1
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b03      	cmp	r3, #3
 8000e3c:	dddc      	ble.n	8000df8 <handle_victory+0x1c>
        }
    }
}
 8000e3e:	bf00      	nop
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	200000b4 	.word	0x200000b4
 8000e4c:	08002d50 	.word	0x08002d50
 8000e50:	20000080 	.word	0x20000080
 8000e54:	200000b3 	.word	0x200000b3
 8000e58:	200000b8 	.word	0x200000b8
 8000e5c:	200000c0 	.word	0x200000c0

08000e60 <handle_game_death>:

static void handle_game_death(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
    Log_Print("Game Over! Final Score: %lu\r\n", g_score);
 8000e66:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <handle_game_death+0x6c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4818      	ldr	r0, [pc, #96]	@ (8000ed0 <handle_game_death+0x70>)
 8000e6e:	f000 fb65 	bl	800153c <Log_Print>
    OLED_ShowStatus();
 8000e72:	f7ff fcf3 	bl	800085c <OLED_ShowStatus>
    for (int i = 0; i < 4; i++) {
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	e01f      	b.n	8000ebc <handle_game_death+0x5c>
        if (g_buttons[i].current_state == 1 && g_buttons[i].previous_state == 0) {
 8000e7c:	4a15      	ldr	r2, [pc, #84]	@ (8000ed4 <handle_game_death+0x74>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d116      	bne.n	8000eb6 <handle_game_death+0x56>
 8000e88:	4a12      	ldr	r2, [pc, #72]	@ (8000ed4 <handle_game_death+0x74>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	4413      	add	r3, r2
 8000e90:	785b      	ldrb	r3, [r3, #1]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d10f      	bne.n	8000eb6 <handle_game_death+0x56>
            g_level = 1; g_score = 0; g_lives = INITIAL_LIVES; g_difficulty_locked = 0;
 8000e96:	4b10      	ldr	r3, [pc, #64]	@ (8000ed8 <handle_game_death+0x78>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ecc <handle_game_death+0x6c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <handle_game_death+0x7c>)
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	701a      	strb	r2, [r3, #0]
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee0 <handle_game_death+0x80>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
            set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f000 f818 	bl	8000ee4 <set_game_state>
            break;
 8000eb4:	e006      	b.n	8000ec4 <handle_game_death+0x64>
    for (int i = 0; i < 4; i++) {
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	dddc      	ble.n	8000e7c <handle_game_death+0x1c>
        }
    }
}
 8000ec2:	bf00      	nop
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	200000b4 	.word	0x200000b4
 8000ed0:	08002d74 	.word	0x08002d74
 8000ed4:	20000080 	.word	0x20000080
 8000ed8:	200000b3 	.word	0x200000b3
 8000edc:	200000b8 	.word	0x200000b8
 8000ee0:	200000c0 	.word	0x200000c0

08000ee4 <set_game_state>:

static void set_game_state(GameState_t new_state) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
    g_game_state = new_state;
 8000eee:	4a06      	ldr	r2, [pc, #24]	@ (8000f08 <set_game_state+0x24>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	7013      	strb	r3, [r2, #0]
    g_state_entry_time = GetTick();
 8000ef4:	f000 fb16 	bl	8001524 <GetTick>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4a04      	ldr	r2, [pc, #16]	@ (8000f0c <set_game_state+0x28>)
 8000efc:	6013      	str	r3, [r2, #0]
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200000b1 	.word	0x200000b1
 8000f0c:	200000bc 	.word	0x200000bc

08000f10 <handle_boot>:

static void handle_boot(void) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
    g_level = 1; g_score = 0; g_lives = INITIAL_LIVES;
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <handle_boot+0x20>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <handle_boot+0x24>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <handle_boot+0x28>)
 8000f22:	2204      	movs	r2, #4
 8000f24:	701a      	strb	r2, [r3, #0]
    set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 8000f26:	2001      	movs	r0, #1
 8000f28:	f7ff ffdc 	bl	8000ee4 <set_game_state>
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200000b3 	.word	0x200000b3
 8000f34:	200000b4 	.word	0x200000b4
 8000f38:	200000b8 	.word	0x200000b8

08000f3c <handle_difficulty_select>:

static void handle_difficulty_select(void) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
    uint32_t current_time = GetTick();
 8000f42:	f000 faef 	bl	8001524 <GetTick>
 8000f46:	60b8      	str	r0, [r7, #8]
    static uint32_t last_log_time = 0;
    static uint8_t last_difficulty = 0;

    if (!g_difficulty_locked) {
 8000f48:	4b2d      	ldr	r3, [pc, #180]	@ (8001000 <handle_difficulty_select+0xc4>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d14f      	bne.n	8000ff0 <handle_difficulty_select+0xb4>
        uint16_t pot_value = g_adc_values[0]; // 0..1023
 8000f50:	4b2c      	ldr	r3, [pc, #176]	@ (8001004 <handle_difficulty_select+0xc8>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	80fb      	strh	r3, [r7, #6]
        // map เป็น 1..5 (แบ่งเท่า ๆ กัน)
        g_difficulty = (uint32_t)(pot_value * 5) / 1024 + 1;
 8000f56:	88fa      	ldrh	r2, [r7, #6]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	0a9b      	lsrs	r3, r3, #10
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	3301      	adds	r3, #1
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4b28      	ldr	r3, [pc, #160]	@ (8001008 <handle_difficulty_select+0xcc>)
 8000f68:	701a      	strb	r2, [r3, #0]
        SevenSeg_Display(g_difficulty);
 8000f6a:	4b27      	ldr	r3, [pc, #156]	@ (8001008 <handle_difficulty_select+0xcc>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f964 	bl	800123c <SevenSeg_Display>

        if (g_difficulty != last_difficulty || (current_time - last_log_time) > 1000) {
 8000f74:	4b24      	ldr	r3, [pc, #144]	@ (8001008 <handle_difficulty_select+0xcc>)
 8000f76:	781a      	ldrb	r2, [r3, #0]
 8000f78:	4b24      	ldr	r3, [pc, #144]	@ (800100c <handle_difficulty_select+0xd0>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d106      	bne.n	8000f8e <handle_difficulty_select+0x52>
 8000f80:	4b23      	ldr	r3, [pc, #140]	@ (8001010 <handle_difficulty_select+0xd4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	68ba      	ldr	r2, [r7, #8]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f8c:	d90f      	bls.n	8000fae <handle_difficulty_select+0x72>
            Log_Print("[DIFFICULTY] Pot:%u -> Diff:%u\r\n", pot_value, g_difficulty);
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	4a1d      	ldr	r2, [pc, #116]	@ (8001008 <handle_difficulty_select+0xcc>)
 8000f92:	7812      	ldrb	r2, [r2, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	481f      	ldr	r0, [pc, #124]	@ (8001014 <handle_difficulty_select+0xd8>)
 8000f98:	f000 fad0 	bl	800153c <Log_Print>
            last_log_time = current_time; last_difficulty = g_difficulty;
 8000f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8001010 <handle_difficulty_select+0xd4>)
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <handle_difficulty_select+0xcc>)
 8000fa4:	781a      	ldrb	r2, [r3, #0]
 8000fa6:	4b19      	ldr	r3, [pc, #100]	@ (800100c <handle_difficulty_select+0xd0>)
 8000fa8:	701a      	strb	r2, [r3, #0]
            OLED_ShowStatus();
 8000faa:	f7ff fc57 	bl	800085c <OLED_ShowStatus>
        }
        for (int i = 0; i < 4; i++) {
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	e019      	b.n	8000fe8 <handle_difficulty_select+0xac>
            if (g_buttons[i].current_state == 1 &&
 8000fb4:	4a18      	ldr	r2, [pc, #96]	@ (8001018 <handle_difficulty_select+0xdc>)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d110      	bne.n	8000fe2 <handle_difficulty_select+0xa6>
               (current_time - g_buttons[i].last_change_time) >= LONG_PRESS_DURATION_MS) {
 8000fc0:	4a15      	ldr	r2, [pc, #84]	@ (8001018 <handle_difficulty_select+0xdc>)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	4413      	add	r3, r2
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	1ad3      	subs	r3, r2, r3
            if (g_buttons[i].current_state == 1 &&
 8000fce:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000fd2:	d306      	bcc.n	8000fe2 <handle_difficulty_select+0xa6>
                g_difficulty_locked = 1;
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <handle_difficulty_select+0xc4>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	701a      	strb	r2, [r3, #0]
                set_game_state(GAME_STATE_LEVEL_INTRO);
 8000fda:	2002      	movs	r0, #2
 8000fdc:	f7ff ff82 	bl	8000ee4 <set_game_state>
                return;
 8000fe0:	e00b      	b.n	8000ffa <handle_difficulty_select+0xbe>
        for (int i = 0; i < 4; i++) {
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	dde2      	ble.n	8000fb4 <handle_difficulty_select+0x78>
 8000fee:	e004      	b.n	8000ffa <handle_difficulty_select+0xbe>
            }
        }
    } else {
        SevenSeg_Display(g_difficulty);
 8000ff0:	4b05      	ldr	r3, [pc, #20]	@ (8001008 <handle_difficulty_select+0xcc>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 f921 	bl	800123c <SevenSeg_Display>
    }
}
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200000c0 	.word	0x200000c0
 8001004:	200000a4 	.word	0x200000a4
 8001008:	200000b2 	.word	0x200000b2
 800100c:	200000e7 	.word	0x200000e7
 8001010:	200000e8 	.word	0x200000e8
 8001014:	08002d94 	.word	0x08002d94
 8001018:	20000080 	.word	0x20000080

0800101c <SysTick_Handler>:

/* ============================================================================
 * INTERRUPT HANDLERS
 * ============================================================================ */
void SysTick_Handler(void) { g_tick_counter++; }
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
 8001020:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <SysTick_Handler+0x18>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	3301      	adds	r3, #1
 8001026:	4a03      	ldr	r2, [pc, #12]	@ (8001034 <SysTick_Handler+0x18>)
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	200000ac 	.word	0x200000ac

08001038 <ADC_IRQHandler>:

void ADC_IRQHandler(void) {
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
    if(ADC1->SR & ADC_SR_EOC) {
 800103c:	4b1e      	ldr	r3, [pc, #120]	@ (80010b8 <ADC_IRQHandler+0x80>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d031      	beq.n	80010ac <ADC_IRQHandler+0x74>
        g_adc_values[g_current_adc_channel] = ADC1->DR;
 8001048:	4b1b      	ldr	r3, [pc, #108]	@ (80010b8 <ADC_IRQHandler+0x80>)
 800104a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800104c:	4b1b      	ldr	r3, [pc, #108]	@ (80010bc <ADC_IRQHandler+0x84>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	b289      	uxth	r1, r1
 8001054:	4b1a      	ldr	r3, [pc, #104]	@ (80010c0 <ADC_IRQHandler+0x88>)
 8001056:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        g_current_adc_channel = (g_current_adc_channel + 1) % 3;
 800105a:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <ADC_IRQHandler+0x84>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	1c5a      	adds	r2, r3, #1
 8001060:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <ADC_IRQHandler+0x8c>)
 8001062:	fb83 3102 	smull	r3, r1, r3, r2
 8001066:	17d3      	asrs	r3, r2, #31
 8001068:	1ac9      	subs	r1, r1, r3
 800106a:	460b      	mov	r3, r1
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	440b      	add	r3, r1
 8001070:	1ad1      	subs	r1, r2, r3
 8001072:	b2ca      	uxtb	r2, r1
 8001074:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <ADC_IRQHandler+0x84>)
 8001076:	701a      	strb	r2, [r3, #0]
        ADC1->SQR3 = (ADC1->SQR3 & ~ADC_SQR3_SQ1) |
 8001078:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <ADC_IRQHandler+0x80>)
 800107a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800107c:	f023 021f 	bic.w	r2, r3, #31
                     (g_current_adc_channel == 0 ? POT_PIN : (g_current_adc_channel == 1 ? TEMP_PIN : LIGHT_PIN));
 8001080:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <ADC_IRQHandler+0x84>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d007      	beq.n	8001098 <ADC_IRQHandler+0x60>
 8001088:	4b0c      	ldr	r3, [pc, #48]	@ (80010bc <ADC_IRQHandler+0x84>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d101      	bne.n	8001094 <ADC_IRQHandler+0x5c>
 8001090:	2301      	movs	r3, #1
 8001092:	e002      	b.n	800109a <ADC_IRQHandler+0x62>
 8001094:	2300      	movs	r3, #0
 8001096:	e000      	b.n	800109a <ADC_IRQHandler+0x62>
 8001098:	2304      	movs	r3, #4
        ADC1->SQR3 = (ADC1->SQR3 & ~ADC_SQR3_SQ1) |
 800109a:	4907      	ldr	r1, [pc, #28]	@ (80010b8 <ADC_IRQHandler+0x80>)
 800109c:	4313      	orrs	r3, r2
 800109e:	634b      	str	r3, [r1, #52]	@ 0x34
        ADC1->CR2 |= ADC_CR2_SWSTART;
 80010a0:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <ADC_IRQHandler+0x80>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	4a04      	ldr	r2, [pc, #16]	@ (80010b8 <ADC_IRQHandler+0x80>)
 80010a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80010aa:	6093      	str	r3, [r2, #8]
    }
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40012000 	.word	0x40012000
 80010bc:	200000b0 	.word	0x200000b0
 80010c0:	200000a4 	.word	0x200000a4
 80010c4:	55555556 	.word	0x55555556

080010c8 <Monitor_Buttons>:

/* ============================================================================
 * HARDWARE MONITORING
 * ============================================================================ */
void Monitor_Buttons(void) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
    uint32_t current_time = GetTick();
 80010ce:	f000 fa29 	bl	8001524 <GetTick>
 80010d2:	60b8      	str	r0, [r7, #8]
    uint8_t readings[4] = {
        !(BTN0_PORT->IDR & (1 << BTN0_PIN)),
 80010d4:	4b30      	ldr	r3, [pc, #192]	@ (8001198 <Monitor_Buttons+0xd0>)
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010dc:	2b00      	cmp	r3, #0
 80010de:	bf0c      	ite	eq
 80010e0:	2301      	moveq	r3, #1
 80010e2:	2300      	movne	r3, #0
 80010e4:	b2db      	uxtb	r3, r3
    uint8_t readings[4] = {
 80010e6:	713b      	strb	r3, [r7, #4]
        !(BTN1_PORT->IDR & (1 << BTN1_PIN)),
 80010e8:	4b2c      	ldr	r3, [pc, #176]	@ (800119c <Monitor_Buttons+0xd4>)
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	bf0c      	ite	eq
 80010f4:	2301      	moveq	r3, #1
 80010f6:	2300      	movne	r3, #0
 80010f8:	b2db      	uxtb	r3, r3
    uint8_t readings[4] = {
 80010fa:	717b      	strb	r3, [r7, #5]
        !(BTN2_PORT->IDR & (1 << BTN2_PIN)),
 80010fc:	4b27      	ldr	r3, [pc, #156]	@ (800119c <Monitor_Buttons+0xd4>)
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	f003 0320 	and.w	r3, r3, #32
 8001104:	2b00      	cmp	r3, #0
 8001106:	bf0c      	ite	eq
 8001108:	2301      	moveq	r3, #1
 800110a:	2300      	movne	r3, #0
 800110c:	b2db      	uxtb	r3, r3
    uint8_t readings[4] = {
 800110e:	71bb      	strb	r3, [r7, #6]
        !(BTN3_PORT->IDR & (1 << BTN3_PIN))
 8001110:	4b22      	ldr	r3, [pc, #136]	@ (800119c <Monitor_Buttons+0xd4>)
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	f003 0310 	and.w	r3, r3, #16
 8001118:	2b00      	cmp	r3, #0
 800111a:	bf0c      	ite	eq
 800111c:	2301      	moveq	r3, #1
 800111e:	2300      	movne	r3, #0
 8001120:	b2db      	uxtb	r3, r3
    uint8_t readings[4] = {
 8001122:	71fb      	strb	r3, [r7, #7]
    };
    for(int i = 0; i < 4; i++) {
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	e02e      	b.n	8001188 <Monitor_Buttons+0xc0>
        g_buttons[i].previous_state = g_buttons[i].current_state;
 800112a:	4a1d      	ldr	r2, [pc, #116]	@ (80011a0 <Monitor_Buttons+0xd8>)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
 8001132:	4a1b      	ldr	r2, [pc, #108]	@ (80011a0 <Monitor_Buttons+0xd8>)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	4413      	add	r3, r2
 800113a:	460a      	mov	r2, r1
 800113c:	705a      	strb	r2, [r3, #1]
        g_buttons[i].current_state = readings[i];
 800113e:	1d3a      	adds	r2, r7, #4
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	7819      	ldrb	r1, [r3, #0]
 8001146:	4a16      	ldr	r2, [pc, #88]	@ (80011a0 <Monitor_Buttons+0xd8>)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
        if(g_buttons[i].current_state != g_buttons[i].previous_state) {
 800114e:	4a14      	ldr	r2, [pc, #80]	@ (80011a0 <Monitor_Buttons+0xd8>)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8001156:	4912      	ldr	r1, [pc, #72]	@ (80011a0 <Monitor_Buttons+0xd8>)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	440b      	add	r3, r1
 800115e:	785b      	ldrb	r3, [r3, #1]
 8001160:	429a      	cmp	r2, r3
 8001162:	d00e      	beq.n	8001182 <Monitor_Buttons+0xba>
            if((current_time - g_buttons[i].last_change_time) >= BUTTON_DEBOUNCE_MS) {
 8001164:	4a0e      	ldr	r2, [pc, #56]	@ (80011a0 <Monitor_Buttons+0xd8>)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	4413      	add	r3, r2
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b31      	cmp	r3, #49	@ 0x31
 8001174:	d905      	bls.n	8001182 <Monitor_Buttons+0xba>
                g_buttons[i].last_change_time = current_time;
 8001176:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <Monitor_Buttons+0xd8>)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	4413      	add	r3, r2
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	605a      	str	r2, [r3, #4]
    for(int i = 0; i < 4; i++) {
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	3301      	adds	r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2b03      	cmp	r3, #3
 800118c:	ddcd      	ble.n	800112a <Monitor_Buttons+0x62>
            }
        }
    }
}
 800118e:	bf00      	nop
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40020000 	.word	0x40020000
 800119c:	40020400 	.word	0x40020400
 80011a0:	20000080 	.word	0x20000080

080011a4 <Monitor_ADC>:

void Monitor_ADC(void) { /* ADC via IRQ */ }
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <LED_SetPattern>:

/* ============================================================================
 * HARDWARE CONTROL
 * ============================================================================ */
void LED_SetPattern(uint8_t pattern) {
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
    (pattern & 0x01) ? (LED1_PORT->BSRR = (1 << LED1_PIN)) : (LED1_PORT->BSRR = (1 << (LED1_PIN + 16)));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <LED_SetPattern+0x1c>
 80011c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001234 <LED_SetPattern+0x80>)
 80011ca:	2220      	movs	r2, #32
 80011cc:	619a      	str	r2, [r3, #24]
 80011ce:	e003      	b.n	80011d8 <LED_SetPattern+0x24>
 80011d0:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <LED_SetPattern+0x80>)
 80011d2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80011d6:	619a      	str	r2, [r3, #24]
    (pattern & 0x02) ? (LED2_PORT->BSRR = (1 << LED2_PIN)) : (LED2_PORT->BSRR = (1 << (LED2_PIN + 16)));
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <LED_SetPattern+0x36>
 80011e2:	4b14      	ldr	r3, [pc, #80]	@ (8001234 <LED_SetPattern+0x80>)
 80011e4:	2240      	movs	r2, #64	@ 0x40
 80011e6:	619a      	str	r2, [r3, #24]
 80011e8:	e003      	b.n	80011f2 <LED_SetPattern+0x3e>
 80011ea:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <LED_SetPattern+0x80>)
 80011ec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011f0:	619a      	str	r2, [r3, #24]
    (pattern & 0x04) ? (LED3_PORT->BSRR = (1 << LED3_PIN)) : (LED3_PORT->BSRR = (1 << (LED3_PIN + 16)));
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <LED_SetPattern+0x50>
 80011fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001234 <LED_SetPattern+0x80>)
 80011fe:	2280      	movs	r2, #128	@ 0x80
 8001200:	619a      	str	r2, [r3, #24]
 8001202:	e003      	b.n	800120c <LED_SetPattern+0x58>
 8001204:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <LED_SetPattern+0x80>)
 8001206:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800120a:	619a      	str	r2, [r3, #24]
    (pattern & 0x08) ? (LED4_PORT->BSRR = (1 << LED4_PIN)) : (LED4_PORT->BSRR = (1 << (LED4_PIN + 16)));
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <LED_SetPattern+0x6a>
 8001216:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <LED_SetPattern+0x84>)
 8001218:	2240      	movs	r2, #64	@ 0x40
 800121a:	619a      	str	r2, [r3, #24]
}
 800121c:	e003      	b.n	8001226 <LED_SetPattern+0x72>
    (pattern & 0x08) ? (LED4_PORT->BSRR = (1 << LED4_PIN)) : (LED4_PORT->BSRR = (1 << (LED4_PIN + 16)));
 800121e:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <LED_SetPattern+0x84>)
 8001220:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001224:	619a      	str	r2, [r3, #24]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40020000 	.word	0x40020000
 8001238:	40020400 	.word	0x40020400

0800123c <SevenSeg_Display>:

void SevenSeg_Display(uint8_t digit) {
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
    if(digit > 9) return;
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2b09      	cmp	r3, #9
 800124a:	d837      	bhi.n	80012bc <SevenSeg_Display+0x80>
    (digit & 0x01) ? (BCD_2_0_PORT->BSRR = (1 << BCD_2_0_PIN)) : (BCD_2_0_PORT->BSRR = (1 << (BCD_2_0_PIN + 16)));
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <SevenSeg_Display+0x22>
 8001256:	4b1c      	ldr	r3, [pc, #112]	@ (80012c8 <SevenSeg_Display+0x8c>)
 8001258:	2280      	movs	r2, #128	@ 0x80
 800125a:	619a      	str	r2, [r3, #24]
 800125c:	e003      	b.n	8001266 <SevenSeg_Display+0x2a>
 800125e:	4b1a      	ldr	r3, [pc, #104]	@ (80012c8 <SevenSeg_Display+0x8c>)
 8001260:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001264:	619a      	str	r2, [r3, #24]
    (digit & 0x02) ? (BCD_2_1_PORT->BSRR = (1 << BCD_2_1_PIN)) : (BCD_2_1_PORT->BSRR = (1 << (BCD_2_1_PIN + 16)));
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d004      	beq.n	800127a <SevenSeg_Display+0x3e>
 8001270:	4b16      	ldr	r3, [pc, #88]	@ (80012cc <SevenSeg_Display+0x90>)
 8001272:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001276:	619a      	str	r2, [r3, #24]
 8001278:	e003      	b.n	8001282 <SevenSeg_Display+0x46>
 800127a:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <SevenSeg_Display+0x90>)
 800127c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001280:	619a      	str	r2, [r3, #24]
    (digit & 0x04) ? (BCD_2_2_PORT->BSRR = (1 << BCD_2_2_PIN)) : (BCD_2_2_PORT->BSRR = (1 << (BCD_2_2_PIN + 16)));
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	2b00      	cmp	r3, #0
 800128a:	d004      	beq.n	8001296 <SevenSeg_Display+0x5a>
 800128c:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <SevenSeg_Display+0x94>)
 800128e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001292:	619a      	str	r2, [r3, #24]
 8001294:	e003      	b.n	800129e <SevenSeg_Display+0x62>
 8001296:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <SevenSeg_Display+0x94>)
 8001298:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800129c:	619a      	str	r2, [r3, #24]
    (digit & 0x08) ? (BCD_2_3_PORT->BSRR = (1 << BCD_2_3_PIN)) : (BCD_2_3_PORT->BSRR = (1 << (BCD_2_3_PIN + 16)));
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d004      	beq.n	80012b2 <SevenSeg_Display+0x76>
 80012a8:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <SevenSeg_Display+0x90>)
 80012aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012ae:	619a      	str	r2, [r3, #24]
 80012b0:	e005      	b.n	80012be <SevenSeg_Display+0x82>
 80012b2:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <SevenSeg_Display+0x90>)
 80012b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80012b8:	619a      	str	r2, [r3, #24]
 80012ba:	e000      	b.n	80012be <SevenSeg_Display+0x82>
    if(digit > 9) return;
 80012bc:	bf00      	nop
}
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40020400 	.word	0x40020400

080012d4 <SystemClock_Config>:

/* ============================================================================
 * SYSTEM INITIALIZATION
 * ============================================================================ */
void SystemClock_Config(void) {
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
    RCC->CR |= RCC_CR_HSION; while(!(RCC->CR & RCC_CR_HSIRDY));
 80012d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001350 <SystemClock_Config+0x7c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001350 <SystemClock_Config+0x7c>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	bf00      	nop
 80012e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <SystemClock_Config+0x7c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0f9      	beq.n	80012e6 <SystemClock_Config+0x12>
    RCC->PLLCFGR = (RCC_PLLCFGR_PLLSRC_HSI) | (16 << RCC_PLLCFGR_PLLM_Pos) | (168 << RCC_PLLCFGR_PLLN_Pos) | (0 << RCC_PLLCFGR_PLLP_Pos);
 80012f2:	4b17      	ldr	r3, [pc, #92]	@ (8001350 <SystemClock_Config+0x7c>)
 80012f4:	f642 2210 	movw	r2, #10768	@ 0x2a10
 80012f8:	605a      	str	r2, [r3, #4]
    RCC->CR |= RCC_CR_PLLON; while(!(RCC->CR & RCC_CR_PLLRDY));
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <SystemClock_Config+0x7c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a14      	ldr	r2, [pc, #80]	@ (8001350 <SystemClock_Config+0x7c>)
 8001300:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	bf00      	nop
 8001308:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <SystemClock_Config+0x7c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f9      	beq.n	8001308 <SystemClock_Config+0x34>
    FLASH->ACR = FLASH_ACR_LATENCY_2WS;
 8001314:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <SystemClock_Config+0x80>)
 8001316:	2202      	movs	r2, #2
 8001318:	601a      	str	r2, [r3, #0]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV2 | RCC_CFGR_PPRE2_DIV1;
 800131a:	4b0d      	ldr	r3, [pc, #52]	@ (8001350 <SystemClock_Config+0x7c>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	4a0c      	ldr	r2, [pc, #48]	@ (8001350 <SystemClock_Config+0x7c>)
 8001320:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001324:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL; while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8001326:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <SystemClock_Config+0x7c>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	4a09      	ldr	r2, [pc, #36]	@ (8001350 <SystemClock_Config+0x7c>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	6093      	str	r3, [r2, #8]
 8001332:	bf00      	nop
 8001334:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <SystemClock_Config+0x7c>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 030c 	and.w	r3, r3, #12
 800133c:	2b08      	cmp	r3, #8
 800133e:	d1f9      	bne.n	8001334 <SystemClock_Config+0x60>
    SystemCoreClock = 84000000;
 8001340:	4b05      	ldr	r3, [pc, #20]	@ (8001358 <SystemClock_Config+0x84>)
 8001342:	4a06      	ldr	r2, [pc, #24]	@ (800135c <SystemClock_Config+0x88>)
 8001344:	601a      	str	r2, [r3, #0]
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	40023800 	.word	0x40023800
 8001354:	40023c00 	.word	0x40023c00
 8001358:	20000000 	.word	0x20000000
 800135c:	0501bd00 	.word	0x0501bd00

08001360 <GPIO_Init>:

void GPIO_Init(void) {
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;
 8001364:	4b27      	ldr	r3, [pc, #156]	@ (8001404 <GPIO_Init+0xa4>)
 8001366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001368:	4a26      	ldr	r2, [pc, #152]	@ (8001404 <GPIO_Init+0xa4>)
 800136a:	f043 0307 	orr.w	r3, r3, #7
 800136e:	6313      	str	r3, [r2, #48]	@ 0x30
    // LEDs
    GPIOA->MODER |= (1 << (LED1_PIN*2)) | (1 << (LED2_PIN*2)) | (1 << (LED3_PIN*2));
 8001370:	4b25      	ldr	r3, [pc, #148]	@ (8001408 <GPIO_Init+0xa8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a24      	ldr	r2, [pc, #144]	@ (8001408 <GPIO_Init+0xa8>)
 8001376:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 800137a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (1 << (LED4_PIN*2));
 800137c:	4b23      	ldr	r3, [pc, #140]	@ (800140c <GPIO_Init+0xac>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a22      	ldr	r2, [pc, #136]	@ (800140c <GPIO_Init+0xac>)
 8001382:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001386:	6013      	str	r3, [r2, #0]
    // Buttons (pull-up)
    GPIOA->PUPDR |= (1 << (BTN0_PIN*2));
 8001388:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <GPIO_Init+0xa8>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	4a1e      	ldr	r2, [pc, #120]	@ (8001408 <GPIO_Init+0xa8>)
 800138e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001392:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (1 << (BTN1_PIN*2)) | (1 << (BTN2_PIN*2)) | (1 << (BTN3_PIN*2));
 8001394:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <GPIO_Init+0xac>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	4a1c      	ldr	r2, [pc, #112]	@ (800140c <GPIO_Init+0xac>)
 800139a:	f443 63a8 	orr.w	r3, r3, #1344	@ 0x540
 800139e:	60d3      	str	r3, [r2, #12]
    // ADC
    GPIOA->MODER |= (3 << (POT_PIN*2)) | (3 << (TEMP_PIN*2)) | (3 << (LIGHT_PIN*2));
 80013a0:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <GPIO_Init+0xa8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a18      	ldr	r2, [pc, #96]	@ (8001408 <GPIO_Init+0xa8>)
 80013a6:	f443 7343 	orr.w	r3, r3, #780	@ 0x30c
 80013aa:	f043 0303 	orr.w	r3, r3, #3
 80013ae:	6013      	str	r3, [r2, #0]
    // UART2: PA2,PA3 AF7
    GPIOA->MODER |= (2 << (2*2)) | (2 << (3*2));
 80013b0:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <GPIO_Init+0xa8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a14      	ldr	r2, [pc, #80]	@ (8001408 <GPIO_Init+0xa8>)
 80013b6:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80013ba:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (7 << (2*4)) | (7 << (3*4));
 80013bc:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <GPIO_Init+0xa8>)
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	4a11      	ldr	r2, [pc, #68]	@ (8001408 <GPIO_Init+0xa8>)
 80013c2:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80013c6:	6213      	str	r3, [r2, #32]
    // 7-Segment (BCD inputs)
    GPIOC->MODER = (GPIOC->MODER & ~(3U << (BCD_2_0_PIN*2))) | (1U << (BCD_2_0_PIN*2));   // PC7
 80013c8:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <GPIO_Init+0xb0>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001410 <GPIO_Init+0xb0>)
 80013d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER = (GPIOA->MODER & ~((3U << (BCD_2_1_PIN*2)) | (3U << (BCD_2_3_PIN*2))))
 80013d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001408 <GPIO_Init+0xa8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80013e0:	4a09      	ldr	r2, [pc, #36]	@ (8001408 <GPIO_Init+0xa8>)
                                 |  (1U << (BCD_2_1_PIN*2)) | (1U << (BCD_2_3_PIN*2));     // PA8, PA9
 80013e2:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
    GPIOA->MODER = (GPIOA->MODER & ~((3U << (BCD_2_1_PIN*2)) | (3U << (BCD_2_3_PIN*2))))
 80013e6:	6013      	str	r3, [r2, #0]
    GPIOB->MODER = (GPIOB->MODER & ~(3U << (BCD_2_2_PIN*2))) | (1U << (BCD_2_2_PIN*2));   // PB10
 80013e8:	4b08      	ldr	r3, [pc, #32]	@ (800140c <GPIO_Init+0xac>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80013f0:	4a06      	ldr	r2, [pc, #24]	@ (800140c <GPIO_Init+0xac>)
 80013f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	40020000 	.word	0x40020000
 800140c:	40020400 	.word	0x40020400
 8001410:	40020800 	.word	0x40020800

08001414 <ADC_Init>:

void ADC_Init(void) {
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <ADC_Init+0x50>)
 800141a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141c:	4a11      	ldr	r2, [pc, #68]	@ (8001464 <ADC_Init+0x50>)
 800141e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001422:	6453      	str	r3, [r2, #68]	@ 0x44
    ADC1->CR2 |= ADC_CR2_ADON;
 8001424:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <ADC_Init+0x54>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	4a0f      	ldr	r2, [pc, #60]	@ (8001468 <ADC_Init+0x54>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6093      	str	r3, [r2, #8]
    ADC1->CR1 |= ADC_CR1_EOCIE;
 8001430:	4b0d      	ldr	r3, [pc, #52]	@ (8001468 <ADC_Init+0x54>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	4a0c      	ldr	r2, [pc, #48]	@ (8001468 <ADC_Init+0x54>)
 8001436:	f043 0320 	orr.w	r3, r3, #32
 800143a:	6053      	str	r3, [r2, #4]
    ADC1->CR1 |= (1 << ADC_CR1_RES_Pos); // 10-bit
 800143c:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <ADC_Init+0x54>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	4a09      	ldr	r2, [pc, #36]	@ (8001468 <ADC_Init+0x54>)
 8001442:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001446:	6053      	str	r3, [r2, #4]
    ADC1->SMPR2 |= (7 << ADC_SMPR2_SMP0_Pos) | (7 << ADC_SMPR2_SMP1_Pos) | (7 << ADC_SMPR2_SMP4_Pos);
 8001448:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <ADC_Init+0x54>)
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	4a06      	ldr	r2, [pc, #24]	@ (8001468 <ADC_Init+0x54>)
 800144e:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8001452:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001456:	6113      	str	r3, [r2, #16]
    Delay_ms(2);
 8001458:	2002      	movs	r0, #2
 800145a:	f000 f84d 	bl	80014f8 <Delay_ms>
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	40012000 	.word	0x40012000

0800146c <USART2_Init>:

void USART2_Init(void) {
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001470:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <USART2_Init+0x34>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001474:	4a0a      	ldr	r2, [pc, #40]	@ (80014a0 <USART2_Init+0x34>)
 8001476:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800147a:	6413      	str	r3, [r2, #64]	@ 0x40
    USART2->BRR = 0x16C; // 115200 @ 42MHz
 800147c:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <USART2_Init+0x38>)
 800147e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8001482:	609a      	str	r2, [r3, #8]
    USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8001484:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <USART2_Init+0x38>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	4a06      	ldr	r2, [pc, #24]	@ (80014a4 <USART2_Init+0x38>)
 800148a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800148e:	f043 030c 	orr.w	r3, r3, #12
 8001492:	60d3      	str	r3, [r2, #12]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40004400 	.word	0x40004400

080014a8 <NVIC_Init>:

void NVIC_Init(void) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(ADC_IRQn);
 80014ac:	2012      	movs	r0, #18
 80014ae:	f7fe fee7 	bl	8000280 <__NVIC_EnableIRQ>
    NVIC_SetPriority(ADC_IRQn, 1);
 80014b2:	2101      	movs	r1, #1
 80014b4:	2012      	movs	r0, #18
 80014b6:	f7fe ff01 	bl	80002bc <__NVIC_SetPriority>
    NVIC_SetPriority(SysTick_IRQn, 0);
 80014ba:	2100      	movs	r1, #0
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f7fe fefc 	bl	80002bc <__NVIC_SetPriority>
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <ADC_StartConversion>:

void ADC_StartConversion(void) {
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
    ADC1->SQR3 = (ADC1->SQR3 & ~ADC_SQR3_SQ1) | POT_PIN;
 80014cc:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <ADC_StartConversion+0x2c>)
 80014ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014d0:	f023 031f 	bic.w	r3, r3, #31
 80014d4:	4a07      	ldr	r2, [pc, #28]	@ (80014f4 <ADC_StartConversion+0x2c>)
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	6353      	str	r3, [r2, #52]	@ 0x34
    ADC1->CR2 |= ADC_CR2_SWSTART;
 80014dc:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <ADC_StartConversion+0x2c>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	4a04      	ldr	r2, [pc, #16]	@ (80014f4 <ADC_StartConversion+0x2c>)
 80014e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80014e6:	6093      	str	r3, [r2, #8]
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40012000 	.word	0x40012000

080014f8 <Delay_ms>:

/* ============================================================================
 * UTILITY
 * ============================================================================ */
void Delay_ms(uint32_t ms) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
    uint32_t start = GetTick();
 8001500:	f000 f810 	bl	8001524 <GetTick>
 8001504:	60f8      	str	r0, [r7, #12]
    while((GetTick() - start) < ms);
 8001506:	bf00      	nop
 8001508:	f000 f80c 	bl	8001524 <GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	429a      	cmp	r2, r3
 8001516:	d8f7      	bhi.n	8001508 <Delay_ms+0x10>
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <GetTick>:
uint32_t GetTick(void) { return g_tick_counter; }
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
 8001528:	4b03      	ldr	r3, [pc, #12]	@ (8001538 <GetTick+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	200000ac 	.word	0x200000ac

0800153c <Log_Print>:

void Log_Print(const char* format, ...) {
 800153c:	b40f      	push	{r0, r1, r2, r3}
 800153e:	b580      	push	{r7, lr}
 8001540:	b0c2      	sub	sp, #264	@ 0x108
 8001542:	af00      	add	r7, sp, #0
    if(!g_system_initialized) return;
 8001544:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <Log_Print+0x7c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d02d      	beq.n	80015a8 <Log_Print+0x6c>
    char buffer[256];
    va_list args; va_start(args, format);
 800154c:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8001550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001558:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format,args);
 800155a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800155e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001562:	1d38      	adds	r0, r7, #4
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800156a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800156e:	f000 fab7 	bl	8001ae0 <vsniprintf>
    va_end(args);
    for(char* p = buffer; *p; p++) { while(!(USART2->SR & USART_SR_TXE)); USART2->DR = *p; }
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001578:	e010      	b.n	800159c <Log_Print+0x60>
 800157a:	bf00      	nop
 800157c:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <Log_Print+0x80>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f9      	beq.n	800157c <Log_Print+0x40>
 8001588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800158c:	781a      	ldrb	r2, [r3, #0]
 800158e:	4b0b      	ldr	r3, [pc, #44]	@ (80015bc <Log_Print+0x80>)
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001596:	3301      	adds	r3, #1
 8001598:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800159c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1e9      	bne.n	800157a <Log_Print+0x3e>
 80015a6:	e000      	b.n	80015aa <Log_Print+0x6e>
    if(!g_system_initialized) return;
 80015a8:	bf00      	nop
}
 80015aa:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80015ae:	46bd      	mov	sp, r7
 80015b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015b4:	b004      	add	sp, #16
 80015b6:	4770      	bx	lr
 80015b8:	200000a0 	.word	0x200000a0
 80015bc:	40004400 	.word	0x40004400

080015c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return 1;
 80015c4:	2301      	movs	r3, #1
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <_kill>:

int _kill(int pid, int sig)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015da:	f000 fadd 	bl	8001b98 <__errno>
 80015de:	4603      	mov	r3, r0
 80015e0:	2216      	movs	r2, #22
 80015e2:	601a      	str	r2, [r3, #0]
  return -1;
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <_exit>:

void _exit (int status)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015f8:	f04f 31ff 	mov.w	r1, #4294967295
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ffe7 	bl	80015d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001602:	bf00      	nop
 8001604:	e7fd      	b.n	8001602 <_exit+0x12>

08001606 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b086      	sub	sp, #24
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	e00a      	b.n	800162e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001618:	f3af 8000 	nop.w
 800161c:	4601      	mov	r1, r0
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	60ba      	str	r2, [r7, #8]
 8001624:	b2ca      	uxtb	r2, r1
 8001626:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	3301      	adds	r3, #1
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	429a      	cmp	r2, r3
 8001634:	dbf0      	blt.n	8001618 <_read+0x12>
  }

  return len;
 8001636:	687b      	ldr	r3, [r7, #4]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	e009      	b.n	8001666 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	60ba      	str	r2, [r7, #8]
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	3301      	adds	r3, #1
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	429a      	cmp	r2, r3
 800166c:	dbf1      	blt.n	8001652 <_write+0x12>
  }
  return len;
 800166e:	687b      	ldr	r3, [r7, #4]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <_close>:

int _close(int file)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001680:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016a0:	605a      	str	r2, [r3, #4]
  return 0;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <_isatty>:

int _isatty(int file)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016b8:	2301      	movs	r3, #1
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b085      	sub	sp, #20
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	60f8      	str	r0, [r7, #12]
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e8:	4a14      	ldr	r2, [pc, #80]	@ (800173c <_sbrk+0x5c>)
 80016ea:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <_sbrk+0x60>)
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f4:	4b13      	ldr	r3, [pc, #76]	@ (8001744 <_sbrk+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d102      	bne.n	8001702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016fc:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <_sbrk+0x64>)
 80016fe:	4a12      	ldr	r2, [pc, #72]	@ (8001748 <_sbrk+0x68>)
 8001700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001702:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	429a      	cmp	r2, r3
 800170e:	d207      	bcs.n	8001720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001710:	f000 fa42 	bl	8001b98 <__errno>
 8001714:	4603      	mov	r3, r0
 8001716:	220c      	movs	r2, #12
 8001718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	e009      	b.n	8001734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001720:	4b08      	ldr	r3, [pc, #32]	@ (8001744 <_sbrk+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001726:	4b07      	ldr	r3, [pc, #28]	@ (8001744 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	4a05      	ldr	r2, [pc, #20]	@ (8001744 <_sbrk+0x64>)
 8001730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001732:	68fb      	ldr	r3, [r7, #12]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20020000 	.word	0x20020000
 8001740:	00000400 	.word	0x00000400
 8001744:	200000ec 	.word	0x200000ec
 8001748:	20000240 	.word	0x20000240

0800174c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800174c:	480d      	ldr	r0, [pc, #52]	@ (8001784 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800174e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001750:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001754:	480c      	ldr	r0, [pc, #48]	@ (8001788 <LoopForever+0x6>)
  ldr r1, =_edata
 8001756:	490d      	ldr	r1, [pc, #52]	@ (800178c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001758:	4a0d      	ldr	r2, [pc, #52]	@ (8001790 <LoopForever+0xe>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800175c:	e002      	b.n	8001764 <LoopCopyDataInit>

0800175e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001762:	3304      	adds	r3, #4

08001764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001768:	d3f9      	bcc.n	800175e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176a:	4a0a      	ldr	r2, [pc, #40]	@ (8001794 <LoopForever+0x12>)
  ldr r4, =_ebss
 800176c:	4c0a      	ldr	r4, [pc, #40]	@ (8001798 <LoopForever+0x16>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001770:	e001      	b.n	8001776 <LoopFillZerobss>

08001772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001774:	3204      	adds	r2, #4

08001776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001778:	d3fb      	bcc.n	8001772 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800177a:	f000 fa13 	bl	8001ba4 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800177e:	f7ff f8eb 	bl	8000958 <main>

08001782 <LoopForever>:

LoopForever:
  b LoopForever
 8001782:	e7fe      	b.n	8001782 <LoopForever>
  ldr   r0, =_estack
 8001784:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800178c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001790:	08002f90 	.word	0x08002f90
  ldr r2, =_sbss
 8001794:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001798:	2000023c 	.word	0x2000023c

0800179c <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800179c:	e7fe      	b.n	800179c <BusFault_Handler>
	...

080017a0 <srand>:
 80017a0:	b538      	push	{r3, r4, r5, lr}
 80017a2:	4b10      	ldr	r3, [pc, #64]	@ (80017e4 <srand+0x44>)
 80017a4:	681d      	ldr	r5, [r3, #0]
 80017a6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80017a8:	4604      	mov	r4, r0
 80017aa:	b9b3      	cbnz	r3, 80017da <srand+0x3a>
 80017ac:	2018      	movs	r0, #24
 80017ae:	f000 fa89 	bl	8001cc4 <malloc>
 80017b2:	4602      	mov	r2, r0
 80017b4:	6328      	str	r0, [r5, #48]	@ 0x30
 80017b6:	b920      	cbnz	r0, 80017c2 <srand+0x22>
 80017b8:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <srand+0x48>)
 80017ba:	480c      	ldr	r0, [pc, #48]	@ (80017ec <srand+0x4c>)
 80017bc:	2146      	movs	r1, #70	@ 0x46
 80017be:	f000 fa19 	bl	8001bf4 <__assert_func>
 80017c2:	490b      	ldr	r1, [pc, #44]	@ (80017f0 <srand+0x50>)
 80017c4:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <srand+0x54>)
 80017c6:	e9c0 1300 	strd	r1, r3, [r0]
 80017ca:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <srand+0x58>)
 80017cc:	6083      	str	r3, [r0, #8]
 80017ce:	230b      	movs	r3, #11
 80017d0:	8183      	strh	r3, [r0, #12]
 80017d2:	2100      	movs	r1, #0
 80017d4:	2001      	movs	r0, #1
 80017d6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80017da:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80017dc:	2200      	movs	r2, #0
 80017de:	611c      	str	r4, [r3, #16]
 80017e0:	615a      	str	r2, [r3, #20]
 80017e2:	bd38      	pop	{r3, r4, r5, pc}
 80017e4:	20000014 	.word	0x20000014
 80017e8:	08002ea2 	.word	0x08002ea2
 80017ec:	08002eb9 	.word	0x08002eb9
 80017f0:	abcd330e 	.word	0xabcd330e
 80017f4:	e66d1234 	.word	0xe66d1234
 80017f8:	0005deec 	.word	0x0005deec

080017fc <rand>:
 80017fc:	4b16      	ldr	r3, [pc, #88]	@ (8001858 <rand+0x5c>)
 80017fe:	b510      	push	{r4, lr}
 8001800:	681c      	ldr	r4, [r3, #0]
 8001802:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001804:	b9b3      	cbnz	r3, 8001834 <rand+0x38>
 8001806:	2018      	movs	r0, #24
 8001808:	f000 fa5c 	bl	8001cc4 <malloc>
 800180c:	4602      	mov	r2, r0
 800180e:	6320      	str	r0, [r4, #48]	@ 0x30
 8001810:	b920      	cbnz	r0, 800181c <rand+0x20>
 8001812:	4b12      	ldr	r3, [pc, #72]	@ (800185c <rand+0x60>)
 8001814:	4812      	ldr	r0, [pc, #72]	@ (8001860 <rand+0x64>)
 8001816:	2152      	movs	r1, #82	@ 0x52
 8001818:	f000 f9ec 	bl	8001bf4 <__assert_func>
 800181c:	4911      	ldr	r1, [pc, #68]	@ (8001864 <rand+0x68>)
 800181e:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <rand+0x6c>)
 8001820:	e9c0 1300 	strd	r1, r3, [r0]
 8001824:	4b11      	ldr	r3, [pc, #68]	@ (800186c <rand+0x70>)
 8001826:	6083      	str	r3, [r0, #8]
 8001828:	230b      	movs	r3, #11
 800182a:	8183      	strh	r3, [r0, #12]
 800182c:	2100      	movs	r1, #0
 800182e:	2001      	movs	r0, #1
 8001830:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001834:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001836:	480e      	ldr	r0, [pc, #56]	@ (8001870 <rand+0x74>)
 8001838:	690b      	ldr	r3, [r1, #16]
 800183a:	694c      	ldr	r4, [r1, #20]
 800183c:	4a0d      	ldr	r2, [pc, #52]	@ (8001874 <rand+0x78>)
 800183e:	4358      	muls	r0, r3
 8001840:	fb02 0004 	mla	r0, r2, r4, r0
 8001844:	fba3 3202 	umull	r3, r2, r3, r2
 8001848:	3301      	adds	r3, #1
 800184a:	eb40 0002 	adc.w	r0, r0, r2
 800184e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8001852:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001856:	bd10      	pop	{r4, pc}
 8001858:	20000014 	.word	0x20000014
 800185c:	08002ea2 	.word	0x08002ea2
 8001860:	08002eb9 	.word	0x08002eb9
 8001864:	abcd330e 	.word	0xabcd330e
 8001868:	e66d1234 	.word	0xe66d1234
 800186c:	0005deec 	.word	0x0005deec
 8001870:	5851f42d 	.word	0x5851f42d
 8001874:	4c957f2d 	.word	0x4c957f2d

08001878 <std>:
 8001878:	2300      	movs	r3, #0
 800187a:	b510      	push	{r4, lr}
 800187c:	4604      	mov	r4, r0
 800187e:	e9c0 3300 	strd	r3, r3, [r0]
 8001882:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001886:	6083      	str	r3, [r0, #8]
 8001888:	8181      	strh	r1, [r0, #12]
 800188a:	6643      	str	r3, [r0, #100]	@ 0x64
 800188c:	81c2      	strh	r2, [r0, #14]
 800188e:	6183      	str	r3, [r0, #24]
 8001890:	4619      	mov	r1, r3
 8001892:	2208      	movs	r2, #8
 8001894:	305c      	adds	r0, #92	@ 0x5c
 8001896:	f000 f931 	bl	8001afc <memset>
 800189a:	4b0d      	ldr	r3, [pc, #52]	@ (80018d0 <std+0x58>)
 800189c:	6263      	str	r3, [r4, #36]	@ 0x24
 800189e:	4b0d      	ldr	r3, [pc, #52]	@ (80018d4 <std+0x5c>)
 80018a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80018a2:	4b0d      	ldr	r3, [pc, #52]	@ (80018d8 <std+0x60>)
 80018a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80018a6:	4b0d      	ldr	r3, [pc, #52]	@ (80018dc <std+0x64>)
 80018a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80018aa:	4b0d      	ldr	r3, [pc, #52]	@ (80018e0 <std+0x68>)
 80018ac:	6224      	str	r4, [r4, #32]
 80018ae:	429c      	cmp	r4, r3
 80018b0:	d006      	beq.n	80018c0 <std+0x48>
 80018b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80018b6:	4294      	cmp	r4, r2
 80018b8:	d002      	beq.n	80018c0 <std+0x48>
 80018ba:	33d0      	adds	r3, #208	@ 0xd0
 80018bc:	429c      	cmp	r4, r3
 80018be:	d105      	bne.n	80018cc <std+0x54>
 80018c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80018c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018c8:	f000 b990 	b.w	8001bec <__retarget_lock_init_recursive>
 80018cc:	bd10      	pop	{r4, pc}
 80018ce:	bf00      	nop
 80018d0:	080019fd 	.word	0x080019fd
 80018d4:	08001a1f 	.word	0x08001a1f
 80018d8:	08001a57 	.word	0x08001a57
 80018dc:	08001a7b 	.word	0x08001a7b
 80018e0:	200000f0 	.word	0x200000f0

080018e4 <stdio_exit_handler>:
 80018e4:	4a02      	ldr	r2, [pc, #8]	@ (80018f0 <stdio_exit_handler+0xc>)
 80018e6:	4903      	ldr	r1, [pc, #12]	@ (80018f4 <stdio_exit_handler+0x10>)
 80018e8:	4803      	ldr	r0, [pc, #12]	@ (80018f8 <stdio_exit_handler+0x14>)
 80018ea:	f000 b869 	b.w	80019c0 <_fwalk_sglue>
 80018ee:	bf00      	nop
 80018f0:	20000008 	.word	0x20000008
 80018f4:	08002501 	.word	0x08002501
 80018f8:	20000018 	.word	0x20000018

080018fc <cleanup_stdio>:
 80018fc:	6841      	ldr	r1, [r0, #4]
 80018fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001930 <cleanup_stdio+0x34>)
 8001900:	4299      	cmp	r1, r3
 8001902:	b510      	push	{r4, lr}
 8001904:	4604      	mov	r4, r0
 8001906:	d001      	beq.n	800190c <cleanup_stdio+0x10>
 8001908:	f000 fdfa 	bl	8002500 <_fflush_r>
 800190c:	68a1      	ldr	r1, [r4, #8]
 800190e:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <cleanup_stdio+0x38>)
 8001910:	4299      	cmp	r1, r3
 8001912:	d002      	beq.n	800191a <cleanup_stdio+0x1e>
 8001914:	4620      	mov	r0, r4
 8001916:	f000 fdf3 	bl	8002500 <_fflush_r>
 800191a:	68e1      	ldr	r1, [r4, #12]
 800191c:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <cleanup_stdio+0x3c>)
 800191e:	4299      	cmp	r1, r3
 8001920:	d004      	beq.n	800192c <cleanup_stdio+0x30>
 8001922:	4620      	mov	r0, r4
 8001924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001928:	f000 bdea 	b.w	8002500 <_fflush_r>
 800192c:	bd10      	pop	{r4, pc}
 800192e:	bf00      	nop
 8001930:	200000f0 	.word	0x200000f0
 8001934:	20000158 	.word	0x20000158
 8001938:	200001c0 	.word	0x200001c0

0800193c <global_stdio_init.part.0>:
 800193c:	b510      	push	{r4, lr}
 800193e:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <global_stdio_init.part.0+0x30>)
 8001940:	4c0b      	ldr	r4, [pc, #44]	@ (8001970 <global_stdio_init.part.0+0x34>)
 8001942:	4a0c      	ldr	r2, [pc, #48]	@ (8001974 <global_stdio_init.part.0+0x38>)
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	4620      	mov	r0, r4
 8001948:	2200      	movs	r2, #0
 800194a:	2104      	movs	r1, #4
 800194c:	f7ff ff94 	bl	8001878 <std>
 8001950:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001954:	2201      	movs	r2, #1
 8001956:	2109      	movs	r1, #9
 8001958:	f7ff ff8e 	bl	8001878 <std>
 800195c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001960:	2202      	movs	r2, #2
 8001962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001966:	2112      	movs	r1, #18
 8001968:	f7ff bf86 	b.w	8001878 <std>
 800196c:	20000228 	.word	0x20000228
 8001970:	200000f0 	.word	0x200000f0
 8001974:	080018e5 	.word	0x080018e5

08001978 <__sfp_lock_acquire>:
 8001978:	4801      	ldr	r0, [pc, #4]	@ (8001980 <__sfp_lock_acquire+0x8>)
 800197a:	f000 b938 	b.w	8001bee <__retarget_lock_acquire_recursive>
 800197e:	bf00      	nop
 8001980:	20000231 	.word	0x20000231

08001984 <__sfp_lock_release>:
 8001984:	4801      	ldr	r0, [pc, #4]	@ (800198c <__sfp_lock_release+0x8>)
 8001986:	f000 b933 	b.w	8001bf0 <__retarget_lock_release_recursive>
 800198a:	bf00      	nop
 800198c:	20000231 	.word	0x20000231

08001990 <__sinit>:
 8001990:	b510      	push	{r4, lr}
 8001992:	4604      	mov	r4, r0
 8001994:	f7ff fff0 	bl	8001978 <__sfp_lock_acquire>
 8001998:	6a23      	ldr	r3, [r4, #32]
 800199a:	b11b      	cbz	r3, 80019a4 <__sinit+0x14>
 800199c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019a0:	f7ff bff0 	b.w	8001984 <__sfp_lock_release>
 80019a4:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <__sinit+0x28>)
 80019a6:	6223      	str	r3, [r4, #32]
 80019a8:	4b04      	ldr	r3, [pc, #16]	@ (80019bc <__sinit+0x2c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f5      	bne.n	800199c <__sinit+0xc>
 80019b0:	f7ff ffc4 	bl	800193c <global_stdio_init.part.0>
 80019b4:	e7f2      	b.n	800199c <__sinit+0xc>
 80019b6:	bf00      	nop
 80019b8:	080018fd 	.word	0x080018fd
 80019bc:	20000228 	.word	0x20000228

080019c0 <_fwalk_sglue>:
 80019c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019c4:	4607      	mov	r7, r0
 80019c6:	4688      	mov	r8, r1
 80019c8:	4614      	mov	r4, r2
 80019ca:	2600      	movs	r6, #0
 80019cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80019d0:	f1b9 0901 	subs.w	r9, r9, #1
 80019d4:	d505      	bpl.n	80019e2 <_fwalk_sglue+0x22>
 80019d6:	6824      	ldr	r4, [r4, #0]
 80019d8:	2c00      	cmp	r4, #0
 80019da:	d1f7      	bne.n	80019cc <_fwalk_sglue+0xc>
 80019dc:	4630      	mov	r0, r6
 80019de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019e2:	89ab      	ldrh	r3, [r5, #12]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d907      	bls.n	80019f8 <_fwalk_sglue+0x38>
 80019e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80019ec:	3301      	adds	r3, #1
 80019ee:	d003      	beq.n	80019f8 <_fwalk_sglue+0x38>
 80019f0:	4629      	mov	r1, r5
 80019f2:	4638      	mov	r0, r7
 80019f4:	47c0      	blx	r8
 80019f6:	4306      	orrs	r6, r0
 80019f8:	3568      	adds	r5, #104	@ 0x68
 80019fa:	e7e9      	b.n	80019d0 <_fwalk_sglue+0x10>

080019fc <__sread>:
 80019fc:	b510      	push	{r4, lr}
 80019fe:	460c      	mov	r4, r1
 8001a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a04:	f000 f8a4 	bl	8001b50 <_read_r>
 8001a08:	2800      	cmp	r0, #0
 8001a0a:	bfab      	itete	ge
 8001a0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001a0e:	89a3      	ldrhlt	r3, [r4, #12]
 8001a10:	181b      	addge	r3, r3, r0
 8001a12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001a16:	bfac      	ite	ge
 8001a18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001a1a:	81a3      	strhlt	r3, [r4, #12]
 8001a1c:	bd10      	pop	{r4, pc}

08001a1e <__swrite>:
 8001a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a22:	461f      	mov	r7, r3
 8001a24:	898b      	ldrh	r3, [r1, #12]
 8001a26:	05db      	lsls	r3, r3, #23
 8001a28:	4605      	mov	r5, r0
 8001a2a:	460c      	mov	r4, r1
 8001a2c:	4616      	mov	r6, r2
 8001a2e:	d505      	bpl.n	8001a3c <__swrite+0x1e>
 8001a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a34:	2302      	movs	r3, #2
 8001a36:	2200      	movs	r2, #0
 8001a38:	f000 f878 	bl	8001b2c <_lseek_r>
 8001a3c:	89a3      	ldrh	r3, [r4, #12]
 8001a3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a46:	81a3      	strh	r3, [r4, #12]
 8001a48:	4632      	mov	r2, r6
 8001a4a:	463b      	mov	r3, r7
 8001a4c:	4628      	mov	r0, r5
 8001a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a52:	f000 b88f 	b.w	8001b74 <_write_r>

08001a56 <__sseek>:
 8001a56:	b510      	push	{r4, lr}
 8001a58:	460c      	mov	r4, r1
 8001a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a5e:	f000 f865 	bl	8001b2c <_lseek_r>
 8001a62:	1c43      	adds	r3, r0, #1
 8001a64:	89a3      	ldrh	r3, [r4, #12]
 8001a66:	bf15      	itete	ne
 8001a68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001a6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001a6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001a72:	81a3      	strheq	r3, [r4, #12]
 8001a74:	bf18      	it	ne
 8001a76:	81a3      	strhne	r3, [r4, #12]
 8001a78:	bd10      	pop	{r4, pc}

08001a7a <__sclose>:
 8001a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a7e:	f000 b845 	b.w	8001b0c <_close_r>

08001a82 <_vsniprintf_r>:
 8001a82:	b530      	push	{r4, r5, lr}
 8001a84:	4614      	mov	r4, r2
 8001a86:	2c00      	cmp	r4, #0
 8001a88:	b09b      	sub	sp, #108	@ 0x6c
 8001a8a:	4605      	mov	r5, r0
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	da05      	bge.n	8001a9c <_vsniprintf_r+0x1a>
 8001a90:	238b      	movs	r3, #139	@ 0x8b
 8001a92:	6003      	str	r3, [r0, #0]
 8001a94:	f04f 30ff 	mov.w	r0, #4294967295
 8001a98:	b01b      	add	sp, #108	@ 0x6c
 8001a9a:	bd30      	pop	{r4, r5, pc}
 8001a9c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8001aa0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	9319      	str	r3, [sp, #100]	@ 0x64
 8001aaa:	bf14      	ite	ne
 8001aac:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001ab0:	4623      	moveq	r3, r4
 8001ab2:	9302      	str	r3, [sp, #8]
 8001ab4:	9305      	str	r3, [sp, #20]
 8001ab6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001aba:	9100      	str	r1, [sp, #0]
 8001abc:	9104      	str	r1, [sp, #16]
 8001abe:	f8ad 300e 	strh.w	r3, [sp, #14]
 8001ac2:	4669      	mov	r1, sp
 8001ac4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8001ac6:	f000 fa0f 	bl	8001ee8 <_svfiprintf_r>
 8001aca:	1c43      	adds	r3, r0, #1
 8001acc:	bfbc      	itt	lt
 8001ace:	238b      	movlt	r3, #139	@ 0x8b
 8001ad0:	602b      	strlt	r3, [r5, #0]
 8001ad2:	2c00      	cmp	r4, #0
 8001ad4:	d0e0      	beq.n	8001a98 <_vsniprintf_r+0x16>
 8001ad6:	9b00      	ldr	r3, [sp, #0]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
 8001adc:	e7dc      	b.n	8001a98 <_vsniprintf_r+0x16>
	...

08001ae0 <vsniprintf>:
 8001ae0:	b507      	push	{r0, r1, r2, lr}
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	460a      	mov	r2, r1
 8001ae8:	4601      	mov	r1, r0
 8001aea:	4803      	ldr	r0, [pc, #12]	@ (8001af8 <vsniprintf+0x18>)
 8001aec:	6800      	ldr	r0, [r0, #0]
 8001aee:	f7ff ffc8 	bl	8001a82 <_vsniprintf_r>
 8001af2:	b003      	add	sp, #12
 8001af4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001af8:	20000014 	.word	0x20000014

08001afc <memset>:
 8001afc:	4402      	add	r2, r0
 8001afe:	4603      	mov	r3, r0
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d100      	bne.n	8001b06 <memset+0xa>
 8001b04:	4770      	bx	lr
 8001b06:	f803 1b01 	strb.w	r1, [r3], #1
 8001b0a:	e7f9      	b.n	8001b00 <memset+0x4>

08001b0c <_close_r>:
 8001b0c:	b538      	push	{r3, r4, r5, lr}
 8001b0e:	4d06      	ldr	r5, [pc, #24]	@ (8001b28 <_close_r+0x1c>)
 8001b10:	2300      	movs	r3, #0
 8001b12:	4604      	mov	r4, r0
 8001b14:	4608      	mov	r0, r1
 8001b16:	602b      	str	r3, [r5, #0]
 8001b18:	f7ff fdae 	bl	8001678 <_close>
 8001b1c:	1c43      	adds	r3, r0, #1
 8001b1e:	d102      	bne.n	8001b26 <_close_r+0x1a>
 8001b20:	682b      	ldr	r3, [r5, #0]
 8001b22:	b103      	cbz	r3, 8001b26 <_close_r+0x1a>
 8001b24:	6023      	str	r3, [r4, #0]
 8001b26:	bd38      	pop	{r3, r4, r5, pc}
 8001b28:	2000022c 	.word	0x2000022c

08001b2c <_lseek_r>:
 8001b2c:	b538      	push	{r3, r4, r5, lr}
 8001b2e:	4d07      	ldr	r5, [pc, #28]	@ (8001b4c <_lseek_r+0x20>)
 8001b30:	4604      	mov	r4, r0
 8001b32:	4608      	mov	r0, r1
 8001b34:	4611      	mov	r1, r2
 8001b36:	2200      	movs	r2, #0
 8001b38:	602a      	str	r2, [r5, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	f7ff fdc3 	bl	80016c6 <_lseek>
 8001b40:	1c43      	adds	r3, r0, #1
 8001b42:	d102      	bne.n	8001b4a <_lseek_r+0x1e>
 8001b44:	682b      	ldr	r3, [r5, #0]
 8001b46:	b103      	cbz	r3, 8001b4a <_lseek_r+0x1e>
 8001b48:	6023      	str	r3, [r4, #0]
 8001b4a:	bd38      	pop	{r3, r4, r5, pc}
 8001b4c:	2000022c 	.word	0x2000022c

08001b50 <_read_r>:
 8001b50:	b538      	push	{r3, r4, r5, lr}
 8001b52:	4d07      	ldr	r5, [pc, #28]	@ (8001b70 <_read_r+0x20>)
 8001b54:	4604      	mov	r4, r0
 8001b56:	4608      	mov	r0, r1
 8001b58:	4611      	mov	r1, r2
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	602a      	str	r2, [r5, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	f7ff fd51 	bl	8001606 <_read>
 8001b64:	1c43      	adds	r3, r0, #1
 8001b66:	d102      	bne.n	8001b6e <_read_r+0x1e>
 8001b68:	682b      	ldr	r3, [r5, #0]
 8001b6a:	b103      	cbz	r3, 8001b6e <_read_r+0x1e>
 8001b6c:	6023      	str	r3, [r4, #0]
 8001b6e:	bd38      	pop	{r3, r4, r5, pc}
 8001b70:	2000022c 	.word	0x2000022c

08001b74 <_write_r>:
 8001b74:	b538      	push	{r3, r4, r5, lr}
 8001b76:	4d07      	ldr	r5, [pc, #28]	@ (8001b94 <_write_r+0x20>)
 8001b78:	4604      	mov	r4, r0
 8001b7a:	4608      	mov	r0, r1
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	2200      	movs	r2, #0
 8001b80:	602a      	str	r2, [r5, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	f7ff fd5c 	bl	8001640 <_write>
 8001b88:	1c43      	adds	r3, r0, #1
 8001b8a:	d102      	bne.n	8001b92 <_write_r+0x1e>
 8001b8c:	682b      	ldr	r3, [r5, #0]
 8001b8e:	b103      	cbz	r3, 8001b92 <_write_r+0x1e>
 8001b90:	6023      	str	r3, [r4, #0]
 8001b92:	bd38      	pop	{r3, r4, r5, pc}
 8001b94:	2000022c 	.word	0x2000022c

08001b98 <__errno>:
 8001b98:	4b01      	ldr	r3, [pc, #4]	@ (8001ba0 <__errno+0x8>)
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000014 	.word	0x20000014

08001ba4 <__libc_init_array>:
 8001ba4:	b570      	push	{r4, r5, r6, lr}
 8001ba6:	4d0d      	ldr	r5, [pc, #52]	@ (8001bdc <__libc_init_array+0x38>)
 8001ba8:	4c0d      	ldr	r4, [pc, #52]	@ (8001be0 <__libc_init_array+0x3c>)
 8001baa:	1b64      	subs	r4, r4, r5
 8001bac:	10a4      	asrs	r4, r4, #2
 8001bae:	2600      	movs	r6, #0
 8001bb0:	42a6      	cmp	r6, r4
 8001bb2:	d109      	bne.n	8001bc8 <__libc_init_array+0x24>
 8001bb4:	4d0b      	ldr	r5, [pc, #44]	@ (8001be4 <__libc_init_array+0x40>)
 8001bb6:	4c0c      	ldr	r4, [pc, #48]	@ (8001be8 <__libc_init_array+0x44>)
 8001bb8:	f000 ffee 	bl	8002b98 <_init>
 8001bbc:	1b64      	subs	r4, r4, r5
 8001bbe:	10a4      	asrs	r4, r4, #2
 8001bc0:	2600      	movs	r6, #0
 8001bc2:	42a6      	cmp	r6, r4
 8001bc4:	d105      	bne.n	8001bd2 <__libc_init_array+0x2e>
 8001bc6:	bd70      	pop	{r4, r5, r6, pc}
 8001bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bcc:	4798      	blx	r3
 8001bce:	3601      	adds	r6, #1
 8001bd0:	e7ee      	b.n	8001bb0 <__libc_init_array+0xc>
 8001bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bd6:	4798      	blx	r3
 8001bd8:	3601      	adds	r6, #1
 8001bda:	e7f2      	b.n	8001bc2 <__libc_init_array+0x1e>
 8001bdc:	08002f88 	.word	0x08002f88
 8001be0:	08002f88 	.word	0x08002f88
 8001be4:	08002f88 	.word	0x08002f88
 8001be8:	08002f8c 	.word	0x08002f8c

08001bec <__retarget_lock_init_recursive>:
 8001bec:	4770      	bx	lr

08001bee <__retarget_lock_acquire_recursive>:
 8001bee:	4770      	bx	lr

08001bf0 <__retarget_lock_release_recursive>:
 8001bf0:	4770      	bx	lr
	...

08001bf4 <__assert_func>:
 8001bf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001bf6:	4614      	mov	r4, r2
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <__assert_func+0x2c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4605      	mov	r5, r0
 8001c00:	68d8      	ldr	r0, [r3, #12]
 8001c02:	b14c      	cbz	r4, 8001c18 <__assert_func+0x24>
 8001c04:	4b07      	ldr	r3, [pc, #28]	@ (8001c24 <__assert_func+0x30>)
 8001c06:	9100      	str	r1, [sp, #0]
 8001c08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001c0c:	4906      	ldr	r1, [pc, #24]	@ (8001c28 <__assert_func+0x34>)
 8001c0e:	462b      	mov	r3, r5
 8001c10:	f000 fc9e 	bl	8002550 <fiprintf>
 8001c14:	f000 fce6 	bl	80025e4 <abort>
 8001c18:	4b04      	ldr	r3, [pc, #16]	@ (8001c2c <__assert_func+0x38>)
 8001c1a:	461c      	mov	r4, r3
 8001c1c:	e7f3      	b.n	8001c06 <__assert_func+0x12>
 8001c1e:	bf00      	nop
 8001c20:	20000014 	.word	0x20000014
 8001c24:	08002f11 	.word	0x08002f11
 8001c28:	08002f1e 	.word	0x08002f1e
 8001c2c:	08002f4c 	.word	0x08002f4c

08001c30 <_free_r>:
 8001c30:	b538      	push	{r3, r4, r5, lr}
 8001c32:	4605      	mov	r5, r0
 8001c34:	2900      	cmp	r1, #0
 8001c36:	d041      	beq.n	8001cbc <_free_r+0x8c>
 8001c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c3c:	1f0c      	subs	r4, r1, #4
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	bfb8      	it	lt
 8001c42:	18e4      	addlt	r4, r4, r3
 8001c44:	f000 f8e8 	bl	8001e18 <__malloc_lock>
 8001c48:	4a1d      	ldr	r2, [pc, #116]	@ (8001cc0 <_free_r+0x90>)
 8001c4a:	6813      	ldr	r3, [r2, #0]
 8001c4c:	b933      	cbnz	r3, 8001c5c <_free_r+0x2c>
 8001c4e:	6063      	str	r3, [r4, #4]
 8001c50:	6014      	str	r4, [r2, #0]
 8001c52:	4628      	mov	r0, r5
 8001c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c58:	f000 b8e4 	b.w	8001e24 <__malloc_unlock>
 8001c5c:	42a3      	cmp	r3, r4
 8001c5e:	d908      	bls.n	8001c72 <_free_r+0x42>
 8001c60:	6820      	ldr	r0, [r4, #0]
 8001c62:	1821      	adds	r1, r4, r0
 8001c64:	428b      	cmp	r3, r1
 8001c66:	bf01      	itttt	eq
 8001c68:	6819      	ldreq	r1, [r3, #0]
 8001c6a:	685b      	ldreq	r3, [r3, #4]
 8001c6c:	1809      	addeq	r1, r1, r0
 8001c6e:	6021      	streq	r1, [r4, #0]
 8001c70:	e7ed      	b.n	8001c4e <_free_r+0x1e>
 8001c72:	461a      	mov	r2, r3
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	b10b      	cbz	r3, 8001c7c <_free_r+0x4c>
 8001c78:	42a3      	cmp	r3, r4
 8001c7a:	d9fa      	bls.n	8001c72 <_free_r+0x42>
 8001c7c:	6811      	ldr	r1, [r2, #0]
 8001c7e:	1850      	adds	r0, r2, r1
 8001c80:	42a0      	cmp	r0, r4
 8001c82:	d10b      	bne.n	8001c9c <_free_r+0x6c>
 8001c84:	6820      	ldr	r0, [r4, #0]
 8001c86:	4401      	add	r1, r0
 8001c88:	1850      	adds	r0, r2, r1
 8001c8a:	4283      	cmp	r3, r0
 8001c8c:	6011      	str	r1, [r2, #0]
 8001c8e:	d1e0      	bne.n	8001c52 <_free_r+0x22>
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	6053      	str	r3, [r2, #4]
 8001c96:	4408      	add	r0, r1
 8001c98:	6010      	str	r0, [r2, #0]
 8001c9a:	e7da      	b.n	8001c52 <_free_r+0x22>
 8001c9c:	d902      	bls.n	8001ca4 <_free_r+0x74>
 8001c9e:	230c      	movs	r3, #12
 8001ca0:	602b      	str	r3, [r5, #0]
 8001ca2:	e7d6      	b.n	8001c52 <_free_r+0x22>
 8001ca4:	6820      	ldr	r0, [r4, #0]
 8001ca6:	1821      	adds	r1, r4, r0
 8001ca8:	428b      	cmp	r3, r1
 8001caa:	bf04      	itt	eq
 8001cac:	6819      	ldreq	r1, [r3, #0]
 8001cae:	685b      	ldreq	r3, [r3, #4]
 8001cb0:	6063      	str	r3, [r4, #4]
 8001cb2:	bf04      	itt	eq
 8001cb4:	1809      	addeq	r1, r1, r0
 8001cb6:	6021      	streq	r1, [r4, #0]
 8001cb8:	6054      	str	r4, [r2, #4]
 8001cba:	e7ca      	b.n	8001c52 <_free_r+0x22>
 8001cbc:	bd38      	pop	{r3, r4, r5, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000238 	.word	0x20000238

08001cc4 <malloc>:
 8001cc4:	4b02      	ldr	r3, [pc, #8]	@ (8001cd0 <malloc+0xc>)
 8001cc6:	4601      	mov	r1, r0
 8001cc8:	6818      	ldr	r0, [r3, #0]
 8001cca:	f000 b825 	b.w	8001d18 <_malloc_r>
 8001cce:	bf00      	nop
 8001cd0:	20000014 	.word	0x20000014

08001cd4 <sbrk_aligned>:
 8001cd4:	b570      	push	{r4, r5, r6, lr}
 8001cd6:	4e0f      	ldr	r6, [pc, #60]	@ (8001d14 <sbrk_aligned+0x40>)
 8001cd8:	460c      	mov	r4, r1
 8001cda:	6831      	ldr	r1, [r6, #0]
 8001cdc:	4605      	mov	r5, r0
 8001cde:	b911      	cbnz	r1, 8001ce6 <sbrk_aligned+0x12>
 8001ce0:	f000 fc62 	bl	80025a8 <_sbrk_r>
 8001ce4:	6030      	str	r0, [r6, #0]
 8001ce6:	4621      	mov	r1, r4
 8001ce8:	4628      	mov	r0, r5
 8001cea:	f000 fc5d 	bl	80025a8 <_sbrk_r>
 8001cee:	1c43      	adds	r3, r0, #1
 8001cf0:	d103      	bne.n	8001cfa <sbrk_aligned+0x26>
 8001cf2:	f04f 34ff 	mov.w	r4, #4294967295
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	bd70      	pop	{r4, r5, r6, pc}
 8001cfa:	1cc4      	adds	r4, r0, #3
 8001cfc:	f024 0403 	bic.w	r4, r4, #3
 8001d00:	42a0      	cmp	r0, r4
 8001d02:	d0f8      	beq.n	8001cf6 <sbrk_aligned+0x22>
 8001d04:	1a21      	subs	r1, r4, r0
 8001d06:	4628      	mov	r0, r5
 8001d08:	f000 fc4e 	bl	80025a8 <_sbrk_r>
 8001d0c:	3001      	adds	r0, #1
 8001d0e:	d1f2      	bne.n	8001cf6 <sbrk_aligned+0x22>
 8001d10:	e7ef      	b.n	8001cf2 <sbrk_aligned+0x1e>
 8001d12:	bf00      	nop
 8001d14:	20000234 	.word	0x20000234

08001d18 <_malloc_r>:
 8001d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d1c:	1ccd      	adds	r5, r1, #3
 8001d1e:	f025 0503 	bic.w	r5, r5, #3
 8001d22:	3508      	adds	r5, #8
 8001d24:	2d0c      	cmp	r5, #12
 8001d26:	bf38      	it	cc
 8001d28:	250c      	movcc	r5, #12
 8001d2a:	2d00      	cmp	r5, #0
 8001d2c:	4606      	mov	r6, r0
 8001d2e:	db01      	blt.n	8001d34 <_malloc_r+0x1c>
 8001d30:	42a9      	cmp	r1, r5
 8001d32:	d904      	bls.n	8001d3e <_malloc_r+0x26>
 8001d34:	230c      	movs	r3, #12
 8001d36:	6033      	str	r3, [r6, #0]
 8001d38:	2000      	movs	r0, #0
 8001d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001e14 <_malloc_r+0xfc>
 8001d42:	f000 f869 	bl	8001e18 <__malloc_lock>
 8001d46:	f8d8 3000 	ldr.w	r3, [r8]
 8001d4a:	461c      	mov	r4, r3
 8001d4c:	bb44      	cbnz	r4, 8001da0 <_malloc_r+0x88>
 8001d4e:	4629      	mov	r1, r5
 8001d50:	4630      	mov	r0, r6
 8001d52:	f7ff ffbf 	bl	8001cd4 <sbrk_aligned>
 8001d56:	1c43      	adds	r3, r0, #1
 8001d58:	4604      	mov	r4, r0
 8001d5a:	d158      	bne.n	8001e0e <_malloc_r+0xf6>
 8001d5c:	f8d8 4000 	ldr.w	r4, [r8]
 8001d60:	4627      	mov	r7, r4
 8001d62:	2f00      	cmp	r7, #0
 8001d64:	d143      	bne.n	8001dee <_malloc_r+0xd6>
 8001d66:	2c00      	cmp	r4, #0
 8001d68:	d04b      	beq.n	8001e02 <_malloc_r+0xea>
 8001d6a:	6823      	ldr	r3, [r4, #0]
 8001d6c:	4639      	mov	r1, r7
 8001d6e:	4630      	mov	r0, r6
 8001d70:	eb04 0903 	add.w	r9, r4, r3
 8001d74:	f000 fc18 	bl	80025a8 <_sbrk_r>
 8001d78:	4581      	cmp	r9, r0
 8001d7a:	d142      	bne.n	8001e02 <_malloc_r+0xea>
 8001d7c:	6821      	ldr	r1, [r4, #0]
 8001d7e:	1a6d      	subs	r5, r5, r1
 8001d80:	4629      	mov	r1, r5
 8001d82:	4630      	mov	r0, r6
 8001d84:	f7ff ffa6 	bl	8001cd4 <sbrk_aligned>
 8001d88:	3001      	adds	r0, #1
 8001d8a:	d03a      	beq.n	8001e02 <_malloc_r+0xea>
 8001d8c:	6823      	ldr	r3, [r4, #0]
 8001d8e:	442b      	add	r3, r5
 8001d90:	6023      	str	r3, [r4, #0]
 8001d92:	f8d8 3000 	ldr.w	r3, [r8]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	bb62      	cbnz	r2, 8001df4 <_malloc_r+0xdc>
 8001d9a:	f8c8 7000 	str.w	r7, [r8]
 8001d9e:	e00f      	b.n	8001dc0 <_malloc_r+0xa8>
 8001da0:	6822      	ldr	r2, [r4, #0]
 8001da2:	1b52      	subs	r2, r2, r5
 8001da4:	d420      	bmi.n	8001de8 <_malloc_r+0xd0>
 8001da6:	2a0b      	cmp	r2, #11
 8001da8:	d917      	bls.n	8001dda <_malloc_r+0xc2>
 8001daa:	1961      	adds	r1, r4, r5
 8001dac:	42a3      	cmp	r3, r4
 8001dae:	6025      	str	r5, [r4, #0]
 8001db0:	bf18      	it	ne
 8001db2:	6059      	strne	r1, [r3, #4]
 8001db4:	6863      	ldr	r3, [r4, #4]
 8001db6:	bf08      	it	eq
 8001db8:	f8c8 1000 	streq.w	r1, [r8]
 8001dbc:	5162      	str	r2, [r4, r5]
 8001dbe:	604b      	str	r3, [r1, #4]
 8001dc0:	4630      	mov	r0, r6
 8001dc2:	f000 f82f 	bl	8001e24 <__malloc_unlock>
 8001dc6:	f104 000b 	add.w	r0, r4, #11
 8001dca:	1d23      	adds	r3, r4, #4
 8001dcc:	f020 0007 	bic.w	r0, r0, #7
 8001dd0:	1ac2      	subs	r2, r0, r3
 8001dd2:	bf1c      	itt	ne
 8001dd4:	1a1b      	subne	r3, r3, r0
 8001dd6:	50a3      	strne	r3, [r4, r2]
 8001dd8:	e7af      	b.n	8001d3a <_malloc_r+0x22>
 8001dda:	6862      	ldr	r2, [r4, #4]
 8001ddc:	42a3      	cmp	r3, r4
 8001dde:	bf0c      	ite	eq
 8001de0:	f8c8 2000 	streq.w	r2, [r8]
 8001de4:	605a      	strne	r2, [r3, #4]
 8001de6:	e7eb      	b.n	8001dc0 <_malloc_r+0xa8>
 8001de8:	4623      	mov	r3, r4
 8001dea:	6864      	ldr	r4, [r4, #4]
 8001dec:	e7ae      	b.n	8001d4c <_malloc_r+0x34>
 8001dee:	463c      	mov	r4, r7
 8001df0:	687f      	ldr	r7, [r7, #4]
 8001df2:	e7b6      	b.n	8001d62 <_malloc_r+0x4a>
 8001df4:	461a      	mov	r2, r3
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	42a3      	cmp	r3, r4
 8001dfa:	d1fb      	bne.n	8001df4 <_malloc_r+0xdc>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	6053      	str	r3, [r2, #4]
 8001e00:	e7de      	b.n	8001dc0 <_malloc_r+0xa8>
 8001e02:	230c      	movs	r3, #12
 8001e04:	6033      	str	r3, [r6, #0]
 8001e06:	4630      	mov	r0, r6
 8001e08:	f000 f80c 	bl	8001e24 <__malloc_unlock>
 8001e0c:	e794      	b.n	8001d38 <_malloc_r+0x20>
 8001e0e:	6005      	str	r5, [r0, #0]
 8001e10:	e7d6      	b.n	8001dc0 <_malloc_r+0xa8>
 8001e12:	bf00      	nop
 8001e14:	20000238 	.word	0x20000238

08001e18 <__malloc_lock>:
 8001e18:	4801      	ldr	r0, [pc, #4]	@ (8001e20 <__malloc_lock+0x8>)
 8001e1a:	f7ff bee8 	b.w	8001bee <__retarget_lock_acquire_recursive>
 8001e1e:	bf00      	nop
 8001e20:	20000230 	.word	0x20000230

08001e24 <__malloc_unlock>:
 8001e24:	4801      	ldr	r0, [pc, #4]	@ (8001e2c <__malloc_unlock+0x8>)
 8001e26:	f7ff bee3 	b.w	8001bf0 <__retarget_lock_release_recursive>
 8001e2a:	bf00      	nop
 8001e2c:	20000230 	.word	0x20000230

08001e30 <__ssputs_r>:
 8001e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e34:	688e      	ldr	r6, [r1, #8]
 8001e36:	461f      	mov	r7, r3
 8001e38:	42be      	cmp	r6, r7
 8001e3a:	680b      	ldr	r3, [r1, #0]
 8001e3c:	4682      	mov	sl, r0
 8001e3e:	460c      	mov	r4, r1
 8001e40:	4690      	mov	r8, r2
 8001e42:	d82d      	bhi.n	8001ea0 <__ssputs_r+0x70>
 8001e44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001e48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001e4c:	d026      	beq.n	8001e9c <__ssputs_r+0x6c>
 8001e4e:	6965      	ldr	r5, [r4, #20]
 8001e50:	6909      	ldr	r1, [r1, #16]
 8001e52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001e56:	eba3 0901 	sub.w	r9, r3, r1
 8001e5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001e5e:	1c7b      	adds	r3, r7, #1
 8001e60:	444b      	add	r3, r9
 8001e62:	106d      	asrs	r5, r5, #1
 8001e64:	429d      	cmp	r5, r3
 8001e66:	bf38      	it	cc
 8001e68:	461d      	movcc	r5, r3
 8001e6a:	0553      	lsls	r3, r2, #21
 8001e6c:	d527      	bpl.n	8001ebe <__ssputs_r+0x8e>
 8001e6e:	4629      	mov	r1, r5
 8001e70:	f7ff ff52 	bl	8001d18 <_malloc_r>
 8001e74:	4606      	mov	r6, r0
 8001e76:	b360      	cbz	r0, 8001ed2 <__ssputs_r+0xa2>
 8001e78:	6921      	ldr	r1, [r4, #16]
 8001e7a:	464a      	mov	r2, r9
 8001e7c:	f000 fba4 	bl	80025c8 <memcpy>
 8001e80:	89a3      	ldrh	r3, [r4, #12]
 8001e82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001e86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e8a:	81a3      	strh	r3, [r4, #12]
 8001e8c:	6126      	str	r6, [r4, #16]
 8001e8e:	6165      	str	r5, [r4, #20]
 8001e90:	444e      	add	r6, r9
 8001e92:	eba5 0509 	sub.w	r5, r5, r9
 8001e96:	6026      	str	r6, [r4, #0]
 8001e98:	60a5      	str	r5, [r4, #8]
 8001e9a:	463e      	mov	r6, r7
 8001e9c:	42be      	cmp	r6, r7
 8001e9e:	d900      	bls.n	8001ea2 <__ssputs_r+0x72>
 8001ea0:	463e      	mov	r6, r7
 8001ea2:	6820      	ldr	r0, [r4, #0]
 8001ea4:	4632      	mov	r2, r6
 8001ea6:	4641      	mov	r1, r8
 8001ea8:	f000 fb64 	bl	8002574 <memmove>
 8001eac:	68a3      	ldr	r3, [r4, #8]
 8001eae:	1b9b      	subs	r3, r3, r6
 8001eb0:	60a3      	str	r3, [r4, #8]
 8001eb2:	6823      	ldr	r3, [r4, #0]
 8001eb4:	4433      	add	r3, r6
 8001eb6:	6023      	str	r3, [r4, #0]
 8001eb8:	2000      	movs	r0, #0
 8001eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ebe:	462a      	mov	r2, r5
 8001ec0:	f000 fb97 	bl	80025f2 <_realloc_r>
 8001ec4:	4606      	mov	r6, r0
 8001ec6:	2800      	cmp	r0, #0
 8001ec8:	d1e0      	bne.n	8001e8c <__ssputs_r+0x5c>
 8001eca:	6921      	ldr	r1, [r4, #16]
 8001ecc:	4650      	mov	r0, sl
 8001ece:	f7ff feaf 	bl	8001c30 <_free_r>
 8001ed2:	230c      	movs	r3, #12
 8001ed4:	f8ca 3000 	str.w	r3, [sl]
 8001ed8:	89a3      	ldrh	r3, [r4, #12]
 8001eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ede:	81a3      	strh	r3, [r4, #12]
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee4:	e7e9      	b.n	8001eba <__ssputs_r+0x8a>
	...

08001ee8 <_svfiprintf_r>:
 8001ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eec:	4698      	mov	r8, r3
 8001eee:	898b      	ldrh	r3, [r1, #12]
 8001ef0:	061b      	lsls	r3, r3, #24
 8001ef2:	b09d      	sub	sp, #116	@ 0x74
 8001ef4:	4607      	mov	r7, r0
 8001ef6:	460d      	mov	r5, r1
 8001ef8:	4614      	mov	r4, r2
 8001efa:	d510      	bpl.n	8001f1e <_svfiprintf_r+0x36>
 8001efc:	690b      	ldr	r3, [r1, #16]
 8001efe:	b973      	cbnz	r3, 8001f1e <_svfiprintf_r+0x36>
 8001f00:	2140      	movs	r1, #64	@ 0x40
 8001f02:	f7ff ff09 	bl	8001d18 <_malloc_r>
 8001f06:	6028      	str	r0, [r5, #0]
 8001f08:	6128      	str	r0, [r5, #16]
 8001f0a:	b930      	cbnz	r0, 8001f1a <_svfiprintf_r+0x32>
 8001f0c:	230c      	movs	r3, #12
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295
 8001f14:	b01d      	add	sp, #116	@ 0x74
 8001f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f1a:	2340      	movs	r3, #64	@ 0x40
 8001f1c:	616b      	str	r3, [r5, #20]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f22:	2320      	movs	r3, #32
 8001f24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001f28:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f2c:	2330      	movs	r3, #48	@ 0x30
 8001f2e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80020cc <_svfiprintf_r+0x1e4>
 8001f32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001f36:	f04f 0901 	mov.w	r9, #1
 8001f3a:	4623      	mov	r3, r4
 8001f3c:	469a      	mov	sl, r3
 8001f3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f42:	b10a      	cbz	r2, 8001f48 <_svfiprintf_r+0x60>
 8001f44:	2a25      	cmp	r2, #37	@ 0x25
 8001f46:	d1f9      	bne.n	8001f3c <_svfiprintf_r+0x54>
 8001f48:	ebba 0b04 	subs.w	fp, sl, r4
 8001f4c:	d00b      	beq.n	8001f66 <_svfiprintf_r+0x7e>
 8001f4e:	465b      	mov	r3, fp
 8001f50:	4622      	mov	r2, r4
 8001f52:	4629      	mov	r1, r5
 8001f54:	4638      	mov	r0, r7
 8001f56:	f7ff ff6b 	bl	8001e30 <__ssputs_r>
 8001f5a:	3001      	adds	r0, #1
 8001f5c:	f000 80a7 	beq.w	80020ae <_svfiprintf_r+0x1c6>
 8001f60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001f62:	445a      	add	r2, fp
 8001f64:	9209      	str	r2, [sp, #36]	@ 0x24
 8001f66:	f89a 3000 	ldrb.w	r3, [sl]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 809f 	beq.w	80020ae <_svfiprintf_r+0x1c6>
 8001f70:	2300      	movs	r3, #0
 8001f72:	f04f 32ff 	mov.w	r2, #4294967295
 8001f76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f7a:	f10a 0a01 	add.w	sl, sl, #1
 8001f7e:	9304      	str	r3, [sp, #16]
 8001f80:	9307      	str	r3, [sp, #28]
 8001f82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001f86:	931a      	str	r3, [sp, #104]	@ 0x68
 8001f88:	4654      	mov	r4, sl
 8001f8a:	2205      	movs	r2, #5
 8001f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f90:	484e      	ldr	r0, [pc, #312]	@ (80020cc <_svfiprintf_r+0x1e4>)
 8001f92:	f7fe f925 	bl	80001e0 <memchr>
 8001f96:	9a04      	ldr	r2, [sp, #16]
 8001f98:	b9d8      	cbnz	r0, 8001fd2 <_svfiprintf_r+0xea>
 8001f9a:	06d0      	lsls	r0, r2, #27
 8001f9c:	bf44      	itt	mi
 8001f9e:	2320      	movmi	r3, #32
 8001fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001fa4:	0711      	lsls	r1, r2, #28
 8001fa6:	bf44      	itt	mi
 8001fa8:	232b      	movmi	r3, #43	@ 0x2b
 8001faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001fae:	f89a 3000 	ldrb.w	r3, [sl]
 8001fb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8001fb4:	d015      	beq.n	8001fe2 <_svfiprintf_r+0xfa>
 8001fb6:	9a07      	ldr	r2, [sp, #28]
 8001fb8:	4654      	mov	r4, sl
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f04f 0c0a 	mov.w	ip, #10
 8001fc0:	4621      	mov	r1, r4
 8001fc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001fc6:	3b30      	subs	r3, #48	@ 0x30
 8001fc8:	2b09      	cmp	r3, #9
 8001fca:	d94b      	bls.n	8002064 <_svfiprintf_r+0x17c>
 8001fcc:	b1b0      	cbz	r0, 8001ffc <_svfiprintf_r+0x114>
 8001fce:	9207      	str	r2, [sp, #28]
 8001fd0:	e014      	b.n	8001ffc <_svfiprintf_r+0x114>
 8001fd2:	eba0 0308 	sub.w	r3, r0, r8
 8001fd6:	fa09 f303 	lsl.w	r3, r9, r3
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	9304      	str	r3, [sp, #16]
 8001fde:	46a2      	mov	sl, r4
 8001fe0:	e7d2      	b.n	8001f88 <_svfiprintf_r+0xa0>
 8001fe2:	9b03      	ldr	r3, [sp, #12]
 8001fe4:	1d19      	adds	r1, r3, #4
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	9103      	str	r1, [sp, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	bfbb      	ittet	lt
 8001fee:	425b      	neglt	r3, r3
 8001ff0:	f042 0202 	orrlt.w	r2, r2, #2
 8001ff4:	9307      	strge	r3, [sp, #28]
 8001ff6:	9307      	strlt	r3, [sp, #28]
 8001ff8:	bfb8      	it	lt
 8001ffa:	9204      	strlt	r2, [sp, #16]
 8001ffc:	7823      	ldrb	r3, [r4, #0]
 8001ffe:	2b2e      	cmp	r3, #46	@ 0x2e
 8002000:	d10a      	bne.n	8002018 <_svfiprintf_r+0x130>
 8002002:	7863      	ldrb	r3, [r4, #1]
 8002004:	2b2a      	cmp	r3, #42	@ 0x2a
 8002006:	d132      	bne.n	800206e <_svfiprintf_r+0x186>
 8002008:	9b03      	ldr	r3, [sp, #12]
 800200a:	1d1a      	adds	r2, r3, #4
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	9203      	str	r2, [sp, #12]
 8002010:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002014:	3402      	adds	r4, #2
 8002016:	9305      	str	r3, [sp, #20]
 8002018:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80020dc <_svfiprintf_r+0x1f4>
 800201c:	7821      	ldrb	r1, [r4, #0]
 800201e:	2203      	movs	r2, #3
 8002020:	4650      	mov	r0, sl
 8002022:	f7fe f8dd 	bl	80001e0 <memchr>
 8002026:	b138      	cbz	r0, 8002038 <_svfiprintf_r+0x150>
 8002028:	9b04      	ldr	r3, [sp, #16]
 800202a:	eba0 000a 	sub.w	r0, r0, sl
 800202e:	2240      	movs	r2, #64	@ 0x40
 8002030:	4082      	lsls	r2, r0
 8002032:	4313      	orrs	r3, r2
 8002034:	3401      	adds	r4, #1
 8002036:	9304      	str	r3, [sp, #16]
 8002038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800203c:	4824      	ldr	r0, [pc, #144]	@ (80020d0 <_svfiprintf_r+0x1e8>)
 800203e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002042:	2206      	movs	r2, #6
 8002044:	f7fe f8cc 	bl	80001e0 <memchr>
 8002048:	2800      	cmp	r0, #0
 800204a:	d036      	beq.n	80020ba <_svfiprintf_r+0x1d2>
 800204c:	4b21      	ldr	r3, [pc, #132]	@ (80020d4 <_svfiprintf_r+0x1ec>)
 800204e:	bb1b      	cbnz	r3, 8002098 <_svfiprintf_r+0x1b0>
 8002050:	9b03      	ldr	r3, [sp, #12]
 8002052:	3307      	adds	r3, #7
 8002054:	f023 0307 	bic.w	r3, r3, #7
 8002058:	3308      	adds	r3, #8
 800205a:	9303      	str	r3, [sp, #12]
 800205c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800205e:	4433      	add	r3, r6
 8002060:	9309      	str	r3, [sp, #36]	@ 0x24
 8002062:	e76a      	b.n	8001f3a <_svfiprintf_r+0x52>
 8002064:	fb0c 3202 	mla	r2, ip, r2, r3
 8002068:	460c      	mov	r4, r1
 800206a:	2001      	movs	r0, #1
 800206c:	e7a8      	b.n	8001fc0 <_svfiprintf_r+0xd8>
 800206e:	2300      	movs	r3, #0
 8002070:	3401      	adds	r4, #1
 8002072:	9305      	str	r3, [sp, #20]
 8002074:	4619      	mov	r1, r3
 8002076:	f04f 0c0a 	mov.w	ip, #10
 800207a:	4620      	mov	r0, r4
 800207c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002080:	3a30      	subs	r2, #48	@ 0x30
 8002082:	2a09      	cmp	r2, #9
 8002084:	d903      	bls.n	800208e <_svfiprintf_r+0x1a6>
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0c6      	beq.n	8002018 <_svfiprintf_r+0x130>
 800208a:	9105      	str	r1, [sp, #20]
 800208c:	e7c4      	b.n	8002018 <_svfiprintf_r+0x130>
 800208e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002092:	4604      	mov	r4, r0
 8002094:	2301      	movs	r3, #1
 8002096:	e7f0      	b.n	800207a <_svfiprintf_r+0x192>
 8002098:	ab03      	add	r3, sp, #12
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	462a      	mov	r2, r5
 800209e:	4b0e      	ldr	r3, [pc, #56]	@ (80020d8 <_svfiprintf_r+0x1f0>)
 80020a0:	a904      	add	r1, sp, #16
 80020a2:	4638      	mov	r0, r7
 80020a4:	f3af 8000 	nop.w
 80020a8:	1c42      	adds	r2, r0, #1
 80020aa:	4606      	mov	r6, r0
 80020ac:	d1d6      	bne.n	800205c <_svfiprintf_r+0x174>
 80020ae:	89ab      	ldrh	r3, [r5, #12]
 80020b0:	065b      	lsls	r3, r3, #25
 80020b2:	f53f af2d 	bmi.w	8001f10 <_svfiprintf_r+0x28>
 80020b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80020b8:	e72c      	b.n	8001f14 <_svfiprintf_r+0x2c>
 80020ba:	ab03      	add	r3, sp, #12
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	462a      	mov	r2, r5
 80020c0:	4b05      	ldr	r3, [pc, #20]	@ (80020d8 <_svfiprintf_r+0x1f0>)
 80020c2:	a904      	add	r1, sp, #16
 80020c4:	4638      	mov	r0, r7
 80020c6:	f000 f879 	bl	80021bc <_printf_i>
 80020ca:	e7ed      	b.n	80020a8 <_svfiprintf_r+0x1c0>
 80020cc:	08002f4d 	.word	0x08002f4d
 80020d0:	08002f57 	.word	0x08002f57
 80020d4:	00000000 	.word	0x00000000
 80020d8:	08001e31 	.word	0x08001e31
 80020dc:	08002f53 	.word	0x08002f53

080020e0 <_printf_common>:
 80020e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020e4:	4616      	mov	r6, r2
 80020e6:	4698      	mov	r8, r3
 80020e8:	688a      	ldr	r2, [r1, #8]
 80020ea:	690b      	ldr	r3, [r1, #16]
 80020ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80020f0:	4293      	cmp	r3, r2
 80020f2:	bfb8      	it	lt
 80020f4:	4613      	movlt	r3, r2
 80020f6:	6033      	str	r3, [r6, #0]
 80020f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80020fc:	4607      	mov	r7, r0
 80020fe:	460c      	mov	r4, r1
 8002100:	b10a      	cbz	r2, 8002106 <_printf_common+0x26>
 8002102:	3301      	adds	r3, #1
 8002104:	6033      	str	r3, [r6, #0]
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	0699      	lsls	r1, r3, #26
 800210a:	bf42      	ittt	mi
 800210c:	6833      	ldrmi	r3, [r6, #0]
 800210e:	3302      	addmi	r3, #2
 8002110:	6033      	strmi	r3, [r6, #0]
 8002112:	6825      	ldr	r5, [r4, #0]
 8002114:	f015 0506 	ands.w	r5, r5, #6
 8002118:	d106      	bne.n	8002128 <_printf_common+0x48>
 800211a:	f104 0a19 	add.w	sl, r4, #25
 800211e:	68e3      	ldr	r3, [r4, #12]
 8002120:	6832      	ldr	r2, [r6, #0]
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	42ab      	cmp	r3, r5
 8002126:	dc26      	bgt.n	8002176 <_printf_common+0x96>
 8002128:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800212c:	6822      	ldr	r2, [r4, #0]
 800212e:	3b00      	subs	r3, #0
 8002130:	bf18      	it	ne
 8002132:	2301      	movne	r3, #1
 8002134:	0692      	lsls	r2, r2, #26
 8002136:	d42b      	bmi.n	8002190 <_printf_common+0xb0>
 8002138:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800213c:	4641      	mov	r1, r8
 800213e:	4638      	mov	r0, r7
 8002140:	47c8      	blx	r9
 8002142:	3001      	adds	r0, #1
 8002144:	d01e      	beq.n	8002184 <_printf_common+0xa4>
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	6922      	ldr	r2, [r4, #16]
 800214a:	f003 0306 	and.w	r3, r3, #6
 800214e:	2b04      	cmp	r3, #4
 8002150:	bf02      	ittt	eq
 8002152:	68e5      	ldreq	r5, [r4, #12]
 8002154:	6833      	ldreq	r3, [r6, #0]
 8002156:	1aed      	subeq	r5, r5, r3
 8002158:	68a3      	ldr	r3, [r4, #8]
 800215a:	bf0c      	ite	eq
 800215c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002160:	2500      	movne	r5, #0
 8002162:	4293      	cmp	r3, r2
 8002164:	bfc4      	itt	gt
 8002166:	1a9b      	subgt	r3, r3, r2
 8002168:	18ed      	addgt	r5, r5, r3
 800216a:	2600      	movs	r6, #0
 800216c:	341a      	adds	r4, #26
 800216e:	42b5      	cmp	r5, r6
 8002170:	d11a      	bne.n	80021a8 <_printf_common+0xc8>
 8002172:	2000      	movs	r0, #0
 8002174:	e008      	b.n	8002188 <_printf_common+0xa8>
 8002176:	2301      	movs	r3, #1
 8002178:	4652      	mov	r2, sl
 800217a:	4641      	mov	r1, r8
 800217c:	4638      	mov	r0, r7
 800217e:	47c8      	blx	r9
 8002180:	3001      	adds	r0, #1
 8002182:	d103      	bne.n	800218c <_printf_common+0xac>
 8002184:	f04f 30ff 	mov.w	r0, #4294967295
 8002188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800218c:	3501      	adds	r5, #1
 800218e:	e7c6      	b.n	800211e <_printf_common+0x3e>
 8002190:	18e1      	adds	r1, r4, r3
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	2030      	movs	r0, #48	@ 0x30
 8002196:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800219a:	4422      	add	r2, r4
 800219c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80021a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80021a4:	3302      	adds	r3, #2
 80021a6:	e7c7      	b.n	8002138 <_printf_common+0x58>
 80021a8:	2301      	movs	r3, #1
 80021aa:	4622      	mov	r2, r4
 80021ac:	4641      	mov	r1, r8
 80021ae:	4638      	mov	r0, r7
 80021b0:	47c8      	blx	r9
 80021b2:	3001      	adds	r0, #1
 80021b4:	d0e6      	beq.n	8002184 <_printf_common+0xa4>
 80021b6:	3601      	adds	r6, #1
 80021b8:	e7d9      	b.n	800216e <_printf_common+0x8e>
	...

080021bc <_printf_i>:
 80021bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80021c0:	7e0f      	ldrb	r7, [r1, #24]
 80021c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80021c4:	2f78      	cmp	r7, #120	@ 0x78
 80021c6:	4691      	mov	r9, r2
 80021c8:	4680      	mov	r8, r0
 80021ca:	460c      	mov	r4, r1
 80021cc:	469a      	mov	sl, r3
 80021ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80021d2:	d807      	bhi.n	80021e4 <_printf_i+0x28>
 80021d4:	2f62      	cmp	r7, #98	@ 0x62
 80021d6:	d80a      	bhi.n	80021ee <_printf_i+0x32>
 80021d8:	2f00      	cmp	r7, #0
 80021da:	f000 80d1 	beq.w	8002380 <_printf_i+0x1c4>
 80021de:	2f58      	cmp	r7, #88	@ 0x58
 80021e0:	f000 80b8 	beq.w	8002354 <_printf_i+0x198>
 80021e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80021e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80021ec:	e03a      	b.n	8002264 <_printf_i+0xa8>
 80021ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80021f2:	2b15      	cmp	r3, #21
 80021f4:	d8f6      	bhi.n	80021e4 <_printf_i+0x28>
 80021f6:	a101      	add	r1, pc, #4	@ (adr r1, 80021fc <_printf_i+0x40>)
 80021f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80021fc:	08002255 	.word	0x08002255
 8002200:	08002269 	.word	0x08002269
 8002204:	080021e5 	.word	0x080021e5
 8002208:	080021e5 	.word	0x080021e5
 800220c:	080021e5 	.word	0x080021e5
 8002210:	080021e5 	.word	0x080021e5
 8002214:	08002269 	.word	0x08002269
 8002218:	080021e5 	.word	0x080021e5
 800221c:	080021e5 	.word	0x080021e5
 8002220:	080021e5 	.word	0x080021e5
 8002224:	080021e5 	.word	0x080021e5
 8002228:	08002367 	.word	0x08002367
 800222c:	08002293 	.word	0x08002293
 8002230:	08002321 	.word	0x08002321
 8002234:	080021e5 	.word	0x080021e5
 8002238:	080021e5 	.word	0x080021e5
 800223c:	08002389 	.word	0x08002389
 8002240:	080021e5 	.word	0x080021e5
 8002244:	08002293 	.word	0x08002293
 8002248:	080021e5 	.word	0x080021e5
 800224c:	080021e5 	.word	0x080021e5
 8002250:	08002329 	.word	0x08002329
 8002254:	6833      	ldr	r3, [r6, #0]
 8002256:	1d1a      	adds	r2, r3, #4
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6032      	str	r2, [r6, #0]
 800225c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002260:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002264:	2301      	movs	r3, #1
 8002266:	e09c      	b.n	80023a2 <_printf_i+0x1e6>
 8002268:	6833      	ldr	r3, [r6, #0]
 800226a:	6820      	ldr	r0, [r4, #0]
 800226c:	1d19      	adds	r1, r3, #4
 800226e:	6031      	str	r1, [r6, #0]
 8002270:	0606      	lsls	r6, r0, #24
 8002272:	d501      	bpl.n	8002278 <_printf_i+0xbc>
 8002274:	681d      	ldr	r5, [r3, #0]
 8002276:	e003      	b.n	8002280 <_printf_i+0xc4>
 8002278:	0645      	lsls	r5, r0, #25
 800227a:	d5fb      	bpl.n	8002274 <_printf_i+0xb8>
 800227c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002280:	2d00      	cmp	r5, #0
 8002282:	da03      	bge.n	800228c <_printf_i+0xd0>
 8002284:	232d      	movs	r3, #45	@ 0x2d
 8002286:	426d      	negs	r5, r5
 8002288:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800228c:	4858      	ldr	r0, [pc, #352]	@ (80023f0 <_printf_i+0x234>)
 800228e:	230a      	movs	r3, #10
 8002290:	e011      	b.n	80022b6 <_printf_i+0xfa>
 8002292:	6821      	ldr	r1, [r4, #0]
 8002294:	6833      	ldr	r3, [r6, #0]
 8002296:	0608      	lsls	r0, r1, #24
 8002298:	f853 5b04 	ldr.w	r5, [r3], #4
 800229c:	d402      	bmi.n	80022a4 <_printf_i+0xe8>
 800229e:	0649      	lsls	r1, r1, #25
 80022a0:	bf48      	it	mi
 80022a2:	b2ad      	uxthmi	r5, r5
 80022a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80022a6:	4852      	ldr	r0, [pc, #328]	@ (80023f0 <_printf_i+0x234>)
 80022a8:	6033      	str	r3, [r6, #0]
 80022aa:	bf14      	ite	ne
 80022ac:	230a      	movne	r3, #10
 80022ae:	2308      	moveq	r3, #8
 80022b0:	2100      	movs	r1, #0
 80022b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80022b6:	6866      	ldr	r6, [r4, #4]
 80022b8:	60a6      	str	r6, [r4, #8]
 80022ba:	2e00      	cmp	r6, #0
 80022bc:	db05      	blt.n	80022ca <_printf_i+0x10e>
 80022be:	6821      	ldr	r1, [r4, #0]
 80022c0:	432e      	orrs	r6, r5
 80022c2:	f021 0104 	bic.w	r1, r1, #4
 80022c6:	6021      	str	r1, [r4, #0]
 80022c8:	d04b      	beq.n	8002362 <_printf_i+0x1a6>
 80022ca:	4616      	mov	r6, r2
 80022cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80022d0:	fb03 5711 	mls	r7, r3, r1, r5
 80022d4:	5dc7      	ldrb	r7, [r0, r7]
 80022d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80022da:	462f      	mov	r7, r5
 80022dc:	42bb      	cmp	r3, r7
 80022de:	460d      	mov	r5, r1
 80022e0:	d9f4      	bls.n	80022cc <_printf_i+0x110>
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d10b      	bne.n	80022fe <_printf_i+0x142>
 80022e6:	6823      	ldr	r3, [r4, #0]
 80022e8:	07df      	lsls	r7, r3, #31
 80022ea:	d508      	bpl.n	80022fe <_printf_i+0x142>
 80022ec:	6923      	ldr	r3, [r4, #16]
 80022ee:	6861      	ldr	r1, [r4, #4]
 80022f0:	4299      	cmp	r1, r3
 80022f2:	bfde      	ittt	le
 80022f4:	2330      	movle	r3, #48	@ 0x30
 80022f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80022fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80022fe:	1b92      	subs	r2, r2, r6
 8002300:	6122      	str	r2, [r4, #16]
 8002302:	f8cd a000 	str.w	sl, [sp]
 8002306:	464b      	mov	r3, r9
 8002308:	aa03      	add	r2, sp, #12
 800230a:	4621      	mov	r1, r4
 800230c:	4640      	mov	r0, r8
 800230e:	f7ff fee7 	bl	80020e0 <_printf_common>
 8002312:	3001      	adds	r0, #1
 8002314:	d14a      	bne.n	80023ac <_printf_i+0x1f0>
 8002316:	f04f 30ff 	mov.w	r0, #4294967295
 800231a:	b004      	add	sp, #16
 800231c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002320:	6823      	ldr	r3, [r4, #0]
 8002322:	f043 0320 	orr.w	r3, r3, #32
 8002326:	6023      	str	r3, [r4, #0]
 8002328:	4832      	ldr	r0, [pc, #200]	@ (80023f4 <_printf_i+0x238>)
 800232a:	2778      	movs	r7, #120	@ 0x78
 800232c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002330:	6823      	ldr	r3, [r4, #0]
 8002332:	6831      	ldr	r1, [r6, #0]
 8002334:	061f      	lsls	r7, r3, #24
 8002336:	f851 5b04 	ldr.w	r5, [r1], #4
 800233a:	d402      	bmi.n	8002342 <_printf_i+0x186>
 800233c:	065f      	lsls	r7, r3, #25
 800233e:	bf48      	it	mi
 8002340:	b2ad      	uxthmi	r5, r5
 8002342:	6031      	str	r1, [r6, #0]
 8002344:	07d9      	lsls	r1, r3, #31
 8002346:	bf44      	itt	mi
 8002348:	f043 0320 	orrmi.w	r3, r3, #32
 800234c:	6023      	strmi	r3, [r4, #0]
 800234e:	b11d      	cbz	r5, 8002358 <_printf_i+0x19c>
 8002350:	2310      	movs	r3, #16
 8002352:	e7ad      	b.n	80022b0 <_printf_i+0xf4>
 8002354:	4826      	ldr	r0, [pc, #152]	@ (80023f0 <_printf_i+0x234>)
 8002356:	e7e9      	b.n	800232c <_printf_i+0x170>
 8002358:	6823      	ldr	r3, [r4, #0]
 800235a:	f023 0320 	bic.w	r3, r3, #32
 800235e:	6023      	str	r3, [r4, #0]
 8002360:	e7f6      	b.n	8002350 <_printf_i+0x194>
 8002362:	4616      	mov	r6, r2
 8002364:	e7bd      	b.n	80022e2 <_printf_i+0x126>
 8002366:	6833      	ldr	r3, [r6, #0]
 8002368:	6825      	ldr	r5, [r4, #0]
 800236a:	6961      	ldr	r1, [r4, #20]
 800236c:	1d18      	adds	r0, r3, #4
 800236e:	6030      	str	r0, [r6, #0]
 8002370:	062e      	lsls	r6, r5, #24
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	d501      	bpl.n	800237a <_printf_i+0x1be>
 8002376:	6019      	str	r1, [r3, #0]
 8002378:	e002      	b.n	8002380 <_printf_i+0x1c4>
 800237a:	0668      	lsls	r0, r5, #25
 800237c:	d5fb      	bpl.n	8002376 <_printf_i+0x1ba>
 800237e:	8019      	strh	r1, [r3, #0]
 8002380:	2300      	movs	r3, #0
 8002382:	6123      	str	r3, [r4, #16]
 8002384:	4616      	mov	r6, r2
 8002386:	e7bc      	b.n	8002302 <_printf_i+0x146>
 8002388:	6833      	ldr	r3, [r6, #0]
 800238a:	1d1a      	adds	r2, r3, #4
 800238c:	6032      	str	r2, [r6, #0]
 800238e:	681e      	ldr	r6, [r3, #0]
 8002390:	6862      	ldr	r2, [r4, #4]
 8002392:	2100      	movs	r1, #0
 8002394:	4630      	mov	r0, r6
 8002396:	f7fd ff23 	bl	80001e0 <memchr>
 800239a:	b108      	cbz	r0, 80023a0 <_printf_i+0x1e4>
 800239c:	1b80      	subs	r0, r0, r6
 800239e:	6060      	str	r0, [r4, #4]
 80023a0:	6863      	ldr	r3, [r4, #4]
 80023a2:	6123      	str	r3, [r4, #16]
 80023a4:	2300      	movs	r3, #0
 80023a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80023aa:	e7aa      	b.n	8002302 <_printf_i+0x146>
 80023ac:	6923      	ldr	r3, [r4, #16]
 80023ae:	4632      	mov	r2, r6
 80023b0:	4649      	mov	r1, r9
 80023b2:	4640      	mov	r0, r8
 80023b4:	47d0      	blx	sl
 80023b6:	3001      	adds	r0, #1
 80023b8:	d0ad      	beq.n	8002316 <_printf_i+0x15a>
 80023ba:	6823      	ldr	r3, [r4, #0]
 80023bc:	079b      	lsls	r3, r3, #30
 80023be:	d413      	bmi.n	80023e8 <_printf_i+0x22c>
 80023c0:	68e0      	ldr	r0, [r4, #12]
 80023c2:	9b03      	ldr	r3, [sp, #12]
 80023c4:	4298      	cmp	r0, r3
 80023c6:	bfb8      	it	lt
 80023c8:	4618      	movlt	r0, r3
 80023ca:	e7a6      	b.n	800231a <_printf_i+0x15e>
 80023cc:	2301      	movs	r3, #1
 80023ce:	4632      	mov	r2, r6
 80023d0:	4649      	mov	r1, r9
 80023d2:	4640      	mov	r0, r8
 80023d4:	47d0      	blx	sl
 80023d6:	3001      	adds	r0, #1
 80023d8:	d09d      	beq.n	8002316 <_printf_i+0x15a>
 80023da:	3501      	adds	r5, #1
 80023dc:	68e3      	ldr	r3, [r4, #12]
 80023de:	9903      	ldr	r1, [sp, #12]
 80023e0:	1a5b      	subs	r3, r3, r1
 80023e2:	42ab      	cmp	r3, r5
 80023e4:	dcf2      	bgt.n	80023cc <_printf_i+0x210>
 80023e6:	e7eb      	b.n	80023c0 <_printf_i+0x204>
 80023e8:	2500      	movs	r5, #0
 80023ea:	f104 0619 	add.w	r6, r4, #25
 80023ee:	e7f5      	b.n	80023dc <_printf_i+0x220>
 80023f0:	08002f5e 	.word	0x08002f5e
 80023f4:	08002f6f 	.word	0x08002f6f

080023f8 <__sflush_r>:
 80023f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80023fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002400:	0716      	lsls	r6, r2, #28
 8002402:	4605      	mov	r5, r0
 8002404:	460c      	mov	r4, r1
 8002406:	d454      	bmi.n	80024b2 <__sflush_r+0xba>
 8002408:	684b      	ldr	r3, [r1, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	dc02      	bgt.n	8002414 <__sflush_r+0x1c>
 800240e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002410:	2b00      	cmp	r3, #0
 8002412:	dd48      	ble.n	80024a6 <__sflush_r+0xae>
 8002414:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002416:	2e00      	cmp	r6, #0
 8002418:	d045      	beq.n	80024a6 <__sflush_r+0xae>
 800241a:	2300      	movs	r3, #0
 800241c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002420:	682f      	ldr	r7, [r5, #0]
 8002422:	6a21      	ldr	r1, [r4, #32]
 8002424:	602b      	str	r3, [r5, #0]
 8002426:	d030      	beq.n	800248a <__sflush_r+0x92>
 8002428:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800242a:	89a3      	ldrh	r3, [r4, #12]
 800242c:	0759      	lsls	r1, r3, #29
 800242e:	d505      	bpl.n	800243c <__sflush_r+0x44>
 8002430:	6863      	ldr	r3, [r4, #4]
 8002432:	1ad2      	subs	r2, r2, r3
 8002434:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002436:	b10b      	cbz	r3, 800243c <__sflush_r+0x44>
 8002438:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800243a:	1ad2      	subs	r2, r2, r3
 800243c:	2300      	movs	r3, #0
 800243e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002440:	6a21      	ldr	r1, [r4, #32]
 8002442:	4628      	mov	r0, r5
 8002444:	47b0      	blx	r6
 8002446:	1c43      	adds	r3, r0, #1
 8002448:	89a3      	ldrh	r3, [r4, #12]
 800244a:	d106      	bne.n	800245a <__sflush_r+0x62>
 800244c:	6829      	ldr	r1, [r5, #0]
 800244e:	291d      	cmp	r1, #29
 8002450:	d82b      	bhi.n	80024aa <__sflush_r+0xb2>
 8002452:	4a2a      	ldr	r2, [pc, #168]	@ (80024fc <__sflush_r+0x104>)
 8002454:	40ca      	lsrs	r2, r1
 8002456:	07d6      	lsls	r6, r2, #31
 8002458:	d527      	bpl.n	80024aa <__sflush_r+0xb2>
 800245a:	2200      	movs	r2, #0
 800245c:	6062      	str	r2, [r4, #4]
 800245e:	04d9      	lsls	r1, r3, #19
 8002460:	6922      	ldr	r2, [r4, #16]
 8002462:	6022      	str	r2, [r4, #0]
 8002464:	d504      	bpl.n	8002470 <__sflush_r+0x78>
 8002466:	1c42      	adds	r2, r0, #1
 8002468:	d101      	bne.n	800246e <__sflush_r+0x76>
 800246a:	682b      	ldr	r3, [r5, #0]
 800246c:	b903      	cbnz	r3, 8002470 <__sflush_r+0x78>
 800246e:	6560      	str	r0, [r4, #84]	@ 0x54
 8002470:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002472:	602f      	str	r7, [r5, #0]
 8002474:	b1b9      	cbz	r1, 80024a6 <__sflush_r+0xae>
 8002476:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800247a:	4299      	cmp	r1, r3
 800247c:	d002      	beq.n	8002484 <__sflush_r+0x8c>
 800247e:	4628      	mov	r0, r5
 8002480:	f7ff fbd6 	bl	8001c30 <_free_r>
 8002484:	2300      	movs	r3, #0
 8002486:	6363      	str	r3, [r4, #52]	@ 0x34
 8002488:	e00d      	b.n	80024a6 <__sflush_r+0xae>
 800248a:	2301      	movs	r3, #1
 800248c:	4628      	mov	r0, r5
 800248e:	47b0      	blx	r6
 8002490:	4602      	mov	r2, r0
 8002492:	1c50      	adds	r0, r2, #1
 8002494:	d1c9      	bne.n	800242a <__sflush_r+0x32>
 8002496:	682b      	ldr	r3, [r5, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0c6      	beq.n	800242a <__sflush_r+0x32>
 800249c:	2b1d      	cmp	r3, #29
 800249e:	d001      	beq.n	80024a4 <__sflush_r+0xac>
 80024a0:	2b16      	cmp	r3, #22
 80024a2:	d11e      	bne.n	80024e2 <__sflush_r+0xea>
 80024a4:	602f      	str	r7, [r5, #0]
 80024a6:	2000      	movs	r0, #0
 80024a8:	e022      	b.n	80024f0 <__sflush_r+0xf8>
 80024aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	e01b      	b.n	80024ea <__sflush_r+0xf2>
 80024b2:	690f      	ldr	r7, [r1, #16]
 80024b4:	2f00      	cmp	r7, #0
 80024b6:	d0f6      	beq.n	80024a6 <__sflush_r+0xae>
 80024b8:	0793      	lsls	r3, r2, #30
 80024ba:	680e      	ldr	r6, [r1, #0]
 80024bc:	bf08      	it	eq
 80024be:	694b      	ldreq	r3, [r1, #20]
 80024c0:	600f      	str	r7, [r1, #0]
 80024c2:	bf18      	it	ne
 80024c4:	2300      	movne	r3, #0
 80024c6:	eba6 0807 	sub.w	r8, r6, r7
 80024ca:	608b      	str	r3, [r1, #8]
 80024cc:	f1b8 0f00 	cmp.w	r8, #0
 80024d0:	dde9      	ble.n	80024a6 <__sflush_r+0xae>
 80024d2:	6a21      	ldr	r1, [r4, #32]
 80024d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80024d6:	4643      	mov	r3, r8
 80024d8:	463a      	mov	r2, r7
 80024da:	4628      	mov	r0, r5
 80024dc:	47b0      	blx	r6
 80024de:	2800      	cmp	r0, #0
 80024e0:	dc08      	bgt.n	80024f4 <__sflush_r+0xfc>
 80024e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024ea:	81a3      	strh	r3, [r4, #12]
 80024ec:	f04f 30ff 	mov.w	r0, #4294967295
 80024f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024f4:	4407      	add	r7, r0
 80024f6:	eba8 0800 	sub.w	r8, r8, r0
 80024fa:	e7e7      	b.n	80024cc <__sflush_r+0xd4>
 80024fc:	20400001 	.word	0x20400001

08002500 <_fflush_r>:
 8002500:	b538      	push	{r3, r4, r5, lr}
 8002502:	690b      	ldr	r3, [r1, #16]
 8002504:	4605      	mov	r5, r0
 8002506:	460c      	mov	r4, r1
 8002508:	b913      	cbnz	r3, 8002510 <_fflush_r+0x10>
 800250a:	2500      	movs	r5, #0
 800250c:	4628      	mov	r0, r5
 800250e:	bd38      	pop	{r3, r4, r5, pc}
 8002510:	b118      	cbz	r0, 800251a <_fflush_r+0x1a>
 8002512:	6a03      	ldr	r3, [r0, #32]
 8002514:	b90b      	cbnz	r3, 800251a <_fflush_r+0x1a>
 8002516:	f7ff fa3b 	bl	8001990 <__sinit>
 800251a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f3      	beq.n	800250a <_fflush_r+0xa>
 8002522:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002524:	07d0      	lsls	r0, r2, #31
 8002526:	d404      	bmi.n	8002532 <_fflush_r+0x32>
 8002528:	0599      	lsls	r1, r3, #22
 800252a:	d402      	bmi.n	8002532 <_fflush_r+0x32>
 800252c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800252e:	f7ff fb5e 	bl	8001bee <__retarget_lock_acquire_recursive>
 8002532:	4628      	mov	r0, r5
 8002534:	4621      	mov	r1, r4
 8002536:	f7ff ff5f 	bl	80023f8 <__sflush_r>
 800253a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800253c:	07da      	lsls	r2, r3, #31
 800253e:	4605      	mov	r5, r0
 8002540:	d4e4      	bmi.n	800250c <_fflush_r+0xc>
 8002542:	89a3      	ldrh	r3, [r4, #12]
 8002544:	059b      	lsls	r3, r3, #22
 8002546:	d4e1      	bmi.n	800250c <_fflush_r+0xc>
 8002548:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800254a:	f7ff fb51 	bl	8001bf0 <__retarget_lock_release_recursive>
 800254e:	e7dd      	b.n	800250c <_fflush_r+0xc>

08002550 <fiprintf>:
 8002550:	b40e      	push	{r1, r2, r3}
 8002552:	b503      	push	{r0, r1, lr}
 8002554:	4601      	mov	r1, r0
 8002556:	ab03      	add	r3, sp, #12
 8002558:	4805      	ldr	r0, [pc, #20]	@ (8002570 <fiprintf+0x20>)
 800255a:	f853 2b04 	ldr.w	r2, [r3], #4
 800255e:	6800      	ldr	r0, [r0, #0]
 8002560:	9301      	str	r3, [sp, #4]
 8002562:	f000 f89d 	bl	80026a0 <_vfiprintf_r>
 8002566:	b002      	add	sp, #8
 8002568:	f85d eb04 	ldr.w	lr, [sp], #4
 800256c:	b003      	add	sp, #12
 800256e:	4770      	bx	lr
 8002570:	20000014 	.word	0x20000014

08002574 <memmove>:
 8002574:	4288      	cmp	r0, r1
 8002576:	b510      	push	{r4, lr}
 8002578:	eb01 0402 	add.w	r4, r1, r2
 800257c:	d902      	bls.n	8002584 <memmove+0x10>
 800257e:	4284      	cmp	r4, r0
 8002580:	4623      	mov	r3, r4
 8002582:	d807      	bhi.n	8002594 <memmove+0x20>
 8002584:	1e43      	subs	r3, r0, #1
 8002586:	42a1      	cmp	r1, r4
 8002588:	d008      	beq.n	800259c <memmove+0x28>
 800258a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800258e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002592:	e7f8      	b.n	8002586 <memmove+0x12>
 8002594:	4402      	add	r2, r0
 8002596:	4601      	mov	r1, r0
 8002598:	428a      	cmp	r2, r1
 800259a:	d100      	bne.n	800259e <memmove+0x2a>
 800259c:	bd10      	pop	{r4, pc}
 800259e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80025a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80025a6:	e7f7      	b.n	8002598 <memmove+0x24>

080025a8 <_sbrk_r>:
 80025a8:	b538      	push	{r3, r4, r5, lr}
 80025aa:	4d06      	ldr	r5, [pc, #24]	@ (80025c4 <_sbrk_r+0x1c>)
 80025ac:	2300      	movs	r3, #0
 80025ae:	4604      	mov	r4, r0
 80025b0:	4608      	mov	r0, r1
 80025b2:	602b      	str	r3, [r5, #0]
 80025b4:	f7ff f894 	bl	80016e0 <_sbrk>
 80025b8:	1c43      	adds	r3, r0, #1
 80025ba:	d102      	bne.n	80025c2 <_sbrk_r+0x1a>
 80025bc:	682b      	ldr	r3, [r5, #0]
 80025be:	b103      	cbz	r3, 80025c2 <_sbrk_r+0x1a>
 80025c0:	6023      	str	r3, [r4, #0]
 80025c2:	bd38      	pop	{r3, r4, r5, pc}
 80025c4:	2000022c 	.word	0x2000022c

080025c8 <memcpy>:
 80025c8:	440a      	add	r2, r1
 80025ca:	4291      	cmp	r1, r2
 80025cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80025d0:	d100      	bne.n	80025d4 <memcpy+0xc>
 80025d2:	4770      	bx	lr
 80025d4:	b510      	push	{r4, lr}
 80025d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80025da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80025de:	4291      	cmp	r1, r2
 80025e0:	d1f9      	bne.n	80025d6 <memcpy+0xe>
 80025e2:	bd10      	pop	{r4, pc}

080025e4 <abort>:
 80025e4:	b508      	push	{r3, lr}
 80025e6:	2006      	movs	r0, #6
 80025e8:	f000 fa2e 	bl	8002a48 <raise>
 80025ec:	2001      	movs	r0, #1
 80025ee:	f7fe ffff 	bl	80015f0 <_exit>

080025f2 <_realloc_r>:
 80025f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025f6:	4607      	mov	r7, r0
 80025f8:	4614      	mov	r4, r2
 80025fa:	460d      	mov	r5, r1
 80025fc:	b921      	cbnz	r1, 8002608 <_realloc_r+0x16>
 80025fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002602:	4611      	mov	r1, r2
 8002604:	f7ff bb88 	b.w	8001d18 <_malloc_r>
 8002608:	b92a      	cbnz	r2, 8002616 <_realloc_r+0x24>
 800260a:	f7ff fb11 	bl	8001c30 <_free_r>
 800260e:	4625      	mov	r5, r4
 8002610:	4628      	mov	r0, r5
 8002612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002616:	f000 fa33 	bl	8002a80 <_malloc_usable_size_r>
 800261a:	4284      	cmp	r4, r0
 800261c:	4606      	mov	r6, r0
 800261e:	d802      	bhi.n	8002626 <_realloc_r+0x34>
 8002620:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002624:	d8f4      	bhi.n	8002610 <_realloc_r+0x1e>
 8002626:	4621      	mov	r1, r4
 8002628:	4638      	mov	r0, r7
 800262a:	f7ff fb75 	bl	8001d18 <_malloc_r>
 800262e:	4680      	mov	r8, r0
 8002630:	b908      	cbnz	r0, 8002636 <_realloc_r+0x44>
 8002632:	4645      	mov	r5, r8
 8002634:	e7ec      	b.n	8002610 <_realloc_r+0x1e>
 8002636:	42b4      	cmp	r4, r6
 8002638:	4622      	mov	r2, r4
 800263a:	4629      	mov	r1, r5
 800263c:	bf28      	it	cs
 800263e:	4632      	movcs	r2, r6
 8002640:	f7ff ffc2 	bl	80025c8 <memcpy>
 8002644:	4629      	mov	r1, r5
 8002646:	4638      	mov	r0, r7
 8002648:	f7ff faf2 	bl	8001c30 <_free_r>
 800264c:	e7f1      	b.n	8002632 <_realloc_r+0x40>

0800264e <__sfputc_r>:
 800264e:	6893      	ldr	r3, [r2, #8]
 8002650:	3b01      	subs	r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	b410      	push	{r4}
 8002656:	6093      	str	r3, [r2, #8]
 8002658:	da08      	bge.n	800266c <__sfputc_r+0x1e>
 800265a:	6994      	ldr	r4, [r2, #24]
 800265c:	42a3      	cmp	r3, r4
 800265e:	db01      	blt.n	8002664 <__sfputc_r+0x16>
 8002660:	290a      	cmp	r1, #10
 8002662:	d103      	bne.n	800266c <__sfputc_r+0x1e>
 8002664:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002668:	f000 b932 	b.w	80028d0 <__swbuf_r>
 800266c:	6813      	ldr	r3, [r2, #0]
 800266e:	1c58      	adds	r0, r3, #1
 8002670:	6010      	str	r0, [r2, #0]
 8002672:	7019      	strb	r1, [r3, #0]
 8002674:	4608      	mov	r0, r1
 8002676:	f85d 4b04 	ldr.w	r4, [sp], #4
 800267a:	4770      	bx	lr

0800267c <__sfputs_r>:
 800267c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267e:	4606      	mov	r6, r0
 8002680:	460f      	mov	r7, r1
 8002682:	4614      	mov	r4, r2
 8002684:	18d5      	adds	r5, r2, r3
 8002686:	42ac      	cmp	r4, r5
 8002688:	d101      	bne.n	800268e <__sfputs_r+0x12>
 800268a:	2000      	movs	r0, #0
 800268c:	e007      	b.n	800269e <__sfputs_r+0x22>
 800268e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002692:	463a      	mov	r2, r7
 8002694:	4630      	mov	r0, r6
 8002696:	f7ff ffda 	bl	800264e <__sfputc_r>
 800269a:	1c43      	adds	r3, r0, #1
 800269c:	d1f3      	bne.n	8002686 <__sfputs_r+0xa>
 800269e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080026a0 <_vfiprintf_r>:
 80026a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026a4:	460d      	mov	r5, r1
 80026a6:	b09d      	sub	sp, #116	@ 0x74
 80026a8:	4614      	mov	r4, r2
 80026aa:	4698      	mov	r8, r3
 80026ac:	4606      	mov	r6, r0
 80026ae:	b118      	cbz	r0, 80026b8 <_vfiprintf_r+0x18>
 80026b0:	6a03      	ldr	r3, [r0, #32]
 80026b2:	b90b      	cbnz	r3, 80026b8 <_vfiprintf_r+0x18>
 80026b4:	f7ff f96c 	bl	8001990 <__sinit>
 80026b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80026ba:	07d9      	lsls	r1, r3, #31
 80026bc:	d405      	bmi.n	80026ca <_vfiprintf_r+0x2a>
 80026be:	89ab      	ldrh	r3, [r5, #12]
 80026c0:	059a      	lsls	r2, r3, #22
 80026c2:	d402      	bmi.n	80026ca <_vfiprintf_r+0x2a>
 80026c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80026c6:	f7ff fa92 	bl	8001bee <__retarget_lock_acquire_recursive>
 80026ca:	89ab      	ldrh	r3, [r5, #12]
 80026cc:	071b      	lsls	r3, r3, #28
 80026ce:	d501      	bpl.n	80026d4 <_vfiprintf_r+0x34>
 80026d0:	692b      	ldr	r3, [r5, #16]
 80026d2:	b99b      	cbnz	r3, 80026fc <_vfiprintf_r+0x5c>
 80026d4:	4629      	mov	r1, r5
 80026d6:	4630      	mov	r0, r6
 80026d8:	f000 f938 	bl	800294c <__swsetup_r>
 80026dc:	b170      	cbz	r0, 80026fc <_vfiprintf_r+0x5c>
 80026de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80026e0:	07dc      	lsls	r4, r3, #31
 80026e2:	d504      	bpl.n	80026ee <_vfiprintf_r+0x4e>
 80026e4:	f04f 30ff 	mov.w	r0, #4294967295
 80026e8:	b01d      	add	sp, #116	@ 0x74
 80026ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026ee:	89ab      	ldrh	r3, [r5, #12]
 80026f0:	0598      	lsls	r0, r3, #22
 80026f2:	d4f7      	bmi.n	80026e4 <_vfiprintf_r+0x44>
 80026f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80026f6:	f7ff fa7b 	bl	8001bf0 <__retarget_lock_release_recursive>
 80026fa:	e7f3      	b.n	80026e4 <_vfiprintf_r+0x44>
 80026fc:	2300      	movs	r3, #0
 80026fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8002700:	2320      	movs	r3, #32
 8002702:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002706:	f8cd 800c 	str.w	r8, [sp, #12]
 800270a:	2330      	movs	r3, #48	@ 0x30
 800270c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80028bc <_vfiprintf_r+0x21c>
 8002710:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002714:	f04f 0901 	mov.w	r9, #1
 8002718:	4623      	mov	r3, r4
 800271a:	469a      	mov	sl, r3
 800271c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002720:	b10a      	cbz	r2, 8002726 <_vfiprintf_r+0x86>
 8002722:	2a25      	cmp	r2, #37	@ 0x25
 8002724:	d1f9      	bne.n	800271a <_vfiprintf_r+0x7a>
 8002726:	ebba 0b04 	subs.w	fp, sl, r4
 800272a:	d00b      	beq.n	8002744 <_vfiprintf_r+0xa4>
 800272c:	465b      	mov	r3, fp
 800272e:	4622      	mov	r2, r4
 8002730:	4629      	mov	r1, r5
 8002732:	4630      	mov	r0, r6
 8002734:	f7ff ffa2 	bl	800267c <__sfputs_r>
 8002738:	3001      	adds	r0, #1
 800273a:	f000 80a7 	beq.w	800288c <_vfiprintf_r+0x1ec>
 800273e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002740:	445a      	add	r2, fp
 8002742:	9209      	str	r2, [sp, #36]	@ 0x24
 8002744:	f89a 3000 	ldrb.w	r3, [sl]
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 809f 	beq.w	800288c <_vfiprintf_r+0x1ec>
 800274e:	2300      	movs	r3, #0
 8002750:	f04f 32ff 	mov.w	r2, #4294967295
 8002754:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002758:	f10a 0a01 	add.w	sl, sl, #1
 800275c:	9304      	str	r3, [sp, #16]
 800275e:	9307      	str	r3, [sp, #28]
 8002760:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002764:	931a      	str	r3, [sp, #104]	@ 0x68
 8002766:	4654      	mov	r4, sl
 8002768:	2205      	movs	r2, #5
 800276a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800276e:	4853      	ldr	r0, [pc, #332]	@ (80028bc <_vfiprintf_r+0x21c>)
 8002770:	f7fd fd36 	bl	80001e0 <memchr>
 8002774:	9a04      	ldr	r2, [sp, #16]
 8002776:	b9d8      	cbnz	r0, 80027b0 <_vfiprintf_r+0x110>
 8002778:	06d1      	lsls	r1, r2, #27
 800277a:	bf44      	itt	mi
 800277c:	2320      	movmi	r3, #32
 800277e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002782:	0713      	lsls	r3, r2, #28
 8002784:	bf44      	itt	mi
 8002786:	232b      	movmi	r3, #43	@ 0x2b
 8002788:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800278c:	f89a 3000 	ldrb.w	r3, [sl]
 8002790:	2b2a      	cmp	r3, #42	@ 0x2a
 8002792:	d015      	beq.n	80027c0 <_vfiprintf_r+0x120>
 8002794:	9a07      	ldr	r2, [sp, #28]
 8002796:	4654      	mov	r4, sl
 8002798:	2000      	movs	r0, #0
 800279a:	f04f 0c0a 	mov.w	ip, #10
 800279e:	4621      	mov	r1, r4
 80027a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80027a4:	3b30      	subs	r3, #48	@ 0x30
 80027a6:	2b09      	cmp	r3, #9
 80027a8:	d94b      	bls.n	8002842 <_vfiprintf_r+0x1a2>
 80027aa:	b1b0      	cbz	r0, 80027da <_vfiprintf_r+0x13a>
 80027ac:	9207      	str	r2, [sp, #28]
 80027ae:	e014      	b.n	80027da <_vfiprintf_r+0x13a>
 80027b0:	eba0 0308 	sub.w	r3, r0, r8
 80027b4:	fa09 f303 	lsl.w	r3, r9, r3
 80027b8:	4313      	orrs	r3, r2
 80027ba:	9304      	str	r3, [sp, #16]
 80027bc:	46a2      	mov	sl, r4
 80027be:	e7d2      	b.n	8002766 <_vfiprintf_r+0xc6>
 80027c0:	9b03      	ldr	r3, [sp, #12]
 80027c2:	1d19      	adds	r1, r3, #4
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	9103      	str	r1, [sp, #12]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	bfbb      	ittet	lt
 80027cc:	425b      	neglt	r3, r3
 80027ce:	f042 0202 	orrlt.w	r2, r2, #2
 80027d2:	9307      	strge	r3, [sp, #28]
 80027d4:	9307      	strlt	r3, [sp, #28]
 80027d6:	bfb8      	it	lt
 80027d8:	9204      	strlt	r2, [sp, #16]
 80027da:	7823      	ldrb	r3, [r4, #0]
 80027dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80027de:	d10a      	bne.n	80027f6 <_vfiprintf_r+0x156>
 80027e0:	7863      	ldrb	r3, [r4, #1]
 80027e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80027e4:	d132      	bne.n	800284c <_vfiprintf_r+0x1ac>
 80027e6:	9b03      	ldr	r3, [sp, #12]
 80027e8:	1d1a      	adds	r2, r3, #4
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	9203      	str	r2, [sp, #12]
 80027ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80027f2:	3402      	adds	r4, #2
 80027f4:	9305      	str	r3, [sp, #20]
 80027f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80028cc <_vfiprintf_r+0x22c>
 80027fa:	7821      	ldrb	r1, [r4, #0]
 80027fc:	2203      	movs	r2, #3
 80027fe:	4650      	mov	r0, sl
 8002800:	f7fd fcee 	bl	80001e0 <memchr>
 8002804:	b138      	cbz	r0, 8002816 <_vfiprintf_r+0x176>
 8002806:	9b04      	ldr	r3, [sp, #16]
 8002808:	eba0 000a 	sub.w	r0, r0, sl
 800280c:	2240      	movs	r2, #64	@ 0x40
 800280e:	4082      	lsls	r2, r0
 8002810:	4313      	orrs	r3, r2
 8002812:	3401      	adds	r4, #1
 8002814:	9304      	str	r3, [sp, #16]
 8002816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800281a:	4829      	ldr	r0, [pc, #164]	@ (80028c0 <_vfiprintf_r+0x220>)
 800281c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002820:	2206      	movs	r2, #6
 8002822:	f7fd fcdd 	bl	80001e0 <memchr>
 8002826:	2800      	cmp	r0, #0
 8002828:	d03f      	beq.n	80028aa <_vfiprintf_r+0x20a>
 800282a:	4b26      	ldr	r3, [pc, #152]	@ (80028c4 <_vfiprintf_r+0x224>)
 800282c:	bb1b      	cbnz	r3, 8002876 <_vfiprintf_r+0x1d6>
 800282e:	9b03      	ldr	r3, [sp, #12]
 8002830:	3307      	adds	r3, #7
 8002832:	f023 0307 	bic.w	r3, r3, #7
 8002836:	3308      	adds	r3, #8
 8002838:	9303      	str	r3, [sp, #12]
 800283a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800283c:	443b      	add	r3, r7
 800283e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002840:	e76a      	b.n	8002718 <_vfiprintf_r+0x78>
 8002842:	fb0c 3202 	mla	r2, ip, r2, r3
 8002846:	460c      	mov	r4, r1
 8002848:	2001      	movs	r0, #1
 800284a:	e7a8      	b.n	800279e <_vfiprintf_r+0xfe>
 800284c:	2300      	movs	r3, #0
 800284e:	3401      	adds	r4, #1
 8002850:	9305      	str	r3, [sp, #20]
 8002852:	4619      	mov	r1, r3
 8002854:	f04f 0c0a 	mov.w	ip, #10
 8002858:	4620      	mov	r0, r4
 800285a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800285e:	3a30      	subs	r2, #48	@ 0x30
 8002860:	2a09      	cmp	r2, #9
 8002862:	d903      	bls.n	800286c <_vfiprintf_r+0x1cc>
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0c6      	beq.n	80027f6 <_vfiprintf_r+0x156>
 8002868:	9105      	str	r1, [sp, #20]
 800286a:	e7c4      	b.n	80027f6 <_vfiprintf_r+0x156>
 800286c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002870:	4604      	mov	r4, r0
 8002872:	2301      	movs	r3, #1
 8002874:	e7f0      	b.n	8002858 <_vfiprintf_r+0x1b8>
 8002876:	ab03      	add	r3, sp, #12
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	462a      	mov	r2, r5
 800287c:	4b12      	ldr	r3, [pc, #72]	@ (80028c8 <_vfiprintf_r+0x228>)
 800287e:	a904      	add	r1, sp, #16
 8002880:	4630      	mov	r0, r6
 8002882:	f3af 8000 	nop.w
 8002886:	4607      	mov	r7, r0
 8002888:	1c78      	adds	r0, r7, #1
 800288a:	d1d6      	bne.n	800283a <_vfiprintf_r+0x19a>
 800288c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800288e:	07d9      	lsls	r1, r3, #31
 8002890:	d405      	bmi.n	800289e <_vfiprintf_r+0x1fe>
 8002892:	89ab      	ldrh	r3, [r5, #12]
 8002894:	059a      	lsls	r2, r3, #22
 8002896:	d402      	bmi.n	800289e <_vfiprintf_r+0x1fe>
 8002898:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800289a:	f7ff f9a9 	bl	8001bf0 <__retarget_lock_release_recursive>
 800289e:	89ab      	ldrh	r3, [r5, #12]
 80028a0:	065b      	lsls	r3, r3, #25
 80028a2:	f53f af1f 	bmi.w	80026e4 <_vfiprintf_r+0x44>
 80028a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80028a8:	e71e      	b.n	80026e8 <_vfiprintf_r+0x48>
 80028aa:	ab03      	add	r3, sp, #12
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	462a      	mov	r2, r5
 80028b0:	4b05      	ldr	r3, [pc, #20]	@ (80028c8 <_vfiprintf_r+0x228>)
 80028b2:	a904      	add	r1, sp, #16
 80028b4:	4630      	mov	r0, r6
 80028b6:	f7ff fc81 	bl	80021bc <_printf_i>
 80028ba:	e7e4      	b.n	8002886 <_vfiprintf_r+0x1e6>
 80028bc:	08002f4d 	.word	0x08002f4d
 80028c0:	08002f57 	.word	0x08002f57
 80028c4:	00000000 	.word	0x00000000
 80028c8:	0800267d 	.word	0x0800267d
 80028cc:	08002f53 	.word	0x08002f53

080028d0 <__swbuf_r>:
 80028d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d2:	460e      	mov	r6, r1
 80028d4:	4614      	mov	r4, r2
 80028d6:	4605      	mov	r5, r0
 80028d8:	b118      	cbz	r0, 80028e2 <__swbuf_r+0x12>
 80028da:	6a03      	ldr	r3, [r0, #32]
 80028dc:	b90b      	cbnz	r3, 80028e2 <__swbuf_r+0x12>
 80028de:	f7ff f857 	bl	8001990 <__sinit>
 80028e2:	69a3      	ldr	r3, [r4, #24]
 80028e4:	60a3      	str	r3, [r4, #8]
 80028e6:	89a3      	ldrh	r3, [r4, #12]
 80028e8:	071a      	lsls	r2, r3, #28
 80028ea:	d501      	bpl.n	80028f0 <__swbuf_r+0x20>
 80028ec:	6923      	ldr	r3, [r4, #16]
 80028ee:	b943      	cbnz	r3, 8002902 <__swbuf_r+0x32>
 80028f0:	4621      	mov	r1, r4
 80028f2:	4628      	mov	r0, r5
 80028f4:	f000 f82a 	bl	800294c <__swsetup_r>
 80028f8:	b118      	cbz	r0, 8002902 <__swbuf_r+0x32>
 80028fa:	f04f 37ff 	mov.w	r7, #4294967295
 80028fe:	4638      	mov	r0, r7
 8002900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002902:	6823      	ldr	r3, [r4, #0]
 8002904:	6922      	ldr	r2, [r4, #16]
 8002906:	1a98      	subs	r0, r3, r2
 8002908:	6963      	ldr	r3, [r4, #20]
 800290a:	b2f6      	uxtb	r6, r6
 800290c:	4283      	cmp	r3, r0
 800290e:	4637      	mov	r7, r6
 8002910:	dc05      	bgt.n	800291e <__swbuf_r+0x4e>
 8002912:	4621      	mov	r1, r4
 8002914:	4628      	mov	r0, r5
 8002916:	f7ff fdf3 	bl	8002500 <_fflush_r>
 800291a:	2800      	cmp	r0, #0
 800291c:	d1ed      	bne.n	80028fa <__swbuf_r+0x2a>
 800291e:	68a3      	ldr	r3, [r4, #8]
 8002920:	3b01      	subs	r3, #1
 8002922:	60a3      	str	r3, [r4, #8]
 8002924:	6823      	ldr	r3, [r4, #0]
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	6022      	str	r2, [r4, #0]
 800292a:	701e      	strb	r6, [r3, #0]
 800292c:	6962      	ldr	r2, [r4, #20]
 800292e:	1c43      	adds	r3, r0, #1
 8002930:	429a      	cmp	r2, r3
 8002932:	d004      	beq.n	800293e <__swbuf_r+0x6e>
 8002934:	89a3      	ldrh	r3, [r4, #12]
 8002936:	07db      	lsls	r3, r3, #31
 8002938:	d5e1      	bpl.n	80028fe <__swbuf_r+0x2e>
 800293a:	2e0a      	cmp	r6, #10
 800293c:	d1df      	bne.n	80028fe <__swbuf_r+0x2e>
 800293e:	4621      	mov	r1, r4
 8002940:	4628      	mov	r0, r5
 8002942:	f7ff fddd 	bl	8002500 <_fflush_r>
 8002946:	2800      	cmp	r0, #0
 8002948:	d0d9      	beq.n	80028fe <__swbuf_r+0x2e>
 800294a:	e7d6      	b.n	80028fa <__swbuf_r+0x2a>

0800294c <__swsetup_r>:
 800294c:	b538      	push	{r3, r4, r5, lr}
 800294e:	4b29      	ldr	r3, [pc, #164]	@ (80029f4 <__swsetup_r+0xa8>)
 8002950:	4605      	mov	r5, r0
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	460c      	mov	r4, r1
 8002956:	b118      	cbz	r0, 8002960 <__swsetup_r+0x14>
 8002958:	6a03      	ldr	r3, [r0, #32]
 800295a:	b90b      	cbnz	r3, 8002960 <__swsetup_r+0x14>
 800295c:	f7ff f818 	bl	8001990 <__sinit>
 8002960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002964:	0719      	lsls	r1, r3, #28
 8002966:	d422      	bmi.n	80029ae <__swsetup_r+0x62>
 8002968:	06da      	lsls	r2, r3, #27
 800296a:	d407      	bmi.n	800297c <__swsetup_r+0x30>
 800296c:	2209      	movs	r2, #9
 800296e:	602a      	str	r2, [r5, #0]
 8002970:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002974:	81a3      	strh	r3, [r4, #12]
 8002976:	f04f 30ff 	mov.w	r0, #4294967295
 800297a:	e033      	b.n	80029e4 <__swsetup_r+0x98>
 800297c:	0758      	lsls	r0, r3, #29
 800297e:	d512      	bpl.n	80029a6 <__swsetup_r+0x5a>
 8002980:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002982:	b141      	cbz	r1, 8002996 <__swsetup_r+0x4a>
 8002984:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002988:	4299      	cmp	r1, r3
 800298a:	d002      	beq.n	8002992 <__swsetup_r+0x46>
 800298c:	4628      	mov	r0, r5
 800298e:	f7ff f94f 	bl	8001c30 <_free_r>
 8002992:	2300      	movs	r3, #0
 8002994:	6363      	str	r3, [r4, #52]	@ 0x34
 8002996:	89a3      	ldrh	r3, [r4, #12]
 8002998:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800299c:	81a3      	strh	r3, [r4, #12]
 800299e:	2300      	movs	r3, #0
 80029a0:	6063      	str	r3, [r4, #4]
 80029a2:	6923      	ldr	r3, [r4, #16]
 80029a4:	6023      	str	r3, [r4, #0]
 80029a6:	89a3      	ldrh	r3, [r4, #12]
 80029a8:	f043 0308 	orr.w	r3, r3, #8
 80029ac:	81a3      	strh	r3, [r4, #12]
 80029ae:	6923      	ldr	r3, [r4, #16]
 80029b0:	b94b      	cbnz	r3, 80029c6 <__swsetup_r+0x7a>
 80029b2:	89a3      	ldrh	r3, [r4, #12]
 80029b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80029b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029bc:	d003      	beq.n	80029c6 <__swsetup_r+0x7a>
 80029be:	4621      	mov	r1, r4
 80029c0:	4628      	mov	r0, r5
 80029c2:	f000 f88b 	bl	8002adc <__smakebuf_r>
 80029c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029ca:	f013 0201 	ands.w	r2, r3, #1
 80029ce:	d00a      	beq.n	80029e6 <__swsetup_r+0x9a>
 80029d0:	2200      	movs	r2, #0
 80029d2:	60a2      	str	r2, [r4, #8]
 80029d4:	6962      	ldr	r2, [r4, #20]
 80029d6:	4252      	negs	r2, r2
 80029d8:	61a2      	str	r2, [r4, #24]
 80029da:	6922      	ldr	r2, [r4, #16]
 80029dc:	b942      	cbnz	r2, 80029f0 <__swsetup_r+0xa4>
 80029de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80029e2:	d1c5      	bne.n	8002970 <__swsetup_r+0x24>
 80029e4:	bd38      	pop	{r3, r4, r5, pc}
 80029e6:	0799      	lsls	r1, r3, #30
 80029e8:	bf58      	it	pl
 80029ea:	6962      	ldrpl	r2, [r4, #20]
 80029ec:	60a2      	str	r2, [r4, #8]
 80029ee:	e7f4      	b.n	80029da <__swsetup_r+0x8e>
 80029f0:	2000      	movs	r0, #0
 80029f2:	e7f7      	b.n	80029e4 <__swsetup_r+0x98>
 80029f4:	20000014 	.word	0x20000014

080029f8 <_raise_r>:
 80029f8:	291f      	cmp	r1, #31
 80029fa:	b538      	push	{r3, r4, r5, lr}
 80029fc:	4605      	mov	r5, r0
 80029fe:	460c      	mov	r4, r1
 8002a00:	d904      	bls.n	8002a0c <_raise_r+0x14>
 8002a02:	2316      	movs	r3, #22
 8002a04:	6003      	str	r3, [r0, #0]
 8002a06:	f04f 30ff 	mov.w	r0, #4294967295
 8002a0a:	bd38      	pop	{r3, r4, r5, pc}
 8002a0c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8002a0e:	b112      	cbz	r2, 8002a16 <_raise_r+0x1e>
 8002a10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002a14:	b94b      	cbnz	r3, 8002a2a <_raise_r+0x32>
 8002a16:	4628      	mov	r0, r5
 8002a18:	f000 f830 	bl	8002a7c <_getpid_r>
 8002a1c:	4622      	mov	r2, r4
 8002a1e:	4601      	mov	r1, r0
 8002a20:	4628      	mov	r0, r5
 8002a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a26:	f000 b817 	b.w	8002a58 <_kill_r>
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d00a      	beq.n	8002a44 <_raise_r+0x4c>
 8002a2e:	1c59      	adds	r1, r3, #1
 8002a30:	d103      	bne.n	8002a3a <_raise_r+0x42>
 8002a32:	2316      	movs	r3, #22
 8002a34:	6003      	str	r3, [r0, #0]
 8002a36:	2001      	movs	r0, #1
 8002a38:	e7e7      	b.n	8002a0a <_raise_r+0x12>
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8002a40:	4620      	mov	r0, r4
 8002a42:	4798      	blx	r3
 8002a44:	2000      	movs	r0, #0
 8002a46:	e7e0      	b.n	8002a0a <_raise_r+0x12>

08002a48 <raise>:
 8002a48:	4b02      	ldr	r3, [pc, #8]	@ (8002a54 <raise+0xc>)
 8002a4a:	4601      	mov	r1, r0
 8002a4c:	6818      	ldr	r0, [r3, #0]
 8002a4e:	f7ff bfd3 	b.w	80029f8 <_raise_r>
 8002a52:	bf00      	nop
 8002a54:	20000014 	.word	0x20000014

08002a58 <_kill_r>:
 8002a58:	b538      	push	{r3, r4, r5, lr}
 8002a5a:	4d07      	ldr	r5, [pc, #28]	@ (8002a78 <_kill_r+0x20>)
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	4604      	mov	r4, r0
 8002a60:	4608      	mov	r0, r1
 8002a62:	4611      	mov	r1, r2
 8002a64:	602b      	str	r3, [r5, #0]
 8002a66:	f7fe fdb3 	bl	80015d0 <_kill>
 8002a6a:	1c43      	adds	r3, r0, #1
 8002a6c:	d102      	bne.n	8002a74 <_kill_r+0x1c>
 8002a6e:	682b      	ldr	r3, [r5, #0]
 8002a70:	b103      	cbz	r3, 8002a74 <_kill_r+0x1c>
 8002a72:	6023      	str	r3, [r4, #0]
 8002a74:	bd38      	pop	{r3, r4, r5, pc}
 8002a76:	bf00      	nop
 8002a78:	2000022c 	.word	0x2000022c

08002a7c <_getpid_r>:
 8002a7c:	f7fe bda0 	b.w	80015c0 <_getpid>

08002a80 <_malloc_usable_size_r>:
 8002a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a84:	1f18      	subs	r0, r3, #4
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	bfbc      	itt	lt
 8002a8a:	580b      	ldrlt	r3, [r1, r0]
 8002a8c:	18c0      	addlt	r0, r0, r3
 8002a8e:	4770      	bx	lr

08002a90 <__swhatbuf_r>:
 8002a90:	b570      	push	{r4, r5, r6, lr}
 8002a92:	460c      	mov	r4, r1
 8002a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a98:	2900      	cmp	r1, #0
 8002a9a:	b096      	sub	sp, #88	@ 0x58
 8002a9c:	4615      	mov	r5, r2
 8002a9e:	461e      	mov	r6, r3
 8002aa0:	da0d      	bge.n	8002abe <__swhatbuf_r+0x2e>
 8002aa2:	89a3      	ldrh	r3, [r4, #12]
 8002aa4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002aa8:	f04f 0100 	mov.w	r1, #0
 8002aac:	bf14      	ite	ne
 8002aae:	2340      	movne	r3, #64	@ 0x40
 8002ab0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	6031      	str	r1, [r6, #0]
 8002ab8:	602b      	str	r3, [r5, #0]
 8002aba:	b016      	add	sp, #88	@ 0x58
 8002abc:	bd70      	pop	{r4, r5, r6, pc}
 8002abe:	466a      	mov	r2, sp
 8002ac0:	f000 f848 	bl	8002b54 <_fstat_r>
 8002ac4:	2800      	cmp	r0, #0
 8002ac6:	dbec      	blt.n	8002aa2 <__swhatbuf_r+0x12>
 8002ac8:	9901      	ldr	r1, [sp, #4]
 8002aca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002ace:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002ad2:	4259      	negs	r1, r3
 8002ad4:	4159      	adcs	r1, r3
 8002ad6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ada:	e7eb      	b.n	8002ab4 <__swhatbuf_r+0x24>

08002adc <__smakebuf_r>:
 8002adc:	898b      	ldrh	r3, [r1, #12]
 8002ade:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ae0:	079d      	lsls	r5, r3, #30
 8002ae2:	4606      	mov	r6, r0
 8002ae4:	460c      	mov	r4, r1
 8002ae6:	d507      	bpl.n	8002af8 <__smakebuf_r+0x1c>
 8002ae8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002aec:	6023      	str	r3, [r4, #0]
 8002aee:	6123      	str	r3, [r4, #16]
 8002af0:	2301      	movs	r3, #1
 8002af2:	6163      	str	r3, [r4, #20]
 8002af4:	b003      	add	sp, #12
 8002af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002af8:	ab01      	add	r3, sp, #4
 8002afa:	466a      	mov	r2, sp
 8002afc:	f7ff ffc8 	bl	8002a90 <__swhatbuf_r>
 8002b00:	9f00      	ldr	r7, [sp, #0]
 8002b02:	4605      	mov	r5, r0
 8002b04:	4639      	mov	r1, r7
 8002b06:	4630      	mov	r0, r6
 8002b08:	f7ff f906 	bl	8001d18 <_malloc_r>
 8002b0c:	b948      	cbnz	r0, 8002b22 <__smakebuf_r+0x46>
 8002b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b12:	059a      	lsls	r2, r3, #22
 8002b14:	d4ee      	bmi.n	8002af4 <__smakebuf_r+0x18>
 8002b16:	f023 0303 	bic.w	r3, r3, #3
 8002b1a:	f043 0302 	orr.w	r3, r3, #2
 8002b1e:	81a3      	strh	r3, [r4, #12]
 8002b20:	e7e2      	b.n	8002ae8 <__smakebuf_r+0xc>
 8002b22:	89a3      	ldrh	r3, [r4, #12]
 8002b24:	6020      	str	r0, [r4, #0]
 8002b26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b2a:	81a3      	strh	r3, [r4, #12]
 8002b2c:	9b01      	ldr	r3, [sp, #4]
 8002b2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002b32:	b15b      	cbz	r3, 8002b4c <__smakebuf_r+0x70>
 8002b34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b38:	4630      	mov	r0, r6
 8002b3a:	f000 f81d 	bl	8002b78 <_isatty_r>
 8002b3e:	b128      	cbz	r0, 8002b4c <__smakebuf_r+0x70>
 8002b40:	89a3      	ldrh	r3, [r4, #12]
 8002b42:	f023 0303 	bic.w	r3, r3, #3
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	81a3      	strh	r3, [r4, #12]
 8002b4c:	89a3      	ldrh	r3, [r4, #12]
 8002b4e:	431d      	orrs	r5, r3
 8002b50:	81a5      	strh	r5, [r4, #12]
 8002b52:	e7cf      	b.n	8002af4 <__smakebuf_r+0x18>

08002b54 <_fstat_r>:
 8002b54:	b538      	push	{r3, r4, r5, lr}
 8002b56:	4d07      	ldr	r5, [pc, #28]	@ (8002b74 <_fstat_r+0x20>)
 8002b58:	2300      	movs	r3, #0
 8002b5a:	4604      	mov	r4, r0
 8002b5c:	4608      	mov	r0, r1
 8002b5e:	4611      	mov	r1, r2
 8002b60:	602b      	str	r3, [r5, #0]
 8002b62:	f7fe fd95 	bl	8001690 <_fstat>
 8002b66:	1c43      	adds	r3, r0, #1
 8002b68:	d102      	bne.n	8002b70 <_fstat_r+0x1c>
 8002b6a:	682b      	ldr	r3, [r5, #0]
 8002b6c:	b103      	cbz	r3, 8002b70 <_fstat_r+0x1c>
 8002b6e:	6023      	str	r3, [r4, #0]
 8002b70:	bd38      	pop	{r3, r4, r5, pc}
 8002b72:	bf00      	nop
 8002b74:	2000022c 	.word	0x2000022c

08002b78 <_isatty_r>:
 8002b78:	b538      	push	{r3, r4, r5, lr}
 8002b7a:	4d06      	ldr	r5, [pc, #24]	@ (8002b94 <_isatty_r+0x1c>)
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	4604      	mov	r4, r0
 8002b80:	4608      	mov	r0, r1
 8002b82:	602b      	str	r3, [r5, #0]
 8002b84:	f7fe fd94 	bl	80016b0 <_isatty>
 8002b88:	1c43      	adds	r3, r0, #1
 8002b8a:	d102      	bne.n	8002b92 <_isatty_r+0x1a>
 8002b8c:	682b      	ldr	r3, [r5, #0]
 8002b8e:	b103      	cbz	r3, 8002b92 <_isatty_r+0x1a>
 8002b90:	6023      	str	r3, [r4, #0]
 8002b92:	bd38      	pop	{r3, r4, r5, pc}
 8002b94:	2000022c 	.word	0x2000022c

08002b98 <_init>:
 8002b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9a:	bf00      	nop
 8002b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b9e:	bc08      	pop	{r3}
 8002ba0:	469e      	mov	lr, r3
 8002ba2:	4770      	bx	lr

08002ba4 <_fini>:
 8002ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba6:	bf00      	nop
 8002ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002baa:	bc08      	pop	{r3}
 8002bac:	469e      	mov	lr, r3
 8002bae:	4770      	bx	lr
