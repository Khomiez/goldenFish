
projectmaicro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002af4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08002c94  08002c94  00003c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003088  08003088  00005064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003088  08003088  00004088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003090  08003090  00005064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003090  08003090  00004090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003094  08003094  00004094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08003098  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000064  080030fc  00005064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  080030fc  0000523c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001ea6  00000000  00000000  00005094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006df  00000000  00000000  00006f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000298  00000000  00000000  00007620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001fd  00000000  00000000  000078b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff31  00000000  00000000  00007ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000023c5  00000000  00000000  000179e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000575a4  00000000  00000000  00019dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0007134f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014f0  00000000  00000000  00071394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00072884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002c7c 	.word	0x08002c7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08002c7c 	.word	0x08002c7c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	@ (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	6039      	str	r1, [r7, #0]
 80002c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	db0a      	blt.n	80002e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	490c      	ldr	r1, [pc, #48]	@ (8000308 <__NVIC_SetPriority+0x4c>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e4:	e00a      	b.n	80002fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4908      	ldr	r1, [pc, #32]	@ (800030c <__NVIC_SetPriority+0x50>)
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	f003 030f 	and.w	r3, r3, #15
 80002f2:	3b04      	subs	r3, #4
 80002f4:	0112      	lsls	r2, r2, #4
 80002f6:	b2d2      	uxtb	r2, r2
 80002f8:	440b      	add	r3, r1
 80002fa:	761a      	strb	r2, [r3, #24]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	e000e100 	.word	0xe000e100
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	3b01      	subs	r3, #1
 800031c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000320:	d301      	bcc.n	8000326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000322:	2301      	movs	r3, #1
 8000324:	e00f      	b.n	8000346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000326:	4a0a      	ldr	r2, [pc, #40]	@ (8000350 <SysTick_Config+0x40>)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	3b01      	subs	r3, #1
 800032c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800032e:	210f      	movs	r1, #15
 8000330:	f04f 30ff 	mov.w	r0, #4294967295
 8000334:	f7ff ffc2 	bl	80002bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000338:	4b05      	ldr	r3, [pc, #20]	@ (8000350 <SysTick_Config+0x40>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800033e:	4b04      	ldr	r3, [pc, #16]	@ (8000350 <SysTick_Config+0x40>)
 8000340:	2207      	movs	r2, #7
 8000342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000344:	2300      	movs	r3, #0
}
 8000346:	4618      	mov	r0, r3
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	e000e010 	.word	0xe000e010

08000354 <clamp_u8>:
uint8_t g_input_correct = 1;

GameState_t g_last_state_logged = (GameState_t)-1;

// --- DIFF → ความเร็วกระพริบ (ยิ่ง DIFF สูงยิ่งเร็ว) ---
static inline uint8_t clamp_u8(uint8_t v, uint8_t lo, uint8_t hi){
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	4603      	mov	r3, r0
 800035c:	71fb      	strb	r3, [r7, #7]
 800035e:	460b      	mov	r3, r1
 8000360:	71bb      	strb	r3, [r7, #6]
 8000362:	4613      	mov	r3, r2
 8000364:	717b      	strb	r3, [r7, #5]
    return v < lo ? lo : (v > hi ? hi : v);
 8000366:	79fa      	ldrb	r2, [r7, #7]
 8000368:	79bb      	ldrb	r3, [r7, #6]
 800036a:	429a      	cmp	r2, r3
 800036c:	d306      	bcc.n	800037c <clamp_u8+0x28>
 800036e:	79fa      	ldrb	r2, [r7, #7]
 8000370:	797b      	ldrb	r3, [r7, #5]
 8000372:	4293      	cmp	r3, r2
 8000374:	bf28      	it	cs
 8000376:	4613      	movcs	r3, r2
 8000378:	b2db      	uxtb	r3, r3
 800037a:	e000      	b.n	800037e <clamp_u8+0x2a>
 800037c:	79bb      	ldrb	r3, [r7, #6]
}
 800037e:	4618      	mov	r0, r3
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
	...

0800038c <diff_on_ms>:
static uint16_t diff_on_ms(uint8_t diff){
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]
    static const uint16_t T[5] = {500, 400, 300, 220, 150}; // DIFF 1..5
    diff = clamp_u8(diff,1,5);
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	2205      	movs	r2, #5
 800039a:	2101      	movs	r1, #1
 800039c:	4618      	mov	r0, r3
 800039e:	f7ff ffd9 	bl	8000354 <clamp_u8>
 80003a2:	4603      	mov	r3, r0
 80003a4:	71fb      	strb	r3, [r7, #7]
    return T[diff-1];
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	3b01      	subs	r3, #1
 80003aa:	4a03      	ldr	r2, [pc, #12]	@ (80003b8 <diff_on_ms+0x2c>)
 80003ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3708      	adds	r7, #8
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	08002f94 	.word	0x08002f94

080003bc <diff_off_ms>:
static uint16_t diff_off_ms(uint8_t diff){
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
    static const uint16_t T[5] = {250, 200, 150, 110, 80};  // DIFF 1..5
    diff = clamp_u8(diff,1,5);
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	2205      	movs	r2, #5
 80003ca:	2101      	movs	r1, #1
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff ffc1 	bl	8000354 <clamp_u8>
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
    return T[diff-1];
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	3b01      	subs	r3, #1
 80003da:	4a03      	ldr	r2, [pc, #12]	@ (80003e8 <diff_off_ms+0x2c>)
 80003dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	3708      	adds	r7, #8
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	08002fa0 	.word	0x08002fa0

080003ec <I2C1_Init_OLED>:
 * OLED (SH1106/SSD1306 over I2C1 PB8=SCL, PB9=SDA)
 * ============================================================================ */
#define OLED_ADDR       0x3C
#define OLED_COL_OFFSET 2   /* SH1106 = 2, SSD1306 = 0 */

static void I2C1_Init_OLED(void){
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80003f0:	4b2d      	ldr	r3, [pc, #180]	@ (80004a8 <I2C1_Init_OLED+0xbc>)
 80003f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f4:	4a2c      	ldr	r2, [pc, #176]	@ (80004a8 <I2C1_Init_OLED+0xbc>)
 80003f6:	f043 0302 	orr.w	r3, r3, #2
 80003fa:	6313      	str	r3, [r2, #48]	@ 0x30
    // PB8, PB9 AF4, OD, PU, High speed
    GPIOB->MODER &= ~((3u<<(8*2))|(3u<<(9*2)));
 80003fc:	4b2b      	ldr	r3, [pc, #172]	@ (80004ac <I2C1_Init_OLED+0xc0>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a2a      	ldr	r2, [pc, #168]	@ (80004ac <I2C1_Init_OLED+0xc0>)
 8000402:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000406:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  ((2u<<(8*2))|(2u<<(9*2)));
 8000408:	4b28      	ldr	r3, [pc, #160]	@ (80004ac <I2C1_Init_OLED+0xc0>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a27      	ldr	r2, [pc, #156]	@ (80004ac <I2C1_Init_OLED+0xc0>)
 800040e:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000412:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |=  (1u<<8)|(1u<<9);
 8000414:	4b25      	ldr	r3, [pc, #148]	@ (80004ac <I2C1_Init_OLED+0xc0>)
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	4a24      	ldr	r2, [pc, #144]	@ (80004ac <I2C1_Init_OLED+0xc0>)
 800041a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800041e:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR|=  (3u<<(8*2))|(3u<<(9*2));
 8000420:	4b22      	ldr	r3, [pc, #136]	@ (80004ac <I2C1_Init_OLED+0xc0>)
 8000422:	689b      	ldr	r3, [r3, #8]
 8000424:	4a21      	ldr	r2, [pc, #132]	@ (80004ac <I2C1_Init_OLED+0xc0>)
 8000426:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 800042a:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR  &= ~((3u<<(8*2))|(3u<<(9*2)));
 800042c:	4b1f      	ldr	r3, [pc, #124]	@ (80004ac <I2C1_Init_OLED+0xc0>)
 800042e:	68db      	ldr	r3, [r3, #12]
 8000430:	4a1e      	ldr	r2, [pc, #120]	@ (80004ac <I2C1_Init_OLED+0xc0>)
 8000432:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000436:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR  |=  ((1u<<(8*2))|(1u<<(9*2)));
 8000438:	4b1c      	ldr	r3, [pc, #112]	@ (80004ac <I2C1_Init_OLED+0xc0>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	4a1b      	ldr	r2, [pc, #108]	@ (80004ac <I2C1_Init_OLED+0xc0>)
 800043e:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000442:	60d3      	str	r3, [r2, #12]
    GPIOB->AFR[1] &= ~((0xFu<<0)|(0xFu<<4));
 8000444:	4b19      	ldr	r3, [pc, #100]	@ (80004ac <I2C1_Init_OLED+0xc0>)
 8000446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000448:	4a18      	ldr	r2, [pc, #96]	@ (80004ac <I2C1_Init_OLED+0xc0>)
 800044a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800044e:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  ((4u<<0) |(4u<<4));
 8000450:	4b16      	ldr	r3, [pc, #88]	@ (80004ac <I2C1_Init_OLED+0xc0>)
 8000452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000454:	4a15      	ldr	r2, [pc, #84]	@ (80004ac <I2C1_Init_OLED+0xc0>)
 8000456:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800045a:	6253      	str	r3, [r2, #36]	@ 0x24

    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800045c:	4b12      	ldr	r3, [pc, #72]	@ (80004a8 <I2C1_Init_OLED+0xbc>)
 800045e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000460:	4a11      	ldr	r2, [pc, #68]	@ (80004a8 <I2C1_Init_OLED+0xbc>)
 8000462:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000466:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->APB1RSTR |= RCC_APB1RSTR_I2C1RST; RCC->APB1RSTR &= ~RCC_APB1RSTR_I2C1RST;
 8000468:	4b0f      	ldr	r3, [pc, #60]	@ (80004a8 <I2C1_Init_OLED+0xbc>)
 800046a:	6a1b      	ldr	r3, [r3, #32]
 800046c:	4a0e      	ldr	r2, [pc, #56]	@ (80004a8 <I2C1_Init_OLED+0xbc>)
 800046e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000472:	6213      	str	r3, [r2, #32]
 8000474:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <I2C1_Init_OLED+0xbc>)
 8000476:	6a1b      	ldr	r3, [r3, #32]
 8000478:	4a0b      	ldr	r2, [pc, #44]	@ (80004a8 <I2C1_Init_OLED+0xbc>)
 800047a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800047e:	6213      	str	r3, [r2, #32]

    I2C1->CR1 = 0;
 8000480:	4b0b      	ldr	r3, [pc, #44]	@ (80004b0 <I2C1_Init_OLED+0xc4>)
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
    I2C1->CR2 = 42;          // APB1=42MHz
 8000486:	4b0a      	ldr	r3, [pc, #40]	@ (80004b0 <I2C1_Init_OLED+0xc4>)
 8000488:	222a      	movs	r2, #42	@ 0x2a
 800048a:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 210;         // 100kHz
 800048c:	4b08      	ldr	r3, [pc, #32]	@ (80004b0 <I2C1_Init_OLED+0xc4>)
 800048e:	22d2      	movs	r2, #210	@ 0xd2
 8000490:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 43;
 8000492:	4b07      	ldr	r3, [pc, #28]	@ (80004b0 <I2C1_Init_OLED+0xc4>)
 8000494:	222b      	movs	r2, #43	@ 0x2b
 8000496:	621a      	str	r2, [r3, #32]
    I2C1->CR1 = I2C_CR1_PE;
 8000498:	4b05      	ldr	r3, [pc, #20]	@ (80004b0 <I2C1_Init_OLED+0xc4>)
 800049a:	2201      	movs	r2, #1
 800049c:	601a      	str	r2, [r3, #0]
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	40023800 	.word	0x40023800
 80004ac:	40020400 	.word	0x40020400
 80004b0:	40005400 	.word	0x40005400

080004b4 <i2c_start>:

static void i2c_start(uint8_t addr){
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	71fb      	strb	r3, [r7, #7]
    I2C1->CR1 |= I2C_CR1_START;
 80004be:	4b12      	ldr	r3, [pc, #72]	@ (8000508 <i2c_start+0x54>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a11      	ldr	r2, [pc, #68]	@ (8000508 <i2c_start+0x54>)
 80004c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004c8:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));
 80004ca:	bf00      	nop
 80004cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000508 <i2c_start+0x54>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	f003 0301 	and.w	r3, r3, #1
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d0f9      	beq.n	80004cc <i2c_start+0x18>
    (void)I2C1->SR1;
 80004d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000508 <i2c_start+0x54>)
 80004da:	695b      	ldr	r3, [r3, #20]
    I2C1->DR = addr<<1;                // write
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	4a0a      	ldr	r2, [pc, #40]	@ (8000508 <i2c_start+0x54>)
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	6113      	str	r3, [r2, #16]
    while(!(I2C1->SR1 & I2C_SR1_ADDR));
 80004e4:	bf00      	nop
 80004e6:	4b08      	ldr	r3, [pc, #32]	@ (8000508 <i2c_start+0x54>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f003 0302 	and.w	r3, r3, #2
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d0f9      	beq.n	80004e6 <i2c_start+0x32>
    (void)I2C1->SR1; (void)I2C1->SR2;
 80004f2:	4b05      	ldr	r3, [pc, #20]	@ (8000508 <i2c_start+0x54>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	4b04      	ldr	r3, [pc, #16]	@ (8000508 <i2c_start+0x54>)
 80004f8:	699b      	ldr	r3, [r3, #24]
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40005400 	.word	0x40005400

0800050c <i2c_w>:
static void i2c_w(uint8_t b){
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
    while(!(I2C1->SR1 & I2C_SR1_TXE));
 8000516:	bf00      	nop
 8000518:	4b0b      	ldr	r3, [pc, #44]	@ (8000548 <i2c_w+0x3c>)
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0f9      	beq.n	8000518 <i2c_w+0xc>
    I2C1->DR = b;
 8000524:	4a08      	ldr	r2, [pc, #32]	@ (8000548 <i2c_w+0x3c>)
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	6113      	str	r3, [r2, #16]
    while(!(I2C1->SR1 & I2C_SR1_BTF));
 800052a:	bf00      	nop
 800052c:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <i2c_w+0x3c>)
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	f003 0304 	and.w	r3, r3, #4
 8000534:	2b00      	cmp	r3, #0
 8000536:	d0f9      	beq.n	800052c <i2c_w+0x20>
}
 8000538:	bf00      	nop
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40005400 	.word	0x40005400

0800054c <i2c_stop>:
static void i2c_stop(void){ I2C1->CR1 |= I2C_CR1_STOP; }
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
 8000550:	4b05      	ldr	r3, [pc, #20]	@ (8000568 <i2c_stop+0x1c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a04      	ldr	r2, [pc, #16]	@ (8000568 <i2c_stop+0x1c>)
 8000556:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40005400 	.word	0x40005400

0800056c <oled_cmd>:

static void oled_cmd(uint8_t c){ i2c_start(OLED_ADDR); i2c_w(0x00); i2c_w(c); i2c_stop(); }
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
 8000576:	203c      	movs	r0, #60	@ 0x3c
 8000578:	f7ff ff9c 	bl	80004b4 <i2c_start>
 800057c:	2000      	movs	r0, #0
 800057e:	f7ff ffc5 	bl	800050c <i2c_w>
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ffc1 	bl	800050c <i2c_w>
 800058a:	f7ff ffdf 	bl	800054c <i2c_stop>
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}

08000596 <oled_data>:
static void oled_data(const uint8_t* p, uint16_t n){ i2c_start(OLED_ADDR); i2c_w(0x40); while(n--) i2c_w(*p++); i2c_stop(); }
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
 800059e:	460b      	mov	r3, r1
 80005a0:	807b      	strh	r3, [r7, #2]
 80005a2:	203c      	movs	r0, #60	@ 0x3c
 80005a4:	f7ff ff86 	bl	80004b4 <i2c_start>
 80005a8:	2040      	movs	r0, #64	@ 0x40
 80005aa:	f7ff ffaf 	bl	800050c <i2c_w>
 80005ae:	e006      	b.n	80005be <oled_data+0x28>
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	1c5a      	adds	r2, r3, #1
 80005b4:	607a      	str	r2, [r7, #4]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff ffa7 	bl	800050c <i2c_w>
 80005be:	887b      	ldrh	r3, [r7, #2]
 80005c0:	1e5a      	subs	r2, r3, #1
 80005c2:	807a      	strh	r2, [r7, #2]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1f3      	bne.n	80005b0 <oled_data+0x1a>
 80005c8:	f7ff ffc0 	bl	800054c <i2c_stop>
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <oled_setpos>:

static void oled_setpos(uint8_t page, uint8_t col){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	460a      	mov	r2, r1
 80005de:	71fb      	strb	r3, [r7, #7]
 80005e0:	4613      	mov	r3, r2
 80005e2:	71bb      	strb	r3, [r7, #6]
    col += OLED_COL_OFFSET;
 80005e4:	79bb      	ldrb	r3, [r7, #6]
 80005e6:	3302      	adds	r3, #2
 80005e8:	71bb      	strb	r3, [r7, #6]
    oled_cmd(0xB0 | (page & 7));
 80005ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ee:	f003 0307 	and.w	r3, r3, #7
 80005f2:	b25b      	sxtb	r3, r3
 80005f4:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80005f8:	b25b      	sxtb	r3, r3
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff ffb5 	bl	800056c <oled_cmd>
    oled_cmd(0x00 | (col & 0x0F));
 8000602:	79bb      	ldrb	r3, [r7, #6]
 8000604:	f003 030f 	and.w	r3, r3, #15
 8000608:	b2db      	uxtb	r3, r3
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff ffae 	bl	800056c <oled_cmd>
    oled_cmd(0x10 | (col >> 4));
 8000610:	79bb      	ldrb	r3, [r7, #6]
 8000612:	091b      	lsrs	r3, r3, #4
 8000614:	b2db      	uxtb	r3, r3
 8000616:	f043 0310 	orr.w	r3, r3, #16
 800061a:	b2db      	uxtb	r3, r3
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ffa5 	bl	800056c <oled_cmd>
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <oled_clear>:
static void oled_clear(void){
 800062a:	b580      	push	{r7, lr}
 800062c:	b0a2      	sub	sp, #136	@ 0x88
 800062e:	af00      	add	r7, sp, #0
    uint8_t z[128] = {0};
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2280      	movs	r2, #128	@ 0x80
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f001 fad2 	bl	8001be0 <memset>
    for(uint8_t p=0;p<8;p++){ oled_setpos(p,0); oled_data(z,128); }
 800063c:	2300      	movs	r3, #0
 800063e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000642:	e00f      	b.n	8000664 <oled_clear+0x3a>
 8000644:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff ffc2 	bl	80005d4 <oled_setpos>
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2180      	movs	r1, #128	@ 0x80
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ff9e 	bl	8000596 <oled_data>
 800065a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800065e:	3301      	adds	r3, #1
 8000660:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000664:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000668:	2b07      	cmp	r3, #7
 800066a:	d9eb      	bls.n	8000644 <oled_clear+0x1a>
}
 800066c:	bf00      	nop
 800066e:	bf00      	nop
 8000670:	3788      	adds	r7, #136	@ 0x88
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <oled_init>:
static void oled_init(void){
 8000676:	b580      	push	{r7, lr}
 8000678:	af00      	add	r7, sp, #0
    I2C1_Init_OLED();
 800067a:	f7ff feb7 	bl	80003ec <I2C1_Init_OLED>
    // init sequence
    oled_cmd(0xAE); oled_cmd(0xD5); oled_cmd(0x80);
 800067e:	20ae      	movs	r0, #174	@ 0xae
 8000680:	f7ff ff74 	bl	800056c <oled_cmd>
 8000684:	20d5      	movs	r0, #213	@ 0xd5
 8000686:	f7ff ff71 	bl	800056c <oled_cmd>
 800068a:	2080      	movs	r0, #128	@ 0x80
 800068c:	f7ff ff6e 	bl	800056c <oled_cmd>
    oled_cmd(0xA8); oled_cmd(0x3F); oled_cmd(0xD3); oled_cmd(0x00);
 8000690:	20a8      	movs	r0, #168	@ 0xa8
 8000692:	f7ff ff6b 	bl	800056c <oled_cmd>
 8000696:	203f      	movs	r0, #63	@ 0x3f
 8000698:	f7ff ff68 	bl	800056c <oled_cmd>
 800069c:	20d3      	movs	r0, #211	@ 0xd3
 800069e:	f7ff ff65 	bl	800056c <oled_cmd>
 80006a2:	2000      	movs	r0, #0
 80006a4:	f7ff ff62 	bl	800056c <oled_cmd>
    oled_cmd(0x40); oled_cmd(0x8D); oled_cmd(0x14);
 80006a8:	2040      	movs	r0, #64	@ 0x40
 80006aa:	f7ff ff5f 	bl	800056c <oled_cmd>
 80006ae:	208d      	movs	r0, #141	@ 0x8d
 80006b0:	f7ff ff5c 	bl	800056c <oled_cmd>
 80006b4:	2014      	movs	r0, #20
 80006b6:	f7ff ff59 	bl	800056c <oled_cmd>
    oled_cmd(0x20); oled_cmd(0x00); oled_cmd(0xA1); oled_cmd(0xC8);
 80006ba:	2020      	movs	r0, #32
 80006bc:	f7ff ff56 	bl	800056c <oled_cmd>
 80006c0:	2000      	movs	r0, #0
 80006c2:	f7ff ff53 	bl	800056c <oled_cmd>
 80006c6:	20a1      	movs	r0, #161	@ 0xa1
 80006c8:	f7ff ff50 	bl	800056c <oled_cmd>
 80006cc:	20c8      	movs	r0, #200	@ 0xc8
 80006ce:	f7ff ff4d 	bl	800056c <oled_cmd>
    oled_cmd(0xDA); oled_cmd(0x12); oled_cmd(0x81); oled_cmd(0x7F);
 80006d2:	20da      	movs	r0, #218	@ 0xda
 80006d4:	f7ff ff4a 	bl	800056c <oled_cmd>
 80006d8:	2012      	movs	r0, #18
 80006da:	f7ff ff47 	bl	800056c <oled_cmd>
 80006de:	2081      	movs	r0, #129	@ 0x81
 80006e0:	f7ff ff44 	bl	800056c <oled_cmd>
 80006e4:	207f      	movs	r0, #127	@ 0x7f
 80006e6:	f7ff ff41 	bl	800056c <oled_cmd>
    oled_cmd(0xD9); oled_cmd(0xF1); oled_cmd(0xDB); oled_cmd(0x40);
 80006ea:	20d9      	movs	r0, #217	@ 0xd9
 80006ec:	f7ff ff3e 	bl	800056c <oled_cmd>
 80006f0:	20f1      	movs	r0, #241	@ 0xf1
 80006f2:	f7ff ff3b 	bl	800056c <oled_cmd>
 80006f6:	20db      	movs	r0, #219	@ 0xdb
 80006f8:	f7ff ff38 	bl	800056c <oled_cmd>
 80006fc:	2040      	movs	r0, #64	@ 0x40
 80006fe:	f7ff ff35 	bl	800056c <oled_cmd>
    oled_cmd(0xA4); oled_cmd(0xA6); oled_cmd(0xAF);
 8000702:	20a4      	movs	r0, #164	@ 0xa4
 8000704:	f7ff ff32 	bl	800056c <oled_cmd>
 8000708:	20a6      	movs	r0, #166	@ 0xa6
 800070a:	f7ff ff2f 	bl	800056c <oled_cmd>
 800070e:	20af      	movs	r0, #175	@ 0xaf
 8000710:	f7ff ff2c 	bl	800056c <oled_cmd>
    oled_clear();
 8000714:	f7ff ff89 	bl	800062a <oled_clear>
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}

0800071c <oled_draw_digit>:
 /*Y*/{0x07,0x08,0x70,0x08,0x07,0x00},/*Z*/{0x61,0x51,0x49,0x45,0x43,0x00}
};
static const uint8_t FONT5x7_SPACE[6] = {0,0,0,0,0,0};
static const uint8_t FONT5x7_MINUS[6] = {0x08,0x08,0x08,0x08,0x08,0x00};

static void oled_draw_digit(uint8_t x,uint8_t page,int d){
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	603a      	str	r2, [r7, #0]
 8000726:	71fb      	strb	r3, [r7, #7]
 8000728:	460b      	mov	r3, r1
 800072a:	71bb      	strb	r3, [r7, #6]
    if(d>=0 && d<=9){ oled_setpos(page,x); oled_data(FONT5x7_DIGIT[d],6); }
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	db13      	blt.n	800075a <oled_draw_digit+0x3e>
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	2b09      	cmp	r3, #9
 8000736:	dc10      	bgt.n	800075a <oled_draw_digit+0x3e>
 8000738:	79fa      	ldrb	r2, [r7, #7]
 800073a:	79bb      	ldrb	r3, [r7, #6]
 800073c:	4611      	mov	r1, r2
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ff48 	bl	80005d4 <oled_setpos>
 8000744:	683a      	ldr	r2, [r7, #0]
 8000746:	4613      	mov	r3, r2
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	4413      	add	r3, r2
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	4a05      	ldr	r2, [pc, #20]	@ (8000764 <oled_draw_digit+0x48>)
 8000750:	4413      	add	r3, r2
 8000752:	2106      	movs	r1, #6
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff1e 	bl	8000596 <oled_data>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	08002eac 	.word	0x08002eac

08000768 <oled_draw_letter>:
static void oled_draw_letter(uint8_t x,uint8_t page,char c){
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
 8000772:	460b      	mov	r3, r1
 8000774:	71bb      	strb	r3, [r7, #6]
 8000776:	4613      	mov	r3, r2
 8000778:	717b      	strb	r3, [r7, #5]
    const uint8_t* g = FONT5x7_SPACE;
 800077a:	4b1b      	ldr	r3, [pc, #108]	@ (80007e8 <oled_draw_letter+0x80>)
 800077c:	60fb      	str	r3, [r7, #12]
    if(c>='A' && c<='Z') g = FONT5x7_LET[c-'A'];
 800077e:	797b      	ldrb	r3, [r7, #5]
 8000780:	2b40      	cmp	r3, #64	@ 0x40
 8000782:	d90d      	bls.n	80007a0 <oled_draw_letter+0x38>
 8000784:	797b      	ldrb	r3, [r7, #5]
 8000786:	2b5a      	cmp	r3, #90	@ 0x5a
 8000788:	d80a      	bhi.n	80007a0 <oled_draw_letter+0x38>
 800078a:	797b      	ldrb	r3, [r7, #5]
 800078c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8000790:	4613      	mov	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	4413      	add	r3, r2
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	4a14      	ldr	r2, [pc, #80]	@ (80007ec <oled_draw_letter+0x84>)
 800079a:	4413      	add	r3, r2
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	e015      	b.n	80007cc <oled_draw_letter+0x64>
    else if(c>='0' && c<='9') g = FONT5x7_DIGIT[c-'0'];
 80007a0:	797b      	ldrb	r3, [r7, #5]
 80007a2:	2b2f      	cmp	r3, #47	@ 0x2f
 80007a4:	d90d      	bls.n	80007c2 <oled_draw_letter+0x5a>
 80007a6:	797b      	ldrb	r3, [r7, #5]
 80007a8:	2b39      	cmp	r3, #57	@ 0x39
 80007aa:	d80a      	bhi.n	80007c2 <oled_draw_letter+0x5a>
 80007ac:	797b      	ldrb	r3, [r7, #5]
 80007ae:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80007b2:	4613      	mov	r3, r2
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	4413      	add	r3, r2
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	4a0d      	ldr	r2, [pc, #52]	@ (80007f0 <oled_draw_letter+0x88>)
 80007bc:	4413      	add	r3, r2
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	e004      	b.n	80007cc <oled_draw_letter+0x64>
    else if(c=='-') g = FONT5x7_MINUS;
 80007c2:	797b      	ldrb	r3, [r7, #5]
 80007c4:	2b2d      	cmp	r3, #45	@ 0x2d
 80007c6:	d101      	bne.n	80007cc <oled_draw_letter+0x64>
 80007c8:	4b0a      	ldr	r3, [pc, #40]	@ (80007f4 <oled_draw_letter+0x8c>)
 80007ca:	60fb      	str	r3, [r7, #12]
    oled_setpos(page,x); oled_data(g,6);
 80007cc:	79fa      	ldrb	r2, [r7, #7]
 80007ce:	79bb      	ldrb	r3, [r7, #6]
 80007d0:	4611      	mov	r1, r2
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fefe 	bl	80005d4 <oled_setpos>
 80007d8:	2106      	movs	r1, #6
 80007da:	68f8      	ldr	r0, [r7, #12]
 80007dc:	f7ff fedb 	bl	8000596 <oled_data>
}
 80007e0:	bf00      	nop
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	08002f84 	.word	0x08002f84
 80007ec:	08002ee8 	.word	0x08002ee8
 80007f0:	08002eac 	.word	0x08002eac
 80007f4:	08002f8c 	.word	0x08002f8c

080007f8 <oled_print_text>:
static void oled_print_text(uint8_t x,uint8_t page,const char* s){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	603a      	str	r2, [r7, #0]
 8000802:	71fb      	strb	r3, [r7, #7]
 8000804:	460b      	mov	r3, r1
 8000806:	71bb      	strb	r3, [r7, #6]
    while(*s){ oled_draw_letter(x,page, (*s>='a'&&*s<='z')?(*s-32):*s ); x+=6; s++; }
 8000808:	e019      	b.n	800083e <oled_print_text+0x46>
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b60      	cmp	r3, #96	@ 0x60
 8000810:	d908      	bls.n	8000824 <oled_print_text+0x2c>
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b7a      	cmp	r3, #122	@ 0x7a
 8000818:	d804      	bhi.n	8000824 <oled_print_text+0x2c>
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	3b20      	subs	r3, #32
 8000820:	b2db      	uxtb	r3, r3
 8000822:	e001      	b.n	8000828 <oled_print_text+0x30>
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	79b9      	ldrb	r1, [r7, #6]
 800082a:	79f8      	ldrb	r0, [r7, #7]
 800082c:	461a      	mov	r2, r3
 800082e:	f7ff ff9b 	bl	8000768 <oled_draw_letter>
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	3306      	adds	r3, #6
 8000836:	71fb      	strb	r3, [r7, #7]
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	3301      	adds	r3, #1
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1e1      	bne.n	800080a <oled_print_text+0x12>
}
 8000846:	bf00      	nop
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <oled_print_uint>:
static void oled_print_uint(uint8_t x,uint8_t page,unsigned v){
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	603a      	str	r2, [r7, #0]
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	460b      	mov	r3, r1
 800085e:	71bb      	strb	r3, [r7, #6]
    char buf[10]; int n=0;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
    if(v==0){ oled_draw_digit(x,page,0); return; }
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d120      	bne.n	80008ac <oled_print_uint+0x5c>
 800086a:	79b9      	ldrb	r1, [r7, #6]
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	2200      	movs	r2, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff53 	bl	800071c <oled_draw_digit>
 8000876:	e038      	b.n	80008ea <oled_print_uint+0x9a>
    while(v && n<10){ buf[n++] = '0' + (v%10); v/=10; }
 8000878:	6839      	ldr	r1, [r7, #0]
 800087a:	4b1d      	ldr	r3, [pc, #116]	@ (80008f0 <oled_print_uint+0xa0>)
 800087c:	fba3 2301 	umull	r2, r3, r3, r1
 8000880:	08da      	lsrs	r2, r3, #3
 8000882:	4613      	mov	r3, r2
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	4413      	add	r3, r2
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	1aca      	subs	r2, r1, r3
 800088c:	b2d2      	uxtb	r2, r2
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	1c59      	adds	r1, r3, #1
 8000892:	61f9      	str	r1, [r7, #28]
 8000894:	3230      	adds	r2, #48	@ 0x30
 8000896:	b2d2      	uxtb	r2, r2
 8000898:	3320      	adds	r3, #32
 800089a:	443b      	add	r3, r7
 800089c:	f803 2c14 	strb.w	r2, [r3, #-20]
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	4a13      	ldr	r2, [pc, #76]	@ (80008f0 <oled_print_uint+0xa0>)
 80008a4:	fba2 2303 	umull	r2, r3, r2, r3
 80008a8:	08db      	lsrs	r3, r3, #3
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d002      	beq.n	80008b8 <oled_print_uint+0x68>
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	2b09      	cmp	r3, #9
 80008b6:	dddf      	ble.n	8000878 <oled_print_uint+0x28>
    for(int i=n-1;i>=0;i--,x+=6) oled_draw_digit(x,page, buf[i]-'0');
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	61bb      	str	r3, [r7, #24]
 80008be:	e011      	b.n	80008e4 <oled_print_uint+0x94>
 80008c0:	f107 020c 	add.w	r2, r7, #12
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	4413      	add	r3, r2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80008ce:	79b9      	ldrb	r1, [r7, #6]
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff ff22 	bl	800071c <oled_draw_digit>
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	3b01      	subs	r3, #1
 80008dc:	61bb      	str	r3, [r7, #24]
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	3306      	adds	r3, #6
 80008e2:	71fb      	strb	r3, [r7, #7]
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	daea      	bge.n	80008c0 <oled_print_uint+0x70>
}
 80008ea:	3720      	adds	r7, #32
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	cccccccd 	.word	0xcccccccd

080008f4 <OLED_ShowStatus>:

/* แสดงสถานะเกมบน OLED */

static void OLED_ShowStatus(void){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
    oled_clear();
 80008f8:	f7ff fe97 	bl	800062a <oled_clear>

    // LEVEL
    oled_print_text(0, 0, "LEVEL");
 80008fc:	4a35      	ldr	r2, [pc, #212]	@ (80009d4 <OLED_ShowStatus+0xe0>)
 80008fe:	2100      	movs	r1, #0
 8000900:	2000      	movs	r0, #0
 8000902:	f7ff ff79 	bl	80007f8 <oled_print_text>
    oled_print_uint(6*6, 0, g_level);
 8000906:	4b34      	ldr	r3, [pc, #208]	@ (80009d8 <OLED_ShowStatus+0xe4>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	461a      	mov	r2, r3
 800090c:	2100      	movs	r1, #0
 800090e:	2024      	movs	r0, #36	@ 0x24
 8000910:	f7ff ff9e 	bl	8000850 <oled_print_uint>

    // LIVES
    oled_print_text(0, 2, "LIVES");
 8000914:	4a31      	ldr	r2, [pc, #196]	@ (80009dc <OLED_ShowStatus+0xe8>)
 8000916:	2102      	movs	r1, #2
 8000918:	2000      	movs	r0, #0
 800091a:	f7ff ff6d 	bl	80007f8 <oled_print_text>
    oled_print_uint(6*6, 2, g_lives);
 800091e:	4b30      	ldr	r3, [pc, #192]	@ (80009e0 <OLED_ShowStatus+0xec>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	461a      	mov	r2, r3
 8000924:	2102      	movs	r1, #2
 8000926:	2024      	movs	r0, #36	@ 0x24
 8000928:	f7ff ff92 	bl	8000850 <oled_print_uint>

    // SCORE
    oled_print_text(0, 4, "SCORE");
 800092c:	4a2d      	ldr	r2, [pc, #180]	@ (80009e4 <OLED_ShowStatus+0xf0>)
 800092e:	2104      	movs	r1, #4
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff ff61 	bl	80007f8 <oled_print_text>
    oled_print_uint(6*6, 4, g_score);
 8000936:	4b2c      	ldr	r3, [pc, #176]	@ (80009e8 <OLED_ShowStatus+0xf4>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	2104      	movs	r1, #4
 800093e:	2024      	movs	r0, #36	@ 0x24
 8000940:	f7ff ff86 	bl	8000850 <oled_print_uint>

    // DIFF
    oled_print_text(0, 6, "DIFF");
 8000944:	4a29      	ldr	r2, [pc, #164]	@ (80009ec <OLED_ShowStatus+0xf8>)
 8000946:	2106      	movs	r1, #6
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff ff55 	bl	80007f8 <oled_print_text>
    oled_print_uint(6*4, 6, g_difficulty);
 800094e:	4b28      	ldr	r3, [pc, #160]	@ (80009f0 <OLED_ShowStatus+0xfc>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	2106      	movs	r1, #6
 8000956:	2018      	movs	r0, #24
 8000958:	f7ff ff7a 	bl	8000850 <oled_print_uint>

    // STATE (บรรทัดล่างสุด)
    switch(g_game_state){
 800095c:	4b25      	ldr	r3, [pc, #148]	@ (80009f4 <OLED_ShowStatus+0x100>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	3b01      	subs	r3, #1
 8000962:	2b06      	cmp	r3, #6
 8000964:	d82e      	bhi.n	80009c4 <OLED_ShowStatus+0xd0>
 8000966:	a201      	add	r2, pc, #4	@ (adr r2, 800096c <OLED_ShowStatus+0x78>)
 8000968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800096c:	080009b9 	.word	0x080009b9
 8000970:	080009c5 	.word	0x080009c5
 8000974:	080009a1 	.word	0x080009a1
 8000978:	080009ad 	.word	0x080009ad
 800097c:	080009c5 	.word	0x080009c5
 8000980:	08000989 	.word	0x08000989
 8000984:	08000995 	.word	0x08000995
        case GAME_STATE_VICTORY:            oled_print_text(0, 7, "VICTORY"); break;
 8000988:	4a1b      	ldr	r2, [pc, #108]	@ (80009f8 <OLED_ShowStatus+0x104>)
 800098a:	2107      	movs	r1, #7
 800098c:	2000      	movs	r0, #0
 800098e:	f7ff ff33 	bl	80007f8 <oled_print_text>
 8000992:	e01d      	b.n	80009d0 <OLED_ShowStatus+0xdc>
        case GAME_STATE_GAME_DEATH:         oled_print_text(0, 7, "GAME-OVER"); break;
 8000994:	4a19      	ldr	r2, [pc, #100]	@ (80009fc <OLED_ShowStatus+0x108>)
 8000996:	2107      	movs	r1, #7
 8000998:	2000      	movs	r0, #0
 800099a:	f7ff ff2d 	bl	80007f8 <oled_print_text>
 800099e:	e017      	b.n	80009d0 <OLED_ShowStatus+0xdc>
        case GAME_STATE_PATTERN_DISPLAY:    oled_print_text(0, 7, "SHOW"); break;
 80009a0:	4a17      	ldr	r2, [pc, #92]	@ (8000a00 <OLED_ShowStatus+0x10c>)
 80009a2:	2107      	movs	r1, #7
 80009a4:	2000      	movs	r0, #0
 80009a6:	f7ff ff27 	bl	80007f8 <oled_print_text>
 80009aa:	e011      	b.n	80009d0 <OLED_ShowStatus+0xdc>
        case GAME_STATE_INPUT_WAIT:         oled_print_text(0, 7, "INPUT"); break;
 80009ac:	4a15      	ldr	r2, [pc, #84]	@ (8000a04 <OLED_ShowStatus+0x110>)
 80009ae:	2107      	movs	r1, #7
 80009b0:	2000      	movs	r0, #0
 80009b2:	f7ff ff21 	bl	80007f8 <oled_print_text>
 80009b6:	e00b      	b.n	80009d0 <OLED_ShowStatus+0xdc>
        case GAME_STATE_DIFFICULTY_SELECT:  oled_print_text(0, 7, "DIFF-SEL"); break;
 80009b8:	4a13      	ldr	r2, [pc, #76]	@ (8000a08 <OLED_ShowStatus+0x114>)
 80009ba:	2107      	movs	r1, #7
 80009bc:	2000      	movs	r0, #0
 80009be:	f7ff ff1b 	bl	80007f8 <oled_print_text>
 80009c2:	e005      	b.n	80009d0 <OLED_ShowStatus+0xdc>
        default:                            oled_print_text(0, 7, "PLAY"); break;
 80009c4:	4a11      	ldr	r2, [pc, #68]	@ (8000a0c <OLED_ShowStatus+0x118>)
 80009c6:	2107      	movs	r1, #7
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff ff15 	bl	80007f8 <oled_print_text>
 80009ce:	bf00      	nop
    }
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	08002c94 	.word	0x08002c94
 80009d8:	200000b3 	.word	0x200000b3
 80009dc:	08002c9c 	.word	0x08002c9c
 80009e0:	200000b8 	.word	0x200000b8
 80009e4:	08002ca4 	.word	0x08002ca4
 80009e8:	200000b4 	.word	0x200000b4
 80009ec:	08002cac 	.word	0x08002cac
 80009f0:	200000b2 	.word	0x200000b2
 80009f4:	200000b1 	.word	0x200000b1
 80009f8:	08002cb4 	.word	0x08002cb4
 80009fc:	08002cbc 	.word	0x08002cbc
 8000a00:	08002cc8 	.word	0x08002cc8
 8000a04:	08002cd0 	.word	0x08002cd0
 8000a08:	08002cd8 	.word	0x08002cd8
 8000a0c:	08002ce4 	.word	0x08002ce4

08000a10 <main>:
void Log_Print(const char* format, ...);

/* ============================================================================
 * MAIN
 * ============================================================================ */
int main(void) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
    SystemClock_Config();
 8000a14:	f000 fcd0 	bl	80013b8 <SystemClock_Config>
    GPIO_Init();
 8000a18:	f000 fd14 	bl	8001444 <GPIO_Init>
    USART2_Init();
 8000a1c:	f000 fd98 	bl	8001550 <USART2_Init>
    SysTick_Config(SystemCoreClock / 1000); // 1ms ticks
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <main+0x5c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a12      	ldr	r2, [pc, #72]	@ (8000a70 <main+0x60>)
 8000a26:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2a:	099b      	lsrs	r3, r3, #6
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fc6f 	bl	8000310 <SysTick_Config>
    NVIC_Init();
 8000a32:	f000 fdab 	bl	800158c <NVIC_Init>
    ADC_Init();
 8000a36:	f000 fd5f 	bl	80014f8 <ADC_Init>

    // OLED HUD
    oled_init();
 8000a3a:	f7ff fe1c 	bl	8000676 <oled_init>
    oled_clear();
 8000a3e:	f7ff fdf4 	bl	800062a <oled_clear>

    g_system_initialized = 1;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <main+0x64>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	701a      	strb	r2, [r3, #0]

    ADC_StartConversion();
 8000a48:	f000 fdb0 	bl	80015ac <ADC_StartConversion>
    Delay_ms(10);
 8000a4c:	200a      	movs	r0, #10
 8000a4e:	f000 fdc5 	bl	80015dc <Delay_ms>

    Game_Init();
 8000a52:	f000 f811 	bl	8000a78 <Game_Init>

    while(1) {
        Monitor_Buttons();
 8000a56:	f000 fba9 	bl	80011ac <Monitor_Buttons>
        Monitor_ADC();
 8000a5a:	f000 fc15 	bl	8001288 <Monitor_ADC>
        Game_Run();
 8000a5e:	f000 f831 	bl	8000ac4 <Game_Run>
        Delay_ms(5);
 8000a62:	2005      	movs	r0, #5
 8000a64:	f000 fdba 	bl	80015dc <Delay_ms>
        Monitor_Buttons();
 8000a68:	bf00      	nop
 8000a6a:	e7f4      	b.n	8000a56 <main+0x46>
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	10624dd3 	.word	0x10624dd3
 8000a74:	200000a0 	.word	0x200000a0

08000a78 <Game_Init>:
}

/* ============================================================================
 * GAME LOGIC IMPLEMENTATION
 * ============================================================================ */
void Game_Init(void) {
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
    Log_Print("\r\n[GAME] Initializing Simon Game...\r\n");
 8000a7e:	480e      	ldr	r0, [pc, #56]	@ (8000ab8 <Game_Init+0x40>)
 8000a80:	f000 fdce 	bl	8001620 <Log_Print>
    uint32_t seed = g_adc_values[1] + g_adc_values[2] + GetTick();
 8000a84:	4b0d      	ldr	r3, [pc, #52]	@ (8000abc <Game_Init+0x44>)
 8000a86:	885b      	ldrh	r3, [r3, #2]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <Game_Init+0x44>)
 8000a8c:	889b      	ldrh	r3, [r3, #4]
 8000a8e:	4413      	add	r3, r2
 8000a90:	461c      	mov	r4, r3
 8000a92:	f000 fdb9 	bl	8001608 <GetTick>
 8000a96:	4603      	mov	r3, r0
 8000a98:	4423      	add	r3, r4
 8000a9a:	607b      	str	r3, [r7, #4]
    srand(seed);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f000 fef1 	bl	8001884 <srand>
    Log_Print("[GAME] Random seed set to: %lu\r\n", seed);
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	4806      	ldr	r0, [pc, #24]	@ (8000ac0 <Game_Init+0x48>)
 8000aa6:	f000 fdbb 	bl	8001620 <Log_Print>
    set_game_state(GAME_STATE_BOOT);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f000 fa8c 	bl	8000fc8 <set_game_state>
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd90      	pop	{r4, r7, pc}
 8000ab8:	08002cec 	.word	0x08002cec
 8000abc:	200000a4 	.word	0x200000a4
 8000ac0:	08002d14 	.word	0x08002d14

08000ac4 <Game_Run>:

void Game_Run(void) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
    if (g_last_state_logged != g_game_state) {
 8000ac8:	4b3e      	ldr	r3, [pc, #248]	@ (8000bc4 <Game_Run+0x100>)
 8000aca:	781a      	ldrb	r2, [r3, #0]
 8000acc:	4b3e      	ldr	r3, [pc, #248]	@ (8000bc8 <Game_Run+0x104>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d03d      	beq.n	8000b50 <Game_Run+0x8c>
        switch(g_game_state) {
 8000ad4:	4b3c      	ldr	r3, [pc, #240]	@ (8000bc8 <Game_Run+0x104>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b07      	cmp	r3, #7
 8000ada:	d833      	bhi.n	8000b44 <Game_Run+0x80>
 8000adc:	a201      	add	r2, pc, #4	@ (adr r2, 8000ae4 <Game_Run+0x20>)
 8000ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae2:	bf00      	nop
 8000ae4:	08000b05 	.word	0x08000b05
 8000ae8:	08000b0d 	.word	0x08000b0d
 8000aec:	08000b15 	.word	0x08000b15
 8000af0:	08000b1d 	.word	0x08000b1d
 8000af4:	08000b25 	.word	0x08000b25
 8000af8:	08000b2d 	.word	0x08000b2d
 8000afc:	08000b35 	.word	0x08000b35
 8000b00:	08000b3d 	.word	0x08000b3d
            case GAME_STATE_BOOT:
                Log_Print("[STATE] -> BOOT\r\n");
 8000b04:	4831      	ldr	r0, [pc, #196]	@ (8000bcc <Game_Run+0x108>)
 8000b06:	f000 fd8b 	bl	8001620 <Log_Print>
                break;
 8000b0a:	e01b      	b.n	8000b44 <Game_Run+0x80>
            case GAME_STATE_DIFFICULTY_SELECT:
                Log_Print("[STATE] -> DIFFICULTY_SELECT\r\n");
 8000b0c:	4830      	ldr	r0, [pc, #192]	@ (8000bd0 <Game_Run+0x10c>)
 8000b0e:	f000 fd87 	bl	8001620 <Log_Print>
                break;
 8000b12:	e017      	b.n	8000b44 <Game_Run+0x80>
            case GAME_STATE_LEVEL_INTRO:
                Log_Print("[STATE] -> LEVEL_INTRO\r\n");
 8000b14:	482f      	ldr	r0, [pc, #188]	@ (8000bd4 <Game_Run+0x110>)
 8000b16:	f000 fd83 	bl	8001620 <Log_Print>
                break;
 8000b1a:	e013      	b.n	8000b44 <Game_Run+0x80>
            case GAME_STATE_PATTERN_DISPLAY:
                Log_Print("[STATE] -> PATTERN_DISPLAY\r\n");
 8000b1c:	482e      	ldr	r0, [pc, #184]	@ (8000bd8 <Game_Run+0x114>)
 8000b1e:	f000 fd7f 	bl	8001620 <Log_Print>
                break;
 8000b22:	e00f      	b.n	8000b44 <Game_Run+0x80>
            case GAME_STATE_INPUT_WAIT:
                Log_Print("[STATE] -> INPUT_WAIT\r\n");
 8000b24:	482d      	ldr	r0, [pc, #180]	@ (8000bdc <Game_Run+0x118>)
 8000b26:	f000 fd7b 	bl	8001620 <Log_Print>
                break;
 8000b2a:	e00b      	b.n	8000b44 <Game_Run+0x80>
            case GAME_STATE_RESULT_PROCESS:
                Log_Print("[STATE] -> RESULT_PROCESS\r\n");
 8000b2c:	482c      	ldr	r0, [pc, #176]	@ (8000be0 <Game_Run+0x11c>)
 8000b2e:	f000 fd77 	bl	8001620 <Log_Print>
                break;
 8000b32:	e007      	b.n	8000b44 <Game_Run+0x80>
            case GAME_STATE_VICTORY:
                Log_Print("[STATE] -> VICTORY\r\n");
 8000b34:	482b      	ldr	r0, [pc, #172]	@ (8000be4 <Game_Run+0x120>)
 8000b36:	f000 fd73 	bl	8001620 <Log_Print>
                break;
 8000b3a:	e003      	b.n	8000b44 <Game_Run+0x80>
            case GAME_STATE_GAME_DEATH:
                Log_Print("[STATE] -> GAME_DEATH\r\n");
 8000b3c:	482a      	ldr	r0, [pc, #168]	@ (8000be8 <Game_Run+0x124>)
 8000b3e:	f000 fd6f 	bl	8001620 <Log_Print>
                break;
 8000b42:	bf00      	nop
        }
        g_last_state_logged = g_game_state;
 8000b44:	4b20      	ldr	r3, [pc, #128]	@ (8000bc8 <Game_Run+0x104>)
 8000b46:	781a      	ldrb	r2, [r3, #0]
 8000b48:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc4 <Game_Run+0x100>)
 8000b4a:	701a      	strb	r2, [r3, #0]
        OLED_ShowStatus(); // อัปเดตจอทุกครั้งที่เข้าสถานะใหม่
 8000b4c:	f7ff fed2 	bl	80008f4 <OLED_ShowStatus>
    }
    switch(g_game_state) {
 8000b50:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc8 <Game_Run+0x104>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b07      	cmp	r3, #7
 8000b56:	d82b      	bhi.n	8000bb0 <Game_Run+0xec>
 8000b58:	a201      	add	r2, pc, #4	@ (adr r2, 8000b60 <Game_Run+0x9c>)
 8000b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5e:	bf00      	nop
 8000b60:	08000b81 	.word	0x08000b81
 8000b64:	08000b87 	.word	0x08000b87
 8000b68:	08000b8d 	.word	0x08000b8d
 8000b6c:	08000b93 	.word	0x08000b93
 8000b70:	08000b99 	.word	0x08000b99
 8000b74:	08000b9f 	.word	0x08000b9f
 8000b78:	08000ba5 	.word	0x08000ba5
 8000b7c:	08000bab 	.word	0x08000bab
        case GAME_STATE_BOOT:              handle_boot();              break;
 8000b80:	f000 fa38 	bl	8000ff4 <handle_boot>
 8000b84:	e01c      	b.n	8000bc0 <Game_Run+0xfc>
        case GAME_STATE_DIFFICULTY_SELECT: handle_difficulty_select(); break;
 8000b86:	f000 fa4b 	bl	8001020 <handle_difficulty_select>
 8000b8a:	e019      	b.n	8000bc0 <Game_Run+0xfc>
        case GAME_STATE_LEVEL_INTRO:       handle_level_intro();       break;
 8000b8c:	f000 f874 	bl	8000c78 <handle_level_intro>
 8000b90:	e016      	b.n	8000bc0 <Game_Run+0xfc>
        case GAME_STATE_PATTERN_DISPLAY:   handle_pattern_display();   break;
 8000b92:	f000 f89b 	bl	8000ccc <handle_pattern_display>
 8000b96:	e013      	b.n	8000bc0 <Game_Run+0xfc>
        case GAME_STATE_INPUT_WAIT:        handle_input_wait();        break;
 8000b98:	f000 f8e4 	bl	8000d64 <handle_input_wait>
 8000b9c:	e010      	b.n	8000bc0 <Game_Run+0xfc>
        case GAME_STATE_RESULT_PROCESS:    handle_result_process();    break;
 8000b9e:	f000 f93b 	bl	8000e18 <handle_result_process>
 8000ba2:	e00d      	b.n	8000bc0 <Game_Run+0xfc>
        case GAME_STATE_VICTORY:           handle_victory();           break;
 8000ba4:	f000 f98c 	bl	8000ec0 <handle_victory>
 8000ba8:	e00a      	b.n	8000bc0 <Game_Run+0xfc>
        case GAME_STATE_GAME_DEATH:        handle_game_death();        break;
 8000baa:	f000 f9cb 	bl	8000f44 <handle_game_death>
 8000bae:	e007      	b.n	8000bc0 <Game_Run+0xfc>
        default:
            set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f000 fa09 	bl	8000fc8 <set_game_state>
            Delay_ms(1000);
 8000bb6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bba:	f000 fd0f 	bl	80015dc <Delay_ms>
            break;
 8000bbe:	bf00      	nop
    }
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000005 	.word	0x20000005
 8000bc8:	200000b1 	.word	0x200000b1
 8000bcc:	08002d38 	.word	0x08002d38
 8000bd0:	08002d4c 	.word	0x08002d4c
 8000bd4:	08002d6c 	.word	0x08002d6c
 8000bd8:	08002d88 	.word	0x08002d88
 8000bdc:	08002da8 	.word	0x08002da8
 8000be0:	08002dc0 	.word	0x08002dc0
 8000be4:	08002ddc 	.word	0x08002ddc
 8000be8:	08002df4 	.word	0x08002df4

08000bec <generate_pattern>:

static void generate_pattern(uint8_t length) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < length; i++) g_pattern[i] = rand() % 4;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	73fb      	strb	r3, [r7, #15]
 8000bfa:	e010      	b.n	8000c1e <generate_pattern+0x32>
 8000bfc:	f000 fe70 	bl	80018e0 <rand>
 8000c00:	4603      	mov	r3, r0
 8000c02:	425a      	negs	r2, r3
 8000c04:	f003 0303 	and.w	r3, r3, #3
 8000c08:	f002 0203 	and.w	r2, r2, #3
 8000c0c:	bf58      	it	pl
 8000c0e:	4253      	negpl	r3, r2
 8000c10:	7bfa      	ldrb	r2, [r7, #15]
 8000c12:	b2d9      	uxtb	r1, r3
 8000c14:	4b07      	ldr	r3, [pc, #28]	@ (8000c34 <generate_pattern+0x48>)
 8000c16:	5499      	strb	r1, [r3, r2]
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	73fb      	strb	r3, [r7, #15]
 8000c1e:	7bfa      	ldrb	r2, [r7, #15]
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d3ea      	bcc.n	8000bfc <generate_pattern+0x10>
    g_pattern_length = length;
 8000c26:	4a04      	ldr	r2, [pc, #16]	@ (8000c38 <generate_pattern+0x4c>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	7013      	strb	r3, [r2, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200000c4 	.word	0x200000c4
 8000c38:	200000e4 	.word	0x200000e4

08000c3c <show_led>:

static void show_led(uint8_t idx) { LED_SetPattern(1 << button_to_led_map[idx]); }
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	4a06      	ldr	r2, [pc, #24]	@ (8000c64 <show_led+0x28>)
 8000c4a:	5cd3      	ldrb	r3, [r2, r3]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	2301      	movs	r3, #1
 8000c50:	4093      	lsls	r3, r2
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	4618      	mov	r0, r3
 8000c56:	f000 fb1f 	bl	8001298 <LED_SetPattern>
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	08002ea8 	.word	0x08002ea8

08000c68 <clear_leds>:
static void clear_leds(void) { LED_SetPattern(0); }
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f000 fb13 	bl	8001298 <LED_SetPattern>
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <handle_level_intro>:

static void handle_level_intro(void) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
    Log_Print("Level %u. Lives: %u. Score: %lu\r\n", g_level, g_lives, g_score);
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <handle_level_intro+0x40>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <handle_level_intro+0x44>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	461a      	mov	r2, r3
 8000c88:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc0 <handle_level_intro+0x48>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	480d      	ldr	r0, [pc, #52]	@ (8000cc4 <handle_level_intro+0x4c>)
 8000c8e:	f000 fcc7 	bl	8001620 <Log_Print>
    OLED_ShowStatus();
 8000c92:	f7ff fe2f 	bl	80008f4 <OLED_ShowStatus>
    Delay_ms(800);
 8000c96:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000c9a:	f000 fc9f 	bl	80015dc <Delay_ms>
    generate_pattern(g_level);
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <handle_level_intro+0x40>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ffa2 	bl	8000bec <generate_pattern>
    g_pattern_index = 0;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	@ (8000cc8 <handle_level_intro+0x50>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
    set_game_state(GAME_STATE_PATTERN_DISPLAY);
 8000cae:	2003      	movs	r0, #3
 8000cb0:	f000 f98a 	bl	8000fc8 <set_game_state>
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200000b3 	.word	0x200000b3
 8000cbc:	200000b8 	.word	0x200000b8
 8000cc0:	200000b4 	.word	0x200000b4
 8000cc4:	08002e0c 	.word	0x08002e0c
 8000cc8:	200000e5 	.word	0x200000e5

08000ccc <handle_pattern_display>:

static void handle_pattern_display(void) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
    // เวลาเปิด/ปิด LED ตามความยาก
    uint16_t t_on  = diff_on_ms(g_difficulty);
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d4c <handle_pattern_display+0x80>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fb58 	bl	800038c <diff_on_ms>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	80fb      	strh	r3, [r7, #6]
    uint16_t t_off = diff_off_ms(g_difficulty);
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <handle_pattern_display+0x80>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fb69 	bl	80003bc <diff_off_ms>
 8000cea:	4603      	mov	r3, r0
 8000cec:	80bb      	strh	r3, [r7, #4]

    if (g_pattern_index < g_pattern_length) {
 8000cee:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <handle_pattern_display+0x84>)
 8000cf0:	781a      	ldrb	r2, [r3, #0]
 8000cf2:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <handle_pattern_display+0x88>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d218      	bcs.n	8000d2c <handle_pattern_display+0x60>
        show_led(g_pattern[g_pattern_index]);
 8000cfa:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <handle_pattern_display+0x84>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <handle_pattern_display+0x8c>)
 8000d02:	5c9b      	ldrb	r3, [r3, r2]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff99 	bl	8000c3c <show_led>
        Delay_ms(t_on);
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 fc65 	bl	80015dc <Delay_ms>
        clear_leds();
 8000d12:	f7ff ffa9 	bl	8000c68 <clear_leds>
        Delay_ms(t_off);
 8000d16:	88bb      	ldrh	r3, [r7, #4]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 fc5f 	bl	80015dc <Delay_ms>
        g_pattern_index++;
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <handle_pattern_display+0x84>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	3301      	adds	r3, #1
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <handle_pattern_display+0x84>)
 8000d28:	701a      	strb	r2, [r3, #0]
        g_pattern_index = 0;
        g_input_index = 0;
        g_input_correct = 1;
        set_game_state(GAME_STATE_INPUT_WAIT);
    }
}
 8000d2a:	e00b      	b.n	8000d44 <handle_pattern_display+0x78>
        g_pattern_index = 0;
 8000d2c:	4b08      	ldr	r3, [pc, #32]	@ (8000d50 <handle_pattern_display+0x84>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
        g_input_index = 0;
 8000d32:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <handle_pattern_display+0x90>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
        g_input_correct = 1;
 8000d38:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <handle_pattern_display+0x94>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]
        set_game_state(GAME_STATE_INPUT_WAIT);
 8000d3e:	2004      	movs	r0, #4
 8000d40:	f000 f942 	bl	8000fc8 <set_game_state>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200000b2 	.word	0x200000b2
 8000d50:	200000e5 	.word	0x200000e5
 8000d54:	200000e4 	.word	0x200000e4
 8000d58:	200000c4 	.word	0x200000c4
 8000d5c:	200000e6 	.word	0x200000e6
 8000d60:	20000004 	.word	0x20000004

08000d64 <handle_input_wait>:

static void handle_input_wait(void) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
    if (g_input_index < g_pattern_length) {
 8000d6a:	4b25      	ldr	r3, [pc, #148]	@ (8000e00 <handle_input_wait+0x9c>)
 8000d6c:	781a      	ldrb	r2, [r3, #0]
 8000d6e:	4b25      	ldr	r3, [pc, #148]	@ (8000e04 <handle_input_wait+0xa0>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d23c      	bcs.n	8000df0 <handle_input_wait+0x8c>
        for (int i = 0; i < 4; i++) {
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	e035      	b.n	8000de8 <handle_input_wait+0x84>
            if (g_buttons[i].current_state == 1 && g_buttons[i].previous_state == 0) {
 8000d7c:	4a22      	ldr	r2, [pc, #136]	@ (8000e08 <handle_input_wait+0xa4>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d12c      	bne.n	8000de2 <handle_input_wait+0x7e>
 8000d88:	4a1f      	ldr	r2, [pc, #124]	@ (8000e08 <handle_input_wait+0xa4>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	4413      	add	r3, r2
 8000d90:	785b      	ldrb	r3, [r3, #1]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d125      	bne.n	8000de2 <handle_input_wait+0x7e>
                show_led(i);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff4e 	bl	8000c3c <show_led>
                Delay_ms(diff_on_ms(g_difficulty) / 2); // feedback เร็วตาม DIFF
 8000da0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <handle_input_wait+0xa8>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff faf1 	bl	800038c <diff_on_ms>
 8000daa:	4603      	mov	r3, r0
 8000dac:	085b      	lsrs	r3, r3, #1
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 fc13 	bl	80015dc <Delay_ms>
                clear_leds();
 8000db6:	f7ff ff57 	bl	8000c68 <clear_leds>
                if (i != g_pattern[g_input_index]) {
 8000dba:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <handle_input_wait+0x9c>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b13      	ldr	r3, [pc, #76]	@ (8000e10 <handle_input_wait+0xac>)
 8000dc2:	5c9b      	ldrb	r3, [r3, r2]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d002      	beq.n	8000dd2 <handle_input_wait+0x6e>
                    g_input_correct = 0;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <handle_input_wait+0xb0>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	701a      	strb	r2, [r3, #0]
                }
                g_input_index++;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <handle_input_wait+0x9c>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4b09      	ldr	r3, [pc, #36]	@ (8000e00 <handle_input_wait+0x9c>)
 8000ddc:	701a      	strb	r2, [r3, #0]
                break;
 8000dde:	bf00      	nop
            }
        }
    } else {
        set_game_state(GAME_STATE_RESULT_PROCESS);
    }
}
 8000de0:	e009      	b.n	8000df6 <handle_input_wait+0x92>
        for (int i = 0; i < 4; i++) {
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3301      	adds	r3, #1
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	ddc6      	ble.n	8000d7c <handle_input_wait+0x18>
}
 8000dee:	e002      	b.n	8000df6 <handle_input_wait+0x92>
        set_game_state(GAME_STATE_RESULT_PROCESS);
 8000df0:	2005      	movs	r0, #5
 8000df2:	f000 f8e9 	bl	8000fc8 <set_game_state>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200000e6 	.word	0x200000e6
 8000e04:	200000e4 	.word	0x200000e4
 8000e08:	20000080 	.word	0x20000080
 8000e0c:	200000b2 	.word	0x200000b2
 8000e10:	200000c4 	.word	0x200000c4
 8000e14:	20000004 	.word	0x20000004

08000e18 <handle_result_process>:

static void handle_result_process(void) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
    if (g_input_correct) {
 8000e1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ea8 <handle_result_process+0x90>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d024      	beq.n	8000e6e <handle_result_process+0x56>
        g_score += 10 * g_level * g_difficulty;
 8000e24:	4b21      	ldr	r3, [pc, #132]	@ (8000eac <handle_result_process+0x94>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b21      	ldr	r3, [pc, #132]	@ (8000eb0 <handle_result_process+0x98>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	fb03 f202 	mul.w	r2, r3, r2
 8000e32:	4613      	mov	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb4 <handle_result_process+0x9c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4413      	add	r3, r2
 8000e42:	4a1c      	ldr	r2, [pc, #112]	@ (8000eb4 <handle_result_process+0x9c>)
 8000e44:	6013      	str	r3, [r2, #0]
        g_level++;
 8000e46:	4b19      	ldr	r3, [pc, #100]	@ (8000eac <handle_result_process+0x94>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b17      	ldr	r3, [pc, #92]	@ (8000eac <handle_result_process+0x94>)
 8000e50:	701a      	strb	r2, [r3, #0]
        OLED_ShowStatus();
 8000e52:	f7ff fd4f 	bl	80008f4 <OLED_ShowStatus>
        if (g_level > 9) set_game_state(GAME_STATE_VICTORY);
 8000e56:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <handle_result_process+0x94>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b09      	cmp	r3, #9
 8000e5c:	d903      	bls.n	8000e66 <handle_result_process+0x4e>
 8000e5e:	2006      	movs	r0, #6
 8000e60:	f000 f8b2 	bl	8000fc8 <set_game_state>
        if (g_lives > 0) g_lives--;
        OLED_ShowStatus();
        if (g_lives == 0) set_game_state(GAME_STATE_GAME_DEATH);
        else { Log_Print("Try again!\r\n"); set_game_state(GAME_STATE_LEVEL_INTRO); }
    }
}
 8000e64:	e01d      	b.n	8000ea2 <handle_result_process+0x8a>
        else             set_game_state(GAME_STATE_LEVEL_INTRO);
 8000e66:	2002      	movs	r0, #2
 8000e68:	f000 f8ae 	bl	8000fc8 <set_game_state>
}
 8000e6c:	e019      	b.n	8000ea2 <handle_result_process+0x8a>
        if (g_lives > 0) g_lives--;
 8000e6e:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <handle_result_process+0xa0>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d005      	beq.n	8000e82 <handle_result_process+0x6a>
 8000e76:	4b10      	ldr	r3, [pc, #64]	@ (8000eb8 <handle_result_process+0xa0>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <handle_result_process+0xa0>)
 8000e80:	701a      	strb	r2, [r3, #0]
        OLED_ShowStatus();
 8000e82:	f7ff fd37 	bl	80008f4 <OLED_ShowStatus>
        if (g_lives == 0) set_game_state(GAME_STATE_GAME_DEATH);
 8000e86:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb8 <handle_result_process+0xa0>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d103      	bne.n	8000e96 <handle_result_process+0x7e>
 8000e8e:	2007      	movs	r0, #7
 8000e90:	f000 f89a 	bl	8000fc8 <set_game_state>
}
 8000e94:	e005      	b.n	8000ea2 <handle_result_process+0x8a>
        else { Log_Print("Try again!\r\n"); set_game_state(GAME_STATE_LEVEL_INTRO); }
 8000e96:	4809      	ldr	r0, [pc, #36]	@ (8000ebc <handle_result_process+0xa4>)
 8000e98:	f000 fbc2 	bl	8001620 <Log_Print>
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	f000 f893 	bl	8000fc8 <set_game_state>
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000004 	.word	0x20000004
 8000eac:	200000b3 	.word	0x200000b3
 8000eb0:	200000b2 	.word	0x200000b2
 8000eb4:	200000b4 	.word	0x200000b4
 8000eb8:	200000b8 	.word	0x200000b8
 8000ebc:	08002e30 	.word	0x08002e30

08000ec0 <handle_victory>:

static void handle_victory(void) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
    Log_Print("Congratulations! Final Score: %lu\r\n", g_score);
 8000ec6:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <handle_victory+0x6c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4818      	ldr	r0, [pc, #96]	@ (8000f30 <handle_victory+0x70>)
 8000ece:	f000 fba7 	bl	8001620 <Log_Print>
    OLED_ShowStatus();
 8000ed2:	f7ff fd0f 	bl	80008f4 <OLED_ShowStatus>
    for (int i = 0; i < 4; i++) {
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	e01f      	b.n	8000f1c <handle_victory+0x5c>
        if (g_buttons[i].current_state == 1 && g_buttons[i].previous_state == 0) {
 8000edc:	4a15      	ldr	r2, [pc, #84]	@ (8000f34 <handle_victory+0x74>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d116      	bne.n	8000f16 <handle_victory+0x56>
 8000ee8:	4a12      	ldr	r2, [pc, #72]	@ (8000f34 <handle_victory+0x74>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	4413      	add	r3, r2
 8000ef0:	785b      	ldrb	r3, [r3, #1]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10f      	bne.n	8000f16 <handle_victory+0x56>
            g_level = 1; g_score = 0; g_lives = INITIAL_LIVES; g_difficulty_locked = 0;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	@ (8000f38 <handle_victory+0x78>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	701a      	strb	r2, [r3, #0]
 8000efc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <handle_victory+0x6c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <handle_victory+0x7c>)
 8000f04:	2204      	movs	r2, #4
 8000f06:	701a      	strb	r2, [r3, #0]
 8000f08:	4b0d      	ldr	r3, [pc, #52]	@ (8000f40 <handle_victory+0x80>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
            set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 8000f0e:	2001      	movs	r0, #1
 8000f10:	f000 f85a 	bl	8000fc8 <set_game_state>
            break;
 8000f14:	e006      	b.n	8000f24 <handle_victory+0x64>
    for (int i = 0; i < 4; i++) {
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	dddc      	ble.n	8000edc <handle_victory+0x1c>
        }
    }
}
 8000f22:	bf00      	nop
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200000b4 	.word	0x200000b4
 8000f30:	08002e40 	.word	0x08002e40
 8000f34:	20000080 	.word	0x20000080
 8000f38:	200000b3 	.word	0x200000b3
 8000f3c:	200000b8 	.word	0x200000b8
 8000f40:	200000c0 	.word	0x200000c0

08000f44 <handle_game_death>:

static void handle_game_death(void) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
    Log_Print("Game Over! Final Score: %lu\r\n", g_score);
 8000f4a:	4b19      	ldr	r3, [pc, #100]	@ (8000fb0 <handle_game_death+0x6c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4818      	ldr	r0, [pc, #96]	@ (8000fb4 <handle_game_death+0x70>)
 8000f52:	f000 fb65 	bl	8001620 <Log_Print>
    OLED_ShowStatus();
 8000f56:	f7ff fccd 	bl	80008f4 <OLED_ShowStatus>
    for (int i = 0; i < 4; i++) {
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	e01f      	b.n	8000fa0 <handle_game_death+0x5c>
        if (g_buttons[i].current_state == 1 && g_buttons[i].previous_state == 0) {
 8000f60:	4a15      	ldr	r2, [pc, #84]	@ (8000fb8 <handle_game_death+0x74>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d116      	bne.n	8000f9a <handle_game_death+0x56>
 8000f6c:	4a12      	ldr	r2, [pc, #72]	@ (8000fb8 <handle_game_death+0x74>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	4413      	add	r3, r2
 8000f74:	785b      	ldrb	r3, [r3, #1]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10f      	bne.n	8000f9a <handle_game_death+0x56>
            g_level = 1; g_score = 0; g_lives = INITIAL_LIVES; g_difficulty_locked = 0;
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <handle_game_death+0x78>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb0 <handle_game_death+0x6c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <handle_game_death+0x7c>)
 8000f88:	2204      	movs	r2, #4
 8000f8a:	701a      	strb	r2, [r3, #0]
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc4 <handle_game_death+0x80>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
            set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f000 f818 	bl	8000fc8 <set_game_state>
            break;
 8000f98:	e006      	b.n	8000fa8 <handle_game_death+0x64>
    for (int i = 0; i < 4; i++) {
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	dddc      	ble.n	8000f60 <handle_game_death+0x1c>
        }
    }
}
 8000fa6:	bf00      	nop
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200000b4 	.word	0x200000b4
 8000fb4:	08002e64 	.word	0x08002e64
 8000fb8:	20000080 	.word	0x20000080
 8000fbc:	200000b3 	.word	0x200000b3
 8000fc0:	200000b8 	.word	0x200000b8
 8000fc4:	200000c0 	.word	0x200000c0

08000fc8 <set_game_state>:

static void set_game_state(GameState_t new_state) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
    g_game_state = new_state;
 8000fd2:	4a06      	ldr	r2, [pc, #24]	@ (8000fec <set_game_state+0x24>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	7013      	strb	r3, [r2, #0]
    g_state_entry_time = GetTick();
 8000fd8:	f000 fb16 	bl	8001608 <GetTick>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <set_game_state+0x28>)
 8000fe0:	6013      	str	r3, [r2, #0]
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200000b1 	.word	0x200000b1
 8000ff0:	200000bc 	.word	0x200000bc

08000ff4 <handle_boot>:

static void handle_boot(void) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
    g_level = 1; g_score = 0; g_lives = INITIAL_LIVES;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <handle_boot+0x20>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
 8000ffe:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <handle_boot+0x24>)
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	4b05      	ldr	r3, [pc, #20]	@ (800101c <handle_boot+0x28>)
 8001006:	2204      	movs	r2, #4
 8001008:	701a      	strb	r2, [r3, #0]
    set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff ffdc 	bl	8000fc8 <set_game_state>
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200000b3 	.word	0x200000b3
 8001018:	200000b4 	.word	0x200000b4
 800101c:	200000b8 	.word	0x200000b8

08001020 <handle_difficulty_select>:

static void handle_difficulty_select(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
    uint32_t current_time = GetTick();
 8001026:	f000 faef 	bl	8001608 <GetTick>
 800102a:	60b8      	str	r0, [r7, #8]
    static uint32_t last_log_time = 0;
    static uint8_t last_difficulty = 0;

    if (!g_difficulty_locked) {
 800102c:	4b2d      	ldr	r3, [pc, #180]	@ (80010e4 <handle_difficulty_select+0xc4>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d14f      	bne.n	80010d4 <handle_difficulty_select+0xb4>
    	uint16_t pot_value = g_adc_values[0];
 8001034:	4b2c      	ldr	r3, [pc, #176]	@ (80010e8 <handle_difficulty_select+0xc8>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	80fb      	strh	r3, [r7, #6]
    	g_difficulty = (uint32_t)(pot_value * 5) / 1024 + 1;  // 1..5
 800103a:	88fa      	ldrh	r2, [r7, #6]
 800103c:	4613      	mov	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	0a9b      	lsrs	r3, r3, #10
 8001044:	b2db      	uxtb	r3, r3
 8001046:	3301      	adds	r3, #1
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b28      	ldr	r3, [pc, #160]	@ (80010ec <handle_difficulty_select+0xcc>)
 800104c:	701a      	strb	r2, [r3, #0]
    	SevenSeg_Display(g_difficulty);
 800104e:	4b27      	ldr	r3, [pc, #156]	@ (80010ec <handle_difficulty_select+0xcc>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f964 	bl	8001320 <SevenSeg_Display>

        if (g_difficulty != last_difficulty || (current_time - last_log_time) > 1000) {
 8001058:	4b24      	ldr	r3, [pc, #144]	@ (80010ec <handle_difficulty_select+0xcc>)
 800105a:	781a      	ldrb	r2, [r3, #0]
 800105c:	4b24      	ldr	r3, [pc, #144]	@ (80010f0 <handle_difficulty_select+0xd0>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	429a      	cmp	r2, r3
 8001062:	d106      	bne.n	8001072 <handle_difficulty_select+0x52>
 8001064:	4b23      	ldr	r3, [pc, #140]	@ (80010f4 <handle_difficulty_select+0xd4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001070:	d90f      	bls.n	8001092 <handle_difficulty_select+0x72>
            Log_Print("[DIFFICULTY] Pot:%u -> Diff:%u\r\n", pot_value, g_difficulty);
 8001072:	88fb      	ldrh	r3, [r7, #6]
 8001074:	4a1d      	ldr	r2, [pc, #116]	@ (80010ec <handle_difficulty_select+0xcc>)
 8001076:	7812      	ldrb	r2, [r2, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	481f      	ldr	r0, [pc, #124]	@ (80010f8 <handle_difficulty_select+0xd8>)
 800107c:	f000 fad0 	bl	8001620 <Log_Print>
            last_log_time = current_time; last_difficulty = g_difficulty;
 8001080:	4a1c      	ldr	r2, [pc, #112]	@ (80010f4 <handle_difficulty_select+0xd4>)
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <handle_difficulty_select+0xcc>)
 8001088:	781a      	ldrb	r2, [r3, #0]
 800108a:	4b19      	ldr	r3, [pc, #100]	@ (80010f0 <handle_difficulty_select+0xd0>)
 800108c:	701a      	strb	r2, [r3, #0]
            OLED_ShowStatus();
 800108e:	f7ff fc31 	bl	80008f4 <OLED_ShowStatus>
        }
        for (int i = 0; i < 4; i++) {
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	e019      	b.n	80010cc <handle_difficulty_select+0xac>
            if (g_buttons[i].current_state == 1 &&
 8001098:	4a18      	ldr	r2, [pc, #96]	@ (80010fc <handle_difficulty_select+0xdc>)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d110      	bne.n	80010c6 <handle_difficulty_select+0xa6>
               (current_time - g_buttons[i].last_change_time) >= LONG_PRESS_DURATION_MS) {
 80010a4:	4a15      	ldr	r2, [pc, #84]	@ (80010fc <handle_difficulty_select+0xdc>)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4413      	add	r3, r2
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	1ad3      	subs	r3, r2, r3
            if (g_buttons[i].current_state == 1 &&
 80010b2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80010b6:	d306      	bcc.n	80010c6 <handle_difficulty_select+0xa6>
                g_difficulty_locked = 1;
 80010b8:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <handle_difficulty_select+0xc4>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	701a      	strb	r2, [r3, #0]
                set_game_state(GAME_STATE_LEVEL_INTRO);
 80010be:	2002      	movs	r0, #2
 80010c0:	f7ff ff82 	bl	8000fc8 <set_game_state>
                return;
 80010c4:	e00b      	b.n	80010de <handle_difficulty_select+0xbe>
        for (int i = 0; i < 4; i++) {
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	3301      	adds	r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	dde2      	ble.n	8001098 <handle_difficulty_select+0x78>
 80010d2:	e004      	b.n	80010de <handle_difficulty_select+0xbe>
            }
        }
    } else {
        SevenSeg_Display(g_difficulty);
 80010d4:	4b05      	ldr	r3, [pc, #20]	@ (80010ec <handle_difficulty_select+0xcc>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f921 	bl	8001320 <SevenSeg_Display>
    }
}
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200000c0 	.word	0x200000c0
 80010e8:	200000a4 	.word	0x200000a4
 80010ec:	200000b2 	.word	0x200000b2
 80010f0:	200000e7 	.word	0x200000e7
 80010f4:	200000e8 	.word	0x200000e8
 80010f8:	08002e84 	.word	0x08002e84
 80010fc:	20000080 	.word	0x20000080

08001100 <SysTick_Handler>:

/* ============================================================================
 * INTERRUPT HANDLERS
 * ============================================================================ */
void SysTick_Handler(void) { g_tick_counter++; }
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
 8001104:	4b04      	ldr	r3, [pc, #16]	@ (8001118 <SysTick_Handler+0x18>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	4a03      	ldr	r2, [pc, #12]	@ (8001118 <SysTick_Handler+0x18>)
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	200000ac 	.word	0x200000ac

0800111c <ADC_IRQHandler>:

void ADC_IRQHandler(void) {
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
    if(ADC1->SR & ADC_SR_EOC) {
 8001120:	4b1e      	ldr	r3, [pc, #120]	@ (800119c <ADC_IRQHandler+0x80>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d031      	beq.n	8001190 <ADC_IRQHandler+0x74>
        g_adc_values[g_current_adc_channel] = ADC1->DR;
 800112c:	4b1b      	ldr	r3, [pc, #108]	@ (800119c <ADC_IRQHandler+0x80>)
 800112e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001130:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <ADC_IRQHandler+0x84>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	b289      	uxth	r1, r1
 8001138:	4b1a      	ldr	r3, [pc, #104]	@ (80011a4 <ADC_IRQHandler+0x88>)
 800113a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        g_current_adc_channel = (g_current_adc_channel + 1) % 3;
 800113e:	4b18      	ldr	r3, [pc, #96]	@ (80011a0 <ADC_IRQHandler+0x84>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <ADC_IRQHandler+0x8c>)
 8001146:	fb83 3102 	smull	r3, r1, r3, r2
 800114a:	17d3      	asrs	r3, r2, #31
 800114c:	1ac9      	subs	r1, r1, r3
 800114e:	460b      	mov	r3, r1
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	440b      	add	r3, r1
 8001154:	1ad1      	subs	r1, r2, r3
 8001156:	b2ca      	uxtb	r2, r1
 8001158:	4b11      	ldr	r3, [pc, #68]	@ (80011a0 <ADC_IRQHandler+0x84>)
 800115a:	701a      	strb	r2, [r3, #0]
        ADC1->SQR3 = (ADC1->SQR3 & ~ADC_SQR3_SQ1) |
 800115c:	4b0f      	ldr	r3, [pc, #60]	@ (800119c <ADC_IRQHandler+0x80>)
 800115e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001160:	f023 021f 	bic.w	r2, r3, #31
                     (g_current_adc_channel == 0 ? POT_PIN : (g_current_adc_channel == 1 ? TEMP_PIN : LIGHT_PIN));
 8001164:	4b0e      	ldr	r3, [pc, #56]	@ (80011a0 <ADC_IRQHandler+0x84>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d007      	beq.n	800117c <ADC_IRQHandler+0x60>
 800116c:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <ADC_IRQHandler+0x84>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d101      	bne.n	8001178 <ADC_IRQHandler+0x5c>
 8001174:	2301      	movs	r3, #1
 8001176:	e002      	b.n	800117e <ADC_IRQHandler+0x62>
 8001178:	2300      	movs	r3, #0
 800117a:	e000      	b.n	800117e <ADC_IRQHandler+0x62>
 800117c:	2304      	movs	r3, #4
        ADC1->SQR3 = (ADC1->SQR3 & ~ADC_SQR3_SQ1) |
 800117e:	4907      	ldr	r1, [pc, #28]	@ (800119c <ADC_IRQHandler+0x80>)
 8001180:	4313      	orrs	r3, r2
 8001182:	634b      	str	r3, [r1, #52]	@ 0x34
        ADC1->CR2 |= ADC_CR2_SWSTART;
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <ADC_IRQHandler+0x80>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	4a04      	ldr	r2, [pc, #16]	@ (800119c <ADC_IRQHandler+0x80>)
 800118a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800118e:	6093      	str	r3, [r2, #8]
    }
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40012000 	.word	0x40012000
 80011a0:	200000b0 	.word	0x200000b0
 80011a4:	200000a4 	.word	0x200000a4
 80011a8:	55555556 	.word	0x55555556

080011ac <Monitor_Buttons>:

/* ============================================================================
 * HARDWARE MONITORING
 * ============================================================================ */
void Monitor_Buttons(void) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
    uint32_t current_time = GetTick();
 80011b2:	f000 fa29 	bl	8001608 <GetTick>
 80011b6:	60b8      	str	r0, [r7, #8]
    uint8_t readings[4] = {
        !(BTN0_PORT->IDR & (1 << BTN0_PIN)),
 80011b8:	4b30      	ldr	r3, [pc, #192]	@ (800127c <Monitor_Buttons+0xd0>)
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	bf0c      	ite	eq
 80011c4:	2301      	moveq	r3, #1
 80011c6:	2300      	movne	r3, #0
 80011c8:	b2db      	uxtb	r3, r3
    uint8_t readings[4] = {
 80011ca:	713b      	strb	r3, [r7, #4]
        !(BTN1_PORT->IDR & (1 << BTN1_PIN)),
 80011cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001280 <Monitor_Buttons+0xd4>)
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	bf0c      	ite	eq
 80011d8:	2301      	moveq	r3, #1
 80011da:	2300      	movne	r3, #0
 80011dc:	b2db      	uxtb	r3, r3
    uint8_t readings[4] = {
 80011de:	717b      	strb	r3, [r7, #5]
        !(BTN2_PORT->IDR & (1 << BTN2_PIN)),
 80011e0:	4b27      	ldr	r3, [pc, #156]	@ (8001280 <Monitor_Buttons+0xd4>)
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	f003 0320 	and.w	r3, r3, #32
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	bf0c      	ite	eq
 80011ec:	2301      	moveq	r3, #1
 80011ee:	2300      	movne	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
    uint8_t readings[4] = {
 80011f2:	71bb      	strb	r3, [r7, #6]
        !(BTN3_PORT->IDR & (1 << BTN3_PIN))
 80011f4:	4b22      	ldr	r3, [pc, #136]	@ (8001280 <Monitor_Buttons+0xd4>)
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	f003 0310 	and.w	r3, r3, #16
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	bf0c      	ite	eq
 8001200:	2301      	moveq	r3, #1
 8001202:	2300      	movne	r3, #0
 8001204:	b2db      	uxtb	r3, r3
    uint8_t readings[4] = {
 8001206:	71fb      	strb	r3, [r7, #7]
    };
    for(int i = 0; i < 4; i++) {
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	e02e      	b.n	800126c <Monitor_Buttons+0xc0>
        g_buttons[i].previous_state = g_buttons[i].current_state;
 800120e:	4a1d      	ldr	r2, [pc, #116]	@ (8001284 <Monitor_Buttons+0xd8>)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
 8001216:	4a1b      	ldr	r2, [pc, #108]	@ (8001284 <Monitor_Buttons+0xd8>)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4413      	add	r3, r2
 800121e:	460a      	mov	r2, r1
 8001220:	705a      	strb	r2, [r3, #1]
        g_buttons[i].current_state = readings[i];
 8001222:	1d3a      	adds	r2, r7, #4
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4413      	add	r3, r2
 8001228:	7819      	ldrb	r1, [r3, #0]
 800122a:	4a16      	ldr	r2, [pc, #88]	@ (8001284 <Monitor_Buttons+0xd8>)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
        if(g_buttons[i].current_state != g_buttons[i].previous_state) {
 8001232:	4a14      	ldr	r2, [pc, #80]	@ (8001284 <Monitor_Buttons+0xd8>)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800123a:	4912      	ldr	r1, [pc, #72]	@ (8001284 <Monitor_Buttons+0xd8>)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	440b      	add	r3, r1
 8001242:	785b      	ldrb	r3, [r3, #1]
 8001244:	429a      	cmp	r2, r3
 8001246:	d00e      	beq.n	8001266 <Monitor_Buttons+0xba>
            if((current_time - g_buttons[i].last_change_time) >= BUTTON_DEBOUNCE_MS) {
 8001248:	4a0e      	ldr	r2, [pc, #56]	@ (8001284 <Monitor_Buttons+0xd8>)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	4413      	add	r3, r2
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b31      	cmp	r3, #49	@ 0x31
 8001258:	d905      	bls.n	8001266 <Monitor_Buttons+0xba>
                g_buttons[i].last_change_time = current_time;
 800125a:	4a0a      	ldr	r2, [pc, #40]	@ (8001284 <Monitor_Buttons+0xd8>)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4413      	add	r3, r2
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	605a      	str	r2, [r3, #4]
    for(int i = 0; i < 4; i++) {
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	3301      	adds	r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2b03      	cmp	r3, #3
 8001270:	ddcd      	ble.n	800120e <Monitor_Buttons+0x62>
            }
        }
    }
}
 8001272:	bf00      	nop
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40020000 	.word	0x40020000
 8001280:	40020400 	.word	0x40020400
 8001284:	20000080 	.word	0x20000080

08001288 <Monitor_ADC>:

void Monitor_ADC(void) { /* ADC via IRQ */ }
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <LED_SetPattern>:

/* ============================================================================
 * HARDWARE CONTROL
 * ============================================================================ */
void LED_SetPattern(uint8_t pattern) {
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
    (pattern & 0x01) ? (LED1_PORT->BSRR = (1 << LED1_PIN)) : (LED1_PORT->BSRR = (1 << (LED1_PIN + 16)));
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <LED_SetPattern+0x1c>
 80012ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001318 <LED_SetPattern+0x80>)
 80012ae:	2220      	movs	r2, #32
 80012b0:	619a      	str	r2, [r3, #24]
 80012b2:	e003      	b.n	80012bc <LED_SetPattern+0x24>
 80012b4:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <LED_SetPattern+0x80>)
 80012b6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80012ba:	619a      	str	r2, [r3, #24]
    (pattern & 0x02) ? (LED2_PORT->BSRR = (1 << LED2_PIN)) : (LED2_PORT->BSRR = (1 << (LED2_PIN + 16)));
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <LED_SetPattern+0x36>
 80012c6:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <LED_SetPattern+0x80>)
 80012c8:	2240      	movs	r2, #64	@ 0x40
 80012ca:	619a      	str	r2, [r3, #24]
 80012cc:	e003      	b.n	80012d6 <LED_SetPattern+0x3e>
 80012ce:	4b12      	ldr	r3, [pc, #72]	@ (8001318 <LED_SetPattern+0x80>)
 80012d0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80012d4:	619a      	str	r2, [r3, #24]
    (pattern & 0x04) ? (LED3_PORT->BSRR = (1 << LED3_PIN)) : (LED3_PORT->BSRR = (1 << (LED3_PIN + 16)));
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <LED_SetPattern+0x50>
 80012e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001318 <LED_SetPattern+0x80>)
 80012e2:	2280      	movs	r2, #128	@ 0x80
 80012e4:	619a      	str	r2, [r3, #24]
 80012e6:	e003      	b.n	80012f0 <LED_SetPattern+0x58>
 80012e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <LED_SetPattern+0x80>)
 80012ea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80012ee:	619a      	str	r2, [r3, #24]
    (pattern & 0x08) ? (LED4_PORT->BSRR = (1 << LED4_PIN)) : (LED4_PORT->BSRR = (1 << (LED4_PIN + 16)));
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <LED_SetPattern+0x6a>
 80012fa:	4b08      	ldr	r3, [pc, #32]	@ (800131c <LED_SetPattern+0x84>)
 80012fc:	2240      	movs	r2, #64	@ 0x40
 80012fe:	619a      	str	r2, [r3, #24]
}
 8001300:	e003      	b.n	800130a <LED_SetPattern+0x72>
    (pattern & 0x08) ? (LED4_PORT->BSRR = (1 << LED4_PIN)) : (LED4_PORT->BSRR = (1 << (LED4_PIN + 16)));
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <LED_SetPattern+0x84>)
 8001304:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001308:	619a      	str	r2, [r3, #24]
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40020000 	.word	0x40020000
 800131c:	40020400 	.word	0x40020400

08001320 <SevenSeg_Display>:

void SevenSeg_Display(uint8_t digit) {
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
    if(digit > 9) return;
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	2b09      	cmp	r3, #9
 800132e:	d837      	bhi.n	80013a0 <SevenSeg_Display+0x80>
    (digit & 0x01) ? (BCD_2_0_PORT->BSRR = (1 << BCD_2_0_PIN)) : (BCD_2_0_PORT->BSRR = (1 << (BCD_2_0_PIN + 16)));
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <SevenSeg_Display+0x22>
 800133a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ac <SevenSeg_Display+0x8c>)
 800133c:	2280      	movs	r2, #128	@ 0x80
 800133e:	619a      	str	r2, [r3, #24]
 8001340:	e003      	b.n	800134a <SevenSeg_Display+0x2a>
 8001342:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <SevenSeg_Display+0x8c>)
 8001344:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001348:	619a      	str	r2, [r3, #24]
    (digit & 0x02) ? (BCD_2_1_PORT->BSRR = (1 << BCD_2_1_PIN)) : (BCD_2_1_PORT->BSRR = (1 << (BCD_2_1_PIN + 16)));
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d004      	beq.n	800135e <SevenSeg_Display+0x3e>
 8001354:	4b16      	ldr	r3, [pc, #88]	@ (80013b0 <SevenSeg_Display+0x90>)
 8001356:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800135a:	619a      	str	r2, [r3, #24]
 800135c:	e003      	b.n	8001366 <SevenSeg_Display+0x46>
 800135e:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <SevenSeg_Display+0x90>)
 8001360:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001364:	619a      	str	r2, [r3, #24]
    (digit & 0x04) ? (BCD_2_2_PORT->BSRR = (1 << BCD_2_2_PIN)) : (BCD_2_2_PORT->BSRR = (1 << (BCD_2_2_PIN + 16)));
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	2b00      	cmp	r3, #0
 800136e:	d004      	beq.n	800137a <SevenSeg_Display+0x5a>
 8001370:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <SevenSeg_Display+0x94>)
 8001372:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001376:	619a      	str	r2, [r3, #24]
 8001378:	e003      	b.n	8001382 <SevenSeg_Display+0x62>
 800137a:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <SevenSeg_Display+0x94>)
 800137c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001380:	619a      	str	r2, [r3, #24]
    (digit & 0x08) ? (BCD_2_3_PORT->BSRR = (1 << BCD_2_3_PIN)) : (BCD_2_3_PORT->BSRR = (1 << (BCD_2_3_PIN + 16)));
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f003 0308 	and.w	r3, r3, #8
 8001388:	2b00      	cmp	r3, #0
 800138a:	d004      	beq.n	8001396 <SevenSeg_Display+0x76>
 800138c:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <SevenSeg_Display+0x90>)
 800138e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001392:	619a      	str	r2, [r3, #24]
 8001394:	e005      	b.n	80013a2 <SevenSeg_Display+0x82>
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <SevenSeg_Display+0x90>)
 8001398:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800139c:	619a      	str	r2, [r3, #24]
 800139e:	e000      	b.n	80013a2 <SevenSeg_Display+0x82>
    if(digit > 9) return;
 80013a0:	bf00      	nop
}
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	40020800 	.word	0x40020800
 80013b0:	40020000 	.word	0x40020000
 80013b4:	40020400 	.word	0x40020400

080013b8 <SystemClock_Config>:

/* ============================================================================
 * SYSTEM INITIALIZATION
 * ============================================================================ */
void SystemClock_Config(void) {
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
    RCC->CR |= RCC_CR_HSION; while(!(RCC->CR & RCC_CR_HSIRDY));
 80013bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001434 <SystemClock_Config+0x7c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001434 <SystemClock_Config+0x7c>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	bf00      	nop
 80013ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001434 <SystemClock_Config+0x7c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f9      	beq.n	80013ca <SystemClock_Config+0x12>
    RCC->PLLCFGR = (RCC_PLLCFGR_PLLSRC_HSI) | (16 << RCC_PLLCFGR_PLLM_Pos) | (168 << RCC_PLLCFGR_PLLN_Pos) | (0 << RCC_PLLCFGR_PLLP_Pos);
 80013d6:	4b17      	ldr	r3, [pc, #92]	@ (8001434 <SystemClock_Config+0x7c>)
 80013d8:	f642 2210 	movw	r2, #10768	@ 0x2a10
 80013dc:	605a      	str	r2, [r3, #4]
    RCC->CR |= RCC_CR_PLLON; while(!(RCC->CR & RCC_CR_PLLRDY));
 80013de:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <SystemClock_Config+0x7c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a14      	ldr	r2, [pc, #80]	@ (8001434 <SystemClock_Config+0x7c>)
 80013e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	bf00      	nop
 80013ec:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <SystemClock_Config+0x7c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0f9      	beq.n	80013ec <SystemClock_Config+0x34>
    FLASH->ACR = FLASH_ACR_LATENCY_2WS;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <SystemClock_Config+0x80>)
 80013fa:	2202      	movs	r2, #2
 80013fc:	601a      	str	r2, [r3, #0]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV2 | RCC_CFGR_PPRE2_DIV1;
 80013fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001434 <SystemClock_Config+0x7c>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	4a0c      	ldr	r2, [pc, #48]	@ (8001434 <SystemClock_Config+0x7c>)
 8001404:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001408:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL; while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 800140a:	4b0a      	ldr	r3, [pc, #40]	@ (8001434 <SystemClock_Config+0x7c>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	4a09      	ldr	r2, [pc, #36]	@ (8001434 <SystemClock_Config+0x7c>)
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	6093      	str	r3, [r2, #8]
 8001416:	bf00      	nop
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <SystemClock_Config+0x7c>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 030c 	and.w	r3, r3, #12
 8001420:	2b08      	cmp	r3, #8
 8001422:	d1f9      	bne.n	8001418 <SystemClock_Config+0x60>
    SystemCoreClock = 84000000;
 8001424:	4b05      	ldr	r3, [pc, #20]	@ (800143c <SystemClock_Config+0x84>)
 8001426:	4a06      	ldr	r2, [pc, #24]	@ (8001440 <SystemClock_Config+0x88>)
 8001428:	601a      	str	r2, [r3, #0]
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	40023800 	.word	0x40023800
 8001438:	40023c00 	.word	0x40023c00
 800143c:	20000000 	.word	0x20000000
 8001440:	0501bd00 	.word	0x0501bd00

08001444 <GPIO_Init>:

void GPIO_Init(void) {
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;
 8001448:	4b27      	ldr	r3, [pc, #156]	@ (80014e8 <GPIO_Init+0xa4>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144c:	4a26      	ldr	r2, [pc, #152]	@ (80014e8 <GPIO_Init+0xa4>)
 800144e:	f043 0307 	orr.w	r3, r3, #7
 8001452:	6313      	str	r3, [r2, #48]	@ 0x30
    // LEDs
    GPIOA->MODER |= (1 << (LED1_PIN*2)) | (1 << (LED2_PIN*2)) | (1 << (LED3_PIN*2));
 8001454:	4b25      	ldr	r3, [pc, #148]	@ (80014ec <GPIO_Init+0xa8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a24      	ldr	r2, [pc, #144]	@ (80014ec <GPIO_Init+0xa8>)
 800145a:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 800145e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (1 << (LED4_PIN*2));
 8001460:	4b23      	ldr	r3, [pc, #140]	@ (80014f0 <GPIO_Init+0xac>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a22      	ldr	r2, [pc, #136]	@ (80014f0 <GPIO_Init+0xac>)
 8001466:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800146a:	6013      	str	r3, [r2, #0]
    // Buttons (pull-up)
    GPIOA->PUPDR |= (1 << (BTN0_PIN*2));
 800146c:	4b1f      	ldr	r3, [pc, #124]	@ (80014ec <GPIO_Init+0xa8>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	4a1e      	ldr	r2, [pc, #120]	@ (80014ec <GPIO_Init+0xa8>)
 8001472:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001476:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (1 << (BTN1_PIN*2)) | (1 << (BTN2_PIN*2)) | (1 << (BTN3_PIN*2));
 8001478:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <GPIO_Init+0xac>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	4a1c      	ldr	r2, [pc, #112]	@ (80014f0 <GPIO_Init+0xac>)
 800147e:	f443 63a8 	orr.w	r3, r3, #1344	@ 0x540
 8001482:	60d3      	str	r3, [r2, #12]
    // ADC
    GPIOA->MODER |= (3 << (POT_PIN*2)) | (3 << (TEMP_PIN*2)) | (3 << (LIGHT_PIN*2));
 8001484:	4b19      	ldr	r3, [pc, #100]	@ (80014ec <GPIO_Init+0xa8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a18      	ldr	r2, [pc, #96]	@ (80014ec <GPIO_Init+0xa8>)
 800148a:	f443 7343 	orr.w	r3, r3, #780	@ 0x30c
 800148e:	f043 0303 	orr.w	r3, r3, #3
 8001492:	6013      	str	r3, [r2, #0]
    // UART2: PA2,PA3 AF7
    GPIOA->MODER |= (2 << (2*2)) | (2 << (3*2));
 8001494:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <GPIO_Init+0xa8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a14      	ldr	r2, [pc, #80]	@ (80014ec <GPIO_Init+0xa8>)
 800149a:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800149e:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (7 << (2*4)) | (7 << (3*4));
 80014a0:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <GPIO_Init+0xa8>)
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	4a11      	ldr	r2, [pc, #68]	@ (80014ec <GPIO_Init+0xa8>)
 80014a6:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80014aa:	6213      	str	r3, [r2, #32]
    // 7-Segment (BCD inputs)
    GPIOC->MODER = (GPIOC->MODER & ~(3U << (BCD_2_0_PIN*2))) | (1U << (BCD_2_0_PIN*2));   // PC7
 80014ac:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <GPIO_Init+0xb0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014b4:	4a0f      	ldr	r2, [pc, #60]	@ (80014f4 <GPIO_Init+0xb0>)
 80014b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ba:	6013      	str	r3, [r2, #0]
    GPIOA->MODER = (GPIOA->MODER & ~((3U << (BCD_2_1_PIN*2)) | (3U << (BCD_2_3_PIN*2))))
 80014bc:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <GPIO_Init+0xa8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80014c4:	4a09      	ldr	r2, [pc, #36]	@ (80014ec <GPIO_Init+0xa8>)
                                 |  (1U << (BCD_2_1_PIN*2)) | (1U << (BCD_2_3_PIN*2));     // PA8, PA9
 80014c6:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
    GPIOA->MODER = (GPIOA->MODER & ~((3U << (BCD_2_1_PIN*2)) | (3U << (BCD_2_3_PIN*2))))
 80014ca:	6013      	str	r3, [r2, #0]
    GPIOB->MODER = (GPIOB->MODER & ~(3U << (BCD_2_2_PIN*2))) | (1U << (BCD_2_2_PIN*2));   // PB10
 80014cc:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <GPIO_Init+0xac>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80014d4:	4a06      	ldr	r2, [pc, #24]	@ (80014f0 <GPIO_Init+0xac>)
 80014d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80014da:	6013      	str	r3, [r2, #0]
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020000 	.word	0x40020000
 80014f0:	40020400 	.word	0x40020400
 80014f4:	40020800 	.word	0x40020800

080014f8 <ADC_Init>:

void ADC_Init(void) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <ADC_Init+0x50>)
 80014fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001500:	4a11      	ldr	r2, [pc, #68]	@ (8001548 <ADC_Init+0x50>)
 8001502:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001506:	6453      	str	r3, [r2, #68]	@ 0x44
    ADC1->CR2 |= ADC_CR2_ADON;
 8001508:	4b10      	ldr	r3, [pc, #64]	@ (800154c <ADC_Init+0x54>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	4a0f      	ldr	r2, [pc, #60]	@ (800154c <ADC_Init+0x54>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6093      	str	r3, [r2, #8]
    ADC1->CR1 |= ADC_CR1_EOCIE;
 8001514:	4b0d      	ldr	r3, [pc, #52]	@ (800154c <ADC_Init+0x54>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	4a0c      	ldr	r2, [pc, #48]	@ (800154c <ADC_Init+0x54>)
 800151a:	f043 0320 	orr.w	r3, r3, #32
 800151e:	6053      	str	r3, [r2, #4]
    ADC1->CR1 |= (1 << ADC_CR1_RES_Pos); // 10-bit
 8001520:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <ADC_Init+0x54>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	4a09      	ldr	r2, [pc, #36]	@ (800154c <ADC_Init+0x54>)
 8001526:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800152a:	6053      	str	r3, [r2, #4]
    ADC1->SMPR2 |= (7 << ADC_SMPR2_SMP0_Pos) | (7 << ADC_SMPR2_SMP1_Pos) | (7 << ADC_SMPR2_SMP4_Pos);
 800152c:	4b07      	ldr	r3, [pc, #28]	@ (800154c <ADC_Init+0x54>)
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	4a06      	ldr	r2, [pc, #24]	@ (800154c <ADC_Init+0x54>)
 8001532:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8001536:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 800153a:	6113      	str	r3, [r2, #16]
    Delay_ms(2);
 800153c:	2002      	movs	r0, #2
 800153e:	f000 f84d 	bl	80015dc <Delay_ms>
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800
 800154c:	40012000 	.word	0x40012000

08001550 <USART2_Init>:

void USART2_Init(void) {
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001554:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <USART2_Init+0x34>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001558:	4a0a      	ldr	r2, [pc, #40]	@ (8001584 <USART2_Init+0x34>)
 800155a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800155e:	6413      	str	r3, [r2, #64]	@ 0x40
    USART2->BRR = 0x16C; // 115200 @ 42MHz
 8001560:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <USART2_Init+0x38>)
 8001562:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8001566:	609a      	str	r2, [r3, #8]
    USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8001568:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <USART2_Init+0x38>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	4a06      	ldr	r2, [pc, #24]	@ (8001588 <USART2_Init+0x38>)
 800156e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001572:	f043 030c 	orr.w	r3, r3, #12
 8001576:	60d3      	str	r3, [r2, #12]
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800
 8001588:	40004400 	.word	0x40004400

0800158c <NVIC_Init>:

void NVIC_Init(void) {
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(ADC_IRQn);
 8001590:	2012      	movs	r0, #18
 8001592:	f7fe fe75 	bl	8000280 <__NVIC_EnableIRQ>
    NVIC_SetPriority(ADC_IRQn, 1);
 8001596:	2101      	movs	r1, #1
 8001598:	2012      	movs	r0, #18
 800159a:	f7fe fe8f 	bl	80002bc <__NVIC_SetPriority>
    NVIC_SetPriority(SysTick_IRQn, 0);
 800159e:	2100      	movs	r1, #0
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
 80015a4:	f7fe fe8a 	bl	80002bc <__NVIC_SetPriority>
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}

080015ac <ADC_StartConversion>:

void ADC_StartConversion(void) {
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
    ADC1->SQR3 = (ADC1->SQR3 & ~ADC_SQR3_SQ1) | POT_PIN;
 80015b0:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <ADC_StartConversion+0x2c>)
 80015b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015b4:	f023 031f 	bic.w	r3, r3, #31
 80015b8:	4a07      	ldr	r2, [pc, #28]	@ (80015d8 <ADC_StartConversion+0x2c>)
 80015ba:	f043 0304 	orr.w	r3, r3, #4
 80015be:	6353      	str	r3, [r2, #52]	@ 0x34
    ADC1->CR2 |= ADC_CR2_SWSTART;
 80015c0:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <ADC_StartConversion+0x2c>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	4a04      	ldr	r2, [pc, #16]	@ (80015d8 <ADC_StartConversion+0x2c>)
 80015c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80015ca:	6093      	str	r3, [r2, #8]
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40012000 	.word	0x40012000

080015dc <Delay_ms>:

/* ============================================================================
 * UTILITY
 * ============================================================================ */
void Delay_ms(uint32_t ms) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
    uint32_t start = GetTick();
 80015e4:	f000 f810 	bl	8001608 <GetTick>
 80015e8:	60f8      	str	r0, [r7, #12]
    while((GetTick() - start) < ms);
 80015ea:	bf00      	nop
 80015ec:	f000 f80c 	bl	8001608 <GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d8f7      	bhi.n	80015ec <Delay_ms+0x10>
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <GetTick>:
uint32_t GetTick(void) { return g_tick_counter; }
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
 800160c:	4b03      	ldr	r3, [pc, #12]	@ (800161c <GetTick+0x14>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	200000ac 	.word	0x200000ac

08001620 <Log_Print>:

void Log_Print(const char* format, ...) {
 8001620:	b40f      	push	{r0, r1, r2, r3}
 8001622:	b580      	push	{r7, lr}
 8001624:	b0c2      	sub	sp, #264	@ 0x108
 8001626:	af00      	add	r7, sp, #0
    if(!g_system_initialized) return;
 8001628:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <Log_Print+0x7c>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d02d      	beq.n	800168c <Log_Print+0x6c>
    char buffer[256];
    va_list args; va_start(args, format);
 8001630:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8001634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001638:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800163c:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format,args);
 800163e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001642:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001646:	1d38      	adds	r0, r7, #4
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800164e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001652:	f000 fab7 	bl	8001bc4 <vsniprintf>
    va_end(args);
    for(char* p = buffer; *p; p++) { while(!(USART2->SR & USART_SR_TXE)); USART2->DR = *p; }
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800165c:	e010      	b.n	8001680 <Log_Print+0x60>
 800165e:	bf00      	nop
 8001660:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <Log_Print+0x80>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f9      	beq.n	8001660 <Log_Print+0x40>
 800166c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001670:	781a      	ldrb	r2, [r3, #0]
 8001672:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <Log_Print+0x80>)
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800167a:	3301      	adds	r3, #1
 800167c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1e9      	bne.n	800165e <Log_Print+0x3e>
 800168a:	e000      	b.n	800168e <Log_Print+0x6e>
    if(!g_system_initialized) return;
 800168c:	bf00      	nop
}
 800168e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001692:	46bd      	mov	sp, r7
 8001694:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001698:	b004      	add	sp, #16
 800169a:	4770      	bx	lr
 800169c:	200000a0 	.word	0x200000a0
 80016a0:	40004400 	.word	0x40004400

080016a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return 1;
 80016a8:	2301      	movs	r3, #1
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <_kill>:

int _kill(int pid, int sig)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016be:	f000 fadd 	bl	8001c7c <__errno>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2216      	movs	r2, #22
 80016c6:	601a      	str	r2, [r3, #0]
  return -1;
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <_exit>:

void _exit (int status)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016dc:	f04f 31ff 	mov.w	r1, #4294967295
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ffe7 	bl	80016b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016e6:	bf00      	nop
 80016e8:	e7fd      	b.n	80016e6 <_exit+0x12>

080016ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	e00a      	b.n	8001712 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016fc:	f3af 8000 	nop.w
 8001700:	4601      	mov	r1, r0
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	60ba      	str	r2, [r7, #8]
 8001708:	b2ca      	uxtb	r2, r1
 800170a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	3301      	adds	r3, #1
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	429a      	cmp	r2, r3
 8001718:	dbf0      	blt.n	80016fc <_read+0x12>
  }

  return len;
 800171a:	687b      	ldr	r3, [r7, #4]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	e009      	b.n	800174a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	1c5a      	adds	r2, r3, #1
 800173a:	60ba      	str	r2, [r7, #8]
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3301      	adds	r3, #1
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	429a      	cmp	r2, r3
 8001750:	dbf1      	blt.n	8001736 <_write+0x12>
  }
  return len;
 8001752:	687b      	ldr	r3, [r7, #4]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <_close>:

int _close(int file)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001784:	605a      	str	r2, [r3, #4]
  return 0;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <_isatty>:

int _isatty(int file)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800179c:	2301      	movs	r3, #1
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b085      	sub	sp, #20
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	60f8      	str	r0, [r7, #12]
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017cc:	4a14      	ldr	r2, [pc, #80]	@ (8001820 <_sbrk+0x5c>)
 80017ce:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <_sbrk+0x60>)
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d8:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e0:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <_sbrk+0x64>)
 80017e2:	4a12      	ldr	r2, [pc, #72]	@ (800182c <_sbrk+0x68>)
 80017e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e6:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d207      	bcs.n	8001804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f4:	f000 fa42 	bl	8001c7c <__errno>
 80017f8:	4603      	mov	r3, r0
 80017fa:	220c      	movs	r2, #12
 80017fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001802:	e009      	b.n	8001818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001804:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <_sbrk+0x64>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180a:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	4a05      	ldr	r2, [pc, #20]	@ (8001828 <_sbrk+0x64>)
 8001814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001816:	68fb      	ldr	r3, [r7, #12]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20020000 	.word	0x20020000
 8001824:	00000400 	.word	0x00000400
 8001828:	200000ec 	.word	0x200000ec
 800182c:	20000240 	.word	0x20000240

08001830 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001830:	480d      	ldr	r0, [pc, #52]	@ (8001868 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001832:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001834:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001838:	480c      	ldr	r0, [pc, #48]	@ (800186c <LoopForever+0x6>)
  ldr r1, =_edata
 800183a:	490d      	ldr	r1, [pc, #52]	@ (8001870 <LoopForever+0xa>)
  ldr r2, =_sidata
 800183c:	4a0d      	ldr	r2, [pc, #52]	@ (8001874 <LoopForever+0xe>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001840:	e002      	b.n	8001848 <LoopCopyDataInit>

08001842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001846:	3304      	adds	r3, #4

08001848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800184c:	d3f9      	bcc.n	8001842 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184e:	4a0a      	ldr	r2, [pc, #40]	@ (8001878 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001850:	4c0a      	ldr	r4, [pc, #40]	@ (800187c <LoopForever+0x16>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001854:	e001      	b.n	800185a <LoopFillZerobss>

08001856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001858:	3204      	adds	r2, #4

0800185a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800185c:	d3fb      	bcc.n	8001856 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800185e:	f000 fa13 	bl	8001c88 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8001862:	f7ff f8d5 	bl	8000a10 <main>

08001866 <LoopForever>:

LoopForever:
  b LoopForever
 8001866:	e7fe      	b.n	8001866 <LoopForever>
  ldr   r0, =_estack
 8001868:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800186c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001870:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001874:	08003098 	.word	0x08003098
  ldr r2, =_sbss
 8001878:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800187c:	2000023c 	.word	0x2000023c

08001880 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001880:	e7fe      	b.n	8001880 <BusFault_Handler>
	...

08001884 <srand>:
 8001884:	b538      	push	{r3, r4, r5, lr}
 8001886:	4b10      	ldr	r3, [pc, #64]	@ (80018c8 <srand+0x44>)
 8001888:	681d      	ldr	r5, [r3, #0]
 800188a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800188c:	4604      	mov	r4, r0
 800188e:	b9b3      	cbnz	r3, 80018be <srand+0x3a>
 8001890:	2018      	movs	r0, #24
 8001892:	f000 fa89 	bl	8001da8 <malloc>
 8001896:	4602      	mov	r2, r0
 8001898:	6328      	str	r0, [r5, #48]	@ 0x30
 800189a:	b920      	cbnz	r0, 80018a6 <srand+0x22>
 800189c:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <srand+0x48>)
 800189e:	480c      	ldr	r0, [pc, #48]	@ (80018d0 <srand+0x4c>)
 80018a0:	2146      	movs	r1, #70	@ 0x46
 80018a2:	f000 fa19 	bl	8001cd8 <__assert_func>
 80018a6:	490b      	ldr	r1, [pc, #44]	@ (80018d4 <srand+0x50>)
 80018a8:	4b0b      	ldr	r3, [pc, #44]	@ (80018d8 <srand+0x54>)
 80018aa:	e9c0 1300 	strd	r1, r3, [r0]
 80018ae:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <srand+0x58>)
 80018b0:	6083      	str	r3, [r0, #8]
 80018b2:	230b      	movs	r3, #11
 80018b4:	8183      	strh	r3, [r0, #12]
 80018b6:	2100      	movs	r1, #0
 80018b8:	2001      	movs	r0, #1
 80018ba:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80018be:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80018c0:	2200      	movs	r2, #0
 80018c2:	611c      	str	r4, [r3, #16]
 80018c4:	615a      	str	r2, [r3, #20]
 80018c6:	bd38      	pop	{r3, r4, r5, pc}
 80018c8:	20000014 	.word	0x20000014
 80018cc:	08002faa 	.word	0x08002faa
 80018d0:	08002fc1 	.word	0x08002fc1
 80018d4:	abcd330e 	.word	0xabcd330e
 80018d8:	e66d1234 	.word	0xe66d1234
 80018dc:	0005deec 	.word	0x0005deec

080018e0 <rand>:
 80018e0:	4b16      	ldr	r3, [pc, #88]	@ (800193c <rand+0x5c>)
 80018e2:	b510      	push	{r4, lr}
 80018e4:	681c      	ldr	r4, [r3, #0]
 80018e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80018e8:	b9b3      	cbnz	r3, 8001918 <rand+0x38>
 80018ea:	2018      	movs	r0, #24
 80018ec:	f000 fa5c 	bl	8001da8 <malloc>
 80018f0:	4602      	mov	r2, r0
 80018f2:	6320      	str	r0, [r4, #48]	@ 0x30
 80018f4:	b920      	cbnz	r0, 8001900 <rand+0x20>
 80018f6:	4b12      	ldr	r3, [pc, #72]	@ (8001940 <rand+0x60>)
 80018f8:	4812      	ldr	r0, [pc, #72]	@ (8001944 <rand+0x64>)
 80018fa:	2152      	movs	r1, #82	@ 0x52
 80018fc:	f000 f9ec 	bl	8001cd8 <__assert_func>
 8001900:	4911      	ldr	r1, [pc, #68]	@ (8001948 <rand+0x68>)
 8001902:	4b12      	ldr	r3, [pc, #72]	@ (800194c <rand+0x6c>)
 8001904:	e9c0 1300 	strd	r1, r3, [r0]
 8001908:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <rand+0x70>)
 800190a:	6083      	str	r3, [r0, #8]
 800190c:	230b      	movs	r3, #11
 800190e:	8183      	strh	r3, [r0, #12]
 8001910:	2100      	movs	r1, #0
 8001912:	2001      	movs	r0, #1
 8001914:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001918:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800191a:	480e      	ldr	r0, [pc, #56]	@ (8001954 <rand+0x74>)
 800191c:	690b      	ldr	r3, [r1, #16]
 800191e:	694c      	ldr	r4, [r1, #20]
 8001920:	4a0d      	ldr	r2, [pc, #52]	@ (8001958 <rand+0x78>)
 8001922:	4358      	muls	r0, r3
 8001924:	fb02 0004 	mla	r0, r2, r4, r0
 8001928:	fba3 3202 	umull	r3, r2, r3, r2
 800192c:	3301      	adds	r3, #1
 800192e:	eb40 0002 	adc.w	r0, r0, r2
 8001932:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8001936:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800193a:	bd10      	pop	{r4, pc}
 800193c:	20000014 	.word	0x20000014
 8001940:	08002faa 	.word	0x08002faa
 8001944:	08002fc1 	.word	0x08002fc1
 8001948:	abcd330e 	.word	0xabcd330e
 800194c:	e66d1234 	.word	0xe66d1234
 8001950:	0005deec 	.word	0x0005deec
 8001954:	5851f42d 	.word	0x5851f42d
 8001958:	4c957f2d 	.word	0x4c957f2d

0800195c <std>:
 800195c:	2300      	movs	r3, #0
 800195e:	b510      	push	{r4, lr}
 8001960:	4604      	mov	r4, r0
 8001962:	e9c0 3300 	strd	r3, r3, [r0]
 8001966:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800196a:	6083      	str	r3, [r0, #8]
 800196c:	8181      	strh	r1, [r0, #12]
 800196e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001970:	81c2      	strh	r2, [r0, #14]
 8001972:	6183      	str	r3, [r0, #24]
 8001974:	4619      	mov	r1, r3
 8001976:	2208      	movs	r2, #8
 8001978:	305c      	adds	r0, #92	@ 0x5c
 800197a:	f000 f931 	bl	8001be0 <memset>
 800197e:	4b0d      	ldr	r3, [pc, #52]	@ (80019b4 <std+0x58>)
 8001980:	6263      	str	r3, [r4, #36]	@ 0x24
 8001982:	4b0d      	ldr	r3, [pc, #52]	@ (80019b8 <std+0x5c>)
 8001984:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001986:	4b0d      	ldr	r3, [pc, #52]	@ (80019bc <std+0x60>)
 8001988:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800198a:	4b0d      	ldr	r3, [pc, #52]	@ (80019c0 <std+0x64>)
 800198c:	6323      	str	r3, [r4, #48]	@ 0x30
 800198e:	4b0d      	ldr	r3, [pc, #52]	@ (80019c4 <std+0x68>)
 8001990:	6224      	str	r4, [r4, #32]
 8001992:	429c      	cmp	r4, r3
 8001994:	d006      	beq.n	80019a4 <std+0x48>
 8001996:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800199a:	4294      	cmp	r4, r2
 800199c:	d002      	beq.n	80019a4 <std+0x48>
 800199e:	33d0      	adds	r3, #208	@ 0xd0
 80019a0:	429c      	cmp	r4, r3
 80019a2:	d105      	bne.n	80019b0 <std+0x54>
 80019a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80019a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019ac:	f000 b990 	b.w	8001cd0 <__retarget_lock_init_recursive>
 80019b0:	bd10      	pop	{r4, pc}
 80019b2:	bf00      	nop
 80019b4:	08001ae1 	.word	0x08001ae1
 80019b8:	08001b03 	.word	0x08001b03
 80019bc:	08001b3b 	.word	0x08001b3b
 80019c0:	08001b5f 	.word	0x08001b5f
 80019c4:	200000f0 	.word	0x200000f0

080019c8 <stdio_exit_handler>:
 80019c8:	4a02      	ldr	r2, [pc, #8]	@ (80019d4 <stdio_exit_handler+0xc>)
 80019ca:	4903      	ldr	r1, [pc, #12]	@ (80019d8 <stdio_exit_handler+0x10>)
 80019cc:	4803      	ldr	r0, [pc, #12]	@ (80019dc <stdio_exit_handler+0x14>)
 80019ce:	f000 b869 	b.w	8001aa4 <_fwalk_sglue>
 80019d2:	bf00      	nop
 80019d4:	20000008 	.word	0x20000008
 80019d8:	080025e5 	.word	0x080025e5
 80019dc:	20000018 	.word	0x20000018

080019e0 <cleanup_stdio>:
 80019e0:	6841      	ldr	r1, [r0, #4]
 80019e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <cleanup_stdio+0x34>)
 80019e4:	4299      	cmp	r1, r3
 80019e6:	b510      	push	{r4, lr}
 80019e8:	4604      	mov	r4, r0
 80019ea:	d001      	beq.n	80019f0 <cleanup_stdio+0x10>
 80019ec:	f000 fdfa 	bl	80025e4 <_fflush_r>
 80019f0:	68a1      	ldr	r1, [r4, #8]
 80019f2:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <cleanup_stdio+0x38>)
 80019f4:	4299      	cmp	r1, r3
 80019f6:	d002      	beq.n	80019fe <cleanup_stdio+0x1e>
 80019f8:	4620      	mov	r0, r4
 80019fa:	f000 fdf3 	bl	80025e4 <_fflush_r>
 80019fe:	68e1      	ldr	r1, [r4, #12]
 8001a00:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <cleanup_stdio+0x3c>)
 8001a02:	4299      	cmp	r1, r3
 8001a04:	d004      	beq.n	8001a10 <cleanup_stdio+0x30>
 8001a06:	4620      	mov	r0, r4
 8001a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a0c:	f000 bdea 	b.w	80025e4 <_fflush_r>
 8001a10:	bd10      	pop	{r4, pc}
 8001a12:	bf00      	nop
 8001a14:	200000f0 	.word	0x200000f0
 8001a18:	20000158 	.word	0x20000158
 8001a1c:	200001c0 	.word	0x200001c0

08001a20 <global_stdio_init.part.0>:
 8001a20:	b510      	push	{r4, lr}
 8001a22:	4b0b      	ldr	r3, [pc, #44]	@ (8001a50 <global_stdio_init.part.0+0x30>)
 8001a24:	4c0b      	ldr	r4, [pc, #44]	@ (8001a54 <global_stdio_init.part.0+0x34>)
 8001a26:	4a0c      	ldr	r2, [pc, #48]	@ (8001a58 <global_stdio_init.part.0+0x38>)
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2104      	movs	r1, #4
 8001a30:	f7ff ff94 	bl	800195c <std>
 8001a34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001a38:	2201      	movs	r2, #1
 8001a3a:	2109      	movs	r1, #9
 8001a3c:	f7ff ff8e 	bl	800195c <std>
 8001a40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001a44:	2202      	movs	r2, #2
 8001a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a4a:	2112      	movs	r1, #18
 8001a4c:	f7ff bf86 	b.w	800195c <std>
 8001a50:	20000228 	.word	0x20000228
 8001a54:	200000f0 	.word	0x200000f0
 8001a58:	080019c9 	.word	0x080019c9

08001a5c <__sfp_lock_acquire>:
 8001a5c:	4801      	ldr	r0, [pc, #4]	@ (8001a64 <__sfp_lock_acquire+0x8>)
 8001a5e:	f000 b938 	b.w	8001cd2 <__retarget_lock_acquire_recursive>
 8001a62:	bf00      	nop
 8001a64:	20000231 	.word	0x20000231

08001a68 <__sfp_lock_release>:
 8001a68:	4801      	ldr	r0, [pc, #4]	@ (8001a70 <__sfp_lock_release+0x8>)
 8001a6a:	f000 b933 	b.w	8001cd4 <__retarget_lock_release_recursive>
 8001a6e:	bf00      	nop
 8001a70:	20000231 	.word	0x20000231

08001a74 <__sinit>:
 8001a74:	b510      	push	{r4, lr}
 8001a76:	4604      	mov	r4, r0
 8001a78:	f7ff fff0 	bl	8001a5c <__sfp_lock_acquire>
 8001a7c:	6a23      	ldr	r3, [r4, #32]
 8001a7e:	b11b      	cbz	r3, 8001a88 <__sinit+0x14>
 8001a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a84:	f7ff bff0 	b.w	8001a68 <__sfp_lock_release>
 8001a88:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <__sinit+0x28>)
 8001a8a:	6223      	str	r3, [r4, #32]
 8001a8c:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <__sinit+0x2c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1f5      	bne.n	8001a80 <__sinit+0xc>
 8001a94:	f7ff ffc4 	bl	8001a20 <global_stdio_init.part.0>
 8001a98:	e7f2      	b.n	8001a80 <__sinit+0xc>
 8001a9a:	bf00      	nop
 8001a9c:	080019e1 	.word	0x080019e1
 8001aa0:	20000228 	.word	0x20000228

08001aa4 <_fwalk_sglue>:
 8001aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001aa8:	4607      	mov	r7, r0
 8001aaa:	4688      	mov	r8, r1
 8001aac:	4614      	mov	r4, r2
 8001aae:	2600      	movs	r6, #0
 8001ab0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001ab4:	f1b9 0901 	subs.w	r9, r9, #1
 8001ab8:	d505      	bpl.n	8001ac6 <_fwalk_sglue+0x22>
 8001aba:	6824      	ldr	r4, [r4, #0]
 8001abc:	2c00      	cmp	r4, #0
 8001abe:	d1f7      	bne.n	8001ab0 <_fwalk_sglue+0xc>
 8001ac0:	4630      	mov	r0, r6
 8001ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ac6:	89ab      	ldrh	r3, [r5, #12]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d907      	bls.n	8001adc <_fwalk_sglue+0x38>
 8001acc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	d003      	beq.n	8001adc <_fwalk_sglue+0x38>
 8001ad4:	4629      	mov	r1, r5
 8001ad6:	4638      	mov	r0, r7
 8001ad8:	47c0      	blx	r8
 8001ada:	4306      	orrs	r6, r0
 8001adc:	3568      	adds	r5, #104	@ 0x68
 8001ade:	e7e9      	b.n	8001ab4 <_fwalk_sglue+0x10>

08001ae0 <__sread>:
 8001ae0:	b510      	push	{r4, lr}
 8001ae2:	460c      	mov	r4, r1
 8001ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ae8:	f000 f8a4 	bl	8001c34 <_read_r>
 8001aec:	2800      	cmp	r0, #0
 8001aee:	bfab      	itete	ge
 8001af0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001af2:	89a3      	ldrhlt	r3, [r4, #12]
 8001af4:	181b      	addge	r3, r3, r0
 8001af6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001afa:	bfac      	ite	ge
 8001afc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001afe:	81a3      	strhlt	r3, [r4, #12]
 8001b00:	bd10      	pop	{r4, pc}

08001b02 <__swrite>:
 8001b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b06:	461f      	mov	r7, r3
 8001b08:	898b      	ldrh	r3, [r1, #12]
 8001b0a:	05db      	lsls	r3, r3, #23
 8001b0c:	4605      	mov	r5, r0
 8001b0e:	460c      	mov	r4, r1
 8001b10:	4616      	mov	r6, r2
 8001b12:	d505      	bpl.n	8001b20 <__swrite+0x1e>
 8001b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b18:	2302      	movs	r3, #2
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f000 f878 	bl	8001c10 <_lseek_r>
 8001b20:	89a3      	ldrh	r3, [r4, #12]
 8001b22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b2a:	81a3      	strh	r3, [r4, #12]
 8001b2c:	4632      	mov	r2, r6
 8001b2e:	463b      	mov	r3, r7
 8001b30:	4628      	mov	r0, r5
 8001b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b36:	f000 b88f 	b.w	8001c58 <_write_r>

08001b3a <__sseek>:
 8001b3a:	b510      	push	{r4, lr}
 8001b3c:	460c      	mov	r4, r1
 8001b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b42:	f000 f865 	bl	8001c10 <_lseek_r>
 8001b46:	1c43      	adds	r3, r0, #1
 8001b48:	89a3      	ldrh	r3, [r4, #12]
 8001b4a:	bf15      	itete	ne
 8001b4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001b4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001b52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001b56:	81a3      	strheq	r3, [r4, #12]
 8001b58:	bf18      	it	ne
 8001b5a:	81a3      	strhne	r3, [r4, #12]
 8001b5c:	bd10      	pop	{r4, pc}

08001b5e <__sclose>:
 8001b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b62:	f000 b845 	b.w	8001bf0 <_close_r>

08001b66 <_vsniprintf_r>:
 8001b66:	b530      	push	{r4, r5, lr}
 8001b68:	4614      	mov	r4, r2
 8001b6a:	2c00      	cmp	r4, #0
 8001b6c:	b09b      	sub	sp, #108	@ 0x6c
 8001b6e:	4605      	mov	r5, r0
 8001b70:	461a      	mov	r2, r3
 8001b72:	da05      	bge.n	8001b80 <_vsniprintf_r+0x1a>
 8001b74:	238b      	movs	r3, #139	@ 0x8b
 8001b76:	6003      	str	r3, [r0, #0]
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295
 8001b7c:	b01b      	add	sp, #108	@ 0x6c
 8001b7e:	bd30      	pop	{r4, r5, pc}
 8001b80:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8001b84:	f8ad 300c 	strh.w	r3, [sp, #12]
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	9319      	str	r3, [sp, #100]	@ 0x64
 8001b8e:	bf14      	ite	ne
 8001b90:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001b94:	4623      	moveq	r3, r4
 8001b96:	9302      	str	r3, [sp, #8]
 8001b98:	9305      	str	r3, [sp, #20]
 8001b9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b9e:	9100      	str	r1, [sp, #0]
 8001ba0:	9104      	str	r1, [sp, #16]
 8001ba2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8001ba6:	4669      	mov	r1, sp
 8001ba8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8001baa:	f000 fa0f 	bl	8001fcc <_svfiprintf_r>
 8001bae:	1c43      	adds	r3, r0, #1
 8001bb0:	bfbc      	itt	lt
 8001bb2:	238b      	movlt	r3, #139	@ 0x8b
 8001bb4:	602b      	strlt	r3, [r5, #0]
 8001bb6:	2c00      	cmp	r4, #0
 8001bb8:	d0e0      	beq.n	8001b7c <_vsniprintf_r+0x16>
 8001bba:	9b00      	ldr	r3, [sp, #0]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
 8001bc0:	e7dc      	b.n	8001b7c <_vsniprintf_r+0x16>
	...

08001bc4 <vsniprintf>:
 8001bc4:	b507      	push	{r0, r1, r2, lr}
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	460a      	mov	r2, r1
 8001bcc:	4601      	mov	r1, r0
 8001bce:	4803      	ldr	r0, [pc, #12]	@ (8001bdc <vsniprintf+0x18>)
 8001bd0:	6800      	ldr	r0, [r0, #0]
 8001bd2:	f7ff ffc8 	bl	8001b66 <_vsniprintf_r>
 8001bd6:	b003      	add	sp, #12
 8001bd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bdc:	20000014 	.word	0x20000014

08001be0 <memset>:
 8001be0:	4402      	add	r2, r0
 8001be2:	4603      	mov	r3, r0
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d100      	bne.n	8001bea <memset+0xa>
 8001be8:	4770      	bx	lr
 8001bea:	f803 1b01 	strb.w	r1, [r3], #1
 8001bee:	e7f9      	b.n	8001be4 <memset+0x4>

08001bf0 <_close_r>:
 8001bf0:	b538      	push	{r3, r4, r5, lr}
 8001bf2:	4d06      	ldr	r5, [pc, #24]	@ (8001c0c <_close_r+0x1c>)
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	4608      	mov	r0, r1
 8001bfa:	602b      	str	r3, [r5, #0]
 8001bfc:	f7ff fdae 	bl	800175c <_close>
 8001c00:	1c43      	adds	r3, r0, #1
 8001c02:	d102      	bne.n	8001c0a <_close_r+0x1a>
 8001c04:	682b      	ldr	r3, [r5, #0]
 8001c06:	b103      	cbz	r3, 8001c0a <_close_r+0x1a>
 8001c08:	6023      	str	r3, [r4, #0]
 8001c0a:	bd38      	pop	{r3, r4, r5, pc}
 8001c0c:	2000022c 	.word	0x2000022c

08001c10 <_lseek_r>:
 8001c10:	b538      	push	{r3, r4, r5, lr}
 8001c12:	4d07      	ldr	r5, [pc, #28]	@ (8001c30 <_lseek_r+0x20>)
 8001c14:	4604      	mov	r4, r0
 8001c16:	4608      	mov	r0, r1
 8001c18:	4611      	mov	r1, r2
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	602a      	str	r2, [r5, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	f7ff fdc3 	bl	80017aa <_lseek>
 8001c24:	1c43      	adds	r3, r0, #1
 8001c26:	d102      	bne.n	8001c2e <_lseek_r+0x1e>
 8001c28:	682b      	ldr	r3, [r5, #0]
 8001c2a:	b103      	cbz	r3, 8001c2e <_lseek_r+0x1e>
 8001c2c:	6023      	str	r3, [r4, #0]
 8001c2e:	bd38      	pop	{r3, r4, r5, pc}
 8001c30:	2000022c 	.word	0x2000022c

08001c34 <_read_r>:
 8001c34:	b538      	push	{r3, r4, r5, lr}
 8001c36:	4d07      	ldr	r5, [pc, #28]	@ (8001c54 <_read_r+0x20>)
 8001c38:	4604      	mov	r4, r0
 8001c3a:	4608      	mov	r0, r1
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	2200      	movs	r2, #0
 8001c40:	602a      	str	r2, [r5, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	f7ff fd51 	bl	80016ea <_read>
 8001c48:	1c43      	adds	r3, r0, #1
 8001c4a:	d102      	bne.n	8001c52 <_read_r+0x1e>
 8001c4c:	682b      	ldr	r3, [r5, #0]
 8001c4e:	b103      	cbz	r3, 8001c52 <_read_r+0x1e>
 8001c50:	6023      	str	r3, [r4, #0]
 8001c52:	bd38      	pop	{r3, r4, r5, pc}
 8001c54:	2000022c 	.word	0x2000022c

08001c58 <_write_r>:
 8001c58:	b538      	push	{r3, r4, r5, lr}
 8001c5a:	4d07      	ldr	r5, [pc, #28]	@ (8001c78 <_write_r+0x20>)
 8001c5c:	4604      	mov	r4, r0
 8001c5e:	4608      	mov	r0, r1
 8001c60:	4611      	mov	r1, r2
 8001c62:	2200      	movs	r2, #0
 8001c64:	602a      	str	r2, [r5, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	f7ff fd5c 	bl	8001724 <_write>
 8001c6c:	1c43      	adds	r3, r0, #1
 8001c6e:	d102      	bne.n	8001c76 <_write_r+0x1e>
 8001c70:	682b      	ldr	r3, [r5, #0]
 8001c72:	b103      	cbz	r3, 8001c76 <_write_r+0x1e>
 8001c74:	6023      	str	r3, [r4, #0]
 8001c76:	bd38      	pop	{r3, r4, r5, pc}
 8001c78:	2000022c 	.word	0x2000022c

08001c7c <__errno>:
 8001c7c:	4b01      	ldr	r3, [pc, #4]	@ (8001c84 <__errno+0x8>)
 8001c7e:	6818      	ldr	r0, [r3, #0]
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000014 	.word	0x20000014

08001c88 <__libc_init_array>:
 8001c88:	b570      	push	{r4, r5, r6, lr}
 8001c8a:	4d0d      	ldr	r5, [pc, #52]	@ (8001cc0 <__libc_init_array+0x38>)
 8001c8c:	4c0d      	ldr	r4, [pc, #52]	@ (8001cc4 <__libc_init_array+0x3c>)
 8001c8e:	1b64      	subs	r4, r4, r5
 8001c90:	10a4      	asrs	r4, r4, #2
 8001c92:	2600      	movs	r6, #0
 8001c94:	42a6      	cmp	r6, r4
 8001c96:	d109      	bne.n	8001cac <__libc_init_array+0x24>
 8001c98:	4d0b      	ldr	r5, [pc, #44]	@ (8001cc8 <__libc_init_array+0x40>)
 8001c9a:	4c0c      	ldr	r4, [pc, #48]	@ (8001ccc <__libc_init_array+0x44>)
 8001c9c:	f000 ffee 	bl	8002c7c <_init>
 8001ca0:	1b64      	subs	r4, r4, r5
 8001ca2:	10a4      	asrs	r4, r4, #2
 8001ca4:	2600      	movs	r6, #0
 8001ca6:	42a6      	cmp	r6, r4
 8001ca8:	d105      	bne.n	8001cb6 <__libc_init_array+0x2e>
 8001caa:	bd70      	pop	{r4, r5, r6, pc}
 8001cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cb0:	4798      	blx	r3
 8001cb2:	3601      	adds	r6, #1
 8001cb4:	e7ee      	b.n	8001c94 <__libc_init_array+0xc>
 8001cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cba:	4798      	blx	r3
 8001cbc:	3601      	adds	r6, #1
 8001cbe:	e7f2      	b.n	8001ca6 <__libc_init_array+0x1e>
 8001cc0:	08003090 	.word	0x08003090
 8001cc4:	08003090 	.word	0x08003090
 8001cc8:	08003090 	.word	0x08003090
 8001ccc:	08003094 	.word	0x08003094

08001cd0 <__retarget_lock_init_recursive>:
 8001cd0:	4770      	bx	lr

08001cd2 <__retarget_lock_acquire_recursive>:
 8001cd2:	4770      	bx	lr

08001cd4 <__retarget_lock_release_recursive>:
 8001cd4:	4770      	bx	lr
	...

08001cd8 <__assert_func>:
 8001cd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001cda:	4614      	mov	r4, r2
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <__assert_func+0x2c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4605      	mov	r5, r0
 8001ce4:	68d8      	ldr	r0, [r3, #12]
 8001ce6:	b14c      	cbz	r4, 8001cfc <__assert_func+0x24>
 8001ce8:	4b07      	ldr	r3, [pc, #28]	@ (8001d08 <__assert_func+0x30>)
 8001cea:	9100      	str	r1, [sp, #0]
 8001cec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001cf0:	4906      	ldr	r1, [pc, #24]	@ (8001d0c <__assert_func+0x34>)
 8001cf2:	462b      	mov	r3, r5
 8001cf4:	f000 fc9e 	bl	8002634 <fiprintf>
 8001cf8:	f000 fce6 	bl	80026c8 <abort>
 8001cfc:	4b04      	ldr	r3, [pc, #16]	@ (8001d10 <__assert_func+0x38>)
 8001cfe:	461c      	mov	r4, r3
 8001d00:	e7f3      	b.n	8001cea <__assert_func+0x12>
 8001d02:	bf00      	nop
 8001d04:	20000014 	.word	0x20000014
 8001d08:	08003019 	.word	0x08003019
 8001d0c:	08003026 	.word	0x08003026
 8001d10:	08003054 	.word	0x08003054

08001d14 <_free_r>:
 8001d14:	b538      	push	{r3, r4, r5, lr}
 8001d16:	4605      	mov	r5, r0
 8001d18:	2900      	cmp	r1, #0
 8001d1a:	d041      	beq.n	8001da0 <_free_r+0x8c>
 8001d1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d20:	1f0c      	subs	r4, r1, #4
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	bfb8      	it	lt
 8001d26:	18e4      	addlt	r4, r4, r3
 8001d28:	f000 f8e8 	bl	8001efc <__malloc_lock>
 8001d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001da4 <_free_r+0x90>)
 8001d2e:	6813      	ldr	r3, [r2, #0]
 8001d30:	b933      	cbnz	r3, 8001d40 <_free_r+0x2c>
 8001d32:	6063      	str	r3, [r4, #4]
 8001d34:	6014      	str	r4, [r2, #0]
 8001d36:	4628      	mov	r0, r5
 8001d38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d3c:	f000 b8e4 	b.w	8001f08 <__malloc_unlock>
 8001d40:	42a3      	cmp	r3, r4
 8001d42:	d908      	bls.n	8001d56 <_free_r+0x42>
 8001d44:	6820      	ldr	r0, [r4, #0]
 8001d46:	1821      	adds	r1, r4, r0
 8001d48:	428b      	cmp	r3, r1
 8001d4a:	bf01      	itttt	eq
 8001d4c:	6819      	ldreq	r1, [r3, #0]
 8001d4e:	685b      	ldreq	r3, [r3, #4]
 8001d50:	1809      	addeq	r1, r1, r0
 8001d52:	6021      	streq	r1, [r4, #0]
 8001d54:	e7ed      	b.n	8001d32 <_free_r+0x1e>
 8001d56:	461a      	mov	r2, r3
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	b10b      	cbz	r3, 8001d60 <_free_r+0x4c>
 8001d5c:	42a3      	cmp	r3, r4
 8001d5e:	d9fa      	bls.n	8001d56 <_free_r+0x42>
 8001d60:	6811      	ldr	r1, [r2, #0]
 8001d62:	1850      	adds	r0, r2, r1
 8001d64:	42a0      	cmp	r0, r4
 8001d66:	d10b      	bne.n	8001d80 <_free_r+0x6c>
 8001d68:	6820      	ldr	r0, [r4, #0]
 8001d6a:	4401      	add	r1, r0
 8001d6c:	1850      	adds	r0, r2, r1
 8001d6e:	4283      	cmp	r3, r0
 8001d70:	6011      	str	r1, [r2, #0]
 8001d72:	d1e0      	bne.n	8001d36 <_free_r+0x22>
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	6053      	str	r3, [r2, #4]
 8001d7a:	4408      	add	r0, r1
 8001d7c:	6010      	str	r0, [r2, #0]
 8001d7e:	e7da      	b.n	8001d36 <_free_r+0x22>
 8001d80:	d902      	bls.n	8001d88 <_free_r+0x74>
 8001d82:	230c      	movs	r3, #12
 8001d84:	602b      	str	r3, [r5, #0]
 8001d86:	e7d6      	b.n	8001d36 <_free_r+0x22>
 8001d88:	6820      	ldr	r0, [r4, #0]
 8001d8a:	1821      	adds	r1, r4, r0
 8001d8c:	428b      	cmp	r3, r1
 8001d8e:	bf04      	itt	eq
 8001d90:	6819      	ldreq	r1, [r3, #0]
 8001d92:	685b      	ldreq	r3, [r3, #4]
 8001d94:	6063      	str	r3, [r4, #4]
 8001d96:	bf04      	itt	eq
 8001d98:	1809      	addeq	r1, r1, r0
 8001d9a:	6021      	streq	r1, [r4, #0]
 8001d9c:	6054      	str	r4, [r2, #4]
 8001d9e:	e7ca      	b.n	8001d36 <_free_r+0x22>
 8001da0:	bd38      	pop	{r3, r4, r5, pc}
 8001da2:	bf00      	nop
 8001da4:	20000238 	.word	0x20000238

08001da8 <malloc>:
 8001da8:	4b02      	ldr	r3, [pc, #8]	@ (8001db4 <malloc+0xc>)
 8001daa:	4601      	mov	r1, r0
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	f000 b825 	b.w	8001dfc <_malloc_r>
 8001db2:	bf00      	nop
 8001db4:	20000014 	.word	0x20000014

08001db8 <sbrk_aligned>:
 8001db8:	b570      	push	{r4, r5, r6, lr}
 8001dba:	4e0f      	ldr	r6, [pc, #60]	@ (8001df8 <sbrk_aligned+0x40>)
 8001dbc:	460c      	mov	r4, r1
 8001dbe:	6831      	ldr	r1, [r6, #0]
 8001dc0:	4605      	mov	r5, r0
 8001dc2:	b911      	cbnz	r1, 8001dca <sbrk_aligned+0x12>
 8001dc4:	f000 fc62 	bl	800268c <_sbrk_r>
 8001dc8:	6030      	str	r0, [r6, #0]
 8001dca:	4621      	mov	r1, r4
 8001dcc:	4628      	mov	r0, r5
 8001dce:	f000 fc5d 	bl	800268c <_sbrk_r>
 8001dd2:	1c43      	adds	r3, r0, #1
 8001dd4:	d103      	bne.n	8001dde <sbrk_aligned+0x26>
 8001dd6:	f04f 34ff 	mov.w	r4, #4294967295
 8001dda:	4620      	mov	r0, r4
 8001ddc:	bd70      	pop	{r4, r5, r6, pc}
 8001dde:	1cc4      	adds	r4, r0, #3
 8001de0:	f024 0403 	bic.w	r4, r4, #3
 8001de4:	42a0      	cmp	r0, r4
 8001de6:	d0f8      	beq.n	8001dda <sbrk_aligned+0x22>
 8001de8:	1a21      	subs	r1, r4, r0
 8001dea:	4628      	mov	r0, r5
 8001dec:	f000 fc4e 	bl	800268c <_sbrk_r>
 8001df0:	3001      	adds	r0, #1
 8001df2:	d1f2      	bne.n	8001dda <sbrk_aligned+0x22>
 8001df4:	e7ef      	b.n	8001dd6 <sbrk_aligned+0x1e>
 8001df6:	bf00      	nop
 8001df8:	20000234 	.word	0x20000234

08001dfc <_malloc_r>:
 8001dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e00:	1ccd      	adds	r5, r1, #3
 8001e02:	f025 0503 	bic.w	r5, r5, #3
 8001e06:	3508      	adds	r5, #8
 8001e08:	2d0c      	cmp	r5, #12
 8001e0a:	bf38      	it	cc
 8001e0c:	250c      	movcc	r5, #12
 8001e0e:	2d00      	cmp	r5, #0
 8001e10:	4606      	mov	r6, r0
 8001e12:	db01      	blt.n	8001e18 <_malloc_r+0x1c>
 8001e14:	42a9      	cmp	r1, r5
 8001e16:	d904      	bls.n	8001e22 <_malloc_r+0x26>
 8001e18:	230c      	movs	r3, #12
 8001e1a:	6033      	str	r3, [r6, #0]
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001ef8 <_malloc_r+0xfc>
 8001e26:	f000 f869 	bl	8001efc <__malloc_lock>
 8001e2a:	f8d8 3000 	ldr.w	r3, [r8]
 8001e2e:	461c      	mov	r4, r3
 8001e30:	bb44      	cbnz	r4, 8001e84 <_malloc_r+0x88>
 8001e32:	4629      	mov	r1, r5
 8001e34:	4630      	mov	r0, r6
 8001e36:	f7ff ffbf 	bl	8001db8 <sbrk_aligned>
 8001e3a:	1c43      	adds	r3, r0, #1
 8001e3c:	4604      	mov	r4, r0
 8001e3e:	d158      	bne.n	8001ef2 <_malloc_r+0xf6>
 8001e40:	f8d8 4000 	ldr.w	r4, [r8]
 8001e44:	4627      	mov	r7, r4
 8001e46:	2f00      	cmp	r7, #0
 8001e48:	d143      	bne.n	8001ed2 <_malloc_r+0xd6>
 8001e4a:	2c00      	cmp	r4, #0
 8001e4c:	d04b      	beq.n	8001ee6 <_malloc_r+0xea>
 8001e4e:	6823      	ldr	r3, [r4, #0]
 8001e50:	4639      	mov	r1, r7
 8001e52:	4630      	mov	r0, r6
 8001e54:	eb04 0903 	add.w	r9, r4, r3
 8001e58:	f000 fc18 	bl	800268c <_sbrk_r>
 8001e5c:	4581      	cmp	r9, r0
 8001e5e:	d142      	bne.n	8001ee6 <_malloc_r+0xea>
 8001e60:	6821      	ldr	r1, [r4, #0]
 8001e62:	1a6d      	subs	r5, r5, r1
 8001e64:	4629      	mov	r1, r5
 8001e66:	4630      	mov	r0, r6
 8001e68:	f7ff ffa6 	bl	8001db8 <sbrk_aligned>
 8001e6c:	3001      	adds	r0, #1
 8001e6e:	d03a      	beq.n	8001ee6 <_malloc_r+0xea>
 8001e70:	6823      	ldr	r3, [r4, #0]
 8001e72:	442b      	add	r3, r5
 8001e74:	6023      	str	r3, [r4, #0]
 8001e76:	f8d8 3000 	ldr.w	r3, [r8]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	bb62      	cbnz	r2, 8001ed8 <_malloc_r+0xdc>
 8001e7e:	f8c8 7000 	str.w	r7, [r8]
 8001e82:	e00f      	b.n	8001ea4 <_malloc_r+0xa8>
 8001e84:	6822      	ldr	r2, [r4, #0]
 8001e86:	1b52      	subs	r2, r2, r5
 8001e88:	d420      	bmi.n	8001ecc <_malloc_r+0xd0>
 8001e8a:	2a0b      	cmp	r2, #11
 8001e8c:	d917      	bls.n	8001ebe <_malloc_r+0xc2>
 8001e8e:	1961      	adds	r1, r4, r5
 8001e90:	42a3      	cmp	r3, r4
 8001e92:	6025      	str	r5, [r4, #0]
 8001e94:	bf18      	it	ne
 8001e96:	6059      	strne	r1, [r3, #4]
 8001e98:	6863      	ldr	r3, [r4, #4]
 8001e9a:	bf08      	it	eq
 8001e9c:	f8c8 1000 	streq.w	r1, [r8]
 8001ea0:	5162      	str	r2, [r4, r5]
 8001ea2:	604b      	str	r3, [r1, #4]
 8001ea4:	4630      	mov	r0, r6
 8001ea6:	f000 f82f 	bl	8001f08 <__malloc_unlock>
 8001eaa:	f104 000b 	add.w	r0, r4, #11
 8001eae:	1d23      	adds	r3, r4, #4
 8001eb0:	f020 0007 	bic.w	r0, r0, #7
 8001eb4:	1ac2      	subs	r2, r0, r3
 8001eb6:	bf1c      	itt	ne
 8001eb8:	1a1b      	subne	r3, r3, r0
 8001eba:	50a3      	strne	r3, [r4, r2]
 8001ebc:	e7af      	b.n	8001e1e <_malloc_r+0x22>
 8001ebe:	6862      	ldr	r2, [r4, #4]
 8001ec0:	42a3      	cmp	r3, r4
 8001ec2:	bf0c      	ite	eq
 8001ec4:	f8c8 2000 	streq.w	r2, [r8]
 8001ec8:	605a      	strne	r2, [r3, #4]
 8001eca:	e7eb      	b.n	8001ea4 <_malloc_r+0xa8>
 8001ecc:	4623      	mov	r3, r4
 8001ece:	6864      	ldr	r4, [r4, #4]
 8001ed0:	e7ae      	b.n	8001e30 <_malloc_r+0x34>
 8001ed2:	463c      	mov	r4, r7
 8001ed4:	687f      	ldr	r7, [r7, #4]
 8001ed6:	e7b6      	b.n	8001e46 <_malloc_r+0x4a>
 8001ed8:	461a      	mov	r2, r3
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	42a3      	cmp	r3, r4
 8001ede:	d1fb      	bne.n	8001ed8 <_malloc_r+0xdc>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	6053      	str	r3, [r2, #4]
 8001ee4:	e7de      	b.n	8001ea4 <_malloc_r+0xa8>
 8001ee6:	230c      	movs	r3, #12
 8001ee8:	6033      	str	r3, [r6, #0]
 8001eea:	4630      	mov	r0, r6
 8001eec:	f000 f80c 	bl	8001f08 <__malloc_unlock>
 8001ef0:	e794      	b.n	8001e1c <_malloc_r+0x20>
 8001ef2:	6005      	str	r5, [r0, #0]
 8001ef4:	e7d6      	b.n	8001ea4 <_malloc_r+0xa8>
 8001ef6:	bf00      	nop
 8001ef8:	20000238 	.word	0x20000238

08001efc <__malloc_lock>:
 8001efc:	4801      	ldr	r0, [pc, #4]	@ (8001f04 <__malloc_lock+0x8>)
 8001efe:	f7ff bee8 	b.w	8001cd2 <__retarget_lock_acquire_recursive>
 8001f02:	bf00      	nop
 8001f04:	20000230 	.word	0x20000230

08001f08 <__malloc_unlock>:
 8001f08:	4801      	ldr	r0, [pc, #4]	@ (8001f10 <__malloc_unlock+0x8>)
 8001f0a:	f7ff bee3 	b.w	8001cd4 <__retarget_lock_release_recursive>
 8001f0e:	bf00      	nop
 8001f10:	20000230 	.word	0x20000230

08001f14 <__ssputs_r>:
 8001f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f18:	688e      	ldr	r6, [r1, #8]
 8001f1a:	461f      	mov	r7, r3
 8001f1c:	42be      	cmp	r6, r7
 8001f1e:	680b      	ldr	r3, [r1, #0]
 8001f20:	4682      	mov	sl, r0
 8001f22:	460c      	mov	r4, r1
 8001f24:	4690      	mov	r8, r2
 8001f26:	d82d      	bhi.n	8001f84 <__ssputs_r+0x70>
 8001f28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001f2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001f30:	d026      	beq.n	8001f80 <__ssputs_r+0x6c>
 8001f32:	6965      	ldr	r5, [r4, #20]
 8001f34:	6909      	ldr	r1, [r1, #16]
 8001f36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001f3a:	eba3 0901 	sub.w	r9, r3, r1
 8001f3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001f42:	1c7b      	adds	r3, r7, #1
 8001f44:	444b      	add	r3, r9
 8001f46:	106d      	asrs	r5, r5, #1
 8001f48:	429d      	cmp	r5, r3
 8001f4a:	bf38      	it	cc
 8001f4c:	461d      	movcc	r5, r3
 8001f4e:	0553      	lsls	r3, r2, #21
 8001f50:	d527      	bpl.n	8001fa2 <__ssputs_r+0x8e>
 8001f52:	4629      	mov	r1, r5
 8001f54:	f7ff ff52 	bl	8001dfc <_malloc_r>
 8001f58:	4606      	mov	r6, r0
 8001f5a:	b360      	cbz	r0, 8001fb6 <__ssputs_r+0xa2>
 8001f5c:	6921      	ldr	r1, [r4, #16]
 8001f5e:	464a      	mov	r2, r9
 8001f60:	f000 fba4 	bl	80026ac <memcpy>
 8001f64:	89a3      	ldrh	r3, [r4, #12]
 8001f66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f6e:	81a3      	strh	r3, [r4, #12]
 8001f70:	6126      	str	r6, [r4, #16]
 8001f72:	6165      	str	r5, [r4, #20]
 8001f74:	444e      	add	r6, r9
 8001f76:	eba5 0509 	sub.w	r5, r5, r9
 8001f7a:	6026      	str	r6, [r4, #0]
 8001f7c:	60a5      	str	r5, [r4, #8]
 8001f7e:	463e      	mov	r6, r7
 8001f80:	42be      	cmp	r6, r7
 8001f82:	d900      	bls.n	8001f86 <__ssputs_r+0x72>
 8001f84:	463e      	mov	r6, r7
 8001f86:	6820      	ldr	r0, [r4, #0]
 8001f88:	4632      	mov	r2, r6
 8001f8a:	4641      	mov	r1, r8
 8001f8c:	f000 fb64 	bl	8002658 <memmove>
 8001f90:	68a3      	ldr	r3, [r4, #8]
 8001f92:	1b9b      	subs	r3, r3, r6
 8001f94:	60a3      	str	r3, [r4, #8]
 8001f96:	6823      	ldr	r3, [r4, #0]
 8001f98:	4433      	add	r3, r6
 8001f9a:	6023      	str	r3, [r4, #0]
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fa2:	462a      	mov	r2, r5
 8001fa4:	f000 fb97 	bl	80026d6 <_realloc_r>
 8001fa8:	4606      	mov	r6, r0
 8001faa:	2800      	cmp	r0, #0
 8001fac:	d1e0      	bne.n	8001f70 <__ssputs_r+0x5c>
 8001fae:	6921      	ldr	r1, [r4, #16]
 8001fb0:	4650      	mov	r0, sl
 8001fb2:	f7ff feaf 	bl	8001d14 <_free_r>
 8001fb6:	230c      	movs	r3, #12
 8001fb8:	f8ca 3000 	str.w	r3, [sl]
 8001fbc:	89a3      	ldrh	r3, [r4, #12]
 8001fbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fc2:	81a3      	strh	r3, [r4, #12]
 8001fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc8:	e7e9      	b.n	8001f9e <__ssputs_r+0x8a>
	...

08001fcc <_svfiprintf_r>:
 8001fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fd0:	4698      	mov	r8, r3
 8001fd2:	898b      	ldrh	r3, [r1, #12]
 8001fd4:	061b      	lsls	r3, r3, #24
 8001fd6:	b09d      	sub	sp, #116	@ 0x74
 8001fd8:	4607      	mov	r7, r0
 8001fda:	460d      	mov	r5, r1
 8001fdc:	4614      	mov	r4, r2
 8001fde:	d510      	bpl.n	8002002 <_svfiprintf_r+0x36>
 8001fe0:	690b      	ldr	r3, [r1, #16]
 8001fe2:	b973      	cbnz	r3, 8002002 <_svfiprintf_r+0x36>
 8001fe4:	2140      	movs	r1, #64	@ 0x40
 8001fe6:	f7ff ff09 	bl	8001dfc <_malloc_r>
 8001fea:	6028      	str	r0, [r5, #0]
 8001fec:	6128      	str	r0, [r5, #16]
 8001fee:	b930      	cbnz	r0, 8001ffe <_svfiprintf_r+0x32>
 8001ff0:	230c      	movs	r3, #12
 8001ff2:	603b      	str	r3, [r7, #0]
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	b01d      	add	sp, #116	@ 0x74
 8001ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ffe:	2340      	movs	r3, #64	@ 0x40
 8002000:	616b      	str	r3, [r5, #20]
 8002002:	2300      	movs	r3, #0
 8002004:	9309      	str	r3, [sp, #36]	@ 0x24
 8002006:	2320      	movs	r3, #32
 8002008:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800200c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002010:	2330      	movs	r3, #48	@ 0x30
 8002012:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80021b0 <_svfiprintf_r+0x1e4>
 8002016:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800201a:	f04f 0901 	mov.w	r9, #1
 800201e:	4623      	mov	r3, r4
 8002020:	469a      	mov	sl, r3
 8002022:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002026:	b10a      	cbz	r2, 800202c <_svfiprintf_r+0x60>
 8002028:	2a25      	cmp	r2, #37	@ 0x25
 800202a:	d1f9      	bne.n	8002020 <_svfiprintf_r+0x54>
 800202c:	ebba 0b04 	subs.w	fp, sl, r4
 8002030:	d00b      	beq.n	800204a <_svfiprintf_r+0x7e>
 8002032:	465b      	mov	r3, fp
 8002034:	4622      	mov	r2, r4
 8002036:	4629      	mov	r1, r5
 8002038:	4638      	mov	r0, r7
 800203a:	f7ff ff6b 	bl	8001f14 <__ssputs_r>
 800203e:	3001      	adds	r0, #1
 8002040:	f000 80a7 	beq.w	8002192 <_svfiprintf_r+0x1c6>
 8002044:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002046:	445a      	add	r2, fp
 8002048:	9209      	str	r2, [sp, #36]	@ 0x24
 800204a:	f89a 3000 	ldrb.w	r3, [sl]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 809f 	beq.w	8002192 <_svfiprintf_r+0x1c6>
 8002054:	2300      	movs	r3, #0
 8002056:	f04f 32ff 	mov.w	r2, #4294967295
 800205a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800205e:	f10a 0a01 	add.w	sl, sl, #1
 8002062:	9304      	str	r3, [sp, #16]
 8002064:	9307      	str	r3, [sp, #28]
 8002066:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800206a:	931a      	str	r3, [sp, #104]	@ 0x68
 800206c:	4654      	mov	r4, sl
 800206e:	2205      	movs	r2, #5
 8002070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002074:	484e      	ldr	r0, [pc, #312]	@ (80021b0 <_svfiprintf_r+0x1e4>)
 8002076:	f7fe f8b3 	bl	80001e0 <memchr>
 800207a:	9a04      	ldr	r2, [sp, #16]
 800207c:	b9d8      	cbnz	r0, 80020b6 <_svfiprintf_r+0xea>
 800207e:	06d0      	lsls	r0, r2, #27
 8002080:	bf44      	itt	mi
 8002082:	2320      	movmi	r3, #32
 8002084:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002088:	0711      	lsls	r1, r2, #28
 800208a:	bf44      	itt	mi
 800208c:	232b      	movmi	r3, #43	@ 0x2b
 800208e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002092:	f89a 3000 	ldrb.w	r3, [sl]
 8002096:	2b2a      	cmp	r3, #42	@ 0x2a
 8002098:	d015      	beq.n	80020c6 <_svfiprintf_r+0xfa>
 800209a:	9a07      	ldr	r2, [sp, #28]
 800209c:	4654      	mov	r4, sl
 800209e:	2000      	movs	r0, #0
 80020a0:	f04f 0c0a 	mov.w	ip, #10
 80020a4:	4621      	mov	r1, r4
 80020a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80020aa:	3b30      	subs	r3, #48	@ 0x30
 80020ac:	2b09      	cmp	r3, #9
 80020ae:	d94b      	bls.n	8002148 <_svfiprintf_r+0x17c>
 80020b0:	b1b0      	cbz	r0, 80020e0 <_svfiprintf_r+0x114>
 80020b2:	9207      	str	r2, [sp, #28]
 80020b4:	e014      	b.n	80020e0 <_svfiprintf_r+0x114>
 80020b6:	eba0 0308 	sub.w	r3, r0, r8
 80020ba:	fa09 f303 	lsl.w	r3, r9, r3
 80020be:	4313      	orrs	r3, r2
 80020c0:	9304      	str	r3, [sp, #16]
 80020c2:	46a2      	mov	sl, r4
 80020c4:	e7d2      	b.n	800206c <_svfiprintf_r+0xa0>
 80020c6:	9b03      	ldr	r3, [sp, #12]
 80020c8:	1d19      	adds	r1, r3, #4
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	9103      	str	r1, [sp, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	bfbb      	ittet	lt
 80020d2:	425b      	neglt	r3, r3
 80020d4:	f042 0202 	orrlt.w	r2, r2, #2
 80020d8:	9307      	strge	r3, [sp, #28]
 80020da:	9307      	strlt	r3, [sp, #28]
 80020dc:	bfb8      	it	lt
 80020de:	9204      	strlt	r2, [sp, #16]
 80020e0:	7823      	ldrb	r3, [r4, #0]
 80020e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80020e4:	d10a      	bne.n	80020fc <_svfiprintf_r+0x130>
 80020e6:	7863      	ldrb	r3, [r4, #1]
 80020e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80020ea:	d132      	bne.n	8002152 <_svfiprintf_r+0x186>
 80020ec:	9b03      	ldr	r3, [sp, #12]
 80020ee:	1d1a      	adds	r2, r3, #4
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	9203      	str	r2, [sp, #12]
 80020f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80020f8:	3402      	adds	r4, #2
 80020fa:	9305      	str	r3, [sp, #20]
 80020fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80021c0 <_svfiprintf_r+0x1f4>
 8002100:	7821      	ldrb	r1, [r4, #0]
 8002102:	2203      	movs	r2, #3
 8002104:	4650      	mov	r0, sl
 8002106:	f7fe f86b 	bl	80001e0 <memchr>
 800210a:	b138      	cbz	r0, 800211c <_svfiprintf_r+0x150>
 800210c:	9b04      	ldr	r3, [sp, #16]
 800210e:	eba0 000a 	sub.w	r0, r0, sl
 8002112:	2240      	movs	r2, #64	@ 0x40
 8002114:	4082      	lsls	r2, r0
 8002116:	4313      	orrs	r3, r2
 8002118:	3401      	adds	r4, #1
 800211a:	9304      	str	r3, [sp, #16]
 800211c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002120:	4824      	ldr	r0, [pc, #144]	@ (80021b4 <_svfiprintf_r+0x1e8>)
 8002122:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002126:	2206      	movs	r2, #6
 8002128:	f7fe f85a 	bl	80001e0 <memchr>
 800212c:	2800      	cmp	r0, #0
 800212e:	d036      	beq.n	800219e <_svfiprintf_r+0x1d2>
 8002130:	4b21      	ldr	r3, [pc, #132]	@ (80021b8 <_svfiprintf_r+0x1ec>)
 8002132:	bb1b      	cbnz	r3, 800217c <_svfiprintf_r+0x1b0>
 8002134:	9b03      	ldr	r3, [sp, #12]
 8002136:	3307      	adds	r3, #7
 8002138:	f023 0307 	bic.w	r3, r3, #7
 800213c:	3308      	adds	r3, #8
 800213e:	9303      	str	r3, [sp, #12]
 8002140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002142:	4433      	add	r3, r6
 8002144:	9309      	str	r3, [sp, #36]	@ 0x24
 8002146:	e76a      	b.n	800201e <_svfiprintf_r+0x52>
 8002148:	fb0c 3202 	mla	r2, ip, r2, r3
 800214c:	460c      	mov	r4, r1
 800214e:	2001      	movs	r0, #1
 8002150:	e7a8      	b.n	80020a4 <_svfiprintf_r+0xd8>
 8002152:	2300      	movs	r3, #0
 8002154:	3401      	adds	r4, #1
 8002156:	9305      	str	r3, [sp, #20]
 8002158:	4619      	mov	r1, r3
 800215a:	f04f 0c0a 	mov.w	ip, #10
 800215e:	4620      	mov	r0, r4
 8002160:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002164:	3a30      	subs	r2, #48	@ 0x30
 8002166:	2a09      	cmp	r2, #9
 8002168:	d903      	bls.n	8002172 <_svfiprintf_r+0x1a6>
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0c6      	beq.n	80020fc <_svfiprintf_r+0x130>
 800216e:	9105      	str	r1, [sp, #20]
 8002170:	e7c4      	b.n	80020fc <_svfiprintf_r+0x130>
 8002172:	fb0c 2101 	mla	r1, ip, r1, r2
 8002176:	4604      	mov	r4, r0
 8002178:	2301      	movs	r3, #1
 800217a:	e7f0      	b.n	800215e <_svfiprintf_r+0x192>
 800217c:	ab03      	add	r3, sp, #12
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	462a      	mov	r2, r5
 8002182:	4b0e      	ldr	r3, [pc, #56]	@ (80021bc <_svfiprintf_r+0x1f0>)
 8002184:	a904      	add	r1, sp, #16
 8002186:	4638      	mov	r0, r7
 8002188:	f3af 8000 	nop.w
 800218c:	1c42      	adds	r2, r0, #1
 800218e:	4606      	mov	r6, r0
 8002190:	d1d6      	bne.n	8002140 <_svfiprintf_r+0x174>
 8002192:	89ab      	ldrh	r3, [r5, #12]
 8002194:	065b      	lsls	r3, r3, #25
 8002196:	f53f af2d 	bmi.w	8001ff4 <_svfiprintf_r+0x28>
 800219a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800219c:	e72c      	b.n	8001ff8 <_svfiprintf_r+0x2c>
 800219e:	ab03      	add	r3, sp, #12
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	462a      	mov	r2, r5
 80021a4:	4b05      	ldr	r3, [pc, #20]	@ (80021bc <_svfiprintf_r+0x1f0>)
 80021a6:	a904      	add	r1, sp, #16
 80021a8:	4638      	mov	r0, r7
 80021aa:	f000 f879 	bl	80022a0 <_printf_i>
 80021ae:	e7ed      	b.n	800218c <_svfiprintf_r+0x1c0>
 80021b0:	08003055 	.word	0x08003055
 80021b4:	0800305f 	.word	0x0800305f
 80021b8:	00000000 	.word	0x00000000
 80021bc:	08001f15 	.word	0x08001f15
 80021c0:	0800305b 	.word	0x0800305b

080021c4 <_printf_common>:
 80021c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021c8:	4616      	mov	r6, r2
 80021ca:	4698      	mov	r8, r3
 80021cc:	688a      	ldr	r2, [r1, #8]
 80021ce:	690b      	ldr	r3, [r1, #16]
 80021d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80021d4:	4293      	cmp	r3, r2
 80021d6:	bfb8      	it	lt
 80021d8:	4613      	movlt	r3, r2
 80021da:	6033      	str	r3, [r6, #0]
 80021dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80021e0:	4607      	mov	r7, r0
 80021e2:	460c      	mov	r4, r1
 80021e4:	b10a      	cbz	r2, 80021ea <_printf_common+0x26>
 80021e6:	3301      	adds	r3, #1
 80021e8:	6033      	str	r3, [r6, #0]
 80021ea:	6823      	ldr	r3, [r4, #0]
 80021ec:	0699      	lsls	r1, r3, #26
 80021ee:	bf42      	ittt	mi
 80021f0:	6833      	ldrmi	r3, [r6, #0]
 80021f2:	3302      	addmi	r3, #2
 80021f4:	6033      	strmi	r3, [r6, #0]
 80021f6:	6825      	ldr	r5, [r4, #0]
 80021f8:	f015 0506 	ands.w	r5, r5, #6
 80021fc:	d106      	bne.n	800220c <_printf_common+0x48>
 80021fe:	f104 0a19 	add.w	sl, r4, #25
 8002202:	68e3      	ldr	r3, [r4, #12]
 8002204:	6832      	ldr	r2, [r6, #0]
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	42ab      	cmp	r3, r5
 800220a:	dc26      	bgt.n	800225a <_printf_common+0x96>
 800220c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002210:	6822      	ldr	r2, [r4, #0]
 8002212:	3b00      	subs	r3, #0
 8002214:	bf18      	it	ne
 8002216:	2301      	movne	r3, #1
 8002218:	0692      	lsls	r2, r2, #26
 800221a:	d42b      	bmi.n	8002274 <_printf_common+0xb0>
 800221c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002220:	4641      	mov	r1, r8
 8002222:	4638      	mov	r0, r7
 8002224:	47c8      	blx	r9
 8002226:	3001      	adds	r0, #1
 8002228:	d01e      	beq.n	8002268 <_printf_common+0xa4>
 800222a:	6823      	ldr	r3, [r4, #0]
 800222c:	6922      	ldr	r2, [r4, #16]
 800222e:	f003 0306 	and.w	r3, r3, #6
 8002232:	2b04      	cmp	r3, #4
 8002234:	bf02      	ittt	eq
 8002236:	68e5      	ldreq	r5, [r4, #12]
 8002238:	6833      	ldreq	r3, [r6, #0]
 800223a:	1aed      	subeq	r5, r5, r3
 800223c:	68a3      	ldr	r3, [r4, #8]
 800223e:	bf0c      	ite	eq
 8002240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002244:	2500      	movne	r5, #0
 8002246:	4293      	cmp	r3, r2
 8002248:	bfc4      	itt	gt
 800224a:	1a9b      	subgt	r3, r3, r2
 800224c:	18ed      	addgt	r5, r5, r3
 800224e:	2600      	movs	r6, #0
 8002250:	341a      	adds	r4, #26
 8002252:	42b5      	cmp	r5, r6
 8002254:	d11a      	bne.n	800228c <_printf_common+0xc8>
 8002256:	2000      	movs	r0, #0
 8002258:	e008      	b.n	800226c <_printf_common+0xa8>
 800225a:	2301      	movs	r3, #1
 800225c:	4652      	mov	r2, sl
 800225e:	4641      	mov	r1, r8
 8002260:	4638      	mov	r0, r7
 8002262:	47c8      	blx	r9
 8002264:	3001      	adds	r0, #1
 8002266:	d103      	bne.n	8002270 <_printf_common+0xac>
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002270:	3501      	adds	r5, #1
 8002272:	e7c6      	b.n	8002202 <_printf_common+0x3e>
 8002274:	18e1      	adds	r1, r4, r3
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	2030      	movs	r0, #48	@ 0x30
 800227a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800227e:	4422      	add	r2, r4
 8002280:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002284:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002288:	3302      	adds	r3, #2
 800228a:	e7c7      	b.n	800221c <_printf_common+0x58>
 800228c:	2301      	movs	r3, #1
 800228e:	4622      	mov	r2, r4
 8002290:	4641      	mov	r1, r8
 8002292:	4638      	mov	r0, r7
 8002294:	47c8      	blx	r9
 8002296:	3001      	adds	r0, #1
 8002298:	d0e6      	beq.n	8002268 <_printf_common+0xa4>
 800229a:	3601      	adds	r6, #1
 800229c:	e7d9      	b.n	8002252 <_printf_common+0x8e>
	...

080022a0 <_printf_i>:
 80022a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80022a4:	7e0f      	ldrb	r7, [r1, #24]
 80022a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80022a8:	2f78      	cmp	r7, #120	@ 0x78
 80022aa:	4691      	mov	r9, r2
 80022ac:	4680      	mov	r8, r0
 80022ae:	460c      	mov	r4, r1
 80022b0:	469a      	mov	sl, r3
 80022b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80022b6:	d807      	bhi.n	80022c8 <_printf_i+0x28>
 80022b8:	2f62      	cmp	r7, #98	@ 0x62
 80022ba:	d80a      	bhi.n	80022d2 <_printf_i+0x32>
 80022bc:	2f00      	cmp	r7, #0
 80022be:	f000 80d1 	beq.w	8002464 <_printf_i+0x1c4>
 80022c2:	2f58      	cmp	r7, #88	@ 0x58
 80022c4:	f000 80b8 	beq.w	8002438 <_printf_i+0x198>
 80022c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80022cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80022d0:	e03a      	b.n	8002348 <_printf_i+0xa8>
 80022d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80022d6:	2b15      	cmp	r3, #21
 80022d8:	d8f6      	bhi.n	80022c8 <_printf_i+0x28>
 80022da:	a101      	add	r1, pc, #4	@ (adr r1, 80022e0 <_printf_i+0x40>)
 80022dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80022e0:	08002339 	.word	0x08002339
 80022e4:	0800234d 	.word	0x0800234d
 80022e8:	080022c9 	.word	0x080022c9
 80022ec:	080022c9 	.word	0x080022c9
 80022f0:	080022c9 	.word	0x080022c9
 80022f4:	080022c9 	.word	0x080022c9
 80022f8:	0800234d 	.word	0x0800234d
 80022fc:	080022c9 	.word	0x080022c9
 8002300:	080022c9 	.word	0x080022c9
 8002304:	080022c9 	.word	0x080022c9
 8002308:	080022c9 	.word	0x080022c9
 800230c:	0800244b 	.word	0x0800244b
 8002310:	08002377 	.word	0x08002377
 8002314:	08002405 	.word	0x08002405
 8002318:	080022c9 	.word	0x080022c9
 800231c:	080022c9 	.word	0x080022c9
 8002320:	0800246d 	.word	0x0800246d
 8002324:	080022c9 	.word	0x080022c9
 8002328:	08002377 	.word	0x08002377
 800232c:	080022c9 	.word	0x080022c9
 8002330:	080022c9 	.word	0x080022c9
 8002334:	0800240d 	.word	0x0800240d
 8002338:	6833      	ldr	r3, [r6, #0]
 800233a:	1d1a      	adds	r2, r3, #4
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6032      	str	r2, [r6, #0]
 8002340:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002344:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002348:	2301      	movs	r3, #1
 800234a:	e09c      	b.n	8002486 <_printf_i+0x1e6>
 800234c:	6833      	ldr	r3, [r6, #0]
 800234e:	6820      	ldr	r0, [r4, #0]
 8002350:	1d19      	adds	r1, r3, #4
 8002352:	6031      	str	r1, [r6, #0]
 8002354:	0606      	lsls	r6, r0, #24
 8002356:	d501      	bpl.n	800235c <_printf_i+0xbc>
 8002358:	681d      	ldr	r5, [r3, #0]
 800235a:	e003      	b.n	8002364 <_printf_i+0xc4>
 800235c:	0645      	lsls	r5, r0, #25
 800235e:	d5fb      	bpl.n	8002358 <_printf_i+0xb8>
 8002360:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002364:	2d00      	cmp	r5, #0
 8002366:	da03      	bge.n	8002370 <_printf_i+0xd0>
 8002368:	232d      	movs	r3, #45	@ 0x2d
 800236a:	426d      	negs	r5, r5
 800236c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002370:	4858      	ldr	r0, [pc, #352]	@ (80024d4 <_printf_i+0x234>)
 8002372:	230a      	movs	r3, #10
 8002374:	e011      	b.n	800239a <_printf_i+0xfa>
 8002376:	6821      	ldr	r1, [r4, #0]
 8002378:	6833      	ldr	r3, [r6, #0]
 800237a:	0608      	lsls	r0, r1, #24
 800237c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002380:	d402      	bmi.n	8002388 <_printf_i+0xe8>
 8002382:	0649      	lsls	r1, r1, #25
 8002384:	bf48      	it	mi
 8002386:	b2ad      	uxthmi	r5, r5
 8002388:	2f6f      	cmp	r7, #111	@ 0x6f
 800238a:	4852      	ldr	r0, [pc, #328]	@ (80024d4 <_printf_i+0x234>)
 800238c:	6033      	str	r3, [r6, #0]
 800238e:	bf14      	ite	ne
 8002390:	230a      	movne	r3, #10
 8002392:	2308      	moveq	r3, #8
 8002394:	2100      	movs	r1, #0
 8002396:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800239a:	6866      	ldr	r6, [r4, #4]
 800239c:	60a6      	str	r6, [r4, #8]
 800239e:	2e00      	cmp	r6, #0
 80023a0:	db05      	blt.n	80023ae <_printf_i+0x10e>
 80023a2:	6821      	ldr	r1, [r4, #0]
 80023a4:	432e      	orrs	r6, r5
 80023a6:	f021 0104 	bic.w	r1, r1, #4
 80023aa:	6021      	str	r1, [r4, #0]
 80023ac:	d04b      	beq.n	8002446 <_printf_i+0x1a6>
 80023ae:	4616      	mov	r6, r2
 80023b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80023b4:	fb03 5711 	mls	r7, r3, r1, r5
 80023b8:	5dc7      	ldrb	r7, [r0, r7]
 80023ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80023be:	462f      	mov	r7, r5
 80023c0:	42bb      	cmp	r3, r7
 80023c2:	460d      	mov	r5, r1
 80023c4:	d9f4      	bls.n	80023b0 <_printf_i+0x110>
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d10b      	bne.n	80023e2 <_printf_i+0x142>
 80023ca:	6823      	ldr	r3, [r4, #0]
 80023cc:	07df      	lsls	r7, r3, #31
 80023ce:	d508      	bpl.n	80023e2 <_printf_i+0x142>
 80023d0:	6923      	ldr	r3, [r4, #16]
 80023d2:	6861      	ldr	r1, [r4, #4]
 80023d4:	4299      	cmp	r1, r3
 80023d6:	bfde      	ittt	le
 80023d8:	2330      	movle	r3, #48	@ 0x30
 80023da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80023de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80023e2:	1b92      	subs	r2, r2, r6
 80023e4:	6122      	str	r2, [r4, #16]
 80023e6:	f8cd a000 	str.w	sl, [sp]
 80023ea:	464b      	mov	r3, r9
 80023ec:	aa03      	add	r2, sp, #12
 80023ee:	4621      	mov	r1, r4
 80023f0:	4640      	mov	r0, r8
 80023f2:	f7ff fee7 	bl	80021c4 <_printf_common>
 80023f6:	3001      	adds	r0, #1
 80023f8:	d14a      	bne.n	8002490 <_printf_i+0x1f0>
 80023fa:	f04f 30ff 	mov.w	r0, #4294967295
 80023fe:	b004      	add	sp, #16
 8002400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002404:	6823      	ldr	r3, [r4, #0]
 8002406:	f043 0320 	orr.w	r3, r3, #32
 800240a:	6023      	str	r3, [r4, #0]
 800240c:	4832      	ldr	r0, [pc, #200]	@ (80024d8 <_printf_i+0x238>)
 800240e:	2778      	movs	r7, #120	@ 0x78
 8002410:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002414:	6823      	ldr	r3, [r4, #0]
 8002416:	6831      	ldr	r1, [r6, #0]
 8002418:	061f      	lsls	r7, r3, #24
 800241a:	f851 5b04 	ldr.w	r5, [r1], #4
 800241e:	d402      	bmi.n	8002426 <_printf_i+0x186>
 8002420:	065f      	lsls	r7, r3, #25
 8002422:	bf48      	it	mi
 8002424:	b2ad      	uxthmi	r5, r5
 8002426:	6031      	str	r1, [r6, #0]
 8002428:	07d9      	lsls	r1, r3, #31
 800242a:	bf44      	itt	mi
 800242c:	f043 0320 	orrmi.w	r3, r3, #32
 8002430:	6023      	strmi	r3, [r4, #0]
 8002432:	b11d      	cbz	r5, 800243c <_printf_i+0x19c>
 8002434:	2310      	movs	r3, #16
 8002436:	e7ad      	b.n	8002394 <_printf_i+0xf4>
 8002438:	4826      	ldr	r0, [pc, #152]	@ (80024d4 <_printf_i+0x234>)
 800243a:	e7e9      	b.n	8002410 <_printf_i+0x170>
 800243c:	6823      	ldr	r3, [r4, #0]
 800243e:	f023 0320 	bic.w	r3, r3, #32
 8002442:	6023      	str	r3, [r4, #0]
 8002444:	e7f6      	b.n	8002434 <_printf_i+0x194>
 8002446:	4616      	mov	r6, r2
 8002448:	e7bd      	b.n	80023c6 <_printf_i+0x126>
 800244a:	6833      	ldr	r3, [r6, #0]
 800244c:	6825      	ldr	r5, [r4, #0]
 800244e:	6961      	ldr	r1, [r4, #20]
 8002450:	1d18      	adds	r0, r3, #4
 8002452:	6030      	str	r0, [r6, #0]
 8002454:	062e      	lsls	r6, r5, #24
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	d501      	bpl.n	800245e <_printf_i+0x1be>
 800245a:	6019      	str	r1, [r3, #0]
 800245c:	e002      	b.n	8002464 <_printf_i+0x1c4>
 800245e:	0668      	lsls	r0, r5, #25
 8002460:	d5fb      	bpl.n	800245a <_printf_i+0x1ba>
 8002462:	8019      	strh	r1, [r3, #0]
 8002464:	2300      	movs	r3, #0
 8002466:	6123      	str	r3, [r4, #16]
 8002468:	4616      	mov	r6, r2
 800246a:	e7bc      	b.n	80023e6 <_printf_i+0x146>
 800246c:	6833      	ldr	r3, [r6, #0]
 800246e:	1d1a      	adds	r2, r3, #4
 8002470:	6032      	str	r2, [r6, #0]
 8002472:	681e      	ldr	r6, [r3, #0]
 8002474:	6862      	ldr	r2, [r4, #4]
 8002476:	2100      	movs	r1, #0
 8002478:	4630      	mov	r0, r6
 800247a:	f7fd feb1 	bl	80001e0 <memchr>
 800247e:	b108      	cbz	r0, 8002484 <_printf_i+0x1e4>
 8002480:	1b80      	subs	r0, r0, r6
 8002482:	6060      	str	r0, [r4, #4]
 8002484:	6863      	ldr	r3, [r4, #4]
 8002486:	6123      	str	r3, [r4, #16]
 8002488:	2300      	movs	r3, #0
 800248a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800248e:	e7aa      	b.n	80023e6 <_printf_i+0x146>
 8002490:	6923      	ldr	r3, [r4, #16]
 8002492:	4632      	mov	r2, r6
 8002494:	4649      	mov	r1, r9
 8002496:	4640      	mov	r0, r8
 8002498:	47d0      	blx	sl
 800249a:	3001      	adds	r0, #1
 800249c:	d0ad      	beq.n	80023fa <_printf_i+0x15a>
 800249e:	6823      	ldr	r3, [r4, #0]
 80024a0:	079b      	lsls	r3, r3, #30
 80024a2:	d413      	bmi.n	80024cc <_printf_i+0x22c>
 80024a4:	68e0      	ldr	r0, [r4, #12]
 80024a6:	9b03      	ldr	r3, [sp, #12]
 80024a8:	4298      	cmp	r0, r3
 80024aa:	bfb8      	it	lt
 80024ac:	4618      	movlt	r0, r3
 80024ae:	e7a6      	b.n	80023fe <_printf_i+0x15e>
 80024b0:	2301      	movs	r3, #1
 80024b2:	4632      	mov	r2, r6
 80024b4:	4649      	mov	r1, r9
 80024b6:	4640      	mov	r0, r8
 80024b8:	47d0      	blx	sl
 80024ba:	3001      	adds	r0, #1
 80024bc:	d09d      	beq.n	80023fa <_printf_i+0x15a>
 80024be:	3501      	adds	r5, #1
 80024c0:	68e3      	ldr	r3, [r4, #12]
 80024c2:	9903      	ldr	r1, [sp, #12]
 80024c4:	1a5b      	subs	r3, r3, r1
 80024c6:	42ab      	cmp	r3, r5
 80024c8:	dcf2      	bgt.n	80024b0 <_printf_i+0x210>
 80024ca:	e7eb      	b.n	80024a4 <_printf_i+0x204>
 80024cc:	2500      	movs	r5, #0
 80024ce:	f104 0619 	add.w	r6, r4, #25
 80024d2:	e7f5      	b.n	80024c0 <_printf_i+0x220>
 80024d4:	08003066 	.word	0x08003066
 80024d8:	08003077 	.word	0x08003077

080024dc <__sflush_r>:
 80024dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80024e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024e4:	0716      	lsls	r6, r2, #28
 80024e6:	4605      	mov	r5, r0
 80024e8:	460c      	mov	r4, r1
 80024ea:	d454      	bmi.n	8002596 <__sflush_r+0xba>
 80024ec:	684b      	ldr	r3, [r1, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	dc02      	bgt.n	80024f8 <__sflush_r+0x1c>
 80024f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	dd48      	ble.n	800258a <__sflush_r+0xae>
 80024f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80024fa:	2e00      	cmp	r6, #0
 80024fc:	d045      	beq.n	800258a <__sflush_r+0xae>
 80024fe:	2300      	movs	r3, #0
 8002500:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002504:	682f      	ldr	r7, [r5, #0]
 8002506:	6a21      	ldr	r1, [r4, #32]
 8002508:	602b      	str	r3, [r5, #0]
 800250a:	d030      	beq.n	800256e <__sflush_r+0x92>
 800250c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800250e:	89a3      	ldrh	r3, [r4, #12]
 8002510:	0759      	lsls	r1, r3, #29
 8002512:	d505      	bpl.n	8002520 <__sflush_r+0x44>
 8002514:	6863      	ldr	r3, [r4, #4]
 8002516:	1ad2      	subs	r2, r2, r3
 8002518:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800251a:	b10b      	cbz	r3, 8002520 <__sflush_r+0x44>
 800251c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800251e:	1ad2      	subs	r2, r2, r3
 8002520:	2300      	movs	r3, #0
 8002522:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002524:	6a21      	ldr	r1, [r4, #32]
 8002526:	4628      	mov	r0, r5
 8002528:	47b0      	blx	r6
 800252a:	1c43      	adds	r3, r0, #1
 800252c:	89a3      	ldrh	r3, [r4, #12]
 800252e:	d106      	bne.n	800253e <__sflush_r+0x62>
 8002530:	6829      	ldr	r1, [r5, #0]
 8002532:	291d      	cmp	r1, #29
 8002534:	d82b      	bhi.n	800258e <__sflush_r+0xb2>
 8002536:	4a2a      	ldr	r2, [pc, #168]	@ (80025e0 <__sflush_r+0x104>)
 8002538:	40ca      	lsrs	r2, r1
 800253a:	07d6      	lsls	r6, r2, #31
 800253c:	d527      	bpl.n	800258e <__sflush_r+0xb2>
 800253e:	2200      	movs	r2, #0
 8002540:	6062      	str	r2, [r4, #4]
 8002542:	04d9      	lsls	r1, r3, #19
 8002544:	6922      	ldr	r2, [r4, #16]
 8002546:	6022      	str	r2, [r4, #0]
 8002548:	d504      	bpl.n	8002554 <__sflush_r+0x78>
 800254a:	1c42      	adds	r2, r0, #1
 800254c:	d101      	bne.n	8002552 <__sflush_r+0x76>
 800254e:	682b      	ldr	r3, [r5, #0]
 8002550:	b903      	cbnz	r3, 8002554 <__sflush_r+0x78>
 8002552:	6560      	str	r0, [r4, #84]	@ 0x54
 8002554:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002556:	602f      	str	r7, [r5, #0]
 8002558:	b1b9      	cbz	r1, 800258a <__sflush_r+0xae>
 800255a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800255e:	4299      	cmp	r1, r3
 8002560:	d002      	beq.n	8002568 <__sflush_r+0x8c>
 8002562:	4628      	mov	r0, r5
 8002564:	f7ff fbd6 	bl	8001d14 <_free_r>
 8002568:	2300      	movs	r3, #0
 800256a:	6363      	str	r3, [r4, #52]	@ 0x34
 800256c:	e00d      	b.n	800258a <__sflush_r+0xae>
 800256e:	2301      	movs	r3, #1
 8002570:	4628      	mov	r0, r5
 8002572:	47b0      	blx	r6
 8002574:	4602      	mov	r2, r0
 8002576:	1c50      	adds	r0, r2, #1
 8002578:	d1c9      	bne.n	800250e <__sflush_r+0x32>
 800257a:	682b      	ldr	r3, [r5, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0c6      	beq.n	800250e <__sflush_r+0x32>
 8002580:	2b1d      	cmp	r3, #29
 8002582:	d001      	beq.n	8002588 <__sflush_r+0xac>
 8002584:	2b16      	cmp	r3, #22
 8002586:	d11e      	bne.n	80025c6 <__sflush_r+0xea>
 8002588:	602f      	str	r7, [r5, #0]
 800258a:	2000      	movs	r0, #0
 800258c:	e022      	b.n	80025d4 <__sflush_r+0xf8>
 800258e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002592:	b21b      	sxth	r3, r3
 8002594:	e01b      	b.n	80025ce <__sflush_r+0xf2>
 8002596:	690f      	ldr	r7, [r1, #16]
 8002598:	2f00      	cmp	r7, #0
 800259a:	d0f6      	beq.n	800258a <__sflush_r+0xae>
 800259c:	0793      	lsls	r3, r2, #30
 800259e:	680e      	ldr	r6, [r1, #0]
 80025a0:	bf08      	it	eq
 80025a2:	694b      	ldreq	r3, [r1, #20]
 80025a4:	600f      	str	r7, [r1, #0]
 80025a6:	bf18      	it	ne
 80025a8:	2300      	movne	r3, #0
 80025aa:	eba6 0807 	sub.w	r8, r6, r7
 80025ae:	608b      	str	r3, [r1, #8]
 80025b0:	f1b8 0f00 	cmp.w	r8, #0
 80025b4:	dde9      	ble.n	800258a <__sflush_r+0xae>
 80025b6:	6a21      	ldr	r1, [r4, #32]
 80025b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80025ba:	4643      	mov	r3, r8
 80025bc:	463a      	mov	r2, r7
 80025be:	4628      	mov	r0, r5
 80025c0:	47b0      	blx	r6
 80025c2:	2800      	cmp	r0, #0
 80025c4:	dc08      	bgt.n	80025d8 <__sflush_r+0xfc>
 80025c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025ce:	81a3      	strh	r3, [r4, #12]
 80025d0:	f04f 30ff 	mov.w	r0, #4294967295
 80025d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025d8:	4407      	add	r7, r0
 80025da:	eba8 0800 	sub.w	r8, r8, r0
 80025de:	e7e7      	b.n	80025b0 <__sflush_r+0xd4>
 80025e0:	20400001 	.word	0x20400001

080025e4 <_fflush_r>:
 80025e4:	b538      	push	{r3, r4, r5, lr}
 80025e6:	690b      	ldr	r3, [r1, #16]
 80025e8:	4605      	mov	r5, r0
 80025ea:	460c      	mov	r4, r1
 80025ec:	b913      	cbnz	r3, 80025f4 <_fflush_r+0x10>
 80025ee:	2500      	movs	r5, #0
 80025f0:	4628      	mov	r0, r5
 80025f2:	bd38      	pop	{r3, r4, r5, pc}
 80025f4:	b118      	cbz	r0, 80025fe <_fflush_r+0x1a>
 80025f6:	6a03      	ldr	r3, [r0, #32]
 80025f8:	b90b      	cbnz	r3, 80025fe <_fflush_r+0x1a>
 80025fa:	f7ff fa3b 	bl	8001a74 <__sinit>
 80025fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f3      	beq.n	80025ee <_fflush_r+0xa>
 8002606:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002608:	07d0      	lsls	r0, r2, #31
 800260a:	d404      	bmi.n	8002616 <_fflush_r+0x32>
 800260c:	0599      	lsls	r1, r3, #22
 800260e:	d402      	bmi.n	8002616 <_fflush_r+0x32>
 8002610:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002612:	f7ff fb5e 	bl	8001cd2 <__retarget_lock_acquire_recursive>
 8002616:	4628      	mov	r0, r5
 8002618:	4621      	mov	r1, r4
 800261a:	f7ff ff5f 	bl	80024dc <__sflush_r>
 800261e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002620:	07da      	lsls	r2, r3, #31
 8002622:	4605      	mov	r5, r0
 8002624:	d4e4      	bmi.n	80025f0 <_fflush_r+0xc>
 8002626:	89a3      	ldrh	r3, [r4, #12]
 8002628:	059b      	lsls	r3, r3, #22
 800262a:	d4e1      	bmi.n	80025f0 <_fflush_r+0xc>
 800262c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800262e:	f7ff fb51 	bl	8001cd4 <__retarget_lock_release_recursive>
 8002632:	e7dd      	b.n	80025f0 <_fflush_r+0xc>

08002634 <fiprintf>:
 8002634:	b40e      	push	{r1, r2, r3}
 8002636:	b503      	push	{r0, r1, lr}
 8002638:	4601      	mov	r1, r0
 800263a:	ab03      	add	r3, sp, #12
 800263c:	4805      	ldr	r0, [pc, #20]	@ (8002654 <fiprintf+0x20>)
 800263e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002642:	6800      	ldr	r0, [r0, #0]
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	f000 f89d 	bl	8002784 <_vfiprintf_r>
 800264a:	b002      	add	sp, #8
 800264c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002650:	b003      	add	sp, #12
 8002652:	4770      	bx	lr
 8002654:	20000014 	.word	0x20000014

08002658 <memmove>:
 8002658:	4288      	cmp	r0, r1
 800265a:	b510      	push	{r4, lr}
 800265c:	eb01 0402 	add.w	r4, r1, r2
 8002660:	d902      	bls.n	8002668 <memmove+0x10>
 8002662:	4284      	cmp	r4, r0
 8002664:	4623      	mov	r3, r4
 8002666:	d807      	bhi.n	8002678 <memmove+0x20>
 8002668:	1e43      	subs	r3, r0, #1
 800266a:	42a1      	cmp	r1, r4
 800266c:	d008      	beq.n	8002680 <memmove+0x28>
 800266e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002672:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002676:	e7f8      	b.n	800266a <memmove+0x12>
 8002678:	4402      	add	r2, r0
 800267a:	4601      	mov	r1, r0
 800267c:	428a      	cmp	r2, r1
 800267e:	d100      	bne.n	8002682 <memmove+0x2a>
 8002680:	bd10      	pop	{r4, pc}
 8002682:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002686:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800268a:	e7f7      	b.n	800267c <memmove+0x24>

0800268c <_sbrk_r>:
 800268c:	b538      	push	{r3, r4, r5, lr}
 800268e:	4d06      	ldr	r5, [pc, #24]	@ (80026a8 <_sbrk_r+0x1c>)
 8002690:	2300      	movs	r3, #0
 8002692:	4604      	mov	r4, r0
 8002694:	4608      	mov	r0, r1
 8002696:	602b      	str	r3, [r5, #0]
 8002698:	f7ff f894 	bl	80017c4 <_sbrk>
 800269c:	1c43      	adds	r3, r0, #1
 800269e:	d102      	bne.n	80026a6 <_sbrk_r+0x1a>
 80026a0:	682b      	ldr	r3, [r5, #0]
 80026a2:	b103      	cbz	r3, 80026a6 <_sbrk_r+0x1a>
 80026a4:	6023      	str	r3, [r4, #0]
 80026a6:	bd38      	pop	{r3, r4, r5, pc}
 80026a8:	2000022c 	.word	0x2000022c

080026ac <memcpy>:
 80026ac:	440a      	add	r2, r1
 80026ae:	4291      	cmp	r1, r2
 80026b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80026b4:	d100      	bne.n	80026b8 <memcpy+0xc>
 80026b6:	4770      	bx	lr
 80026b8:	b510      	push	{r4, lr}
 80026ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026c2:	4291      	cmp	r1, r2
 80026c4:	d1f9      	bne.n	80026ba <memcpy+0xe>
 80026c6:	bd10      	pop	{r4, pc}

080026c8 <abort>:
 80026c8:	b508      	push	{r3, lr}
 80026ca:	2006      	movs	r0, #6
 80026cc:	f000 fa2e 	bl	8002b2c <raise>
 80026d0:	2001      	movs	r0, #1
 80026d2:	f7fe ffff 	bl	80016d4 <_exit>

080026d6 <_realloc_r>:
 80026d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026da:	4607      	mov	r7, r0
 80026dc:	4614      	mov	r4, r2
 80026de:	460d      	mov	r5, r1
 80026e0:	b921      	cbnz	r1, 80026ec <_realloc_r+0x16>
 80026e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026e6:	4611      	mov	r1, r2
 80026e8:	f7ff bb88 	b.w	8001dfc <_malloc_r>
 80026ec:	b92a      	cbnz	r2, 80026fa <_realloc_r+0x24>
 80026ee:	f7ff fb11 	bl	8001d14 <_free_r>
 80026f2:	4625      	mov	r5, r4
 80026f4:	4628      	mov	r0, r5
 80026f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026fa:	f000 fa33 	bl	8002b64 <_malloc_usable_size_r>
 80026fe:	4284      	cmp	r4, r0
 8002700:	4606      	mov	r6, r0
 8002702:	d802      	bhi.n	800270a <_realloc_r+0x34>
 8002704:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002708:	d8f4      	bhi.n	80026f4 <_realloc_r+0x1e>
 800270a:	4621      	mov	r1, r4
 800270c:	4638      	mov	r0, r7
 800270e:	f7ff fb75 	bl	8001dfc <_malloc_r>
 8002712:	4680      	mov	r8, r0
 8002714:	b908      	cbnz	r0, 800271a <_realloc_r+0x44>
 8002716:	4645      	mov	r5, r8
 8002718:	e7ec      	b.n	80026f4 <_realloc_r+0x1e>
 800271a:	42b4      	cmp	r4, r6
 800271c:	4622      	mov	r2, r4
 800271e:	4629      	mov	r1, r5
 8002720:	bf28      	it	cs
 8002722:	4632      	movcs	r2, r6
 8002724:	f7ff ffc2 	bl	80026ac <memcpy>
 8002728:	4629      	mov	r1, r5
 800272a:	4638      	mov	r0, r7
 800272c:	f7ff faf2 	bl	8001d14 <_free_r>
 8002730:	e7f1      	b.n	8002716 <_realloc_r+0x40>

08002732 <__sfputc_r>:
 8002732:	6893      	ldr	r3, [r2, #8]
 8002734:	3b01      	subs	r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	b410      	push	{r4}
 800273a:	6093      	str	r3, [r2, #8]
 800273c:	da08      	bge.n	8002750 <__sfputc_r+0x1e>
 800273e:	6994      	ldr	r4, [r2, #24]
 8002740:	42a3      	cmp	r3, r4
 8002742:	db01      	blt.n	8002748 <__sfputc_r+0x16>
 8002744:	290a      	cmp	r1, #10
 8002746:	d103      	bne.n	8002750 <__sfputc_r+0x1e>
 8002748:	f85d 4b04 	ldr.w	r4, [sp], #4
 800274c:	f000 b932 	b.w	80029b4 <__swbuf_r>
 8002750:	6813      	ldr	r3, [r2, #0]
 8002752:	1c58      	adds	r0, r3, #1
 8002754:	6010      	str	r0, [r2, #0]
 8002756:	7019      	strb	r1, [r3, #0]
 8002758:	4608      	mov	r0, r1
 800275a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800275e:	4770      	bx	lr

08002760 <__sfputs_r>:
 8002760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002762:	4606      	mov	r6, r0
 8002764:	460f      	mov	r7, r1
 8002766:	4614      	mov	r4, r2
 8002768:	18d5      	adds	r5, r2, r3
 800276a:	42ac      	cmp	r4, r5
 800276c:	d101      	bne.n	8002772 <__sfputs_r+0x12>
 800276e:	2000      	movs	r0, #0
 8002770:	e007      	b.n	8002782 <__sfputs_r+0x22>
 8002772:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002776:	463a      	mov	r2, r7
 8002778:	4630      	mov	r0, r6
 800277a:	f7ff ffda 	bl	8002732 <__sfputc_r>
 800277e:	1c43      	adds	r3, r0, #1
 8002780:	d1f3      	bne.n	800276a <__sfputs_r+0xa>
 8002782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002784 <_vfiprintf_r>:
 8002784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002788:	460d      	mov	r5, r1
 800278a:	b09d      	sub	sp, #116	@ 0x74
 800278c:	4614      	mov	r4, r2
 800278e:	4698      	mov	r8, r3
 8002790:	4606      	mov	r6, r0
 8002792:	b118      	cbz	r0, 800279c <_vfiprintf_r+0x18>
 8002794:	6a03      	ldr	r3, [r0, #32]
 8002796:	b90b      	cbnz	r3, 800279c <_vfiprintf_r+0x18>
 8002798:	f7ff f96c 	bl	8001a74 <__sinit>
 800279c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800279e:	07d9      	lsls	r1, r3, #31
 80027a0:	d405      	bmi.n	80027ae <_vfiprintf_r+0x2a>
 80027a2:	89ab      	ldrh	r3, [r5, #12]
 80027a4:	059a      	lsls	r2, r3, #22
 80027a6:	d402      	bmi.n	80027ae <_vfiprintf_r+0x2a>
 80027a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80027aa:	f7ff fa92 	bl	8001cd2 <__retarget_lock_acquire_recursive>
 80027ae:	89ab      	ldrh	r3, [r5, #12]
 80027b0:	071b      	lsls	r3, r3, #28
 80027b2:	d501      	bpl.n	80027b8 <_vfiprintf_r+0x34>
 80027b4:	692b      	ldr	r3, [r5, #16]
 80027b6:	b99b      	cbnz	r3, 80027e0 <_vfiprintf_r+0x5c>
 80027b8:	4629      	mov	r1, r5
 80027ba:	4630      	mov	r0, r6
 80027bc:	f000 f938 	bl	8002a30 <__swsetup_r>
 80027c0:	b170      	cbz	r0, 80027e0 <_vfiprintf_r+0x5c>
 80027c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80027c4:	07dc      	lsls	r4, r3, #31
 80027c6:	d504      	bpl.n	80027d2 <_vfiprintf_r+0x4e>
 80027c8:	f04f 30ff 	mov.w	r0, #4294967295
 80027cc:	b01d      	add	sp, #116	@ 0x74
 80027ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027d2:	89ab      	ldrh	r3, [r5, #12]
 80027d4:	0598      	lsls	r0, r3, #22
 80027d6:	d4f7      	bmi.n	80027c8 <_vfiprintf_r+0x44>
 80027d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80027da:	f7ff fa7b 	bl	8001cd4 <__retarget_lock_release_recursive>
 80027de:	e7f3      	b.n	80027c8 <_vfiprintf_r+0x44>
 80027e0:	2300      	movs	r3, #0
 80027e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80027e4:	2320      	movs	r3, #32
 80027e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80027ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80027ee:	2330      	movs	r3, #48	@ 0x30
 80027f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80029a0 <_vfiprintf_r+0x21c>
 80027f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80027f8:	f04f 0901 	mov.w	r9, #1
 80027fc:	4623      	mov	r3, r4
 80027fe:	469a      	mov	sl, r3
 8002800:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002804:	b10a      	cbz	r2, 800280a <_vfiprintf_r+0x86>
 8002806:	2a25      	cmp	r2, #37	@ 0x25
 8002808:	d1f9      	bne.n	80027fe <_vfiprintf_r+0x7a>
 800280a:	ebba 0b04 	subs.w	fp, sl, r4
 800280e:	d00b      	beq.n	8002828 <_vfiprintf_r+0xa4>
 8002810:	465b      	mov	r3, fp
 8002812:	4622      	mov	r2, r4
 8002814:	4629      	mov	r1, r5
 8002816:	4630      	mov	r0, r6
 8002818:	f7ff ffa2 	bl	8002760 <__sfputs_r>
 800281c:	3001      	adds	r0, #1
 800281e:	f000 80a7 	beq.w	8002970 <_vfiprintf_r+0x1ec>
 8002822:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002824:	445a      	add	r2, fp
 8002826:	9209      	str	r2, [sp, #36]	@ 0x24
 8002828:	f89a 3000 	ldrb.w	r3, [sl]
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 809f 	beq.w	8002970 <_vfiprintf_r+0x1ec>
 8002832:	2300      	movs	r3, #0
 8002834:	f04f 32ff 	mov.w	r2, #4294967295
 8002838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800283c:	f10a 0a01 	add.w	sl, sl, #1
 8002840:	9304      	str	r3, [sp, #16]
 8002842:	9307      	str	r3, [sp, #28]
 8002844:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002848:	931a      	str	r3, [sp, #104]	@ 0x68
 800284a:	4654      	mov	r4, sl
 800284c:	2205      	movs	r2, #5
 800284e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002852:	4853      	ldr	r0, [pc, #332]	@ (80029a0 <_vfiprintf_r+0x21c>)
 8002854:	f7fd fcc4 	bl	80001e0 <memchr>
 8002858:	9a04      	ldr	r2, [sp, #16]
 800285a:	b9d8      	cbnz	r0, 8002894 <_vfiprintf_r+0x110>
 800285c:	06d1      	lsls	r1, r2, #27
 800285e:	bf44      	itt	mi
 8002860:	2320      	movmi	r3, #32
 8002862:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002866:	0713      	lsls	r3, r2, #28
 8002868:	bf44      	itt	mi
 800286a:	232b      	movmi	r3, #43	@ 0x2b
 800286c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002870:	f89a 3000 	ldrb.w	r3, [sl]
 8002874:	2b2a      	cmp	r3, #42	@ 0x2a
 8002876:	d015      	beq.n	80028a4 <_vfiprintf_r+0x120>
 8002878:	9a07      	ldr	r2, [sp, #28]
 800287a:	4654      	mov	r4, sl
 800287c:	2000      	movs	r0, #0
 800287e:	f04f 0c0a 	mov.w	ip, #10
 8002882:	4621      	mov	r1, r4
 8002884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002888:	3b30      	subs	r3, #48	@ 0x30
 800288a:	2b09      	cmp	r3, #9
 800288c:	d94b      	bls.n	8002926 <_vfiprintf_r+0x1a2>
 800288e:	b1b0      	cbz	r0, 80028be <_vfiprintf_r+0x13a>
 8002890:	9207      	str	r2, [sp, #28]
 8002892:	e014      	b.n	80028be <_vfiprintf_r+0x13a>
 8002894:	eba0 0308 	sub.w	r3, r0, r8
 8002898:	fa09 f303 	lsl.w	r3, r9, r3
 800289c:	4313      	orrs	r3, r2
 800289e:	9304      	str	r3, [sp, #16]
 80028a0:	46a2      	mov	sl, r4
 80028a2:	e7d2      	b.n	800284a <_vfiprintf_r+0xc6>
 80028a4:	9b03      	ldr	r3, [sp, #12]
 80028a6:	1d19      	adds	r1, r3, #4
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	9103      	str	r1, [sp, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	bfbb      	ittet	lt
 80028b0:	425b      	neglt	r3, r3
 80028b2:	f042 0202 	orrlt.w	r2, r2, #2
 80028b6:	9307      	strge	r3, [sp, #28]
 80028b8:	9307      	strlt	r3, [sp, #28]
 80028ba:	bfb8      	it	lt
 80028bc:	9204      	strlt	r2, [sp, #16]
 80028be:	7823      	ldrb	r3, [r4, #0]
 80028c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80028c2:	d10a      	bne.n	80028da <_vfiprintf_r+0x156>
 80028c4:	7863      	ldrb	r3, [r4, #1]
 80028c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80028c8:	d132      	bne.n	8002930 <_vfiprintf_r+0x1ac>
 80028ca:	9b03      	ldr	r3, [sp, #12]
 80028cc:	1d1a      	adds	r2, r3, #4
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	9203      	str	r2, [sp, #12]
 80028d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80028d6:	3402      	adds	r4, #2
 80028d8:	9305      	str	r3, [sp, #20]
 80028da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80029b0 <_vfiprintf_r+0x22c>
 80028de:	7821      	ldrb	r1, [r4, #0]
 80028e0:	2203      	movs	r2, #3
 80028e2:	4650      	mov	r0, sl
 80028e4:	f7fd fc7c 	bl	80001e0 <memchr>
 80028e8:	b138      	cbz	r0, 80028fa <_vfiprintf_r+0x176>
 80028ea:	9b04      	ldr	r3, [sp, #16]
 80028ec:	eba0 000a 	sub.w	r0, r0, sl
 80028f0:	2240      	movs	r2, #64	@ 0x40
 80028f2:	4082      	lsls	r2, r0
 80028f4:	4313      	orrs	r3, r2
 80028f6:	3401      	adds	r4, #1
 80028f8:	9304      	str	r3, [sp, #16]
 80028fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028fe:	4829      	ldr	r0, [pc, #164]	@ (80029a4 <_vfiprintf_r+0x220>)
 8002900:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002904:	2206      	movs	r2, #6
 8002906:	f7fd fc6b 	bl	80001e0 <memchr>
 800290a:	2800      	cmp	r0, #0
 800290c:	d03f      	beq.n	800298e <_vfiprintf_r+0x20a>
 800290e:	4b26      	ldr	r3, [pc, #152]	@ (80029a8 <_vfiprintf_r+0x224>)
 8002910:	bb1b      	cbnz	r3, 800295a <_vfiprintf_r+0x1d6>
 8002912:	9b03      	ldr	r3, [sp, #12]
 8002914:	3307      	adds	r3, #7
 8002916:	f023 0307 	bic.w	r3, r3, #7
 800291a:	3308      	adds	r3, #8
 800291c:	9303      	str	r3, [sp, #12]
 800291e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002920:	443b      	add	r3, r7
 8002922:	9309      	str	r3, [sp, #36]	@ 0x24
 8002924:	e76a      	b.n	80027fc <_vfiprintf_r+0x78>
 8002926:	fb0c 3202 	mla	r2, ip, r2, r3
 800292a:	460c      	mov	r4, r1
 800292c:	2001      	movs	r0, #1
 800292e:	e7a8      	b.n	8002882 <_vfiprintf_r+0xfe>
 8002930:	2300      	movs	r3, #0
 8002932:	3401      	adds	r4, #1
 8002934:	9305      	str	r3, [sp, #20]
 8002936:	4619      	mov	r1, r3
 8002938:	f04f 0c0a 	mov.w	ip, #10
 800293c:	4620      	mov	r0, r4
 800293e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002942:	3a30      	subs	r2, #48	@ 0x30
 8002944:	2a09      	cmp	r2, #9
 8002946:	d903      	bls.n	8002950 <_vfiprintf_r+0x1cc>
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0c6      	beq.n	80028da <_vfiprintf_r+0x156>
 800294c:	9105      	str	r1, [sp, #20]
 800294e:	e7c4      	b.n	80028da <_vfiprintf_r+0x156>
 8002950:	fb0c 2101 	mla	r1, ip, r1, r2
 8002954:	4604      	mov	r4, r0
 8002956:	2301      	movs	r3, #1
 8002958:	e7f0      	b.n	800293c <_vfiprintf_r+0x1b8>
 800295a:	ab03      	add	r3, sp, #12
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	462a      	mov	r2, r5
 8002960:	4b12      	ldr	r3, [pc, #72]	@ (80029ac <_vfiprintf_r+0x228>)
 8002962:	a904      	add	r1, sp, #16
 8002964:	4630      	mov	r0, r6
 8002966:	f3af 8000 	nop.w
 800296a:	4607      	mov	r7, r0
 800296c:	1c78      	adds	r0, r7, #1
 800296e:	d1d6      	bne.n	800291e <_vfiprintf_r+0x19a>
 8002970:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002972:	07d9      	lsls	r1, r3, #31
 8002974:	d405      	bmi.n	8002982 <_vfiprintf_r+0x1fe>
 8002976:	89ab      	ldrh	r3, [r5, #12]
 8002978:	059a      	lsls	r2, r3, #22
 800297a:	d402      	bmi.n	8002982 <_vfiprintf_r+0x1fe>
 800297c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800297e:	f7ff f9a9 	bl	8001cd4 <__retarget_lock_release_recursive>
 8002982:	89ab      	ldrh	r3, [r5, #12]
 8002984:	065b      	lsls	r3, r3, #25
 8002986:	f53f af1f 	bmi.w	80027c8 <_vfiprintf_r+0x44>
 800298a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800298c:	e71e      	b.n	80027cc <_vfiprintf_r+0x48>
 800298e:	ab03      	add	r3, sp, #12
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	462a      	mov	r2, r5
 8002994:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <_vfiprintf_r+0x228>)
 8002996:	a904      	add	r1, sp, #16
 8002998:	4630      	mov	r0, r6
 800299a:	f7ff fc81 	bl	80022a0 <_printf_i>
 800299e:	e7e4      	b.n	800296a <_vfiprintf_r+0x1e6>
 80029a0:	08003055 	.word	0x08003055
 80029a4:	0800305f 	.word	0x0800305f
 80029a8:	00000000 	.word	0x00000000
 80029ac:	08002761 	.word	0x08002761
 80029b0:	0800305b 	.word	0x0800305b

080029b4 <__swbuf_r>:
 80029b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b6:	460e      	mov	r6, r1
 80029b8:	4614      	mov	r4, r2
 80029ba:	4605      	mov	r5, r0
 80029bc:	b118      	cbz	r0, 80029c6 <__swbuf_r+0x12>
 80029be:	6a03      	ldr	r3, [r0, #32]
 80029c0:	b90b      	cbnz	r3, 80029c6 <__swbuf_r+0x12>
 80029c2:	f7ff f857 	bl	8001a74 <__sinit>
 80029c6:	69a3      	ldr	r3, [r4, #24]
 80029c8:	60a3      	str	r3, [r4, #8]
 80029ca:	89a3      	ldrh	r3, [r4, #12]
 80029cc:	071a      	lsls	r2, r3, #28
 80029ce:	d501      	bpl.n	80029d4 <__swbuf_r+0x20>
 80029d0:	6923      	ldr	r3, [r4, #16]
 80029d2:	b943      	cbnz	r3, 80029e6 <__swbuf_r+0x32>
 80029d4:	4621      	mov	r1, r4
 80029d6:	4628      	mov	r0, r5
 80029d8:	f000 f82a 	bl	8002a30 <__swsetup_r>
 80029dc:	b118      	cbz	r0, 80029e6 <__swbuf_r+0x32>
 80029de:	f04f 37ff 	mov.w	r7, #4294967295
 80029e2:	4638      	mov	r0, r7
 80029e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029e6:	6823      	ldr	r3, [r4, #0]
 80029e8:	6922      	ldr	r2, [r4, #16]
 80029ea:	1a98      	subs	r0, r3, r2
 80029ec:	6963      	ldr	r3, [r4, #20]
 80029ee:	b2f6      	uxtb	r6, r6
 80029f0:	4283      	cmp	r3, r0
 80029f2:	4637      	mov	r7, r6
 80029f4:	dc05      	bgt.n	8002a02 <__swbuf_r+0x4e>
 80029f6:	4621      	mov	r1, r4
 80029f8:	4628      	mov	r0, r5
 80029fa:	f7ff fdf3 	bl	80025e4 <_fflush_r>
 80029fe:	2800      	cmp	r0, #0
 8002a00:	d1ed      	bne.n	80029de <__swbuf_r+0x2a>
 8002a02:	68a3      	ldr	r3, [r4, #8]
 8002a04:	3b01      	subs	r3, #1
 8002a06:	60a3      	str	r3, [r4, #8]
 8002a08:	6823      	ldr	r3, [r4, #0]
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	6022      	str	r2, [r4, #0]
 8002a0e:	701e      	strb	r6, [r3, #0]
 8002a10:	6962      	ldr	r2, [r4, #20]
 8002a12:	1c43      	adds	r3, r0, #1
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d004      	beq.n	8002a22 <__swbuf_r+0x6e>
 8002a18:	89a3      	ldrh	r3, [r4, #12]
 8002a1a:	07db      	lsls	r3, r3, #31
 8002a1c:	d5e1      	bpl.n	80029e2 <__swbuf_r+0x2e>
 8002a1e:	2e0a      	cmp	r6, #10
 8002a20:	d1df      	bne.n	80029e2 <__swbuf_r+0x2e>
 8002a22:	4621      	mov	r1, r4
 8002a24:	4628      	mov	r0, r5
 8002a26:	f7ff fddd 	bl	80025e4 <_fflush_r>
 8002a2a:	2800      	cmp	r0, #0
 8002a2c:	d0d9      	beq.n	80029e2 <__swbuf_r+0x2e>
 8002a2e:	e7d6      	b.n	80029de <__swbuf_r+0x2a>

08002a30 <__swsetup_r>:
 8002a30:	b538      	push	{r3, r4, r5, lr}
 8002a32:	4b29      	ldr	r3, [pc, #164]	@ (8002ad8 <__swsetup_r+0xa8>)
 8002a34:	4605      	mov	r5, r0
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	460c      	mov	r4, r1
 8002a3a:	b118      	cbz	r0, 8002a44 <__swsetup_r+0x14>
 8002a3c:	6a03      	ldr	r3, [r0, #32]
 8002a3e:	b90b      	cbnz	r3, 8002a44 <__swsetup_r+0x14>
 8002a40:	f7ff f818 	bl	8001a74 <__sinit>
 8002a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a48:	0719      	lsls	r1, r3, #28
 8002a4a:	d422      	bmi.n	8002a92 <__swsetup_r+0x62>
 8002a4c:	06da      	lsls	r2, r3, #27
 8002a4e:	d407      	bmi.n	8002a60 <__swsetup_r+0x30>
 8002a50:	2209      	movs	r2, #9
 8002a52:	602a      	str	r2, [r5, #0]
 8002a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a58:	81a3      	strh	r3, [r4, #12]
 8002a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a5e:	e033      	b.n	8002ac8 <__swsetup_r+0x98>
 8002a60:	0758      	lsls	r0, r3, #29
 8002a62:	d512      	bpl.n	8002a8a <__swsetup_r+0x5a>
 8002a64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002a66:	b141      	cbz	r1, 8002a7a <__swsetup_r+0x4a>
 8002a68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002a6c:	4299      	cmp	r1, r3
 8002a6e:	d002      	beq.n	8002a76 <__swsetup_r+0x46>
 8002a70:	4628      	mov	r0, r5
 8002a72:	f7ff f94f 	bl	8001d14 <_free_r>
 8002a76:	2300      	movs	r3, #0
 8002a78:	6363      	str	r3, [r4, #52]	@ 0x34
 8002a7a:	89a3      	ldrh	r3, [r4, #12]
 8002a7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002a80:	81a3      	strh	r3, [r4, #12]
 8002a82:	2300      	movs	r3, #0
 8002a84:	6063      	str	r3, [r4, #4]
 8002a86:	6923      	ldr	r3, [r4, #16]
 8002a88:	6023      	str	r3, [r4, #0]
 8002a8a:	89a3      	ldrh	r3, [r4, #12]
 8002a8c:	f043 0308 	orr.w	r3, r3, #8
 8002a90:	81a3      	strh	r3, [r4, #12]
 8002a92:	6923      	ldr	r3, [r4, #16]
 8002a94:	b94b      	cbnz	r3, 8002aaa <__swsetup_r+0x7a>
 8002a96:	89a3      	ldrh	r3, [r4, #12]
 8002a98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002aa0:	d003      	beq.n	8002aaa <__swsetup_r+0x7a>
 8002aa2:	4621      	mov	r1, r4
 8002aa4:	4628      	mov	r0, r5
 8002aa6:	f000 f88b 	bl	8002bc0 <__smakebuf_r>
 8002aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002aae:	f013 0201 	ands.w	r2, r3, #1
 8002ab2:	d00a      	beq.n	8002aca <__swsetup_r+0x9a>
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	60a2      	str	r2, [r4, #8]
 8002ab8:	6962      	ldr	r2, [r4, #20]
 8002aba:	4252      	negs	r2, r2
 8002abc:	61a2      	str	r2, [r4, #24]
 8002abe:	6922      	ldr	r2, [r4, #16]
 8002ac0:	b942      	cbnz	r2, 8002ad4 <__swsetup_r+0xa4>
 8002ac2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002ac6:	d1c5      	bne.n	8002a54 <__swsetup_r+0x24>
 8002ac8:	bd38      	pop	{r3, r4, r5, pc}
 8002aca:	0799      	lsls	r1, r3, #30
 8002acc:	bf58      	it	pl
 8002ace:	6962      	ldrpl	r2, [r4, #20]
 8002ad0:	60a2      	str	r2, [r4, #8]
 8002ad2:	e7f4      	b.n	8002abe <__swsetup_r+0x8e>
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	e7f7      	b.n	8002ac8 <__swsetup_r+0x98>
 8002ad8:	20000014 	.word	0x20000014

08002adc <_raise_r>:
 8002adc:	291f      	cmp	r1, #31
 8002ade:	b538      	push	{r3, r4, r5, lr}
 8002ae0:	4605      	mov	r5, r0
 8002ae2:	460c      	mov	r4, r1
 8002ae4:	d904      	bls.n	8002af0 <_raise_r+0x14>
 8002ae6:	2316      	movs	r3, #22
 8002ae8:	6003      	str	r3, [r0, #0]
 8002aea:	f04f 30ff 	mov.w	r0, #4294967295
 8002aee:	bd38      	pop	{r3, r4, r5, pc}
 8002af0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8002af2:	b112      	cbz	r2, 8002afa <_raise_r+0x1e>
 8002af4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002af8:	b94b      	cbnz	r3, 8002b0e <_raise_r+0x32>
 8002afa:	4628      	mov	r0, r5
 8002afc:	f000 f830 	bl	8002b60 <_getpid_r>
 8002b00:	4622      	mov	r2, r4
 8002b02:	4601      	mov	r1, r0
 8002b04:	4628      	mov	r0, r5
 8002b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b0a:	f000 b817 	b.w	8002b3c <_kill_r>
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d00a      	beq.n	8002b28 <_raise_r+0x4c>
 8002b12:	1c59      	adds	r1, r3, #1
 8002b14:	d103      	bne.n	8002b1e <_raise_r+0x42>
 8002b16:	2316      	movs	r3, #22
 8002b18:	6003      	str	r3, [r0, #0]
 8002b1a:	2001      	movs	r0, #1
 8002b1c:	e7e7      	b.n	8002aee <_raise_r+0x12>
 8002b1e:	2100      	movs	r1, #0
 8002b20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8002b24:	4620      	mov	r0, r4
 8002b26:	4798      	blx	r3
 8002b28:	2000      	movs	r0, #0
 8002b2a:	e7e0      	b.n	8002aee <_raise_r+0x12>

08002b2c <raise>:
 8002b2c:	4b02      	ldr	r3, [pc, #8]	@ (8002b38 <raise+0xc>)
 8002b2e:	4601      	mov	r1, r0
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	f7ff bfd3 	b.w	8002adc <_raise_r>
 8002b36:	bf00      	nop
 8002b38:	20000014 	.word	0x20000014

08002b3c <_kill_r>:
 8002b3c:	b538      	push	{r3, r4, r5, lr}
 8002b3e:	4d07      	ldr	r5, [pc, #28]	@ (8002b5c <_kill_r+0x20>)
 8002b40:	2300      	movs	r3, #0
 8002b42:	4604      	mov	r4, r0
 8002b44:	4608      	mov	r0, r1
 8002b46:	4611      	mov	r1, r2
 8002b48:	602b      	str	r3, [r5, #0]
 8002b4a:	f7fe fdb3 	bl	80016b4 <_kill>
 8002b4e:	1c43      	adds	r3, r0, #1
 8002b50:	d102      	bne.n	8002b58 <_kill_r+0x1c>
 8002b52:	682b      	ldr	r3, [r5, #0]
 8002b54:	b103      	cbz	r3, 8002b58 <_kill_r+0x1c>
 8002b56:	6023      	str	r3, [r4, #0]
 8002b58:	bd38      	pop	{r3, r4, r5, pc}
 8002b5a:	bf00      	nop
 8002b5c:	2000022c 	.word	0x2000022c

08002b60 <_getpid_r>:
 8002b60:	f7fe bda0 	b.w	80016a4 <_getpid>

08002b64 <_malloc_usable_size_r>:
 8002b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b68:	1f18      	subs	r0, r3, #4
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	bfbc      	itt	lt
 8002b6e:	580b      	ldrlt	r3, [r1, r0]
 8002b70:	18c0      	addlt	r0, r0, r3
 8002b72:	4770      	bx	lr

08002b74 <__swhatbuf_r>:
 8002b74:	b570      	push	{r4, r5, r6, lr}
 8002b76:	460c      	mov	r4, r1
 8002b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b7c:	2900      	cmp	r1, #0
 8002b7e:	b096      	sub	sp, #88	@ 0x58
 8002b80:	4615      	mov	r5, r2
 8002b82:	461e      	mov	r6, r3
 8002b84:	da0d      	bge.n	8002ba2 <__swhatbuf_r+0x2e>
 8002b86:	89a3      	ldrh	r3, [r4, #12]
 8002b88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002b8c:	f04f 0100 	mov.w	r1, #0
 8002b90:	bf14      	ite	ne
 8002b92:	2340      	movne	r3, #64	@ 0x40
 8002b94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002b98:	2000      	movs	r0, #0
 8002b9a:	6031      	str	r1, [r6, #0]
 8002b9c:	602b      	str	r3, [r5, #0]
 8002b9e:	b016      	add	sp, #88	@ 0x58
 8002ba0:	bd70      	pop	{r4, r5, r6, pc}
 8002ba2:	466a      	mov	r2, sp
 8002ba4:	f000 f848 	bl	8002c38 <_fstat_r>
 8002ba8:	2800      	cmp	r0, #0
 8002baa:	dbec      	blt.n	8002b86 <__swhatbuf_r+0x12>
 8002bac:	9901      	ldr	r1, [sp, #4]
 8002bae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002bb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002bb6:	4259      	negs	r1, r3
 8002bb8:	4159      	adcs	r1, r3
 8002bba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bbe:	e7eb      	b.n	8002b98 <__swhatbuf_r+0x24>

08002bc0 <__smakebuf_r>:
 8002bc0:	898b      	ldrh	r3, [r1, #12]
 8002bc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bc4:	079d      	lsls	r5, r3, #30
 8002bc6:	4606      	mov	r6, r0
 8002bc8:	460c      	mov	r4, r1
 8002bca:	d507      	bpl.n	8002bdc <__smakebuf_r+0x1c>
 8002bcc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002bd0:	6023      	str	r3, [r4, #0]
 8002bd2:	6123      	str	r3, [r4, #16]
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	6163      	str	r3, [r4, #20]
 8002bd8:	b003      	add	sp, #12
 8002bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bdc:	ab01      	add	r3, sp, #4
 8002bde:	466a      	mov	r2, sp
 8002be0:	f7ff ffc8 	bl	8002b74 <__swhatbuf_r>
 8002be4:	9f00      	ldr	r7, [sp, #0]
 8002be6:	4605      	mov	r5, r0
 8002be8:	4639      	mov	r1, r7
 8002bea:	4630      	mov	r0, r6
 8002bec:	f7ff f906 	bl	8001dfc <_malloc_r>
 8002bf0:	b948      	cbnz	r0, 8002c06 <__smakebuf_r+0x46>
 8002bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bf6:	059a      	lsls	r2, r3, #22
 8002bf8:	d4ee      	bmi.n	8002bd8 <__smakebuf_r+0x18>
 8002bfa:	f023 0303 	bic.w	r3, r3, #3
 8002bfe:	f043 0302 	orr.w	r3, r3, #2
 8002c02:	81a3      	strh	r3, [r4, #12]
 8002c04:	e7e2      	b.n	8002bcc <__smakebuf_r+0xc>
 8002c06:	89a3      	ldrh	r3, [r4, #12]
 8002c08:	6020      	str	r0, [r4, #0]
 8002c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c0e:	81a3      	strh	r3, [r4, #12]
 8002c10:	9b01      	ldr	r3, [sp, #4]
 8002c12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002c16:	b15b      	cbz	r3, 8002c30 <__smakebuf_r+0x70>
 8002c18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c1c:	4630      	mov	r0, r6
 8002c1e:	f000 f81d 	bl	8002c5c <_isatty_r>
 8002c22:	b128      	cbz	r0, 8002c30 <__smakebuf_r+0x70>
 8002c24:	89a3      	ldrh	r3, [r4, #12]
 8002c26:	f023 0303 	bic.w	r3, r3, #3
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	81a3      	strh	r3, [r4, #12]
 8002c30:	89a3      	ldrh	r3, [r4, #12]
 8002c32:	431d      	orrs	r5, r3
 8002c34:	81a5      	strh	r5, [r4, #12]
 8002c36:	e7cf      	b.n	8002bd8 <__smakebuf_r+0x18>

08002c38 <_fstat_r>:
 8002c38:	b538      	push	{r3, r4, r5, lr}
 8002c3a:	4d07      	ldr	r5, [pc, #28]	@ (8002c58 <_fstat_r+0x20>)
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	4604      	mov	r4, r0
 8002c40:	4608      	mov	r0, r1
 8002c42:	4611      	mov	r1, r2
 8002c44:	602b      	str	r3, [r5, #0]
 8002c46:	f7fe fd95 	bl	8001774 <_fstat>
 8002c4a:	1c43      	adds	r3, r0, #1
 8002c4c:	d102      	bne.n	8002c54 <_fstat_r+0x1c>
 8002c4e:	682b      	ldr	r3, [r5, #0]
 8002c50:	b103      	cbz	r3, 8002c54 <_fstat_r+0x1c>
 8002c52:	6023      	str	r3, [r4, #0]
 8002c54:	bd38      	pop	{r3, r4, r5, pc}
 8002c56:	bf00      	nop
 8002c58:	2000022c 	.word	0x2000022c

08002c5c <_isatty_r>:
 8002c5c:	b538      	push	{r3, r4, r5, lr}
 8002c5e:	4d06      	ldr	r5, [pc, #24]	@ (8002c78 <_isatty_r+0x1c>)
 8002c60:	2300      	movs	r3, #0
 8002c62:	4604      	mov	r4, r0
 8002c64:	4608      	mov	r0, r1
 8002c66:	602b      	str	r3, [r5, #0]
 8002c68:	f7fe fd94 	bl	8001794 <_isatty>
 8002c6c:	1c43      	adds	r3, r0, #1
 8002c6e:	d102      	bne.n	8002c76 <_isatty_r+0x1a>
 8002c70:	682b      	ldr	r3, [r5, #0]
 8002c72:	b103      	cbz	r3, 8002c76 <_isatty_r+0x1a>
 8002c74:	6023      	str	r3, [r4, #0]
 8002c76:	bd38      	pop	{r3, r4, r5, pc}
 8002c78:	2000022c 	.word	0x2000022c

08002c7c <_init>:
 8002c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7e:	bf00      	nop
 8002c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c82:	bc08      	pop	{r3}
 8002c84:	469e      	mov	lr, r3
 8002c86:	4770      	bx	lr

08002c88 <_fini>:
 8002c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8a:	bf00      	nop
 8002c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c8e:	bc08      	pop	{r3}
 8002c90:	469e      	mov	lr, r3
 8002c92:	4770      	bx	lr
