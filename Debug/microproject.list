
microproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000380  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000518  08000518  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000518  08000518  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000518  08000518  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000518  08000518  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000518  08000518  00001518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800051c  0800051c  0000151c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000520  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000524  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000524  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000597  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001c9  00000000  00000000  000025cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  00002798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000005d  00000000  00000000  00002820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e008  00000000  00000000  0000287d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000805  00000000  00000000  00010885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050cea  00000000  00000000  0001108a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00061d74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000174  00000000  00000000  00061db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00061f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000500 	.word	0x08000500

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000500 	.word	0x08000500

080001d8 <dly>:
#include <stdint.h>

uint32_t SystemCoreClock = 84000000; // ต้องกำหนดเองถ้าไม่มี system_stm32f4xx.c

/* delay */
static inline void dly(uint32_t ms){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = (SystemCoreClock/1000)-1; SysTick->VAL=0;
 80001e0:	4b12      	ldr	r3, [pc, #72]	@ (800022c <dly+0x54>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a12      	ldr	r2, [pc, #72]	@ (8000230 <dly+0x58>)
 80001e6:	fba2 2303 	umull	r2, r3, r2, r3
 80001ea:	099b      	lsrs	r3, r3, #6
 80001ec:	4a11      	ldr	r2, [pc, #68]	@ (8000234 <dly+0x5c>)
 80001ee:	3b01      	subs	r3, #1
 80001f0:	6053      	str	r3, [r2, #4]
 80001f2:	4b10      	ldr	r3, [pc, #64]	@ (8000234 <dly+0x5c>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk|SysTick_CTRL_ENABLE_Msk;
 80001f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000234 <dly+0x5c>)
 80001fa:	2205      	movs	r2, #5
 80001fc:	601a      	str	r2, [r3, #0]
    while(ms--) { while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); }
 80001fe:	e006      	b.n	800020e <dly+0x36>
 8000200:	bf00      	nop
 8000202:	4b0c      	ldr	r3, [pc, #48]	@ (8000234 <dly+0x5c>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800020a:	2b00      	cmp	r3, #0
 800020c:	d0f9      	beq.n	8000202 <dly+0x2a>
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	1e5a      	subs	r2, r3, #1
 8000212:	607a      	str	r2, [r7, #4]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d1f3      	bne.n	8000200 <dly+0x28>
    SysTick->CTRL = 0;
 8000218:	4b06      	ldr	r3, [pc, #24]	@ (8000234 <dly+0x5c>)
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20000000 	.word	0x20000000
 8000230:	10624dd3 	.word	0x10624dd3
 8000234:	e000e010 	.word	0xe000e010

08000238 <I2C1_Init>:

/* I2C1 init */
static void I2C1_Init(void){
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800023c:	4b21      	ldr	r3, [pc, #132]	@ (80002c4 <I2C1_Init+0x8c>)
 800023e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000240:	4a20      	ldr	r2, [pc, #128]	@ (80002c4 <I2C1_Init+0x8c>)
 8000242:	f043 0302 	orr.w	r3, r3, #2
 8000246:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOB->MODER &= ~((3<<(8*2))|(3<<(9*2)));
 8000248:	4b1f      	ldr	r3, [pc, #124]	@ (80002c8 <I2C1_Init+0x90>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a1e      	ldr	r2, [pc, #120]	@ (80002c8 <I2C1_Init+0x90>)
 800024e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000252:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2<<(8*2))|(2<<(9*2));
 8000254:	4b1c      	ldr	r3, [pc, #112]	@ (80002c8 <I2C1_Init+0x90>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a1b      	ldr	r2, [pc, #108]	@ (80002c8 <I2C1_Init+0x90>)
 800025a:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 800025e:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1<<8)|(1<<9);
 8000260:	4b19      	ldr	r3, [pc, #100]	@ (80002c8 <I2C1_Init+0x90>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	4a18      	ldr	r2, [pc, #96]	@ (80002c8 <I2C1_Init+0x90>)
 8000266:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800026a:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR|= (3<<(8*2))|(3<<(9*2));
 800026c:	4b16      	ldr	r3, [pc, #88]	@ (80002c8 <I2C1_Init+0x90>)
 800026e:	689b      	ldr	r3, [r3, #8]
 8000270:	4a15      	ldr	r2, [pc, #84]	@ (80002c8 <I2C1_Init+0x90>)
 8000272:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8000276:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR  |= (1<<(8*2))|(1<<(9*2));
 8000278:	4b13      	ldr	r3, [pc, #76]	@ (80002c8 <I2C1_Init+0x90>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	4a12      	ldr	r2, [pc, #72]	@ (80002c8 <I2C1_Init+0x90>)
 800027e:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000282:	60d3      	str	r3, [r2, #12]
    GPIOB->AFR[1] |= (4<<(0))|(4<<(4));
 8000284:	4b10      	ldr	r3, [pc, #64]	@ (80002c8 <I2C1_Init+0x90>)
 8000286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000288:	4a0f      	ldr	r2, [pc, #60]	@ (80002c8 <I2C1_Init+0x90>)
 800028a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800028e:	6253      	str	r3, [r2, #36]	@ 0x24

    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000290:	4b0c      	ldr	r3, [pc, #48]	@ (80002c4 <I2C1_Init+0x8c>)
 8000292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000294:	4a0b      	ldr	r2, [pc, #44]	@ (80002c4 <I2C1_Init+0x8c>)
 8000296:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800029a:	6413      	str	r3, [r2, #64]	@ 0x40
    I2C1->CR1 = 0;
 800029c:	4b0b      	ldr	r3, [pc, #44]	@ (80002cc <I2C1_Init+0x94>)
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
    I2C1->CR2 = 42;
 80002a2:	4b0a      	ldr	r3, [pc, #40]	@ (80002cc <I2C1_Init+0x94>)
 80002a4:	222a      	movs	r2, #42	@ 0x2a
 80002a6:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 210;
 80002a8:	4b08      	ldr	r3, [pc, #32]	@ (80002cc <I2C1_Init+0x94>)
 80002aa:	22d2      	movs	r2, #210	@ 0xd2
 80002ac:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 43;
 80002ae:	4b07      	ldr	r3, [pc, #28]	@ (80002cc <I2C1_Init+0x94>)
 80002b0:	222b      	movs	r2, #43	@ 0x2b
 80002b2:	621a      	str	r2, [r3, #32]
    I2C1->CR1 = I2C_CR1_PE;
 80002b4:	4b05      	ldr	r3, [pc, #20]	@ (80002cc <I2C1_Init+0x94>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	601a      	str	r2, [r3, #0]
}
 80002ba:	bf00      	nop
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr
 80002c4:	40023800 	.word	0x40023800
 80002c8:	40020400 	.word	0x40020400
 80002cc:	40005400 	.word	0x40005400

080002d0 <i2c_start>:

/* I2C low-level */
static void i2c_start(uint8_t addr){
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
    I2C1->CR1 |= I2C_CR1_START;
 80002da:	4b12      	ldr	r3, [pc, #72]	@ (8000324 <i2c_start+0x54>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a11      	ldr	r2, [pc, #68]	@ (8000324 <i2c_start+0x54>)
 80002e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002e4:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));
 80002e6:	bf00      	nop
 80002e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000324 <i2c_start+0x54>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	f003 0301 	and.w	r3, r3, #1
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d0f9      	beq.n	80002e8 <i2c_start+0x18>
    (void)I2C1->SR1;
 80002f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000324 <i2c_start+0x54>)
 80002f6:	695b      	ldr	r3, [r3, #20]
    I2C1->DR = addr<<1;
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000324 <i2c_start+0x54>)
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	6113      	str	r3, [r2, #16]
    while(!(I2C1->SR1 & I2C_SR1_ADDR));
 8000300:	bf00      	nop
 8000302:	4b08      	ldr	r3, [pc, #32]	@ (8000324 <i2c_start+0x54>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f003 0302 	and.w	r3, r3, #2
 800030a:	2b00      	cmp	r3, #0
 800030c:	d0f9      	beq.n	8000302 <i2c_start+0x32>
    (void)I2C1->SR1; (void)I2C1->SR2;
 800030e:	4b05      	ldr	r3, [pc, #20]	@ (8000324 <i2c_start+0x54>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4b04      	ldr	r3, [pc, #16]	@ (8000324 <i2c_start+0x54>)
 8000314:	699b      	ldr	r3, [r3, #24]
}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	40005400 	.word	0x40005400

08000328 <i2c_w>:
static void i2c_w(uint8_t b){
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
    while(!(I2C1->SR1 & I2C_SR1_TXE));
 8000332:	bf00      	nop
 8000334:	4b0b      	ldr	r3, [pc, #44]	@ (8000364 <i2c_w+0x3c>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0f9      	beq.n	8000334 <i2c_w+0xc>
    I2C1->DR = b;
 8000340:	4a08      	ldr	r2, [pc, #32]	@ (8000364 <i2c_w+0x3c>)
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	6113      	str	r3, [r2, #16]
    while(!(I2C1->SR1 & I2C_SR1_BTF));
 8000346:	bf00      	nop
 8000348:	4b06      	ldr	r3, [pc, #24]	@ (8000364 <i2c_w+0x3c>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f003 0304 	and.w	r3, r3, #4
 8000350:	2b00      	cmp	r3, #0
 8000352:	d0f9      	beq.n	8000348 <i2c_w+0x20>
}
 8000354:	bf00      	nop
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	40005400 	.word	0x40005400

08000368 <i2c_stop>:
static void i2c_stop(void){ I2C1->CR1 |= I2C_CR1_STOP; }
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
 800036c:	4b05      	ldr	r3, [pc, #20]	@ (8000384 <i2c_stop+0x1c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a04      	ldr	r2, [pc, #16]	@ (8000384 <i2c_stop+0x1c>)
 8000372:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000376:	6013      	str	r3, [r2, #0]
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40005400 	.word	0x40005400

08000388 <ssd_cmd>:

/* SSD1306 basic */
#define SSD1306_ADDR 0x3C
static void ssd_cmd(uint8_t c){
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
    i2c_start(SSD1306_ADDR);
 8000392:	203c      	movs	r0, #60	@ 0x3c
 8000394:	f7ff ff9c 	bl	80002d0 <i2c_start>
    i2c_w(0x00); i2c_w(c);
 8000398:	2000      	movs	r0, #0
 800039a:	f7ff ffc5 	bl	8000328 <i2c_w>
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff ffc1 	bl	8000328 <i2c_w>
    i2c_stop();
 80003a6:	f7ff ffdf 	bl	8000368 <i2c_stop>
}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}

080003b2 <ssd_init>:
static void ssd_init(void){
 80003b2:	b580      	push	{r7, lr}
 80003b4:	af00      	add	r7, sp, #0
    dly(100);
 80003b6:	2064      	movs	r0, #100	@ 0x64
 80003b8:	f7ff ff0e 	bl	80001d8 <dly>
    ssd_cmd(0xAE);
 80003bc:	20ae      	movs	r0, #174	@ 0xae
 80003be:	f7ff ffe3 	bl	8000388 <ssd_cmd>
    ssd_cmd(0xA6);
 80003c2:	20a6      	movs	r0, #166	@ 0xa6
 80003c4:	f7ff ffe0 	bl	8000388 <ssd_cmd>
    ssd_cmd(0xAF);
 80003c8:	20af      	movs	r0, #175	@ 0xaf
 80003ca:	f7ff ffdd 	bl	8000388 <ssd_cmd>
}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <ssd_fill_zebra>:

/* fill zebra */
static void ssd_fill_zebra(void){
 80003d2:	b580      	push	{r7, lr}
 80003d4:	b082      	sub	sp, #8
 80003d6:	af00      	add	r7, sp, #0
    for(uint8_t page=0; page<8; page++){
 80003d8:	2300      	movs	r3, #0
 80003da:	71fb      	strb	r3, [r7, #7]
 80003dc:	e02c      	b.n	8000438 <ssd_fill_zebra+0x66>
        ssd_cmd(0xB0 | page);
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ffce 	bl	8000388 <ssd_cmd>
        ssd_cmd(0x00);
 80003ec:	2000      	movs	r0, #0
 80003ee:	f7ff ffcb 	bl	8000388 <ssd_cmd>
        ssd_cmd(0x10);
 80003f2:	2010      	movs	r0, #16
 80003f4:	f7ff ffc8 	bl	8000388 <ssd_cmd>
        i2c_start(SSD1306_ADDR);
 80003f8:	203c      	movs	r0, #60	@ 0x3c
 80003fa:	f7ff ff69 	bl	80002d0 <i2c_start>
        i2c_w(0x40);
 80003fe:	2040      	movs	r0, #64	@ 0x40
 8000400:	f7ff ff92 	bl	8000328 <i2c_w>
        for(uint8_t col=0; col<129; col++){
 8000404:	2300      	movs	r3, #0
 8000406:	71bb      	strb	r3, [r7, #6]
 8000408:	e00e      	b.n	8000428 <ssd_fill_zebra+0x56>
            i2c_w((page%2)?0xFF:0x00);
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	f003 0301 	and.w	r3, r3, #1
 8000410:	b2db      	uxtb	r3, r3
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <ssd_fill_zebra+0x48>
 8000416:	23ff      	movs	r3, #255	@ 0xff
 8000418:	e000      	b.n	800041c <ssd_fill_zebra+0x4a>
 800041a:	2300      	movs	r3, #0
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff ff83 	bl	8000328 <i2c_w>
        for(uint8_t col=0; col<129; col++){
 8000422:	79bb      	ldrb	r3, [r7, #6]
 8000424:	3301      	adds	r3, #1
 8000426:	71bb      	strb	r3, [r7, #6]
 8000428:	79bb      	ldrb	r3, [r7, #6]
 800042a:	2b80      	cmp	r3, #128	@ 0x80
 800042c:	d9ed      	bls.n	800040a <ssd_fill_zebra+0x38>
        }
        i2c_stop();
 800042e:	f7ff ff9b 	bl	8000368 <i2c_stop>
    for(uint8_t page=0; page<8; page++){
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	3301      	adds	r3, #1
 8000436:	71fb      	strb	r3, [r7, #7]
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	2b07      	cmp	r3, #7
 800043c:	d9cf      	bls.n	80003de <ssd_fill_zebra+0xc>
    }
}
 800043e:	bf00      	nop
 8000440:	bf00      	nop
 8000442:	3708      	adds	r7, #8
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <main>:

/* main */
int main(void){
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
    I2C1_Init();
 800044c:	f7ff fef4 	bl	8000238 <I2C1_Init>
    ssd_init();
 8000450:	f7ff ffaf 	bl	80003b2 <ssd_init>

    while(1){
        ssd_fill_zebra();
 8000454:	f7ff ffbd 	bl	80003d2 <ssd_fill_zebra>
        dly(1000);
 8000458:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800045c:	f7ff febc 	bl	80001d8 <dly>
        ssd_fill_zebra();
 8000460:	bf00      	nop
 8000462:	e7f7      	b.n	8000454 <main+0xc>

08000464 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000464:	480d      	ldr	r0, [pc, #52]	@ (800049c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000466:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000468:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800046c:	480c      	ldr	r0, [pc, #48]	@ (80004a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800046e:	490d      	ldr	r1, [pc, #52]	@ (80004a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000470:	4a0d      	ldr	r2, [pc, #52]	@ (80004a8 <LoopForever+0xe>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000474:	e002      	b.n	800047c <LoopCopyDataInit>

08000476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047a:	3304      	adds	r3, #4

0800047c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800047c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000480:	d3f9      	bcc.n	8000476 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000482:	4a0a      	ldr	r2, [pc, #40]	@ (80004ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000484:	4c0a      	ldr	r4, [pc, #40]	@ (80004b0 <LoopForever+0x16>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000488:	e001      	b.n	800048e <LoopFillZerobss>

0800048a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800048c:	3204      	adds	r2, #4

0800048e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000490:	d3fb      	bcc.n	800048a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000492:	f000 f811 	bl	80004b8 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000496:	f7ff ffd7 	bl	8000448 <main>

0800049a <LoopForever>:

LoopForever:
  b LoopForever
 800049a:	e7fe      	b.n	800049a <LoopForever>
  ldr   r0, =_estack
 800049c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004a8:	08000520 	.word	0x08000520
  ldr r2, =_sbss
 80004ac:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004b0:	20000020 	.word	0x20000020

080004b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b4:	e7fe      	b.n	80004b4 <ADC_IRQHandler>
	...

080004b8 <__libc_init_array>:
 80004b8:	b570      	push	{r4, r5, r6, lr}
 80004ba:	4d0d      	ldr	r5, [pc, #52]	@ (80004f0 <__libc_init_array+0x38>)
 80004bc:	4c0d      	ldr	r4, [pc, #52]	@ (80004f4 <__libc_init_array+0x3c>)
 80004be:	1b64      	subs	r4, r4, r5
 80004c0:	10a4      	asrs	r4, r4, #2
 80004c2:	2600      	movs	r6, #0
 80004c4:	42a6      	cmp	r6, r4
 80004c6:	d109      	bne.n	80004dc <__libc_init_array+0x24>
 80004c8:	4d0b      	ldr	r5, [pc, #44]	@ (80004f8 <__libc_init_array+0x40>)
 80004ca:	4c0c      	ldr	r4, [pc, #48]	@ (80004fc <__libc_init_array+0x44>)
 80004cc:	f000 f818 	bl	8000500 <_init>
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	10a4      	asrs	r4, r4, #2
 80004d4:	2600      	movs	r6, #0
 80004d6:	42a6      	cmp	r6, r4
 80004d8:	d105      	bne.n	80004e6 <__libc_init_array+0x2e>
 80004da:	bd70      	pop	{r4, r5, r6, pc}
 80004dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e0:	4798      	blx	r3
 80004e2:	3601      	adds	r6, #1
 80004e4:	e7ee      	b.n	80004c4 <__libc_init_array+0xc>
 80004e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ea:	4798      	blx	r3
 80004ec:	3601      	adds	r6, #1
 80004ee:	e7f2      	b.n	80004d6 <__libc_init_array+0x1e>
 80004f0:	08000518 	.word	0x08000518
 80004f4:	08000518 	.word	0x08000518
 80004f8:	08000518 	.word	0x08000518
 80004fc:	0800051c 	.word	0x0800051c

08000500 <_init>:
 8000500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000502:	bf00      	nop
 8000504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000506:	bc08      	pop	{r3}
 8000508:	469e      	mov	lr, r3
 800050a:	4770      	bx	lr

0800050c <_fini>:
 800050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050e:	bf00      	nop
 8000510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000512:	bc08      	pop	{r3}
 8000514:	469e      	mov	lr, r3
 8000516:	4770      	bx	lr
