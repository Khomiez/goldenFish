
New folder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003618  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  080037b8  080037b8  000047b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc0  08003bc0  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003bc0  08003bc0  00004bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bc8  08003bc8  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bc8  08003bc8  00004bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bcc  08003bcc  00004bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003bd0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000068  08003c38  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08003c38  000052dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003544  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000da7  00000000  00000000  000085dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000388  00000000  00000000  00009388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002b4  00000000  00000000  00009710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001068b  00000000  00000000  000099c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003f9d  00000000  00000000  0001a04f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000579d2  00000000  00000000  0001dfec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000759be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017d4  00000000  00000000  00075a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000771d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080037a0 	.word	0x080037a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080037a0 	.word	0x080037a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <pattern_begin>:
typedef enum { PD_LED_ON, PD_LED_OFF } PatternPhase_t;
static PatternPhase_t s_phase = PD_LED_ON;
static uint32_t s_next_deadline = 0;


static void pattern_begin(void){
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
    g_pattern_index = 0;
 8000284:	4b06      	ldr	r3, [pc, #24]	@ (80002a0 <pattern_begin+0x20>)
 8000286:	2200      	movs	r2, #0
 8000288:	701a      	strb	r2, [r3, #0]
    s_phase = PD_LED_ON;
 800028a:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <pattern_begin+0x24>)
 800028c:	2200      	movs	r2, #0
 800028e:	701a      	strb	r2, [r3, #0]
    s_next_deadline = 0; // trigger ทันที
 8000290:	4b05      	ldr	r3, [pc, #20]	@ (80002a8 <pattern_begin+0x28>)
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
}
 8000296:	bf00      	nop
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr
 80002a0:	200000b9 	.word	0x200000b9
 80002a4:	200000bb 	.word	0x200000bb
 80002a8:	200000bc 	.word	0x200000bc

080002ac <clamp_u8>:

/* ============================================================================
 * Difficulty Timing Functions
 * ============================================================================ */
uint8_t clamp_u8(uint8_t v, uint8_t lo, uint8_t hi) {
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	71fb      	strb	r3, [r7, #7]
 80002b6:	460b      	mov	r3, r1
 80002b8:	71bb      	strb	r3, [r7, #6]
 80002ba:	4613      	mov	r3, r2
 80002bc:	717b      	strb	r3, [r7, #5]
    return v < lo ? lo : (v > hi ? hi : v);
 80002be:	79fa      	ldrb	r2, [r7, #7]
 80002c0:	79bb      	ldrb	r3, [r7, #6]
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d306      	bcc.n	80002d4 <clamp_u8+0x28>
 80002c6:	79fa      	ldrb	r2, [r7, #7]
 80002c8:	797b      	ldrb	r3, [r7, #5]
 80002ca:	4293      	cmp	r3, r2
 80002cc:	bf28      	it	cs
 80002ce:	4613      	movcs	r3, r2
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	e000      	b.n	80002d6 <clamp_u8+0x2a>
 80002d4:	79bb      	ldrb	r3, [r7, #6]
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
	...

080002e4 <diff_on_ms>:

uint16_t diff_on_ms(uint8_t diff) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	71fb      	strb	r3, [r7, #7]
    static const uint16_t T[5] = {500, 400, 300, 220, 150}; // DIFF 1..5
    diff = clamp_u8(diff, 1, 5);
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	2205      	movs	r2, #5
 80002f2:	2101      	movs	r1, #1
 80002f4:	4618      	mov	r0, r3
 80002f6:	f7ff ffd9 	bl	80002ac <clamp_u8>
 80002fa:	4603      	mov	r3, r0
 80002fc:	71fb      	strb	r3, [r7, #7]
    return T[diff-1];
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	3b01      	subs	r3, #1
 8000302:	4a03      	ldr	r2, [pc, #12]	@ (8000310 <diff_on_ms+0x2c>)
 8000304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8000308:	4618      	mov	r0, r3
 800030a:	3708      	adds	r7, #8
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	080039c8 	.word	0x080039c8

08000314 <diff_off_ms>:

uint16_t diff_off_ms(uint8_t diff) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	71fb      	strb	r3, [r7, #7]
    static const uint16_t T[5] = {250, 200, 150, 110, 80};  // DIFF 1..5
    diff = clamp_u8(diff, 1, 5);
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	2205      	movs	r2, #5
 8000322:	2101      	movs	r1, #1
 8000324:	4618      	mov	r0, r3
 8000326:	f7ff ffc1 	bl	80002ac <clamp_u8>
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
    return T[diff-1];
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	3b01      	subs	r3, #1
 8000332:	4a03      	ldr	r2, [pc, #12]	@ (8000340 <diff_off_ms+0x2c>)
 8000334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8000338:	4618      	mov	r0, r3
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	080039d4 	.word	0x080039d4

08000344 <leds_clear>:

/* ============================================================================
 * Internal Helper Functions
 * ============================================================================ */
static void leds_clear(void) {
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
    LED_SetPattern(0);
 8000348:	2000      	movs	r0, #0
 800034a:	f000 fecf 	bl	80010ec <LED_SetPattern>
    Buzzer_Stop();
 800034e:	f001 f839 	bl	80013c4 <Buzzer_Stop>
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
	...

08000358 <set_game_state>:

static void set_game_state(GameState_t new_state) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
    leds_clear();
 8000362:	f7ff ffef 	bl	8000344 <leds_clear>
    g_game_state = new_state;
 8000366:	4a06      	ldr	r2, [pc, #24]	@ (8000380 <set_game_state+0x28>)
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	7013      	strb	r3, [r2, #0]
    g_state_entry_time = GetTick();
 800036c:	f001 ff96 	bl	800229c <GetTick>
 8000370:	4603      	mov	r3, r0
 8000372:	4a04      	ldr	r2, [pc, #16]	@ (8000384 <set_game_state+0x2c>)
 8000374:	6013      	str	r3, [r2, #0]
}
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	20000084 	.word	0x20000084
 8000384:	20000090 	.word	0x20000090

08000388 <generate_pattern>:

static void generate_pattern(uint8_t length) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < length; i++)
 8000392:	2300      	movs	r3, #0
 8000394:	73fb      	strb	r3, [r7, #15]
 8000396:	e010      	b.n	80003ba <generate_pattern+0x32>
        g_pattern[i] = rand() % 4;
 8000398:	f002 f834 	bl	8002404 <rand>
 800039c:	4603      	mov	r3, r0
 800039e:	425a      	negs	r2, r3
 80003a0:	f003 0303 	and.w	r3, r3, #3
 80003a4:	f002 0203 	and.w	r2, r2, #3
 80003a8:	bf58      	it	pl
 80003aa:	4253      	negpl	r3, r2
 80003ac:	7bfa      	ldrb	r2, [r7, #15]
 80003ae:	b2d9      	uxtb	r1, r3
 80003b0:	4b07      	ldr	r3, [pc, #28]	@ (80003d0 <generate_pattern+0x48>)
 80003b2:	5499      	strb	r1, [r3, r2]
    for (uint8_t i = 0; i < length; i++)
 80003b4:	7bfb      	ldrb	r3, [r7, #15]
 80003b6:	3301      	adds	r3, #1
 80003b8:	73fb      	strb	r3, [r7, #15]
 80003ba:	7bfa      	ldrb	r2, [r7, #15]
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	429a      	cmp	r2, r3
 80003c0:	d3ea      	bcc.n	8000398 <generate_pattern+0x10>
    g_pattern_length = length;
 80003c2:	4a04      	ldr	r2, [pc, #16]	@ (80003d4 <generate_pattern+0x4c>)
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	7013      	strb	r3, [r2, #0]
}
 80003c8:	bf00      	nop
 80003ca:	3710      	adds	r7, #16
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20000098 	.word	0x20000098
 80003d4:	200000b8 	.word	0x200000b8

080003d8 <leds_show>:

static void leds_show(uint8_t idx) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	71fb      	strb	r3, [r7, #7]
    uint8_t led = button_to_led_map[idx];
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000414 <leds_show+0x3c>)
 80003e6:	5cd3      	ldrb	r3, [r2, r3]
 80003e8:	73fb      	strb	r3, [r7, #15]
    LED_SetPattern(1 << led);
 80003ea:	7bfb      	ldrb	r3, [r7, #15]
 80003ec:	2201      	movs	r2, #1
 80003ee:	fa02 f303 	lsl.w	r3, r2, r3
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 fe79 	bl	80010ec <LED_SetPattern>
    Buzzer_Play(tone_by_led[led], 40);
 80003fa:	7bfb      	ldrb	r3, [r7, #15]
 80003fc:	4a06      	ldr	r2, [pc, #24]	@ (8000418 <leds_show+0x40>)
 80003fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000402:	2128      	movs	r1, #40	@ 0x28
 8000404:	4618      	mov	r0, r3
 8000406:	f000 ffa7 	bl	8001358 <Buzzer_Play>
}
 800040a:	bf00      	nop
 800040c:	3710      	adds	r7, #16
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	080039bc 	.word	0x080039bc
 8000418:	080039c0 	.word	0x080039c0

0800041c <handle_boot>:


/* ============================================================================
 * State Handler Functions
 * ============================================================================ */
static void handle_boot(void) {
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
    g_level = 1;
 8000420:	4b0b      	ldr	r3, [pc, #44]	@ (8000450 <handle_boot+0x34>)
 8000422:	2201      	movs	r2, #1
 8000424:	701a      	strb	r2, [r3, #0]
    g_score = 0;
 8000426:	4b0b      	ldr	r3, [pc, #44]	@ (8000454 <handle_boot+0x38>)
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
    g_lives = INITIAL_LIVES;
 800042c:	4b0a      	ldr	r3, [pc, #40]	@ (8000458 <handle_boot+0x3c>)
 800042e:	2204      	movs	r2, #4
 8000430:	701a      	strb	r2, [r3, #0]
    set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 8000432:	2001      	movs	r0, #1
 8000434:	f7ff ff90 	bl	8000358 <set_game_state>
    Buzzer_Play(800, 50);
 8000438:	2132      	movs	r1, #50	@ 0x32
 800043a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800043e:	f000 ff8b 	bl	8001358 <Buzzer_Play>
    Delay_ms(100);
 8000442:	2064      	movs	r0, #100	@ 0x64
 8000444:	f001 ff14 	bl	8002270 <Delay_ms>
    Buzzer_Stop();
 8000448:	f000 ffbc 	bl	80013c4 <Buzzer_Stop>
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000086 	.word	0x20000086
 8000454:	20000088 	.word	0x20000088
 8000458:	2000008c 	.word	0x2000008c

0800045c <map_pot_to_speed>:

static uint16_t pot_avg = 0;

static uint8_t map_pot_to_speed(uint16_t v10bit) {
 800045c:	b480      	push	{r7}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	80fb      	strh	r3, [r7, #6]
    // smooth: avg = avg*7/8 + new/8
    pot_avg = (pot_avg * 7 + v10bit) / 8;
 8000466:	4b25      	ldr	r3, [pc, #148]	@ (80004fc <map_pot_to_speed+0xa0>)
 8000468:	881b      	ldrh	r3, [r3, #0]
 800046a:	461a      	mov	r2, r3
 800046c:	4613      	mov	r3, r2
 800046e:	00db      	lsls	r3, r3, #3
 8000470:	1a9a      	subs	r2, r3, r2
 8000472:	88fb      	ldrh	r3, [r7, #6]
 8000474:	4413      	add	r3, r2
 8000476:	2b00      	cmp	r3, #0
 8000478:	da00      	bge.n	800047c <map_pot_to_speed+0x20>
 800047a:	3307      	adds	r3, #7
 800047c:	10db      	asrs	r3, r3, #3
 800047e:	b29a      	uxth	r2, r3
 8000480:	4b1e      	ldr	r3, [pc, #120]	@ (80004fc <map_pot_to_speed+0xa0>)
 8000482:	801a      	strh	r2, [r3, #0]

    // map 0..1023 -> 1..5
    uint8_t s = (uint32_t)(pot_avg * 5) / 1024 + 1;
 8000484:	4b1d      	ldr	r3, [pc, #116]	@ (80004fc <map_pot_to_speed+0xa0>)
 8000486:	881b      	ldrh	r3, [r3, #0]
 8000488:	461a      	mov	r2, r3
 800048a:	4613      	mov	r3, r2
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	4413      	add	r3, r2
 8000490:	0a9b      	lsrs	r3, r3, #10
 8000492:	b2db      	uxtb	r3, r3
 8000494:	3301      	adds	r3, #1
 8000496:	73fb      	strb	r3, [r7, #15]

    // hysteresis: ถ้าต่างจาก g_difficulty น้อย ให้รอก่อน
    if (s > g_difficulty && (pot_avg % 205) < 20) return g_difficulty; // ขยับขึ้นเมื่อผ่านช่วง
 8000498:	4b19      	ldr	r3, [pc, #100]	@ (8000500 <map_pot_to_speed+0xa4>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	7bfa      	ldrb	r2, [r7, #15]
 800049e:	429a      	cmp	r2, r3
 80004a0:	d90f      	bls.n	80004c2 <map_pot_to_speed+0x66>
 80004a2:	4b16      	ldr	r3, [pc, #88]	@ (80004fc <map_pot_to_speed+0xa0>)
 80004a4:	881b      	ldrh	r3, [r3, #0]
 80004a6:	4a17      	ldr	r2, [pc, #92]	@ (8000504 <map_pot_to_speed+0xa8>)
 80004a8:	fba2 1203 	umull	r1, r2, r2, r3
 80004ac:	0992      	lsrs	r2, r2, #6
 80004ae:	21cd      	movs	r1, #205	@ 0xcd
 80004b0:	fb01 f202 	mul.w	r2, r1, r2
 80004b4:	1a9b      	subs	r3, r3, r2
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	2b13      	cmp	r3, #19
 80004ba:	d802      	bhi.n	80004c2 <map_pot_to_speed+0x66>
 80004bc:	4b10      	ldr	r3, [pc, #64]	@ (8000500 <map_pot_to_speed+0xa4>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	e015      	b.n	80004ee <map_pot_to_speed+0x92>
    if (s < g_difficulty && (pot_avg % 205) > 185) return g_difficulty; // ขยับลงเมื่อผ่านช่วง
 80004c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000500 <map_pot_to_speed+0xa4>)
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	7bfa      	ldrb	r2, [r7, #15]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	d20f      	bcs.n	80004ec <map_pot_to_speed+0x90>
 80004cc:	4b0b      	ldr	r3, [pc, #44]	@ (80004fc <map_pot_to_speed+0xa0>)
 80004ce:	881b      	ldrh	r3, [r3, #0]
 80004d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000504 <map_pot_to_speed+0xa8>)
 80004d2:	fba2 1203 	umull	r1, r2, r2, r3
 80004d6:	0992      	lsrs	r2, r2, #6
 80004d8:	21cd      	movs	r1, #205	@ 0xcd
 80004da:	fb01 f202 	mul.w	r2, r1, r2
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	b29b      	uxth	r3, r3
 80004e2:	2bb9      	cmp	r3, #185	@ 0xb9
 80004e4:	d902      	bls.n	80004ec <map_pot_to_speed+0x90>
 80004e6:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <map_pot_to_speed+0xa4>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	e000      	b.n	80004ee <map_pot_to_speed+0x92>
    return s;
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	200000c0 	.word	0x200000c0
 8000500:	20000085 	.word	0x20000085
 8000504:	4fec04ff 	.word	0x4fec04ff

08000508 <handle_difficulty_select>:

static void handle_difficulty_select(void) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
    uint32_t current_time = GetTick();
 800050e:	f001 fec5 	bl	800229c <GetTick>
 8000512:	60b8      	str	r0, [r7, #8]
    static uint32_t last_log_time = 0;
    static uint8_t last = 0;

    if (!g_difficulty_locked) {
 8000514:	4b2d      	ldr	r3, [pc, #180]	@ (80005cc <handle_difficulty_select+0xc4>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d14e      	bne.n	80005ba <handle_difficulty_select+0xb2>
        uint16_t pot_value = g_adc_values[0];
 800051c:	4b2c      	ldr	r3, [pc, #176]	@ (80005d0 <handle_difficulty_select+0xc8>)
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	80fb      	strh	r3, [r7, #6]
        g_difficulty = map_pot_to_speed(pot_value);
 8000522:	88fb      	ldrh	r3, [r7, #6]
 8000524:	4618      	mov	r0, r3
 8000526:	f7ff ff99 	bl	800045c <map_pot_to_speed>
 800052a:	4603      	mov	r3, r0
 800052c:	461a      	mov	r2, r3
 800052e:	4b29      	ldr	r3, [pc, #164]	@ (80005d4 <handle_difficulty_select+0xcc>)
 8000530:	701a      	strb	r2, [r3, #0]
        SevenSeg_Display(g_difficulty);
 8000532:	4b28      	ldr	r3, [pc, #160]	@ (80005d4 <handle_difficulty_select+0xcc>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	4618      	mov	r0, r3
 8000538:	f000 fe1c 	bl	8001174 <SevenSeg_Display>

        if (g_difficulty != last || (current_time - last_log_time) > 200) {
 800053c:	4b25      	ldr	r3, [pc, #148]	@ (80005d4 <handle_difficulty_select+0xcc>)
 800053e:	781a      	ldrb	r2, [r3, #0]
 8000540:	4b25      	ldr	r3, [pc, #148]	@ (80005d8 <handle_difficulty_select+0xd0>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	429a      	cmp	r2, r3
 8000546:	d105      	bne.n	8000554 <handle_difficulty_select+0x4c>
 8000548:	4b24      	ldr	r3, [pc, #144]	@ (80005dc <handle_difficulty_select+0xd4>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	68ba      	ldr	r2, [r7, #8]
 800054e:	1ad3      	subs	r3, r2, r3
 8000550:	2bc8      	cmp	r3, #200	@ 0xc8
 8000552:	d908      	bls.n	8000566 <handle_difficulty_select+0x5e>
            last_log_time = current_time;
 8000554:	4a21      	ldr	r2, [pc, #132]	@ (80005dc <handle_difficulty_select+0xd4>)
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	6013      	str	r3, [r2, #0]
            last = g_difficulty;
 800055a:	4b1e      	ldr	r3, [pc, #120]	@ (80005d4 <handle_difficulty_select+0xcc>)
 800055c:	781a      	ldrb	r2, [r3, #0]
 800055e:	4b1e      	ldr	r3, [pc, #120]	@ (80005d8 <handle_difficulty_select+0xd0>)
 8000560:	701a      	strb	r2, [r3, #0]
            OLED_ShowStatus(); // อัปเดตจอน้อยลง
 8000562:	f001 fdb5 	bl	80020d0 <OLED_ShowStatus>
        }

        // long-press -> lock เหมือนเดิม...
        for (int i = 0; i < 4; i++) {
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	e022      	b.n	80005b2 <handle_difficulty_select+0xaa>
            if (g_buttons[i].current_state == 1 &&
 800056c:	491c      	ldr	r1, [pc, #112]	@ (80005e0 <handle_difficulty_select+0xd8>)
 800056e:	68fa      	ldr	r2, [r7, #12]
 8000570:	4613      	mov	r3, r2
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	4413      	add	r3, r2
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	440b      	add	r3, r1
 800057a:	3301      	adds	r3, #1
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d114      	bne.n	80005ac <handle_difficulty_select+0xa4>
               (current_time - g_buttons[i].last_change_time) >= LONG_PRESS_DURATION_MS) {
 8000582:	4917      	ldr	r1, [pc, #92]	@ (80005e0 <handle_difficulty_select+0xd8>)
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	4613      	mov	r3, r2
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	4413      	add	r3, r2
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	440b      	add	r3, r1
 8000590:	3304      	adds	r3, #4
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	68ba      	ldr	r2, [r7, #8]
 8000596:	1ad3      	subs	r3, r2, r3
            if (g_buttons[i].current_state == 1 &&
 8000598:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800059c:	d306      	bcc.n	80005ac <handle_difficulty_select+0xa4>
                g_difficulty_locked = 1;
 800059e:	4b0b      	ldr	r3, [pc, #44]	@ (80005cc <handle_difficulty_select+0xc4>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	701a      	strb	r2, [r3, #0]
                set_game_state(GAME_STATE_LEVEL_INTRO);
 80005a4:	2002      	movs	r0, #2
 80005a6:	f7ff fed7 	bl	8000358 <set_game_state>
                return;
 80005aa:	e00b      	b.n	80005c4 <handle_difficulty_select+0xbc>
        for (int i = 0; i < 4; i++) {
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	3301      	adds	r3, #1
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b03      	cmp	r3, #3
 80005b6:	ddd9      	ble.n	800056c <handle_difficulty_select+0x64>
 80005b8:	e004      	b.n	80005c4 <handle_difficulty_select+0xbc>
            }
        }
    } else {
        SevenSeg_Display(g_difficulty);
 80005ba:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <handle_difficulty_select+0xcc>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 fdd8 	bl	8001174 <SevenSeg_Display>
    }
}
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000094 	.word	0x20000094
 80005d0:	200000fc 	.word	0x200000fc
 80005d4:	20000085 	.word	0x20000085
 80005d8:	200000c2 	.word	0x200000c2
 80005dc:	200000c4 	.word	0x200000c4
 80005e0:	200000cc 	.word	0x200000cc

080005e4 <handle_level_intro>:


static void handle_level_intro(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
    Log_Print("Level %u. Lives: %u. Score: %lu\r\n", g_level, g_lives, g_score);
 80005ea:	4b26      	ldr	r3, [pc, #152]	@ (8000684 <handle_level_intro+0xa0>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	4619      	mov	r1, r3
 80005f0:	4b25      	ldr	r3, [pc, #148]	@ (8000688 <handle_level_intro+0xa4>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	461a      	mov	r2, r3
 80005f6:	4b25      	ldr	r3, [pc, #148]	@ (800068c <handle_level_intro+0xa8>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4825      	ldr	r0, [pc, #148]	@ (8000690 <handle_level_intro+0xac>)
 80005fc:	f001 fe5a 	bl	80022b4 <Log_Print>
    OLED_ShowStatus();
 8000600:	f001 fd66 	bl	80020d0 <OLED_ShowStatus>
    Delay_ms(800);
 8000604:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000608:	f001 fe32 	bl	8002270 <Delay_ms>

    // Back-and-forth LED animation only for first level
    if (g_level == 1) {
 800060c:	4b1d      	ldr	r3, [pc, #116]	@ (8000684 <handle_level_intro+0xa0>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d126      	bne.n	8000662 <handle_level_intro+0x7e>
        // Forward: LED0 -> LED1 -> LED2 -> LED3
        for (int i = 0; i < 4; i++) {
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	e00a      	b.n	8000630 <handle_level_intro+0x4c>
            leds_show(i);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	b2db      	uxtb	r3, r3
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff feda 	bl	80003d8 <leds_show>
            Delay_ms(150);
 8000624:	2096      	movs	r0, #150	@ 0x96
 8000626:	f001 fe23 	bl	8002270 <Delay_ms>
        for (int i = 0; i < 4; i++) {
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	3301      	adds	r3, #1
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b03      	cmp	r3, #3
 8000634:	ddf1      	ble.n	800061a <handle_level_intro+0x36>
        }
        // Backward: LED3 -> LED2 -> LED1 -> LED0
        for (int i = 2; i >= 0; i--) {
 8000636:	2302      	movs	r3, #2
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	e00a      	b.n	8000652 <handle_level_intro+0x6e>
            leds_show(i);
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	b2db      	uxtb	r3, r3
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff fec9 	bl	80003d8 <leds_show>
            Delay_ms(150);
 8000646:	2096      	movs	r0, #150	@ 0x96
 8000648:	f001 fe12 	bl	8002270 <Delay_ms>
        for (int i = 2; i >= 0; i--) {
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	3b01      	subs	r3, #1
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	daf1      	bge.n	800063c <handle_level_intro+0x58>
        }
        leds_clear();
 8000658:	f7ff fe74 	bl	8000344 <leds_clear>
        Delay_ms(200);
 800065c:	20c8      	movs	r0, #200	@ 0xc8
 800065e:	f001 fe07 	bl	8002270 <Delay_ms>
    }

    generate_pattern(g_level);
 8000662:	4b08      	ldr	r3, [pc, #32]	@ (8000684 <handle_level_intro+0xa0>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff fe8e 	bl	8000388 <generate_pattern>
    g_pattern_index = 0;
 800066c:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <handle_level_intro+0xb0>)
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
    pattern_begin();  
 8000672:	f7ff fe05 	bl	8000280 <pattern_begin>
    set_game_state(GAME_STATE_PATTERN_DISPLAY);
 8000676:	2003      	movs	r0, #3
 8000678:	f7ff fe6e 	bl	8000358 <set_game_state>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000086 	.word	0x20000086
 8000688:	2000008c 	.word	0x2000008c
 800068c:	20000088 	.word	0x20000088
 8000690:	080037b8 	.word	0x080037b8
 8000694:	200000b9 	.word	0x200000b9

08000698 <handle_pattern_display>:

static void handle_pattern_display(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
    uint32_t now = GetTick();
 800069e:	f001 fdfd 	bl	800229c <GetTick>
 80006a2:	6078      	str	r0, [r7, #4]
    uint16_t t_on  = diff_on_ms(g_difficulty);
 80006a4:	4b26      	ldr	r3, [pc, #152]	@ (8000740 <handle_pattern_display+0xa8>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff fe1b 	bl	80002e4 <diff_on_ms>
 80006ae:	4603      	mov	r3, r0
 80006b0:	807b      	strh	r3, [r7, #2]
    uint16_t t_off = diff_off_ms(g_difficulty);
 80006b2:	4b23      	ldr	r3, [pc, #140]	@ (8000740 <handle_pattern_display+0xa8>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff fe2c 	bl	8000314 <diff_off_ms>
 80006bc:	4603      	mov	r3, r0
 80006be:	803b      	strh	r3, [r7, #0]

    if (g_pattern_index >= g_pattern_length) {
 80006c0:	4b20      	ldr	r3, [pc, #128]	@ (8000744 <handle_pattern_display+0xac>)
 80006c2:	781a      	ldrb	r2, [r3, #0]
 80006c4:	4b20      	ldr	r3, [pc, #128]	@ (8000748 <handle_pattern_display+0xb0>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d30c      	bcc.n	80006e6 <handle_pattern_display+0x4e>
        // จบ pattern → ไป input
        g_pattern_index = 0;
 80006cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000744 <handle_pattern_display+0xac>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
        g_input_index = 0;
 80006d2:	4b1e      	ldr	r3, [pc, #120]	@ (800074c <handle_pattern_display+0xb4>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
        g_input_correct = 1;
 80006d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <handle_pattern_display+0xb8>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
        set_game_state(GAME_STATE_INPUT_WAIT);
 80006de:	2004      	movs	r0, #4
 80006e0:	f7ff fe3a 	bl	8000358 <set_game_state>
        return;
 80006e4:	e029      	b.n	800073a <handle_pattern_display+0xa2>
    }

    if (now >= s_next_deadline) {
 80006e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000754 <handle_pattern_display+0xbc>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d324      	bcc.n	800073a <handle_pattern_display+0xa2>
        if (s_phase == PD_LED_ON) {
 80006f0:	4b19      	ldr	r3, [pc, #100]	@ (8000758 <handle_pattern_display+0xc0>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d110      	bne.n	800071a <handle_pattern_display+0x82>
            leds_show(g_pattern[g_pattern_index]);     // จะเล่นเสียง/เปิดไฟ
 80006f8:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <handle_pattern_display+0xac>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b17      	ldr	r3, [pc, #92]	@ (800075c <handle_pattern_display+0xc4>)
 8000700:	5c9b      	ldrb	r3, [r3, r2]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fe68 	bl	80003d8 <leds_show>
            s_next_deadline = now + t_on;
 8000708:	887a      	ldrh	r2, [r7, #2]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	4a11      	ldr	r2, [pc, #68]	@ (8000754 <handle_pattern_display+0xbc>)
 8000710:	6013      	str	r3, [r2, #0]
            s_phase = PD_LED_OFF;
 8000712:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <handle_pattern_display+0xc0>)
 8000714:	2201      	movs	r2, #1
 8000716:	701a      	strb	r2, [r3, #0]
 8000718:	e00f      	b.n	800073a <handle_pattern_display+0xa2>
        } else { // PD_LED_OFF
            leds_clear();                            // จะหยุดเสียง/ดับไฟ
 800071a:	f7ff fe13 	bl	8000344 <leds_clear>
            s_next_deadline = now + t_off;
 800071e:	883a      	ldrh	r2, [r7, #0]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4413      	add	r3, r2
 8000724:	4a0b      	ldr	r2, [pc, #44]	@ (8000754 <handle_pattern_display+0xbc>)
 8000726:	6013      	str	r3, [r2, #0]
            s_phase = PD_LED_ON;
 8000728:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <handle_pattern_display+0xc0>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
            g_pattern_index++;
 800072e:	4b05      	ldr	r3, [pc, #20]	@ (8000744 <handle_pattern_display+0xac>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	3301      	adds	r3, #1
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4b03      	ldr	r3, [pc, #12]	@ (8000744 <handle_pattern_display+0xac>)
 8000738:	701a      	strb	r2, [r3, #0]
        }
    }
}
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000085 	.word	0x20000085
 8000744:	200000b9 	.word	0x200000b9
 8000748:	200000b8 	.word	0x200000b8
 800074c:	200000ba 	.word	0x200000ba
 8000750:	20000000 	.word	0x20000000
 8000754:	200000bc 	.word	0x200000bc
 8000758:	200000bb 	.word	0x200000bb
 800075c:	20000098 	.word	0x20000098

08000760 <handle_input_wait>:

static void handle_input_wait(void) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
    if (g_input_index < g_pattern_length) {
 8000766:	4b29      	ldr	r3, [pc, #164]	@ (800080c <handle_input_wait+0xac>)
 8000768:	781a      	ldrb	r2, [r3, #0]
 800076a:	4b29      	ldr	r3, [pc, #164]	@ (8000810 <handle_input_wait+0xb0>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	429a      	cmp	r2, r3
 8000770:	d244      	bcs.n	80007fc <handle_input_wait+0x9c>
        for (int i = 0; i < 4; i++) {
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	e03d      	b.n	80007f4 <handle_input_wait+0x94>
            if (g_buttons[i].current_state == 1 && g_buttons[i].previous_state == 0) {
 8000778:	4926      	ldr	r1, [pc, #152]	@ (8000814 <handle_input_wait+0xb4>)
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	4613      	mov	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	440b      	add	r3, r1
 8000786:	3301      	adds	r3, #1
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d12f      	bne.n	80007ee <handle_input_wait+0x8e>
 800078e:	4921      	ldr	r1, [pc, #132]	@ (8000814 <handle_input_wait+0xb4>)
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	4613      	mov	r3, r2
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	4413      	add	r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	440b      	add	r3, r1
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d125      	bne.n	80007ee <handle_input_wait+0x8e>
                leds_show(i);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fe16 	bl	80003d8 <leds_show>
                Delay_ms(diff_on_ms(g_difficulty) / 2);
 80007ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <handle_input_wait+0xb8>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fd97 	bl	80002e4 <diff_on_ms>
 80007b6:	4603      	mov	r3, r0
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	4618      	mov	r0, r3
 80007be:	f001 fd57 	bl	8002270 <Delay_ms>
                leds_clear();
 80007c2:	f7ff fdbf 	bl	8000344 <leds_clear>
                if (i != g_pattern[g_input_index]) {
 80007c6:	4b11      	ldr	r3, [pc, #68]	@ (800080c <handle_input_wait+0xac>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b13      	ldr	r3, [pc, #76]	@ (800081c <handle_input_wait+0xbc>)
 80007ce:	5c9b      	ldrb	r3, [r3, r2]
 80007d0:	461a      	mov	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d002      	beq.n	80007de <handle_input_wait+0x7e>
                    g_input_correct = 0;
 80007d8:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <handle_input_wait+0xc0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
                }
                g_input_index++;
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <handle_input_wait+0xac>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	3301      	adds	r3, #1
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <handle_input_wait+0xac>)
 80007e8:	701a      	strb	r2, [r3, #0]
                break;
 80007ea:	bf00      	nop
            }
        }
    } else {
        set_game_state(GAME_STATE_RESULT_PROCESS);
    }
}
 80007ec:	e009      	b.n	8000802 <handle_input_wait+0xa2>
        for (int i = 0; i < 4; i++) {
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3301      	adds	r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b03      	cmp	r3, #3
 80007f8:	ddbe      	ble.n	8000778 <handle_input_wait+0x18>
}
 80007fa:	e002      	b.n	8000802 <handle_input_wait+0xa2>
        set_game_state(GAME_STATE_RESULT_PROCESS);
 80007fc:	2005      	movs	r0, #5
 80007fe:	f7ff fdab 	bl	8000358 <set_game_state>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200000ba 	.word	0x200000ba
 8000810:	200000b8 	.word	0x200000b8
 8000814:	200000cc 	.word	0x200000cc
 8000818:	20000085 	.word	0x20000085
 800081c:	20000098 	.word	0x20000098
 8000820:	20000000 	.word	0x20000000

08000824 <handle_result_process>:

static void handle_result_process(void) {
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
    if (g_input_correct) {
 8000828:	4b2c      	ldr	r3, [pc, #176]	@ (80008dc <handle_result_process+0xb8>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d02e      	beq.n	800088e <handle_result_process+0x6a>
        Buzzer_Play(1200, 40);
 8000830:	2128      	movs	r1, #40	@ 0x28
 8000832:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8000836:	f000 fd8f 	bl	8001358 <Buzzer_Play>
        Delay_ms(80);
 800083a:	2050      	movs	r0, #80	@ 0x50
 800083c:	f001 fd18 	bl	8002270 <Delay_ms>
        Buzzer_Stop();
 8000840:	f000 fdc0 	bl	80013c4 <Buzzer_Stop>
        g_score += 10 * g_level * g_difficulty;
 8000844:	4b26      	ldr	r3, [pc, #152]	@ (80008e0 <handle_result_process+0xbc>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <handle_result_process+0xc0>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	fb03 f202 	mul.w	r2, r3, r2
 8000852:	4613      	mov	r3, r2
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4413      	add	r3, r2
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	461a      	mov	r2, r3
 800085c:	4b22      	ldr	r3, [pc, #136]	@ (80008e8 <handle_result_process+0xc4>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4413      	add	r3, r2
 8000862:	4a21      	ldr	r2, [pc, #132]	@ (80008e8 <handle_result_process+0xc4>)
 8000864:	6013      	str	r3, [r2, #0]
        g_level++;
 8000866:	4b1e      	ldr	r3, [pc, #120]	@ (80008e0 <handle_result_process+0xbc>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	3301      	adds	r3, #1
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4b1c      	ldr	r3, [pc, #112]	@ (80008e0 <handle_result_process+0xbc>)
 8000870:	701a      	strb	r2, [r3, #0]
        OLED_ShowStatus();
 8000872:	f001 fc2d 	bl	80020d0 <OLED_ShowStatus>
        if (g_level > 9)
 8000876:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <handle_result_process+0xbc>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b09      	cmp	r3, #9
 800087c:	d903      	bls.n	8000886 <handle_result_process+0x62>
            set_game_state(GAME_STATE_VICTORY);
 800087e:	2006      	movs	r0, #6
 8000880:	f7ff fd6a 	bl	8000358 <set_game_state>
        else {
            Log_Print("Try again!\r\n");
            set_game_state(GAME_STATE_LEVEL_INTRO);
        }
    }
}
 8000884:	e027      	b.n	80008d6 <handle_result_process+0xb2>
            set_game_state(GAME_STATE_LEVEL_INTRO);
 8000886:	2002      	movs	r0, #2
 8000888:	f7ff fd66 	bl	8000358 <set_game_state>
}
 800088c:	e023      	b.n	80008d6 <handle_result_process+0xb2>
        Buzzer_Play(300, 40);
 800088e:	2128      	movs	r1, #40	@ 0x28
 8000890:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000894:	f000 fd60 	bl	8001358 <Buzzer_Play>
        Delay_ms(150);
 8000898:	2096      	movs	r0, #150	@ 0x96
 800089a:	f001 fce9 	bl	8002270 <Delay_ms>
        Buzzer_Stop();
 800089e:	f000 fd91 	bl	80013c4 <Buzzer_Stop>
        if (g_lives > 0) g_lives--;
 80008a2:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <handle_result_process+0xc8>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d005      	beq.n	80008b6 <handle_result_process+0x92>
 80008aa:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <handle_result_process+0xc8>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <handle_result_process+0xc8>)
 80008b4:	701a      	strb	r2, [r3, #0]
        OLED_ShowStatus();
 80008b6:	f001 fc0b 	bl	80020d0 <OLED_ShowStatus>
        if (g_lives == 0)
 80008ba:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <handle_result_process+0xc8>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d103      	bne.n	80008ca <handle_result_process+0xa6>
            set_game_state(GAME_STATE_GAME_DEATH);
 80008c2:	2007      	movs	r0, #7
 80008c4:	f7ff fd48 	bl	8000358 <set_game_state>
}
 80008c8:	e005      	b.n	80008d6 <handle_result_process+0xb2>
            Log_Print("Try again!\r\n");
 80008ca:	4809      	ldr	r0, [pc, #36]	@ (80008f0 <handle_result_process+0xcc>)
 80008cc:	f001 fcf2 	bl	80022b4 <Log_Print>
            set_game_state(GAME_STATE_LEVEL_INTRO);
 80008d0:	2002      	movs	r0, #2
 80008d2:	f7ff fd41 	bl	8000358 <set_game_state>
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000000 	.word	0x20000000
 80008e0:	20000086 	.word	0x20000086
 80008e4:	20000085 	.word	0x20000085
 80008e8:	20000088 	.word	0x20000088
 80008ec:	2000008c 	.word	0x2000008c
 80008f0:	080037dc 	.word	0x080037dc

080008f4 <handle_victory>:

static void handle_victory(void) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
    static uint8_t played = 0;
    Log_Print("Congratulations! Final Score: %lu\r\n", g_score);
 80008fa:	4b32      	ldr	r3, [pc, #200]	@ (80009c4 <handle_victory+0xd0>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4619      	mov	r1, r3
 8000900:	4831      	ldr	r0, [pc, #196]	@ (80009c8 <handle_victory+0xd4>)
 8000902:	f001 fcd7 	bl	80022b4 <Log_Print>
    OLED_ShowStatus();
 8000906:	f001 fbe3 	bl	80020d0 <OLED_ShowStatus>

    if (!played) {                      // <— เล่นครั้งเดียว
 800090a:	4b30      	ldr	r3, [pc, #192]	@ (80009cc <handle_victory+0xd8>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d122      	bne.n	8000958 <handle_victory+0x64>
        uint32_t melody[] = {523, 659, 784}; // C5, E5, G5
 8000912:	4a2f      	ldr	r2, [pc, #188]	@ (80009d0 <handle_victory+0xdc>)
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	ca07      	ldmia	r2, {r0, r1, r2}
 8000918:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        for (int i = 0; i < 3; i++) {
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	e014      	b.n	800094c <handle_victory+0x58>
            Buzzer_Play(melody[i], 40);
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	3318      	adds	r3, #24
 8000928:	443b      	add	r3, r7
 800092a:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800092e:	2128      	movs	r1, #40	@ 0x28
 8000930:	4618      	mov	r0, r3
 8000932:	f000 fd11 	bl	8001358 <Buzzer_Play>
            Delay_ms(150);
 8000936:	2096      	movs	r0, #150	@ 0x96
 8000938:	f001 fc9a 	bl	8002270 <Delay_ms>
            Buzzer_Stop();
 800093c:	f000 fd42 	bl	80013c4 <Buzzer_Stop>
            Delay_ms(50);
 8000940:	2032      	movs	r0, #50	@ 0x32
 8000942:	f001 fc95 	bl	8002270 <Delay_ms>
        for (int i = 0; i < 3; i++) {
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	3301      	adds	r3, #1
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	2b02      	cmp	r3, #2
 8000950:	dde7      	ble.n	8000922 <handle_victory+0x2e>
        }
        played = 1;
 8000952:	4b1e      	ldr	r3, [pc, #120]	@ (80009cc <handle_victory+0xd8>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
    }

    // รอกดปุ่มเพื่อรีสตาร์ท
    for (int i = 0; i < 4; i++) {
 8000958:	2300      	movs	r3, #0
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	e02a      	b.n	80009b4 <handle_victory+0xc0>
        if (g_buttons[i].current_state == 1 && g_buttons[i].previous_state == 0) {
 800095e:	491d      	ldr	r1, [pc, #116]	@ (80009d4 <handle_victory+0xe0>)
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	4613      	mov	r3, r2
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	4413      	add	r3, r2
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	440b      	add	r3, r1
 800096c:	3301      	adds	r3, #1
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d11c      	bne.n	80009ae <handle_victory+0xba>
 8000974:	4917      	ldr	r1, [pc, #92]	@ (80009d4 <handle_victory+0xe0>)
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	4613      	mov	r3, r2
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	4413      	add	r3, r2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	440b      	add	r3, r1
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d112      	bne.n	80009ae <handle_victory+0xba>
            g_level = 1;
 8000988:	4b13      	ldr	r3, [pc, #76]	@ (80009d8 <handle_victory+0xe4>)
 800098a:	2201      	movs	r2, #1
 800098c:	701a      	strb	r2, [r3, #0]
            g_score = 0;
 800098e:	4b0d      	ldr	r3, [pc, #52]	@ (80009c4 <handle_victory+0xd0>)
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
            g_lives = INITIAL_LIVES;
 8000994:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <handle_victory+0xe8>)
 8000996:	2204      	movs	r2, #4
 8000998:	701a      	strb	r2, [r3, #0]
            g_difficulty_locked = 0;
 800099a:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <handle_victory+0xec>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
            played = 0;                 // <— รีเซ็ตสำหรับรอบถัดไป
 80009a0:	4b0a      	ldr	r3, [pc, #40]	@ (80009cc <handle_victory+0xd8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
            set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 80009a6:	2001      	movs	r0, #1
 80009a8:	f7ff fcd6 	bl	8000358 <set_game_state>
            break;
 80009ac:	e006      	b.n	80009bc <handle_victory+0xc8>
    for (int i = 0; i < 4; i++) {
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	3301      	adds	r3, #1
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	2b03      	cmp	r3, #3
 80009b8:	ddd1      	ble.n	800095e <handle_victory+0x6a>
        }
    }
}
 80009ba:	bf00      	nop
 80009bc:	bf00      	nop
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000088 	.word	0x20000088
 80009c8:	080037ec 	.word	0x080037ec
 80009cc:	200000c8 	.word	0x200000c8
 80009d0:	08003810 	.word	0x08003810
 80009d4:	200000cc 	.word	0x200000cc
 80009d8:	20000086 	.word	0x20000086
 80009dc:	2000008c 	.word	0x2000008c
 80009e0:	20000094 	.word	0x20000094

080009e4 <handle_game_death>:

static void handle_game_death(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
    static uint8_t animation_played = 0;

    // Play game over animation once upon entering this state
    if (!animation_played) {
 80009ea:	4b3f      	ldr	r3, [pc, #252]	@ (8000ae8 <handle_game_death+0x104>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d144      	bne.n	8000a7c <handle_game_death+0x98>
        Log_Print("Game Over! Final Score: %lu\r\n", g_score);
 80009f2:	4b3e      	ldr	r3, [pc, #248]	@ (8000aec <handle_game_death+0x108>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4619      	mov	r1, r3
 80009f8:	483d      	ldr	r0, [pc, #244]	@ (8000af0 <handle_game_death+0x10c>)
 80009fa:	f001 fc5b 	bl	80022b4 <Log_Print>

        // Rapid blink: 3 cycles
        for (int cycle = 0; cycle < 3; cycle++) {
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	e00e      	b.n	8000a22 <handle_game_death+0x3e>
            LED_SetPattern(0x0F);  // All LEDs on
 8000a04:	200f      	movs	r0, #15
 8000a06:	f000 fb71 	bl	80010ec <LED_SetPattern>
            Delay_ms(150);
 8000a0a:	2096      	movs	r0, #150	@ 0x96
 8000a0c:	f001 fc30 	bl	8002270 <Delay_ms>
            LED_SetPattern(0x00);  // All LEDs off
 8000a10:	2000      	movs	r0, #0
 8000a12:	f000 fb6b 	bl	80010ec <LED_SetPattern>
            Delay_ms(150);
 8000a16:	2096      	movs	r0, #150	@ 0x96
 8000a18:	f001 fc2a 	bl	8002270 <Delay_ms>
        for (int cycle = 0; cycle < 3; cycle++) {
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	dded      	ble.n	8000a04 <handle_game_death+0x20>
        }

        // Gradual fade out simulation
        for (int brightness = 10; brightness > 0; brightness--) {
 8000a28:	230a      	movs	r3, #10
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	e01b      	b.n	8000a66 <handle_game_death+0x82>
            for (int pulse = 0; pulse < 20; pulse++) {
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	e012      	b.n	8000a5a <handle_game_death+0x76>
                LED_SetPattern(0x0F);
 8000a34:	200f      	movs	r0, #15
 8000a36:	f000 fb59 	bl	80010ec <LED_SetPattern>
                Delay_ms(brightness);
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f001 fc17 	bl	8002270 <Delay_ms>
                LED_SetPattern(0x00);
 8000a42:	2000      	movs	r0, #0
 8000a44:	f000 fb52 	bl	80010ec <LED_SetPattern>
                Delay_ms(11 - brightness);
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	f1c3 030b 	rsb	r3, r3, #11
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f001 fc0e 	bl	8002270 <Delay_ms>
            for (int pulse = 0; pulse < 20; pulse++) {
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3301      	adds	r3, #1
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b13      	cmp	r3, #19
 8000a5e:	dde9      	ble.n	8000a34 <handle_game_death+0x50>
        for (int brightness = 10; brightness > 0; brightness--) {
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	dce0      	bgt.n	8000a2e <handle_game_death+0x4a>
            }
        }

        LED_SetPattern(0x00);  // Ensure all off
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f000 fb3d 	bl	80010ec <LED_SetPattern>
        OLED_ShowStatus();
 8000a72:	f001 fb2d 	bl	80020d0 <OLED_ShowStatus>
        animation_played = 1;
 8000a76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae8 <handle_game_death+0x104>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	701a      	strb	r2, [r3, #0]
    }

    // Wait for button press to restart
    for (int i = 0; i < 4; i++) {
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	e02a      	b.n	8000ad8 <handle_game_death+0xf4>
        if (g_buttons[i].current_state == 1 && g_buttons[i].previous_state == 0) {
 8000a82:	491c      	ldr	r1, [pc, #112]	@ (8000af4 <handle_game_death+0x110>)
 8000a84:	683a      	ldr	r2, [r7, #0]
 8000a86:	4613      	mov	r3, r2
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	4413      	add	r3, r2
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	440b      	add	r3, r1
 8000a90:	3301      	adds	r3, #1
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d11c      	bne.n	8000ad2 <handle_game_death+0xee>
 8000a98:	4916      	ldr	r1, [pc, #88]	@ (8000af4 <handle_game_death+0x110>)
 8000a9a:	683a      	ldr	r2, [r7, #0]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	4413      	add	r3, r2
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d112      	bne.n	8000ad2 <handle_game_death+0xee>
            g_level = 1;
 8000aac:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <handle_game_death+0x114>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	701a      	strb	r2, [r3, #0]
            g_score = 0;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <handle_game_death+0x108>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
            g_lives = INITIAL_LIVES;
 8000ab8:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <handle_game_death+0x118>)
 8000aba:	2204      	movs	r2, #4
 8000abc:	701a      	strb	r2, [r3, #0]
            g_difficulty_locked = 0;
 8000abe:	4b10      	ldr	r3, [pc, #64]	@ (8000b00 <handle_game_death+0x11c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
            animation_played = 0;  // Reset for next game over
 8000ac4:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <handle_game_death+0x104>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
            set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 8000aca:	2001      	movs	r0, #1
 8000acc:	f7ff fc44 	bl	8000358 <set_game_state>
            break;
 8000ad0:	e006      	b.n	8000ae0 <handle_game_death+0xfc>
    for (int i = 0; i < 4; i++) {
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	2b03      	cmp	r3, #3
 8000adc:	ddd1      	ble.n	8000a82 <handle_game_death+0x9e>
        }
    }
}
 8000ade:	bf00      	nop
 8000ae0:	bf00      	nop
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200000c9 	.word	0x200000c9
 8000aec:	20000088 	.word	0x20000088
 8000af0:	0800381c 	.word	0x0800381c
 8000af4:	200000cc 	.word	0x200000cc
 8000af8:	20000086 	.word	0x20000086
 8000afc:	2000008c 	.word	0x2000008c
 8000b00:	20000094 	.word	0x20000094

08000b04 <Game_Init>:

/* ============================================================================
 * Public Functions
 * ============================================================================ */
void Game_Init(void) {
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
    Log_Print("\r\n[GAME] Initializing Simon Game...\r\n");
 8000b0a:	480f      	ldr	r0, [pc, #60]	@ (8000b48 <Game_Init+0x44>)
 8000b0c:	f001 fbd2 	bl	80022b4 <Log_Print>
    uint32_t seed = g_adc_values[1] + g_adc_values[2] + GetTick();
 8000b10:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <Game_Init+0x48>)
 8000b12:	885b      	ldrh	r3, [r3, #2]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	461a      	mov	r2, r3
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <Game_Init+0x48>)
 8000b1a:	889b      	ldrh	r3, [r3, #4]
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	4413      	add	r3, r2
 8000b20:	461c      	mov	r4, r3
 8000b22:	f001 fbbb 	bl	800229c <GetTick>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4423      	add	r3, r4
 8000b2a:	607b      	str	r3, [r7, #4]
    srand(seed);
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f001 fc3b 	bl	80023a8 <srand>
    Log_Print("[GAME] Random seed set to: %lu\r\n", seed);
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	4806      	ldr	r0, [pc, #24]	@ (8000b50 <Game_Init+0x4c>)
 8000b36:	f001 fbbd 	bl	80022b4 <Log_Print>
    set_game_state(GAME_STATE_BOOT);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff fc0c 	bl	8000358 <set_game_state>
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd90      	pop	{r4, r7, pc}
 8000b48:	0800383c 	.word	0x0800383c
 8000b4c:	200000fc 	.word	0x200000fc
 8000b50:	08003864 	.word	0x08003864

08000b54 <Game_Run>:

void Game_Run(void) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
    // Log state transitions
    if (g_last_state_logged != g_game_state) {
 8000b58:	4b3e      	ldr	r3, [pc, #248]	@ (8000c54 <Game_Run+0x100>)
 8000b5a:	781a      	ldrb	r2, [r3, #0]
 8000b5c:	4b3e      	ldr	r3, [pc, #248]	@ (8000c58 <Game_Run+0x104>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d03d      	beq.n	8000be0 <Game_Run+0x8c>
        switch(g_game_state) {
 8000b64:	4b3c      	ldr	r3, [pc, #240]	@ (8000c58 <Game_Run+0x104>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b07      	cmp	r3, #7
 8000b6a:	d833      	bhi.n	8000bd4 <Game_Run+0x80>
 8000b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8000b74 <Game_Run+0x20>)
 8000b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b72:	bf00      	nop
 8000b74:	08000b95 	.word	0x08000b95
 8000b78:	08000b9d 	.word	0x08000b9d
 8000b7c:	08000ba5 	.word	0x08000ba5
 8000b80:	08000bad 	.word	0x08000bad
 8000b84:	08000bb5 	.word	0x08000bb5
 8000b88:	08000bbd 	.word	0x08000bbd
 8000b8c:	08000bc5 	.word	0x08000bc5
 8000b90:	08000bcd 	.word	0x08000bcd
            case GAME_STATE_BOOT:
                Log_Print("[STATE] -> BOOT\r\n");
 8000b94:	4831      	ldr	r0, [pc, #196]	@ (8000c5c <Game_Run+0x108>)
 8000b96:	f001 fb8d 	bl	80022b4 <Log_Print>
                break;
 8000b9a:	e01b      	b.n	8000bd4 <Game_Run+0x80>
            case GAME_STATE_DIFFICULTY_SELECT:
                Log_Print("[STATE] -> DIFFICULTY_SELECT\r\n");
 8000b9c:	4830      	ldr	r0, [pc, #192]	@ (8000c60 <Game_Run+0x10c>)
 8000b9e:	f001 fb89 	bl	80022b4 <Log_Print>
                break;
 8000ba2:	e017      	b.n	8000bd4 <Game_Run+0x80>
            case GAME_STATE_LEVEL_INTRO:
                Log_Print("[STATE] -> LEVEL_INTRO\r\n");
 8000ba4:	482f      	ldr	r0, [pc, #188]	@ (8000c64 <Game_Run+0x110>)
 8000ba6:	f001 fb85 	bl	80022b4 <Log_Print>
                break;
 8000baa:	e013      	b.n	8000bd4 <Game_Run+0x80>
            case GAME_STATE_PATTERN_DISPLAY:
                Log_Print("[STATE] -> PATTERN_DISPLAY\r\n");
 8000bac:	482e      	ldr	r0, [pc, #184]	@ (8000c68 <Game_Run+0x114>)
 8000bae:	f001 fb81 	bl	80022b4 <Log_Print>
                break;
 8000bb2:	e00f      	b.n	8000bd4 <Game_Run+0x80>
            case GAME_STATE_INPUT_WAIT:
                Log_Print("[STATE] -> INPUT_WAIT\r\n");
 8000bb4:	482d      	ldr	r0, [pc, #180]	@ (8000c6c <Game_Run+0x118>)
 8000bb6:	f001 fb7d 	bl	80022b4 <Log_Print>
                break;
 8000bba:	e00b      	b.n	8000bd4 <Game_Run+0x80>
            case GAME_STATE_RESULT_PROCESS:
                Log_Print("[STATE] -> RESULT_PROCESS\r\n");
 8000bbc:	482c      	ldr	r0, [pc, #176]	@ (8000c70 <Game_Run+0x11c>)
 8000bbe:	f001 fb79 	bl	80022b4 <Log_Print>
                break;
 8000bc2:	e007      	b.n	8000bd4 <Game_Run+0x80>
            case GAME_STATE_VICTORY:
                Log_Print("[STATE] -> VICTORY\r\n");
 8000bc4:	482b      	ldr	r0, [pc, #172]	@ (8000c74 <Game_Run+0x120>)
 8000bc6:	f001 fb75 	bl	80022b4 <Log_Print>
                break;
 8000bca:	e003      	b.n	8000bd4 <Game_Run+0x80>
            case GAME_STATE_GAME_DEATH:
                Log_Print("[STATE] -> GAME_DEATH\r\n");
 8000bcc:	482a      	ldr	r0, [pc, #168]	@ (8000c78 <Game_Run+0x124>)
 8000bce:	f001 fb71 	bl	80022b4 <Log_Print>
                break;
 8000bd2:	bf00      	nop
        }
        g_last_state_logged = g_game_state;
 8000bd4:	4b20      	ldr	r3, [pc, #128]	@ (8000c58 <Game_Run+0x104>)
 8000bd6:	781a      	ldrb	r2, [r3, #0]
 8000bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c54 <Game_Run+0x100>)
 8000bda:	701a      	strb	r2, [r3, #0]
        OLED_ShowStatus();
 8000bdc:	f001 fa78 	bl	80020d0 <OLED_ShowStatus>
    }

    // Execute current state handler
    switch(g_game_state) {
 8000be0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c58 <Game_Run+0x104>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b07      	cmp	r3, #7
 8000be6:	d82b      	bhi.n	8000c40 <Game_Run+0xec>
 8000be8:	a201      	add	r2, pc, #4	@ (adr r2, 8000bf0 <Game_Run+0x9c>)
 8000bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bee:	bf00      	nop
 8000bf0:	08000c11 	.word	0x08000c11
 8000bf4:	08000c17 	.word	0x08000c17
 8000bf8:	08000c1d 	.word	0x08000c1d
 8000bfc:	08000c23 	.word	0x08000c23
 8000c00:	08000c29 	.word	0x08000c29
 8000c04:	08000c2f 	.word	0x08000c2f
 8000c08:	08000c35 	.word	0x08000c35
 8000c0c:	08000c3b 	.word	0x08000c3b
        case GAME_STATE_BOOT:
            handle_boot();
 8000c10:	f7ff fc04 	bl	800041c <handle_boot>
            break;
 8000c14:	e01c      	b.n	8000c50 <Game_Run+0xfc>
        case GAME_STATE_DIFFICULTY_SELECT:
            handle_difficulty_select();
 8000c16:	f7ff fc77 	bl	8000508 <handle_difficulty_select>
            break;
 8000c1a:	e019      	b.n	8000c50 <Game_Run+0xfc>
        case GAME_STATE_LEVEL_INTRO:
            handle_level_intro();
 8000c1c:	f7ff fce2 	bl	80005e4 <handle_level_intro>
            break;
 8000c20:	e016      	b.n	8000c50 <Game_Run+0xfc>
        case GAME_STATE_PATTERN_DISPLAY:
            handle_pattern_display();
 8000c22:	f7ff fd39 	bl	8000698 <handle_pattern_display>
            break;
 8000c26:	e013      	b.n	8000c50 <Game_Run+0xfc>
        case GAME_STATE_INPUT_WAIT:
            handle_input_wait();
 8000c28:	f7ff fd9a 	bl	8000760 <handle_input_wait>
            break;
 8000c2c:	e010      	b.n	8000c50 <Game_Run+0xfc>
        case GAME_STATE_RESULT_PROCESS:
            handle_result_process();
 8000c2e:	f7ff fdf9 	bl	8000824 <handle_result_process>
            break;
 8000c32:	e00d      	b.n	8000c50 <Game_Run+0xfc>
        case GAME_STATE_VICTORY:
            handle_victory();
 8000c34:	f7ff fe5e 	bl	80008f4 <handle_victory>
            break;
 8000c38:	e00a      	b.n	8000c50 <Game_Run+0xfc>
        case GAME_STATE_GAME_DEATH:
            handle_game_death();
 8000c3a:	f7ff fed3 	bl	80009e4 <handle_game_death>
            break;
 8000c3e:	e007      	b.n	8000c50 <Game_Run+0xfc>
        default:
            set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 8000c40:	2001      	movs	r0, #1
 8000c42:	f7ff fb89 	bl	8000358 <set_game_state>
            Delay_ms(1000);
 8000c46:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c4a:	f001 fb11 	bl	8002270 <Delay_ms>
            break;
 8000c4e:	bf00      	nop
    }
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000001 	.word	0x20000001
 8000c58:	20000084 	.word	0x20000084
 8000c5c:	08003888 	.word	0x08003888
 8000c60:	0800389c 	.word	0x0800389c
 8000c64:	080038bc 	.word	0x080038bc
 8000c68:	080038d8 	.word	0x080038d8
 8000c6c:	080038f8 	.word	0x080038f8
 8000c70:	08003910 	.word	0x08003910
 8000c74:	0800392c 	.word	0x0800392c
 8000c78:	08003944 	.word	0x08003944

08000c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db0b      	blt.n	8000ca6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 021f 	and.w	r2, r3, #31
 8000c94:	4907      	ldr	r1, [pc, #28]	@ (8000cb4 <__NVIC_EnableIRQ+0x38>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000e100 	.word	0xe000e100

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	@ (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	@ (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <SystemClock_Config>:
volatile uint8_t  g_current_adc_channel = 0;

/* ============================================================================
 * System Initialization
 * ============================================================================ */
void SystemClock_Config(void) {
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
    RCC->CR |= RCC_CR_HSION;
 8000d10:	4b1d      	ldr	r3, [pc, #116]	@ (8000d88 <SystemClock_Config+0x7c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a1c      	ldr	r2, [pc, #112]	@ (8000d88 <SystemClock_Config+0x7c>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_HSIRDY));
 8000d1c:	bf00      	nop
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d88 <SystemClock_Config+0x7c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0f9      	beq.n	8000d1e <SystemClock_Config+0x12>

    RCC->PLLCFGR = (RCC_PLLCFGR_PLLSRC_HSI) |
 8000d2a:	4b17      	ldr	r3, [pc, #92]	@ (8000d88 <SystemClock_Config+0x7c>)
 8000d2c:	f642 2210 	movw	r2, #10768	@ 0x2a10
 8000d30:	605a      	str	r2, [r3, #4]
                   (16 << RCC_PLLCFGR_PLLM_Pos) |
                   (168 << RCC_PLLCFGR_PLLN_Pos) |
                   (0 << RCC_PLLCFGR_PLLP_Pos);

    RCC->CR |= RCC_CR_PLLON;
 8000d32:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <SystemClock_Config+0x7c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a14      	ldr	r2, [pc, #80]	@ (8000d88 <SystemClock_Config+0x7c>)
 8000d38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000d3c:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_PLLRDY));
 8000d3e:	bf00      	nop
 8000d40:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <SystemClock_Config+0x7c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d0f9      	beq.n	8000d40 <SystemClock_Config+0x34>

    FLASH->ACR = FLASH_ACR_LATENCY_2WS;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <SystemClock_Config+0x80>)
 8000d4e:	2202      	movs	r2, #2
 8000d50:	601a      	str	r2, [r3, #0]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV2 | RCC_CFGR_PPRE2_DIV1;
 8000d52:	4b0d      	ldr	r3, [pc, #52]	@ (8000d88 <SystemClock_Config+0x7c>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	4a0c      	ldr	r2, [pc, #48]	@ (8000d88 <SystemClock_Config+0x7c>)
 8000d58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d5c:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <SystemClock_Config+0x7c>)
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	4a09      	ldr	r2, [pc, #36]	@ (8000d88 <SystemClock_Config+0x7c>)
 8000d64:	f043 0302 	orr.w	r3, r3, #2
 8000d68:	6093      	str	r3, [r2, #8]
    while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000d6a:	bf00      	nop
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <SystemClock_Config+0x7c>)
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	f003 030c 	and.w	r3, r3, #12
 8000d74:	2b08      	cmp	r3, #8
 8000d76:	d1f9      	bne.n	8000d6c <SystemClock_Config+0x60>

    SystemCoreClock = 84000000;
 8000d78:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <SystemClock_Config+0x84>)
 8000d7a:	4a06      	ldr	r2, [pc, #24]	@ (8000d94 <SystemClock_Config+0x88>)
 8000d7c:	601a      	str	r2, [r3, #0]
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40023c00 	.word	0x40023c00
 8000d90:	20000004 	.word	0x20000004
 8000d94:	0501bd00 	.word	0x0501bd00

08000d98 <GPIO_Init>:

void GPIO_Init(void) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
    // --- Init button state memory (สำหรับ debounce แบบใหม่) ---
    for (int i = 0; i < 4; i++) {
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	e029      	b.n	8000df8 <GPIO_Init+0x60>
        g_buttons[i].previous_state   = 0;
 8000da4:	493e      	ldr	r1, [pc, #248]	@ (8000ea0 <GPIO_Init+0x108>)
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	4613      	mov	r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4413      	add	r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	440b      	add	r3, r1
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
        g_buttons[i].current_state    = 0;
 8000db6:	493a      	ldr	r1, [pc, #232]	@ (8000ea0 <GPIO_Init+0x108>)
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	4413      	add	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	440b      	add	r3, r1
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
        g_buttons[i].stable_reading   = 0;   // ต้องมีฟิลด์นี้ใน struct
 8000dca:	4935      	ldr	r1, [pc, #212]	@ (8000ea0 <GPIO_Init+0x108>)
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	3308      	adds	r3, #8
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
        g_buttons[i].last_change_time = 0;
 8000dde:	4930      	ldr	r1, [pc, #192]	@ (8000ea0 <GPIO_Init+0x108>)
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	4613      	mov	r3, r2
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	4413      	add	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	440b      	add	r3, r1
 8000dec:	3304      	adds	r3, #4
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3301      	adds	r3, #1
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	ddd2      	ble.n	8000da4 <GPIO_Init+0xc>
    }

    // --- Enable GPIO clocks ---
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;
 8000dfe:	4b29      	ldr	r3, [pc, #164]	@ (8000ea4 <GPIO_Init+0x10c>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	4a28      	ldr	r2, [pc, #160]	@ (8000ea4 <GPIO_Init+0x10c>)
 8000e04:	f043 0307 	orr.w	r3, r3, #7
 8000e08:	6313      	str	r3, [r2, #48]	@ 0x30

    // --- LEDs as outputs ---
    GPIOA->MODER |= (1 << (LED1_PIN*2)) | (1 << (LED2_PIN*2)) | (1 << (LED3_PIN*2));
 8000e0a:	4b27      	ldr	r3, [pc, #156]	@ (8000ea8 <GPIO_Init+0x110>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a26      	ldr	r2, [pc, #152]	@ (8000ea8 <GPIO_Init+0x110>)
 8000e10:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 8000e14:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (1 << (LED4_PIN*2));
 8000e16:	4b25      	ldr	r3, [pc, #148]	@ (8000eac <GPIO_Init+0x114>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a24      	ldr	r2, [pc, #144]	@ (8000eac <GPIO_Init+0x114>)
 8000e1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e20:	6013      	str	r3, [r2, #0]

    // --- Buttons as inputs with pull-ups (active-low) ---
    // (ขา input เป็นค่า default อยู่แล้ว จึงตั้งแค่ PUPDR ก็พอ)
    GPIOA->PUPDR |= (1 << (BTN0_PIN*2));
 8000e22:	4b21      	ldr	r3, [pc, #132]	@ (8000ea8 <GPIO_Init+0x110>)
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	4a20      	ldr	r2, [pc, #128]	@ (8000ea8 <GPIO_Init+0x110>)
 8000e28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000e2c:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (1 << (BTN1_PIN*2)) | (1 << (BTN2_PIN*2)) | (1 << (BTN3_PIN*2));
 8000e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000eac <GPIO_Init+0x114>)
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	4a1e      	ldr	r2, [pc, #120]	@ (8000eac <GPIO_Init+0x114>)
 8000e34:	f443 63a8 	orr.w	r3, r3, #1344	@ 0x540
 8000e38:	60d3      	str	r3, [r2, #12]

    // --- ADC pins as analog ---
    GPIOA->MODER |= (3 << (POT_PIN*2)) | (3 << (TEMP_PIN*2)) | (3 << (LIGHT_PIN*2));
 8000e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea8 <GPIO_Init+0x110>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ea8 <GPIO_Init+0x110>)
 8000e40:	f443 7343 	orr.w	r3, r3, #780	@ 0x30c
 8000e44:	f043 0303 	orr.w	r3, r3, #3
 8000e48:	6013      	str	r3, [r2, #0]

    // --- UART2: PA2, PA3 as AF7 ---
    GPIOA->MODER |= (2 << (2*2)) | (2 << (3*2));
 8000e4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ea8 <GPIO_Init+0x110>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a16      	ldr	r2, [pc, #88]	@ (8000ea8 <GPIO_Init+0x110>)
 8000e50:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000e54:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (7 << (2*4)) | (7 << (3*4));
 8000e56:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <GPIO_Init+0x110>)
 8000e58:	6a1b      	ldr	r3, [r3, #32]
 8000e5a:	4a13      	ldr	r2, [pc, #76]	@ (8000ea8 <GPIO_Init+0x110>)
 8000e5c:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000e60:	6213      	str	r3, [r2, #32]

    // --- 7-Segment BCD outputs ---
    GPIOC->MODER = (GPIOC->MODER & ~(3U << (BCD_2_0_PIN*2))) | (1U << (BCD_2_0_PIN*2));
 8000e62:	4b13      	ldr	r3, [pc, #76]	@ (8000eb0 <GPIO_Init+0x118>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e6a:	4a11      	ldr	r2, [pc, #68]	@ (8000eb0 <GPIO_Init+0x118>)
 8000e6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e70:	6013      	str	r3, [r2, #0]
    GPIOA->MODER = (GPIOA->MODER & ~((3U << (BCD_2_1_PIN*2)) | (3U << (BCD_2_3_PIN*2)))) |
 8000e72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <GPIO_Init+0x110>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea8 <GPIO_Init+0x110>)
                   (1U << (BCD_2_1_PIN*2)) | (1U << (BCD_2_3_PIN*2));
 8000e7c:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
    GPIOA->MODER = (GPIOA->MODER & ~((3U << (BCD_2_1_PIN*2)) | (3U << (BCD_2_3_PIN*2)))) |
 8000e80:	6013      	str	r3, [r2, #0]
    GPIOB->MODER = (GPIOB->MODER & ~(3U << (BCD_2_2_PIN*2))) | (1U << (BCD_2_2_PIN*2));
 8000e82:	4b0a      	ldr	r3, [pc, #40]	@ (8000eac <GPIO_Init+0x114>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000e8a:	4a08      	ldr	r2, [pc, #32]	@ (8000eac <GPIO_Init+0x114>)
 8000e8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000e90:	6013      	str	r3, [r2, #0]
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	200000cc 	.word	0x200000cc
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020000 	.word	0x40020000
 8000eac:	40020400 	.word	0x40020400
 8000eb0:	40020800 	.word	0x40020800

08000eb4 <ADC_Init>:


void ADC_Init(void) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <ADC_Init+0x50>)
 8000eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebc:	4a11      	ldr	r2, [pc, #68]	@ (8000f04 <ADC_Init+0x50>)
 8000ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ec2:	6453      	str	r3, [r2, #68]	@ 0x44
    ADC1->CR2 |= ADC_CR2_ADON;
 8000ec4:	4b10      	ldr	r3, [pc, #64]	@ (8000f08 <ADC_Init+0x54>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	4a0f      	ldr	r2, [pc, #60]	@ (8000f08 <ADC_Init+0x54>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	6093      	str	r3, [r2, #8]
    ADC1->CR1 |= ADC_CR1_EOCIE;
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	@ (8000f08 <ADC_Init+0x54>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	4a0c      	ldr	r2, [pc, #48]	@ (8000f08 <ADC_Init+0x54>)
 8000ed6:	f043 0320 	orr.w	r3, r3, #32
 8000eda:	6053      	str	r3, [r2, #4]
    ADC1->CR1 |= (1 << ADC_CR1_RES_Pos); // 10-bit resolution
 8000edc:	4b0a      	ldr	r3, [pc, #40]	@ (8000f08 <ADC_Init+0x54>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	4a09      	ldr	r2, [pc, #36]	@ (8000f08 <ADC_Init+0x54>)
 8000ee2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ee6:	6053      	str	r3, [r2, #4]
    ADC1->SMPR2 |= (7 << ADC_SMPR2_SMP0_Pos) |
 8000ee8:	4b07      	ldr	r3, [pc, #28]	@ (8000f08 <ADC_Init+0x54>)
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	4a06      	ldr	r2, [pc, #24]	@ (8000f08 <ADC_Init+0x54>)
 8000eee:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000ef2:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8000ef6:	6113      	str	r3, [r2, #16]
                   (7 << ADC_SMPR2_SMP1_Pos) |
                   (7 << ADC_SMPR2_SMP4_Pos);
    Delay_ms(2);
 8000ef8:	2002      	movs	r0, #2
 8000efa:	f001 f9b9 	bl	8002270 <Delay_ms>
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40012000 	.word	0x40012000

08000f0c <USART2_Init>:

void USART2_Init(void) {
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000f10:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <USART2_Init+0x34>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f14:	4a0a      	ldr	r2, [pc, #40]	@ (8000f40 <USART2_Init+0x34>)
 8000f16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f1a:	6413      	str	r3, [r2, #64]	@ 0x40
    USART2->BRR = 0x16C; // 115200 @ 42MHz
 8000f1c:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <USART2_Init+0x38>)
 8000f1e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8000f22:	609a      	str	r2, [r3, #8]
    USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000f24:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <USART2_Init+0x38>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	4a06      	ldr	r2, [pc, #24]	@ (8000f44 <USART2_Init+0x38>)
 8000f2a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f2e:	f043 030c 	orr.w	r3, r3, #12
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40004400 	.word	0x40004400

08000f48 <NVIC_Init>:

void NVIC_Init(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(ADC_IRQn);
 8000f4c:	2012      	movs	r0, #18
 8000f4e:	f7ff fe95 	bl	8000c7c <__NVIC_EnableIRQ>
    NVIC_SetPriority(ADC_IRQn, 1);
 8000f52:	2101      	movs	r1, #1
 8000f54:	2012      	movs	r0, #18
 8000f56:	f7ff feaf 	bl	8000cb8 <__NVIC_SetPriority>
    NVIC_SetPriority(SysTick_IRQn, 0);
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f7ff feaa 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <ADC_StartConversion>:

void ADC_StartConversion(void) {
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
    ADC1->SQR3 = (ADC1->SQR3 & ~ADC_SQR3_SQ1) | POT_PIN;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <ADC_StartConversion+0x2c>)
 8000f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f70:	f023 031f 	bic.w	r3, r3, #31
 8000f74:	4a07      	ldr	r2, [pc, #28]	@ (8000f94 <ADC_StartConversion+0x2c>)
 8000f76:	f043 0304 	orr.w	r3, r3, #4
 8000f7a:	6353      	str	r3, [r2, #52]	@ 0x34
    ADC1->CR2 |= ADC_CR2_SWSTART;
 8000f7c:	4b05      	ldr	r3, [pc, #20]	@ (8000f94 <ADC_StartConversion+0x2c>)
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	4a04      	ldr	r2, [pc, #16]	@ (8000f94 <ADC_StartConversion+0x2c>)
 8000f82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000f86:	6093      	str	r3, [r2, #8]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40012000 	.word	0x40012000

08000f98 <Monitor_Buttons>:

/* ============================================================================
 * Hardware Monitoring
 * ============================================================================ */
void Monitor_Buttons(void) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
    uint32_t now = GetTick();
 8000f9e:	f001 f97d 	bl	800229c <GetTick>
 8000fa2:	60b8      	str	r0, [r7, #8]
    uint8_t raw[4] = {
        !(BTN0_PORT->IDR & (1 << BTN0_PIN)),
 8000fa4:	4b4a      	ldr	r3, [pc, #296]	@ (80010d0 <Monitor_Buttons+0x138>)
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	bf0c      	ite	eq
 8000fb0:	2301      	moveq	r3, #1
 8000fb2:	2300      	movne	r3, #0
 8000fb4:	b2db      	uxtb	r3, r3
    uint8_t raw[4] = {
 8000fb6:	713b      	strb	r3, [r7, #4]
        !(BTN1_PORT->IDR & (1 << BTN1_PIN)),
 8000fb8:	4b46      	ldr	r3, [pc, #280]	@ (80010d4 <Monitor_Buttons+0x13c>)
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	f003 0308 	and.w	r3, r3, #8
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	bf0c      	ite	eq
 8000fc4:	2301      	moveq	r3, #1
 8000fc6:	2300      	movne	r3, #0
 8000fc8:	b2db      	uxtb	r3, r3
    uint8_t raw[4] = {
 8000fca:	717b      	strb	r3, [r7, #5]
        !(BTN2_PORT->IDR & (1 << BTN2_PIN)),
 8000fcc:	4b41      	ldr	r3, [pc, #260]	@ (80010d4 <Monitor_Buttons+0x13c>)
 8000fce:	691b      	ldr	r3, [r3, #16]
 8000fd0:	f003 0320 	and.w	r3, r3, #32
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	bf0c      	ite	eq
 8000fd8:	2301      	moveq	r3, #1
 8000fda:	2300      	movne	r3, #0
 8000fdc:	b2db      	uxtb	r3, r3
    uint8_t raw[4] = {
 8000fde:	71bb      	strb	r3, [r7, #6]
        !(BTN3_PORT->IDR & (1 << BTN3_PIN))
 8000fe0:	4b3c      	ldr	r3, [pc, #240]	@ (80010d4 <Monitor_Buttons+0x13c>)
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	f003 0310 	and.w	r3, r3, #16
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	bf0c      	ite	eq
 8000fec:	2301      	moveq	r3, #1
 8000fee:	2300      	movne	r3, #0
 8000ff0:	b2db      	uxtb	r3, r3
    uint8_t raw[4] = {
 8000ff2:	71fb      	strb	r3, [r7, #7]
    };

    for (int i = 0; i < 4; i++) {
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	e061      	b.n	80010be <Monitor_Buttons+0x126>
        // ใช้ previous_state/current_state เดิม แต่ต้องนิ่งครบเวลา
        if (raw[i] != g_buttons[i].stable_reading) {
 8000ffa:	1d3a      	adds	r2, r7, #4
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	7819      	ldrb	r1, [r3, #0]
 8001002:	4835      	ldr	r0, [pc, #212]	@ (80010d8 <Monitor_Buttons+0x140>)
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	4613      	mov	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4413      	add	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4403      	add	r3, r0
 8001010:	3308      	adds	r3, #8
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4299      	cmp	r1, r3
 8001016:	d045      	beq.n	80010a4 <Monitor_Buttons+0x10c>
            // มีการเปลี่ยน -> เริ่มจับเวลา
            if ((now - g_buttons[i].last_change_time) >= BUTTON_DEBOUNCE_MS) {
 8001018:	492f      	ldr	r1, [pc, #188]	@ (80010d8 <Monitor_Buttons+0x140>)
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	4613      	mov	r3, r2
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4413      	add	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	440b      	add	r3, r1
 8001026:	3304      	adds	r3, #4
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b31      	cmp	r3, #49	@ 0x31
 8001030:	d942      	bls.n	80010b8 <Monitor_Buttons+0x120>
                g_buttons[i].stable_reading = raw[i];
 8001032:	1d3a      	adds	r2, r7, #4
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4413      	add	r3, r2
 8001038:	7818      	ldrb	r0, [r3, #0]
 800103a:	4927      	ldr	r1, [pc, #156]	@ (80010d8 <Monitor_Buttons+0x140>)
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	3308      	adds	r3, #8
 800104a:	4602      	mov	r2, r0
 800104c:	701a      	strb	r2, [r3, #0]
                g_buttons[i].previous_state = g_buttons[i].current_state;
 800104e:	4922      	ldr	r1, [pc, #136]	@ (80010d8 <Monitor_Buttons+0x140>)
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	4613      	mov	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4413      	add	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	3301      	adds	r3, #1
 800105e:	7818      	ldrb	r0, [r3, #0]
 8001060:	491d      	ldr	r1, [pc, #116]	@ (80010d8 <Monitor_Buttons+0x140>)
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	4613      	mov	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4413      	add	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	440b      	add	r3, r1
 800106e:	4602      	mov	r2, r0
 8001070:	701a      	strb	r2, [r3, #0]
                g_buttons[i].current_state  = raw[i];
 8001072:	1d3a      	adds	r2, r7, #4
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4413      	add	r3, r2
 8001078:	7818      	ldrb	r0, [r3, #0]
 800107a:	4917      	ldr	r1, [pc, #92]	@ (80010d8 <Monitor_Buttons+0x140>)
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	4613      	mov	r3, r2
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	4413      	add	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	440b      	add	r3, r1
 8001088:	3301      	adds	r3, #1
 800108a:	4602      	mov	r2, r0
 800108c:	701a      	strb	r2, [r3, #0]
                g_buttons[i].last_change_time = now;
 800108e:	4912      	ldr	r1, [pc, #72]	@ (80010d8 <Monitor_Buttons+0x140>)
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	4613      	mov	r3, r2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4413      	add	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	440b      	add	r3, r1
 800109c:	3304      	adds	r3, #4
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	e009      	b.n	80010b8 <Monitor_Buttons+0x120>
            }
        } else {
            // ไม่มีการเปลี่ยน, อัปเดต time check เพื่อพร้อมใช้ครั้งหน้า
            g_buttons[i].last_change_time = now;
 80010a4:	490c      	ldr	r1, [pc, #48]	@ (80010d8 <Monitor_Buttons+0x140>)
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	4613      	mov	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	3304      	adds	r3, #4
 80010b4:	68ba      	ldr	r2, [r7, #8]
 80010b6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3301      	adds	r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	dd9a      	ble.n	8000ffa <Monitor_Buttons+0x62>
        }
    }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40020400 	.word	0x40020400
 80010d8:	200000cc 	.word	0x200000cc

080010dc <Monitor_ADC>:


void Monitor_ADC(void) {
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
    /* ADC handled via interrupt */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <LED_SetPattern>:

/* ============================================================================
 * Hardware Control
 * ============================================================================ */
void LED_SetPattern(uint8_t pattern) {
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
    (pattern & 0x01) ? (LED1_PORT->BSRR = (1 << LED1_PIN)) :
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <LED_SetPattern+0x1c>
 8001100:	4b1a      	ldr	r3, [pc, #104]	@ (800116c <LED_SetPattern+0x80>)
 8001102:	2220      	movs	r2, #32
 8001104:	619a      	str	r2, [r3, #24]
 8001106:	e003      	b.n	8001110 <LED_SetPattern+0x24>
                       (LED1_PORT->BSRR = (1 << (LED1_PIN + 16)));
 8001108:	4b18      	ldr	r3, [pc, #96]	@ (800116c <LED_SetPattern+0x80>)
 800110a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800110e:	619a      	str	r2, [r3, #24]
    (pattern & 0x02) ? (LED2_PORT->BSRR = (1 << LED2_PIN)) :
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <LED_SetPattern+0x36>
 800111a:	4b14      	ldr	r3, [pc, #80]	@ (800116c <LED_SetPattern+0x80>)
 800111c:	2240      	movs	r2, #64	@ 0x40
 800111e:	619a      	str	r2, [r3, #24]
 8001120:	e003      	b.n	800112a <LED_SetPattern+0x3e>
                       (LED2_PORT->BSRR = (1 << (LED2_PIN + 16)));
 8001122:	4b12      	ldr	r3, [pc, #72]	@ (800116c <LED_SetPattern+0x80>)
 8001124:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001128:	619a      	str	r2, [r3, #24]
    (pattern & 0x04) ? (LED3_PORT->BSRR = (1 << LED3_PIN)) :
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <LED_SetPattern+0x50>
 8001134:	4b0d      	ldr	r3, [pc, #52]	@ (800116c <LED_SetPattern+0x80>)
 8001136:	2280      	movs	r2, #128	@ 0x80
 8001138:	619a      	str	r2, [r3, #24]
 800113a:	e003      	b.n	8001144 <LED_SetPattern+0x58>
                       (LED3_PORT->BSRR = (1 << (LED3_PIN + 16)));
 800113c:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <LED_SetPattern+0x80>)
 800113e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001142:	619a      	str	r2, [r3, #24]
    (pattern & 0x08) ? (LED4_PORT->BSRR = (1 << LED4_PIN)) :
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <LED_SetPattern+0x6a>
 800114e:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <LED_SetPattern+0x84>)
 8001150:	2240      	movs	r2, #64	@ 0x40
 8001152:	619a      	str	r2, [r3, #24]
                       (LED4_PORT->BSRR = (1 << (LED4_PIN + 16)));
}
 8001154:	e003      	b.n	800115e <LED_SetPattern+0x72>
                       (LED4_PORT->BSRR = (1 << (LED4_PIN + 16)));
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <LED_SetPattern+0x84>)
 8001158:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800115c:	619a      	str	r2, [r3, #24]
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40020000 	.word	0x40020000
 8001170:	40020400 	.word	0x40020400

08001174 <SevenSeg_Display>:

void SevenSeg_Display(uint8_t digit) {
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
    if(digit > 9) return;
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	2b09      	cmp	r3, #9
 8001182:	d837      	bhi.n	80011f4 <SevenSeg_Display+0x80>
    (digit & 0x01) ? (BCD_2_0_PORT->BSRR = (1 << BCD_2_0_PIN)) :
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <SevenSeg_Display+0x22>
 800118e:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <SevenSeg_Display+0x8c>)
 8001190:	2280      	movs	r2, #128	@ 0x80
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	e003      	b.n	800119e <SevenSeg_Display+0x2a>
                     (BCD_2_0_PORT->BSRR = (1 << (BCD_2_0_PIN + 16)));
 8001196:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <SevenSeg_Display+0x8c>)
 8001198:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800119c:	619a      	str	r2, [r3, #24]
    (digit & 0x02) ? (BCD_2_1_PORT->BSRR = (1 << BCD_2_1_PIN)) :
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d004      	beq.n	80011b2 <SevenSeg_Display+0x3e>
 80011a8:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <SevenSeg_Display+0x90>)
 80011aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011ae:	619a      	str	r2, [r3, #24]
 80011b0:	e003      	b.n	80011ba <SevenSeg_Display+0x46>
                     (BCD_2_1_PORT->BSRR = (1 << (BCD_2_1_PIN + 16)));
 80011b2:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <SevenSeg_Display+0x90>)
 80011b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80011b8:	619a      	str	r2, [r3, #24]
    (digit & 0x04) ? (BCD_2_2_PORT->BSRR = (1 << BCD_2_2_PIN)) :
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d004      	beq.n	80011ce <SevenSeg_Display+0x5a>
 80011c4:	4b10      	ldr	r3, [pc, #64]	@ (8001208 <SevenSeg_Display+0x94>)
 80011c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011ca:	619a      	str	r2, [r3, #24]
 80011cc:	e003      	b.n	80011d6 <SevenSeg_Display+0x62>
                     (BCD_2_2_PORT->BSRR = (1 << (BCD_2_2_PIN + 16)));
 80011ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <SevenSeg_Display+0x94>)
 80011d0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011d4:	619a      	str	r2, [r3, #24]
    (digit & 0x08) ? (BCD_2_3_PORT->BSRR = (1 << BCD_2_3_PIN)) :
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d004      	beq.n	80011ea <SevenSeg_Display+0x76>
 80011e0:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <SevenSeg_Display+0x90>)
 80011e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011e6:	619a      	str	r2, [r3, #24]
 80011e8:	e005      	b.n	80011f6 <SevenSeg_Display+0x82>
                     (BCD_2_3_PORT->BSRR = (1 << (BCD_2_3_PIN + 16)));
 80011ea:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <SevenSeg_Display+0x90>)
 80011ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80011f0:	619a      	str	r2, [r3, #24]
 80011f2:	e000      	b.n	80011f6 <SevenSeg_Display+0x82>
    if(digit > 9) return;
 80011f4:	bf00      	nop
}
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	40020800 	.word	0x40020800
 8001204:	40020000 	.word	0x40020000
 8001208:	40020400 	.word	0x40020400

0800120c <ADC_IRQHandler>:

/* ============================================================================
 * Interrupt Handler
 * ============================================================================ */
void ADC_IRQHandler(void) {
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
    if(ADC1->SR & ADC_SR_EOC) {
 8001210:	4b20      	ldr	r3, [pc, #128]	@ (8001294 <ADC_IRQHandler+0x88>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d035      	beq.n	8001288 <ADC_IRQHandler+0x7c>
        g_adc_values[g_current_adc_channel] = ADC1->DR;
 800121c:	4b1d      	ldr	r3, [pc, #116]	@ (8001294 <ADC_IRQHandler+0x88>)
 800121e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001220:	4b1d      	ldr	r3, [pc, #116]	@ (8001298 <ADC_IRQHandler+0x8c>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	461a      	mov	r2, r3
 8001228:	b289      	uxth	r1, r1
 800122a:	4b1c      	ldr	r3, [pc, #112]	@ (800129c <ADC_IRQHandler+0x90>)
 800122c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        g_current_adc_channel = (g_current_adc_channel + 1) % 3;
 8001230:	4b19      	ldr	r3, [pc, #100]	@ (8001298 <ADC_IRQHandler+0x8c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	4b19      	ldr	r3, [pc, #100]	@ (80012a0 <ADC_IRQHandler+0x94>)
 800123a:	fb83 3102 	smull	r3, r1, r3, r2
 800123e:	17d3      	asrs	r3, r2, #31
 8001240:	1ac9      	subs	r1, r1, r3
 8001242:	460b      	mov	r3, r1
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	440b      	add	r3, r1
 8001248:	1ad1      	subs	r1, r2, r3
 800124a:	b2ca      	uxtb	r2, r1
 800124c:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <ADC_IRQHandler+0x8c>)
 800124e:	701a      	strb	r2, [r3, #0]
        ADC1->SQR3 = (ADC1->SQR3 & ~ADC_SQR3_SQ1) |
 8001250:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <ADC_IRQHandler+0x88>)
 8001252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001254:	f023 021f 	bic.w	r2, r3, #31
                     (g_current_adc_channel == 0 ? POT_PIN :
 8001258:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <ADC_IRQHandler+0x8c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d008      	beq.n	8001274 <ADC_IRQHandler+0x68>
                     (g_current_adc_channel == 1 ? TEMP_PIN : LIGHT_PIN));
 8001262:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <ADC_IRQHandler+0x8c>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b2db      	uxtb	r3, r3
                     (g_current_adc_channel == 0 ? POT_PIN :
 8001268:	2b01      	cmp	r3, #1
 800126a:	d101      	bne.n	8001270 <ADC_IRQHandler+0x64>
 800126c:	2301      	movs	r3, #1
 800126e:	e002      	b.n	8001276 <ADC_IRQHandler+0x6a>
 8001270:	2300      	movs	r3, #0
 8001272:	e000      	b.n	8001276 <ADC_IRQHandler+0x6a>
 8001274:	2304      	movs	r3, #4
        ADC1->SQR3 = (ADC1->SQR3 & ~ADC_SQR3_SQ1) |
 8001276:	4907      	ldr	r1, [pc, #28]	@ (8001294 <ADC_IRQHandler+0x88>)
 8001278:	4313      	orrs	r3, r2
 800127a:	634b      	str	r3, [r1, #52]	@ 0x34
        ADC1->CR2 |= ADC_CR2_SWSTART;
 800127c:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <ADC_IRQHandler+0x88>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <ADC_IRQHandler+0x88>)
 8001282:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001286:	6093      	str	r3, [r2, #8]
    }
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40012000 	.word	0x40012000
 8001298:	20000102 	.word	0x20000102
 800129c:	200000fc 	.word	0x200000fc
 80012a0:	55555556 	.word	0x55555556

080012a4 <Buzzer_Init>:

void Buzzer_Init(void) {
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;  // เปิด clock ของพอร์ต C
 80012a8:	4b28      	ldr	r3, [pc, #160]	@ (800134c <Buzzer_Init+0xa8>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ac:	4a27      	ldr	r2, [pc, #156]	@ (800134c <Buzzer_Init+0xa8>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;   // ใช้ TIM3 เหมือนเดิม
 80012b4:	4b25      	ldr	r3, [pc, #148]	@ (800134c <Buzzer_Init+0xa8>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b8:	4a24      	ldr	r2, [pc, #144]	@ (800134c <Buzzer_Init+0xa8>)
 80012ba:	f043 0302 	orr.w	r3, r3, #2
 80012be:	6413      	str	r3, [r2, #64]	@ 0x40

    // PC9 -> AF2 (TIM3_CH4)
    GPIOC->MODER &= ~(3u << (BUZZER_PIN * 2));
 80012c0:	4b23      	ldr	r3, [pc, #140]	@ (8001350 <Buzzer_Init+0xac>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a22      	ldr	r2, [pc, #136]	@ (8001350 <Buzzer_Init+0xac>)
 80012c6:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80012ca:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |=  (2u << (BUZZER_PIN * 2));    // Alternate function
 80012cc:	4b20      	ldr	r3, [pc, #128]	@ (8001350 <Buzzer_Init+0xac>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a1f      	ldr	r2, [pc, #124]	@ (8001350 <Buzzer_Init+0xac>)
 80012d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80012d6:	6013      	str	r3, [r2, #0]
    GPIOC->AFR[1] &= ~(0xFu << ((BUZZER_PIN - 8) * 4));
 80012d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001350 <Buzzer_Init+0xac>)
 80012da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001350 <Buzzer_Init+0xac>)
 80012de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80012e2:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOC->AFR[1] |=  (2u   << ((BUZZER_PIN - 8) * 4)); // AF2 = TIM3
 80012e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <Buzzer_Init+0xac>)
 80012e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e8:	4a19      	ldr	r2, [pc, #100]	@ (8001350 <Buzzer_Init+0xac>)
 80012ea:	f043 0320 	orr.w	r3, r3, #32
 80012ee:	6253      	str	r3, [r2, #36]	@ 0x24

    // ตั้งค่า Timer3 channel 4 เป็น PWM
    TIM3->PSC  = 83;        // 1 MHz tick (84MHz / 84)
 80012f0:	4b18      	ldr	r3, [pc, #96]	@ (8001354 <Buzzer_Init+0xb0>)
 80012f2:	2253      	movs	r2, #83	@ 0x53
 80012f4:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR  = 1000;      // ค่าเริ่มต้น ~1kHz
 80012f6:	4b17      	ldr	r3, [pc, #92]	@ (8001354 <Buzzer_Init+0xb0>)
 80012f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM3->CCR4 = 0;         // duty 0% (เงียบ)
 80012fe:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <Buzzer_Init+0xb0>)
 8001300:	2200      	movs	r2, #0
 8001302:	641a      	str	r2, [r3, #64]	@ 0x40

    TIM3->CCMR2 &= ~(7u << 12);          // เคลียร์ OC4M
 8001304:	4b13      	ldr	r3, [pc, #76]	@ (8001354 <Buzzer_Init+0xb0>)
 8001306:	69db      	ldr	r3, [r3, #28]
 8001308:	4a12      	ldr	r2, [pc, #72]	@ (8001354 <Buzzer_Init+0xb0>)
 800130a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800130e:	61d3      	str	r3, [r2, #28]
    TIM3->CCMR2 |=  (6u << 12);          // PWM mode 1
 8001310:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <Buzzer_Init+0xb0>)
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	4a0f      	ldr	r2, [pc, #60]	@ (8001354 <Buzzer_Init+0xb0>)
 8001316:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 800131a:	61d3      	str	r3, [r2, #28]
    TIM3->CCMR2 |=  TIM_CCMR2_OC4PE;     // preload enable
 800131c:	4b0d      	ldr	r3, [pc, #52]	@ (8001354 <Buzzer_Init+0xb0>)
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	4a0c      	ldr	r2, [pc, #48]	@ (8001354 <Buzzer_Init+0xb0>)
 8001322:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001326:	61d3      	str	r3, [r2, #28]

    TIM3->CCER  |=  TIM_CCER_CC4E;       // เปิด channel 4 output
 8001328:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <Buzzer_Init+0xb0>)
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	4a09      	ldr	r2, [pc, #36]	@ (8001354 <Buzzer_Init+0xb0>)
 800132e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001332:	6213      	str	r3, [r2, #32]
    TIM3->CR1   |=  TIM_CR1_ARPE | TIM_CR1_CEN;
 8001334:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <Buzzer_Init+0xb0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a06      	ldr	r2, [pc, #24]	@ (8001354 <Buzzer_Init+0xb0>)
 800133a:	f043 0381 	orr.w	r3, r3, #129	@ 0x81
 800133e:	6013      	str	r3, [r2, #0]
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	40020800 	.word	0x40020800
 8001354:	40000400 	.word	0x40000400

08001358 <Buzzer_Play>:


void Buzzer_Play(uint32_t freq_hz, uint8_t duty_percent) {
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	70fb      	strb	r3, [r7, #3]
    if (freq_hz == 0 || duty_percent == 0) { TIM3->CCR4 = 0; return; }
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d002      	beq.n	8001370 <Buzzer_Play+0x18>
 800136a:	78fb      	ldrb	r3, [r7, #3]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d103      	bne.n	8001378 <Buzzer_Play+0x20>
 8001370:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <Buzzer_Play+0x60>)
 8001372:	2200      	movs	r2, #0
 8001374:	641a      	str	r2, [r3, #64]	@ 0x40
 8001376:	e01a      	b.n	80013ae <Buzzer_Play+0x56>
    uint32_t arr = (1000000 / freq_hz) - 1;     // 1 MHz base
 8001378:	4a10      	ldr	r2, [pc, #64]	@ (80013bc <Buzzer_Play+0x64>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001380:	3b01      	subs	r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
    if (arr > 65535) arr = 65535;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800138a:	d302      	bcc.n	8001392 <Buzzer_Play+0x3a>
 800138c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001390:	60fb      	str	r3, [r7, #12]
    TIM3->ARR  = arr;
 8001392:	4a09      	ldr	r2, [pc, #36]	@ (80013b8 <Buzzer_Play+0x60>)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM3->CCR4 = (arr + 1) * duty_percent / 100;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3301      	adds	r3, #1
 800139c:	78fa      	ldrb	r2, [r7, #3]
 800139e:	fb02 f303 	mul.w	r3, r2, r3
 80013a2:	4a05      	ldr	r2, [pc, #20]	@ (80013b8 <Buzzer_Play+0x60>)
 80013a4:	4906      	ldr	r1, [pc, #24]	@ (80013c0 <Buzzer_Play+0x68>)
 80013a6:	fba1 1303 	umull	r1, r3, r1, r3
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	40000400 	.word	0x40000400
 80013bc:	000f4240 	.word	0x000f4240
 80013c0:	51eb851f 	.word	0x51eb851f

080013c4 <Buzzer_Stop>:

void Buzzer_Stop(void) {
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
    TIM3->CCR4 = 0;
 80013c8:	4b03      	ldr	r3, [pc, #12]	@ (80013d8 <Buzzer_Stop+0x14>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	40000400 	.word	0x40000400

080013dc <__NVIC_SetPriority>:
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	db0a      	blt.n	8001406 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	490c      	ldr	r1, [pc, #48]	@ (8001428 <__NVIC_SetPriority+0x4c>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	0112      	lsls	r2, r2, #4
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	440b      	add	r3, r1
 8001400:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001404:	e00a      	b.n	800141c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4908      	ldr	r1, [pc, #32]	@ (800142c <__NVIC_SetPriority+0x50>)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	3b04      	subs	r3, #4
 8001414:	0112      	lsls	r2, r2, #4
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	440b      	add	r3, r1
 800141a:	761a      	strb	r2, [r3, #24]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000e100 	.word	0xe000e100
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001440:	d301      	bcc.n	8001446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001442:	2301      	movs	r3, #1
 8001444:	e00f      	b.n	8001466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001446:	4a0a      	ldr	r2, [pc, #40]	@ (8001470 <SysTick_Config+0x40>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144e:	210f      	movs	r1, #15
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f7ff ffc2 	bl	80013dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001458:	4b05      	ldr	r3, [pc, #20]	@ (8001470 <SysTick_Config+0x40>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145e:	4b04      	ldr	r3, [pc, #16]	@ (8001470 <SysTick_Config+0x40>)
 8001460:	2207      	movs	r2, #7
 8001462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	e000e010 	.word	0xe000e010

08001474 <main>:
#include "utils.h"

/* ============================================================================
 * Main Function
 * ============================================================================ */
int main(void) {
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
    // Initialize hardware
    SystemClock_Config();
 8001478:	f7ff fc48 	bl	8000d0c <SystemClock_Config>
    GPIO_Init();
 800147c:	f7ff fc8c 	bl	8000d98 <GPIO_Init>
    USART2_Init();
 8001480:	f7ff fd44 	bl	8000f0c <USART2_Init>
    SysTick_Config(SystemCoreClock / 1000); // 1ms ticks
 8001484:	4b13      	ldr	r3, [pc, #76]	@ (80014d4 <main+0x60>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a13      	ldr	r2, [pc, #76]	@ (80014d8 <main+0x64>)
 800148a:	fba2 2303 	umull	r2, r3, r2, r3
 800148e:	099b      	lsrs	r3, r3, #6
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ffcd 	bl	8001430 <SysTick_Config>
    NVIC_Init();
 8001496:	f7ff fd57 	bl	8000f48 <NVIC_Init>
    ADC_Init();
 800149a:	f7ff fd0b 	bl	8000eb4 <ADC_Init>
    Buzzer_Init();
 800149e:	f7ff ff01 	bl	80012a4 <Buzzer_Init>

    // Initialize OLED display
    oled_init();
 80014a2:	f000 fc65 	bl	8001d70 <oled_init>
    oled_clear();
 80014a6:	f000 fc3d 	bl	8001d24 <oled_clear>

    // Mark system as initialized
    g_system_initialized = 1;
 80014aa:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <main+0x68>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]

    // Start ADC conversions
    ADC_StartConversion();
 80014b0:	f7ff fd5a 	bl	8000f68 <ADC_StartConversion>
    Delay_ms(10);
 80014b4:	200a      	movs	r0, #10
 80014b6:	f000 fedb 	bl	8002270 <Delay_ms>

    // Initialize game
    Game_Init();
 80014ba:	f7ff fb23 	bl	8000b04 <Game_Init>

    // Main loop
    while(1) {
        Monitor_Buttons();
 80014be:	f7ff fd6b 	bl	8000f98 <Monitor_Buttons>
        Monitor_ADC();
 80014c2:	f7ff fe0b 	bl	80010dc <Monitor_ADC>
        Game_Run();
 80014c6:	f7ff fb45 	bl	8000b54 <Game_Run>
        Delay_ms(1);
 80014ca:	2001      	movs	r0, #1
 80014cc:	f000 fed0 	bl	8002270 <Delay_ms>
        Monitor_Buttons();
 80014d0:	bf00      	nop
 80014d2:	e7f4      	b.n	80014be <main+0x4a>
 80014d4:	20000004 	.word	0x20000004
 80014d8:	10624dd3 	.word	0x10624dd3
 80014dc:	2000018c 	.word	0x2000018c

080014e0 <I2C1_Init_OLED>:

/* ============================================================================
 * I2C Low-Level Functions
 * ============================================================================
 */
static void I2C1_Init_OLED(void) {
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80014e4:	4b2d      	ldr	r3, [pc, #180]	@ (800159c <I2C1_Init_OLED+0xbc>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e8:	4a2c      	ldr	r2, [pc, #176]	@ (800159c <I2C1_Init_OLED+0xbc>)
 80014ea:	f043 0302 	orr.w	r3, r3, #2
 80014ee:	6313      	str	r3, [r2, #48]	@ 0x30

  // PB8, PB9 AF4, Open-Drain, Pull-Up, High speed
  GPIOB->MODER &= ~((3u << (8 * 2)) | (3u << (9 * 2)));
 80014f0:	4b2b      	ldr	r3, [pc, #172]	@ (80015a0 <I2C1_Init_OLED+0xc0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a2a      	ldr	r2, [pc, #168]	@ (80015a0 <I2C1_Init_OLED+0xc0>)
 80014f6:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80014fa:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= ((2u << (8 * 2)) | (2u << (9 * 2)));
 80014fc:	4b28      	ldr	r3, [pc, #160]	@ (80015a0 <I2C1_Init_OLED+0xc0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a27      	ldr	r2, [pc, #156]	@ (80015a0 <I2C1_Init_OLED+0xc0>)
 8001502:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8001506:	6013      	str	r3, [r2, #0]
  GPIOB->OTYPER |= (1u << 8) | (1u << 9);
 8001508:	4b25      	ldr	r3, [pc, #148]	@ (80015a0 <I2C1_Init_OLED+0xc0>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	4a24      	ldr	r2, [pc, #144]	@ (80015a0 <I2C1_Init_OLED+0xc0>)
 800150e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001512:	6053      	str	r3, [r2, #4]
  GPIOB->OSPEEDR |= (3u << (8 * 2)) | (3u << (9 * 2));
 8001514:	4b22      	ldr	r3, [pc, #136]	@ (80015a0 <I2C1_Init_OLED+0xc0>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	4a21      	ldr	r2, [pc, #132]	@ (80015a0 <I2C1_Init_OLED+0xc0>)
 800151a:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 800151e:	6093      	str	r3, [r2, #8]
  GPIOB->PUPDR &= ~((3u << (8 * 2)) | (3u << (9 * 2)));
 8001520:	4b1f      	ldr	r3, [pc, #124]	@ (80015a0 <I2C1_Init_OLED+0xc0>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	4a1e      	ldr	r2, [pc, #120]	@ (80015a0 <I2C1_Init_OLED+0xc0>)
 8001526:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800152a:	60d3      	str	r3, [r2, #12]
  GPIOB->PUPDR |= ((1u << (8 * 2)) | (1u << (9 * 2)));
 800152c:	4b1c      	ldr	r3, [pc, #112]	@ (80015a0 <I2C1_Init_OLED+0xc0>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	4a1b      	ldr	r2, [pc, #108]	@ (80015a0 <I2C1_Init_OLED+0xc0>)
 8001532:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8001536:	60d3      	str	r3, [r2, #12]
  GPIOB->AFR[1] &= ~((0xFu << 0) | (0xFu << 4));
 8001538:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <I2C1_Init_OLED+0xc0>)
 800153a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153c:	4a18      	ldr	r2, [pc, #96]	@ (80015a0 <I2C1_Init_OLED+0xc0>)
 800153e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001542:	6253      	str	r3, [r2, #36]	@ 0x24
  GPIOB->AFR[1] |= ((4u << 0) | (4u << 4));
 8001544:	4b16      	ldr	r3, [pc, #88]	@ (80015a0 <I2C1_Init_OLED+0xc0>)
 8001546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001548:	4a15      	ldr	r2, [pc, #84]	@ (80015a0 <I2C1_Init_OLED+0xc0>)
 800154a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800154e:	6253      	str	r3, [r2, #36]	@ 0x24

  RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8001550:	4b12      	ldr	r3, [pc, #72]	@ (800159c <I2C1_Init_OLED+0xbc>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001554:	4a11      	ldr	r2, [pc, #68]	@ (800159c <I2C1_Init_OLED+0xbc>)
 8001556:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800155a:	6413      	str	r3, [r2, #64]	@ 0x40
  RCC->APB1RSTR |= RCC_APB1RSTR_I2C1RST;
 800155c:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <I2C1_Init_OLED+0xbc>)
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	4a0e      	ldr	r2, [pc, #56]	@ (800159c <I2C1_Init_OLED+0xbc>)
 8001562:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001566:	6213      	str	r3, [r2, #32]
  RCC->APB1RSTR &= ~RCC_APB1RSTR_I2C1RST;
 8001568:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <I2C1_Init_OLED+0xbc>)
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	4a0b      	ldr	r2, [pc, #44]	@ (800159c <I2C1_Init_OLED+0xbc>)
 800156e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001572:	6213      	str	r3, [r2, #32]

  I2C1->CR1 = 0;
 8001574:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <I2C1_Init_OLED+0xc4>)
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
  I2C1->CR2 = 42;  // APB1 = 42 MHz
 800157a:	4b0a      	ldr	r3, [pc, #40]	@ (80015a4 <I2C1_Init_OLED+0xc4>)
 800157c:	222a      	movs	r2, #42	@ 0x2a
 800157e:	605a      	str	r2, [r3, #4]
  I2C1->CCR = 210; // 100 kHz
 8001580:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <I2C1_Init_OLED+0xc4>)
 8001582:	22d2      	movs	r2, #210	@ 0xd2
 8001584:	61da      	str	r2, [r3, #28]
  I2C1->TRISE = 43;
 8001586:	4b07      	ldr	r3, [pc, #28]	@ (80015a4 <I2C1_Init_OLED+0xc4>)
 8001588:	222b      	movs	r2, #43	@ 0x2b
 800158a:	621a      	str	r2, [r3, #32]
  I2C1->CR1 = I2C_CR1_PE;
 800158c:	4b05      	ldr	r3, [pc, #20]	@ (80015a4 <I2C1_Init_OLED+0xc4>)
 800158e:	2201      	movs	r2, #1
 8001590:	601a      	str	r2, [r3, #0]
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020400 	.word	0x40020400
 80015a4:	40005400 	.word	0x40005400

080015a8 <i2c_start>:

static void i2c_start(uint8_t addr) {
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
  I2C1->CR1 |= I2C_CR1_START;
 80015b2:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <i2c_start+0x54>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a11      	ldr	r2, [pc, #68]	@ (80015fc <i2c_start+0x54>)
 80015b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015bc:	6013      	str	r3, [r2, #0]
  while (!(I2C1->SR1 & I2C_SR1_SB)) {
 80015be:	bf00      	nop
 80015c0:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <i2c_start+0x54>)
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f9      	beq.n	80015c0 <i2c_start+0x18>
  }
  (void)I2C1->SR1;
 80015cc:	4b0b      	ldr	r3, [pc, #44]	@ (80015fc <i2c_start+0x54>)
 80015ce:	695b      	ldr	r3, [r3, #20]
  I2C1->DR = (uint8_t)(addr << 1);
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <i2c_start+0x54>)
 80015d8:	611a      	str	r2, [r3, #16]
  while (!(I2C1->SR1 & I2C_SR1_ADDR)) {
 80015da:	bf00      	nop
 80015dc:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <i2c_start+0x54>)
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f9      	beq.n	80015dc <i2c_start+0x34>
  }
  (void)I2C1->SR1;
 80015e8:	4b04      	ldr	r3, [pc, #16]	@ (80015fc <i2c_start+0x54>)
 80015ea:	695b      	ldr	r3, [r3, #20]
  (void)I2C1->SR2;
 80015ec:	4b03      	ldr	r3, [pc, #12]	@ (80015fc <i2c_start+0x54>)
 80015ee:	699b      	ldr	r3, [r3, #24]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	40005400 	.word	0x40005400

08001600 <i2c_w>:

static void i2c_w(uint8_t b) {
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
  while (!(I2C1->SR1 & I2C_SR1_TXE)) {
 800160a:	bf00      	nop
 800160c:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <i2c_w+0x3c>)
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f9      	beq.n	800160c <i2c_w+0xc>
  }
  I2C1->DR = b;
 8001618:	4a08      	ldr	r2, [pc, #32]	@ (800163c <i2c_w+0x3c>)
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	6113      	str	r3, [r2, #16]
  while (!(I2C1->SR1 & I2C_SR1_BTF)) {
 800161e:	bf00      	nop
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <i2c_w+0x3c>)
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f9      	beq.n	8001620 <i2c_w+0x20>
  }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40005400 	.word	0x40005400

08001640 <i2c_stop>:

static void i2c_stop(void) { I2C1->CR1 |= I2C_CR1_STOP; }
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
 8001644:	4b05      	ldr	r3, [pc, #20]	@ (800165c <i2c_stop+0x1c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a04      	ldr	r2, [pc, #16]	@ (800165c <i2c_stop+0x1c>)
 800164a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40005400 	.word	0x40005400

08001660 <oled_cmd>:

/* ============================================================================
 * OLED Command/Data Functions
 * ============================================================================
 */
static void oled_cmd(uint8_t c) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
  i2c_start(OLED_ADDR);
 800166a:	203c      	movs	r0, #60	@ 0x3c
 800166c:	f7ff ff9c 	bl	80015a8 <i2c_start>
  i2c_w(0x00);
 8001670:	2000      	movs	r0, #0
 8001672:	f7ff ffc5 	bl	8001600 <i2c_w>
  i2c_w(c);
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ffc1 	bl	8001600 <i2c_w>
  i2c_stop();
 800167e:	f7ff ffdf 	bl	8001640 <i2c_stop>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <oled_data>:

static void oled_data(const uint8_t *p, uint16_t n) {
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	460b      	mov	r3, r1
 8001694:	807b      	strh	r3, [r7, #2]
  i2c_start(OLED_ADDR);
 8001696:	203c      	movs	r0, #60	@ 0x3c
 8001698:	f7ff ff86 	bl	80015a8 <i2c_start>
  i2c_w(0x40);
 800169c:	2040      	movs	r0, #64	@ 0x40
 800169e:	f7ff ffaf 	bl	8001600 <i2c_w>
  while (n--)
 80016a2:	e006      	b.n	80016b2 <oled_data+0x28>
    i2c_w(*p++);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ffa7 	bl	8001600 <i2c_w>
  while (n--)
 80016b2:	887b      	ldrh	r3, [r7, #2]
 80016b4:	1e5a      	subs	r2, r3, #1
 80016b6:	807a      	strh	r2, [r7, #2]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1f3      	bne.n	80016a4 <oled_data+0x1a>
  i2c_stop();
 80016bc:	f7ff ffc0 	bl	8001640 <i2c_stop>
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <oled_setpos>:

static void oled_setpos(uint8_t page, uint8_t col) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	460a      	mov	r2, r1
 80016d2:	71fb      	strb	r3, [r7, #7]
 80016d4:	4613      	mov	r3, r2
 80016d6:	71bb      	strb	r3, [r7, #6]
  col += OLED_COL_OFFSET;
 80016d8:	79bb      	ldrb	r3, [r7, #6]
 80016da:	3302      	adds	r3, #2
 80016dc:	71bb      	strb	r3, [r7, #6]
  oled_cmd(0xB0 | (page & 7));
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	b25b      	sxtb	r3, r3
 80016e8:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80016ec:	b25b      	sxtb	r3, r3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ffb5 	bl	8001660 <oled_cmd>
  oled_cmd(0x00 | (col & 0x0F));
 80016f6:	79bb      	ldrb	r3, [r7, #6]
 80016f8:	f003 030f 	and.w	r3, r3, #15
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ffae 	bl	8001660 <oled_cmd>
  oled_cmd(0x10 | (col >> 4));
 8001704:	79bb      	ldrb	r3, [r7, #6]
 8001706:	091b      	lsrs	r3, r3, #4
 8001708:	b2db      	uxtb	r3, r3
 800170a:	f043 0310 	orr.w	r3, r3, #16
 800170e:	b2db      	uxtb	r3, r3
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ffa5 	bl	8001660 <oled_cmd>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <oled_draw_icon8_hflip>:
  oled_data(icon8, 8);
}

/* Horizontal flip for 8-col icons (fix mirrored hearts) */
static void oled_draw_icon8_hflip(uint8_t x, uint8_t page,
                                  const uint8_t *icon8) {
 800171e:	b580      	push	{r7, lr}
 8001720:	b086      	sub	sp, #24
 8001722:	af00      	add	r7, sp, #0
 8001724:	4603      	mov	r3, r0
 8001726:	603a      	str	r2, [r7, #0]
 8001728:	71fb      	strb	r3, [r7, #7]
 800172a:	460b      	mov	r3, r1
 800172c:	71bb      	strb	r3, [r7, #6]
  uint8_t buf[8];
  for (int i = 0; i < 8; ++i)
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	e00f      	b.n	8001754 <oled_draw_icon8_hflip+0x36>
    buf[i] = icon8[7 - i];
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	f1c3 0307 	rsb	r3, r3, #7
 800173a:	461a      	mov	r2, r3
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	4413      	add	r3, r2
 8001740:	7819      	ldrb	r1, [r3, #0]
 8001742:	f107 020c 	add.w	r2, r7, #12
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	4413      	add	r3, r2
 800174a:	460a      	mov	r2, r1
 800174c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 8; ++i)
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	2b07      	cmp	r3, #7
 8001758:	ddec      	ble.n	8001734 <oled_draw_icon8_hflip+0x16>
  oled_setpos(page, x);
 800175a:	79fa      	ldrb	r2, [r7, #7]
 800175c:	79bb      	ldrb	r3, [r7, #6]
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ffb1 	bl	80016c8 <oled_setpos>
  oled_data(buf, 8);
 8001766:	f107 030c 	add.w	r3, r7, #12
 800176a:	2108      	movs	r1, #8
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff8c 	bl	800168a <oled_data>
}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <oled_draw_bordered_progress>:

/* Bordered proportional progress (1 page tall) */
static void oled_draw_bordered_progress(uint8_t x, uint8_t page,
                                        uint8_t width_cols, uint8_t value,
                                        uint8_t max) {
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	4604      	mov	r4, r0
 8001784:	4608      	mov	r0, r1
 8001786:	4611      	mov	r1, r2
 8001788:	461a      	mov	r2, r3
 800178a:	4623      	mov	r3, r4
 800178c:	71fb      	strb	r3, [r7, #7]
 800178e:	4603      	mov	r3, r0
 8001790:	71bb      	strb	r3, [r7, #6]
 8001792:	460b      	mov	r3, r1
 8001794:	717b      	strb	r3, [r7, #5]
 8001796:	4613      	mov	r3, r2
 8001798:	713b      	strb	r3, [r7, #4]
  if (width_cols < 4)
 800179a:	797b      	ldrb	r3, [r7, #5]
 800179c:	2b03      	cmp	r3, #3
 800179e:	d94b      	bls.n	8001838 <oled_draw_bordered_progress+0xbc>
    return;
  if (max == 0)
 80017a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d102      	bne.n	80017ae <oled_draw_bordered_progress+0x32>
    max = 1;
 80017a8:	2301      	movs	r3, #1
 80017aa:	f887 3020 	strb.w	r3, [r7, #32]
  if (value > max)
 80017ae:	793a      	ldrb	r2, [r7, #4]
 80017b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d902      	bls.n	80017be <oled_draw_bordered_progress+0x42>
    value = max;
 80017b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017bc:	713b      	strb	r3, [r7, #4]

  static uint8_t colbuf[128];
  uint8_t w = width_cols;
 80017be:	797b      	ldrb	r3, [r7, #5]
 80017c0:	73fb      	strb	r3, [r7, #15]
  if (w > sizeof(colbuf))
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	2b80      	cmp	r3, #128	@ 0x80
 80017c6:	d901      	bls.n	80017cc <oled_draw_bordered_progress+0x50>
    w = sizeof(colbuf);
 80017c8:	2380      	movs	r3, #128	@ 0x80
 80017ca:	73fb      	strb	r3, [r7, #15]

  uint8_t interior = (uint8_t)(w - 2);
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	3b02      	subs	r3, #2
 80017d0:	737b      	strb	r3, [r7, #13]
  uint8_t fill_cols = (uint8_t)((uint16_t)interior * value / max);
 80017d2:	7b7b      	ldrb	r3, [r7, #13]
 80017d4:	793a      	ldrb	r2, [r7, #4]
 80017d6:	fb03 f202 	mul.w	r2, r3, r2
 80017da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017de:	fb92 f3f3 	sdiv	r3, r2, r3
 80017e2:	733b      	strb	r3, [r7, #12]

  colbuf[0] = 0x7F; // left border
 80017e4:	4b16      	ldr	r3, [pc, #88]	@ (8001840 <oled_draw_bordered_progress+0xc4>)
 80017e6:	227f      	movs	r2, #127	@ 0x7f
 80017e8:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < interior; i++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	73bb      	strb	r3, [r7, #14]
 80017ee:	e00d      	b.n	800180c <oled_draw_bordered_progress+0x90>
    colbuf[1 + i] = (i < fill_cols) ? 0x7E : 0x41; // filled vs empty
 80017f0:	7bba      	ldrb	r2, [r7, #14]
 80017f2:	7b3b      	ldrb	r3, [r7, #12]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d201      	bcs.n	80017fc <oled_draw_bordered_progress+0x80>
 80017f8:	217e      	movs	r1, #126	@ 0x7e
 80017fa:	e000      	b.n	80017fe <oled_draw_bordered_progress+0x82>
 80017fc:	2141      	movs	r1, #65	@ 0x41
 80017fe:	7bbb      	ldrb	r3, [r7, #14]
 8001800:	3301      	adds	r3, #1
 8001802:	4a0f      	ldr	r2, [pc, #60]	@ (8001840 <oled_draw_bordered_progress+0xc4>)
 8001804:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < interior; i++)
 8001806:	7bbb      	ldrb	r3, [r7, #14]
 8001808:	3301      	adds	r3, #1
 800180a:	73bb      	strb	r3, [r7, #14]
 800180c:	7bba      	ldrb	r2, [r7, #14]
 800180e:	7b7b      	ldrb	r3, [r7, #13]
 8001810:	429a      	cmp	r2, r3
 8001812:	d3ed      	bcc.n	80017f0 <oled_draw_bordered_progress+0x74>
  colbuf[w - 1] = 0x7F;                            // right border
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	3b01      	subs	r3, #1
 8001818:	4a09      	ldr	r2, [pc, #36]	@ (8001840 <oled_draw_bordered_progress+0xc4>)
 800181a:	217f      	movs	r1, #127	@ 0x7f
 800181c:	54d1      	strb	r1, [r2, r3]

  oled_setpos(page, x);
 800181e:	79fa      	ldrb	r2, [r7, #7]
 8001820:	79bb      	ldrb	r3, [r7, #6]
 8001822:	4611      	mov	r1, r2
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff4f 	bl	80016c8 <oled_setpos>
  oled_data(colbuf, w);
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	b29b      	uxth	r3, r3
 800182e:	4619      	mov	r1, r3
 8001830:	4803      	ldr	r0, [pc, #12]	@ (8001840 <oled_draw_bordered_progress+0xc4>)
 8001832:	f7ff ff2a 	bl	800168a <oled_data>
 8001836:	e000      	b.n	800183a <oled_draw_bordered_progress+0xbe>
    return;
 8001838:	bf00      	nop
}
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	bd90      	pop	{r4, r7, pc}
 8001840:	20000104 	.word	0x20000104

08001844 <oled_clear_region>:

/* Clear a specific region (one page: [col_start, col_end) ) */
static void oled_clear_region(uint8_t page, uint8_t col_start,
                              uint8_t col_end) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b0a4      	sub	sp, #144	@ 0x90
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
 800184e:	460b      	mov	r3, r1
 8001850:	71bb      	strb	r3, [r7, #6]
 8001852:	4613      	mov	r3, r2
 8001854:	717b      	strb	r3, [r7, #5]
  if (col_end <= col_start)
 8001856:	797a      	ldrb	r2, [r7, #5]
 8001858:	79bb      	ldrb	r3, [r7, #6]
 800185a:	429a      	cmp	r2, r3
 800185c:	d923      	bls.n	80018a6 <oled_clear_region+0x62>
    return;
  uint8_t w = (uint8_t)(col_end - col_start);
 800185e:	797a      	ldrb	r2, [r7, #5]
 8001860:	79bb      	ldrb	r3, [r7, #6]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (w > 128)
 8001868:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800186c:	2b80      	cmp	r3, #128	@ 0x80
 800186e:	d902      	bls.n	8001876 <oled_clear_region+0x32>
    w = 128;
 8001870:	2380      	movs	r3, #128	@ 0x80
 8001872:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint8_t z[128];
  memset(z, 0, w);
 8001876:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 800187a:	f107 030c 	add.w	r3, r7, #12
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f000 ff3f 	bl	8002704 <memset>
  oled_setpos(page, col_start);
 8001886:	79ba      	ldrb	r2, [r7, #6]
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	4611      	mov	r1, r2
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff1b 	bl	80016c8 <oled_setpos>
  oled_data(z, w);
 8001892:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001896:	b29a      	uxth	r2, r3
 8001898:	f107 030c 	add.w	r3, r7, #12
 800189c:	4611      	mov	r1, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fef3 	bl	800168a <oled_data>
 80018a4:	e000      	b.n	80018a8 <oled_clear_region+0x64>
    return;
 80018a6:	bf00      	nop
}
 80018a8:	3790      	adds	r7, #144	@ 0x90
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <oled_print_text>:

/* Print ASCII (5x7) starting at (x,page) */
static void oled_print_text(uint8_t x, uint8_t page, const char *s) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	603a      	str	r2, [r7, #0]
 80018ba:	71fb      	strb	r3, [r7, #7]
 80018bc:	460b      	mov	r3, r1
 80018be:	71bb      	strb	r3, [r7, #6]
  uint8_t cx = x;
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	73fb      	strb	r3, [r7, #15]
  while (*s) {
 80018c4:	e072      	b.n	80019ac <oled_print_text+0xfc>
    char c = *s++;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	603a      	str	r2, [r7, #0]
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	73bb      	strb	r3, [r7, #14]
    if (c == ' ') {
 80018d0:	7bbb      	ldrb	r3, [r7, #14]
 80018d2:	2b20      	cmp	r3, #32
 80018d4:	d10d      	bne.n	80018f2 <oled_print_text+0x42>
      oled_setpos(page, cx);
 80018d6:	7bfa      	ldrb	r2, [r7, #15]
 80018d8:	79bb      	ldrb	r3, [r7, #6]
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fef3 	bl	80016c8 <oled_setpos>
      oled_data(FONT5x7_SPACE, 6);
 80018e2:	2106      	movs	r1, #6
 80018e4:	4836      	ldr	r0, [pc, #216]	@ (80019c0 <oled_print_text+0x110>)
 80018e6:	f7ff fed0 	bl	800168a <oled_data>
      cx += 6;
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	3306      	adds	r3, #6
 80018ee:	73fb      	strb	r3, [r7, #15]
      continue;
 80018f0:	e05c      	b.n	80019ac <oled_print_text+0xfc>
    }
    if (c >= 'A' && c <= 'Z') {
 80018f2:	7bbb      	ldrb	r3, [r7, #14]
 80018f4:	2b40      	cmp	r3, #64	@ 0x40
 80018f6:	d916      	bls.n	8001926 <oled_print_text+0x76>
 80018f8:	7bbb      	ldrb	r3, [r7, #14]
 80018fa:	2b5a      	cmp	r3, #90	@ 0x5a
 80018fc:	d813      	bhi.n	8001926 <oled_print_text+0x76>
      oled_setpos(page, cx);
 80018fe:	7bfa      	ldrb	r2, [r7, #15]
 8001900:	79bb      	ldrb	r3, [r7, #6]
 8001902:	4611      	mov	r1, r2
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fedf 	bl	80016c8 <oled_setpos>
      oled_data(FONT5x7_LET[c - 'A'], 6);
 800190a:	7bbb      	ldrb	r3, [r7, #14]
 800190c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8001910:	4613      	mov	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4a2a      	ldr	r2, [pc, #168]	@ (80019c4 <oled_print_text+0x114>)
 800191a:	4413      	add	r3, r2
 800191c:	2106      	movs	r1, #6
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff feb3 	bl	800168a <oled_data>
 8001924:	e03f      	b.n	80019a6 <oled_print_text+0xf6>
    } else if (c >= '0' && c <= '9') {
 8001926:	7bbb      	ldrb	r3, [r7, #14]
 8001928:	2b2f      	cmp	r3, #47	@ 0x2f
 800192a:	d916      	bls.n	800195a <oled_print_text+0xaa>
 800192c:	7bbb      	ldrb	r3, [r7, #14]
 800192e:	2b39      	cmp	r3, #57	@ 0x39
 8001930:	d813      	bhi.n	800195a <oled_print_text+0xaa>
      oled_setpos(page, cx);
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	79bb      	ldrb	r3, [r7, #6]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fec5 	bl	80016c8 <oled_setpos>
      oled_data(FONT5x7_DIGIT[c - '0'], 6);
 800193e:	7bbb      	ldrb	r3, [r7, #14]
 8001940:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4a1e      	ldr	r2, [pc, #120]	@ (80019c8 <oled_print_text+0x118>)
 800194e:	4413      	add	r3, r2
 8001950:	2106      	movs	r1, #6
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fe99 	bl	800168a <oled_data>
 8001958:	e025      	b.n	80019a6 <oled_print_text+0xf6>
    } else if (c == '-') {
 800195a:	7bbb      	ldrb	r3, [r7, #14]
 800195c:	2b2d      	cmp	r3, #45	@ 0x2d
 800195e:	d10a      	bne.n	8001976 <oled_print_text+0xc6>
      oled_setpos(page, cx);
 8001960:	7bfa      	ldrb	r2, [r7, #15]
 8001962:	79bb      	ldrb	r3, [r7, #6]
 8001964:	4611      	mov	r1, r2
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff feae 	bl	80016c8 <oled_setpos>
      oled_data(FONT5x7_MINUS, 6);
 800196c:	2106      	movs	r1, #6
 800196e:	4817      	ldr	r0, [pc, #92]	@ (80019cc <oled_print_text+0x11c>)
 8001970:	f7ff fe8b 	bl	800168a <oled_data>
 8001974:	e017      	b.n	80019a6 <oled_print_text+0xf6>
    } else if (c == ':') {
 8001976:	7bbb      	ldrb	r3, [r7, #14]
 8001978:	2b3a      	cmp	r3, #58	@ 0x3a
 800197a:	d10a      	bne.n	8001992 <oled_print_text+0xe2>
      oled_setpos(page, cx);
 800197c:	7bfa      	ldrb	r2, [r7, #15]
 800197e:	79bb      	ldrb	r3, [r7, #6]
 8001980:	4611      	mov	r1, r2
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fea0 	bl	80016c8 <oled_setpos>
      oled_data(FONT5x7_COLON, 6);
 8001988:	2106      	movs	r1, #6
 800198a:	4811      	ldr	r0, [pc, #68]	@ (80019d0 <oled_print_text+0x120>)
 800198c:	f7ff fe7d 	bl	800168a <oled_data>
 8001990:	e009      	b.n	80019a6 <oled_print_text+0xf6>
    } else {
      oled_setpos(page, cx);
 8001992:	7bfa      	ldrb	r2, [r7, #15]
 8001994:	79bb      	ldrb	r3, [r7, #6]
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fe95 	bl	80016c8 <oled_setpos>
      oled_data(FONT5x7_SPACE, 6);
 800199e:	2106      	movs	r1, #6
 80019a0:	4807      	ldr	r0, [pc, #28]	@ (80019c0 <oled_print_text+0x110>)
 80019a2:	f7ff fe72 	bl	800168a <oled_data>
    }
    cx += 6;
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	3306      	adds	r3, #6
 80019aa:	73fb      	strb	r3, [r7, #15]
  while (*s) {
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d188      	bne.n	80018c6 <oled_print_text+0x16>
  }
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	08003ab8 	.word	0x08003ab8
 80019c4:	08003a1c 	.word	0x08003a1c
 80019c8:	080039e0 	.word	0x080039e0
 80019cc:	08003ac0 	.word	0x08003ac0
 80019d0:	08003ac8 	.word	0x08003ac8

080019d4 <oled_print_uint>:

/* Print unsigned integer with 5x7 digits */
static void oled_print_uint(uint8_t x, uint8_t page, uint32_t v) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	603a      	str	r2, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
 80019e0:	460b      	mov	r3, r1
 80019e2:	71bb      	strb	r3, [r7, #6]
  char buf[12]; // enough for 32-bit
  int idx = 11;
 80019e4:	230b      	movs	r3, #11
 80019e6:	617b      	str	r3, [r7, #20]
  buf[idx] = 0;
 80019e8:	f107 0208 	add.w	r2, r7, #8
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	4413      	add	r3, r2
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
  idx--;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	617b      	str	r3, [r7, #20]
  if (v == 0) {
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d125      	bne.n	8001a4c <oled_print_uint+0x78>
    buf[idx] = '0';
 8001a00:	f107 0208 	add.w	r2, r7, #8
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	4413      	add	r3, r2
 8001a08:	2230      	movs	r2, #48	@ 0x30
 8001a0a:	701a      	strb	r2, [r3, #0]
    idx--;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
  }
  while (v > 0 && idx >= 0) {
 8001a12:	e01b      	b.n	8001a4c <oled_print_uint+0x78>
    buf[idx] = (char)('0' + (v % 10));
 8001a14:	6839      	ldr	r1, [r7, #0]
 8001a16:	4b17      	ldr	r3, [pc, #92]	@ (8001a74 <oled_print_uint+0xa0>)
 8001a18:	fba3 2301 	umull	r2, r3, r3, r1
 8001a1c:	08da      	lsrs	r2, r3, #3
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	1aca      	subs	r2, r1, r3
 8001a28:	b2d3      	uxtb	r3, r2
 8001a2a:	3330      	adds	r3, #48	@ 0x30
 8001a2c:	b2d9      	uxtb	r1, r3
 8001a2e:	f107 0208 	add.w	r2, r7, #8
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	4413      	add	r3, r2
 8001a36:	460a      	mov	r2, r1
 8001a38:	701a      	strb	r2, [r3, #0]
    v /= 10;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a74 <oled_print_uint+0xa0>)
 8001a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a42:	08db      	lsrs	r3, r3, #3
 8001a44:	603b      	str	r3, [r7, #0]
    idx--;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	617b      	str	r3, [r7, #20]
  while (v > 0 && idx >= 0) {
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d002      	beq.n	8001a58 <oled_print_uint+0x84>
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	dadd      	bge.n	8001a14 <oled_print_uint+0x40>
  }
  oled_print_text(x, page, &buf[idx + 1]);
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	f107 0208 	add.w	r2, r7, #8
 8001a60:	441a      	add	r2, r3
 8001a62:	79b9      	ldrb	r1, [r7, #6]
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ff22 	bl	80018b0 <oled_print_text>
}
 8001a6c:	bf00      	nop
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	cccccccd 	.word	0xcccccccd

08001a78 <text_width_5x7>:

/* -------- Centering helpers (within a column range) -------- */
static uint8_t text_width_5x7(const char *s) {
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint16_t n = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	81fb      	strh	r3, [r7, #14]
  while (*s++)
 8001a84:	e002      	b.n	8001a8c <text_width_5x7+0x14>
    n++;
 8001a86:	89fb      	ldrh	r3, [r7, #14]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	81fb      	strh	r3, [r7, #14]
  while (*s++)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f6      	bne.n	8001a86 <text_width_5x7+0xe>
  return (uint8_t)(n * 6);
 8001a98:	89fb      	ldrh	r3, [r7, #14]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	0052      	lsls	r2, r2, #1
 8001aa0:	4413      	add	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	b2db      	uxtb	r3, r3
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <oled_print_centered>:

static void oled_print_centered(uint8_t page, uint8_t col_l, uint8_t col_r,
                                const char *s) {
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b084      	sub	sp, #16
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	71bb      	strb	r3, [r7, #6]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	717b      	strb	r3, [r7, #5]
  uint8_t W = (uint8_t)(col_r - col_l);
 8001ac6:	797a      	ldrb	r2, [r7, #5]
 8001ac8:	79bb      	ldrb	r3, [r7, #6]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	73fb      	strb	r3, [r7, #15]
  uint8_t tw = text_width_5x7(s);
 8001ace:	6838      	ldr	r0, [r7, #0]
 8001ad0:	f7ff ffd2 	bl	8001a78 <text_width_5x7>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	73bb      	strb	r3, [r7, #14]
  uint8_t x = col_l + (uint8_t)((W > tw) ? ((W - tw) / 2) : 0);
 8001ad8:	7bfa      	ldrb	r2, [r7, #15]
 8001ada:	7bbb      	ldrb	r3, [r7, #14]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d907      	bls.n	8001af0 <oled_print_centered+0x3e>
 8001ae0:	7bfa      	ldrb	r2, [r7, #15]
 8001ae2:	7bbb      	ldrb	r3, [r7, #14]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	0fda      	lsrs	r2, r3, #31
 8001ae8:	4413      	add	r3, r2
 8001aea:	105b      	asrs	r3, r3, #1
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	e000      	b.n	8001af2 <oled_print_centered+0x40>
 8001af0:	2300      	movs	r3, #0
 8001af2:	79ba      	ldrb	r2, [r7, #6]
 8001af4:	4413      	add	r3, r2
 8001af6:	737b      	strb	r3, [r7, #13]
  oled_print_text(x, page, s);
 8001af8:	79f9      	ldrb	r1, [r7, #7]
 8001afa:	7b7b      	ldrb	r3, [r7, #13]
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fed6 	bl	80018b0 <oled_print_text>
}
 8001b04:	bf00      	nop
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <oled_draw_big_digit2x>:
/* ----------------- 2x scaled big digit (from 5x7) -----------------
 * Renders one digit as ~10x14 pixels (2 pages tall)
 * Each original column is duplicated horizontally; each row is doubled
 * vertically. Drawn across pages (page_top) and (page_top+1).
 */
static void oled_draw_big_digit2x(uint8_t x, uint8_t page_top, int d) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08e      	sub	sp, #56	@ 0x38
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	603a      	str	r2, [r7, #0]
 8001b16:	71fb      	strb	r3, [r7, #7]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	71bb      	strb	r3, [r7, #6]
  if (d < 0 || d > 9)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f2c0 80f9 	blt.w	8001d16 <oled_draw_big_digit2x+0x20a>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	2b09      	cmp	r3, #9
 8001b28:	f300 80f5 	bgt.w	8001d16 <oled_draw_big_digit2x+0x20a>
    return;
  const uint8_t *src = FONT5x7_DIGIT[d];
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4413      	add	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4a7a      	ldr	r2, [pc, #488]	@ (8001d20 <oled_draw_big_digit2x+0x214>)
 8001b38:	4413      	add	r3, r2
 8001b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // Build two page buffers of width 10 (5 cols doubled) + optional 2-col
  // spacing
  uint8_t w = 10;
 8001b3c:	230a      	movs	r3, #10
 8001b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t top[12];    // <=12 safety
  uint8_t bottom[12]; // <=12 safety
  memset(top, 0, sizeof(top));
 8001b42:	f107 0318 	add.w	r3, r7, #24
 8001b46:	220c      	movs	r2, #12
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 fdda 	bl	8002704 <memset>
  memset(bottom, 0, sizeof(bottom));
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	220c      	movs	r2, #12
 8001b56:	2100      	movs	r1, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f000 fdd3 	bl	8002704 <memset>

  uint8_t outc = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  for (uint8_t c = 0; c < 6; c++) {
 8001b64:	2300      	movs	r3, #0
 8001b66:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001b6a:	e0ac      	b.n	8001cc6 <oled_draw_big_digit2x+0x1ba>
    if (c == 5)
 8001b6c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001b70:	2b05      	cmp	r3, #5
 8001b72:	f000 80ae 	beq.w	8001cd2 <oled_draw_big_digit2x+0x1c6>
      break;            // last column in font is blank spacing
    uint8_t b = src[c]; // bit0..bit6 used
 8001b76:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001b7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b7c:	4413      	add	r3, r2
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    // Build doubled vertical mapping into two pages:
    // rows 0..3 (doubled -> 0..7) go to top page
    // rows 4..6 (doubled -> 8..13) go to bottom page positions 0..5
    uint8_t top_byte = 0, bot_byte = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    for (uint8_t row = 0; row < 7; row++) {
 8001b90:	2300      	movs	r3, #0
 8001b92:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001b96:	e05b      	b.n	8001c50 <oled_draw_big_digit2x+0x144>
      if (b & (1u << row)) {
 8001b98:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8001b9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d04c      	beq.n	8001c46 <oled_draw_big_digit2x+0x13a>
        uint8_t y0 = (uint8_t)(2 * row);
 8001bac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
        uint8_t y1 = (uint8_t)(y0 + 1);
 8001bb6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001bba:	3301      	adds	r3, #1
 8001bbc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        if (y1 <= 7) {
 8001bc0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001bc4:	2b07      	cmp	r3, #7
 8001bc6:	d816      	bhi.n	8001bf6 <oled_draw_big_digit2x+0xea>
          // stays on top page
          top_byte |= (uint8_t)(1u << y0);
 8001bc8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001bcc:	2201      	movs	r2, #1
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
          top_byte |= (uint8_t)(1u << y1);
 8001bde:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001be2:	2201      	movs	r2, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001bf4:	e027      	b.n	8001c46 <oled_draw_big_digit2x+0x13a>
        } else {
          // goes to bottom page (shifted by -8)
          uint8_t yb0 = (uint8_t)(y0 - 8);
 8001bf6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001bfa:	3b08      	subs	r3, #8
 8001bfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          uint8_t yb1 = (uint8_t)(y1 - 8);
 8001c00:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c04:	3b08      	subs	r3, #8
 8001c06:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          if (yb0 < 8)
 8001c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c0e:	2b07      	cmp	r3, #7
 8001c10:	d80a      	bhi.n	8001c28 <oled_draw_big_digit2x+0x11c>
            bot_byte |= (uint8_t)(1u << yb0);
 8001c12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c16:	2201      	movs	r2, #1
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001c22:	4313      	orrs	r3, r2
 8001c24:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
          if (yb1 < 8)
 8001c28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001c2c:	2b07      	cmp	r3, #7
 8001c2e:	d80a      	bhi.n	8001c46 <oled_draw_big_digit2x+0x13a>
            bot_byte |= (uint8_t)(1u << yb1);
 8001c30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001c34:	2201      	movs	r2, #1
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001c40:	4313      	orrs	r3, r2
 8001c42:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    for (uint8_t row = 0; row < 7; row++) {
 8001c46:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001c50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c54:	2b06      	cmp	r3, #6
 8001c56:	d99f      	bls.n	8001b98 <oled_draw_big_digit2x+0x8c>
        }
      }
    }

    // duplicate horizontally
    if (outc < sizeof(top)) {
 8001c58:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001c5c:	2b0b      	cmp	r3, #11
 8001c5e:	d814      	bhi.n	8001c8a <oled_draw_big_digit2x+0x17e>
      top[outc] = top_byte;
 8001c60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001c64:	3338      	adds	r3, #56	@ 0x38
 8001c66:	443b      	add	r3, r7
 8001c68:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8001c6c:	f803 2c20 	strb.w	r2, [r3, #-32]
      bottom[outc] = bot_byte;
 8001c70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001c74:	3338      	adds	r3, #56	@ 0x38
 8001c76:	443b      	add	r3, r7
 8001c78:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8001c7c:	f803 2c2c 	strb.w	r2, [r3, #-44]
      outc++;
 8001c80:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001c84:	3301      	adds	r3, #1
 8001c86:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }
    if (outc < sizeof(top)) {
 8001c8a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001c8e:	2b0b      	cmp	r3, #11
 8001c90:	d814      	bhi.n	8001cbc <oled_draw_big_digit2x+0x1b0>
      top[outc] = top_byte;
 8001c92:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001c96:	3338      	adds	r3, #56	@ 0x38
 8001c98:	443b      	add	r3, r7
 8001c9a:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8001c9e:	f803 2c20 	strb.w	r2, [r3, #-32]
      bottom[outc] = bot_byte;
 8001ca2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ca6:	3338      	adds	r3, #56	@ 0x38
 8001ca8:	443b      	add	r3, r7
 8001caa:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8001cae:	f803 2c2c 	strb.w	r2, [r3, #-44]
      outc++;
 8001cb2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  for (uint8_t c = 0; c < 6; c++) {
 8001cbc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001cc6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001cca:	2b05      	cmp	r3, #5
 8001ccc:	f67f af4e 	bls.w	8001b6c <oled_draw_big_digit2x+0x60>
 8001cd0:	e000      	b.n	8001cd4 <oled_draw_big_digit2x+0x1c8>
      break;            // last column in font is blank spacing
 8001cd2:	bf00      	nop
    }
  }

  // Write to OLED: top page then bottom page
  oled_setpos(page_top, x);
 8001cd4:	79fa      	ldrb	r2, [r7, #7]
 8001cd6:	79bb      	ldrb	r3, [r7, #6]
 8001cd8:	4611      	mov	r1, r2
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fcf4 	bl	80016c8 <oled_setpos>
  oled_data(top, outc);
 8001ce0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	f107 0318 	add.w	r3, r7, #24
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fccc 	bl	800168a <oled_data>
  oled_setpos((uint8_t)(page_top + 1), x);
 8001cf2:	79bb      	ldrb	r3, [r7, #6]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	79fa      	ldrb	r2, [r7, #7]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fce3 	bl	80016c8 <oled_setpos>
  oled_data(bottom, outc);
 8001d02:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fcbb 	bl	800168a <oled_data>
 8001d14:	e000      	b.n	8001d18 <oled_draw_big_digit2x+0x20c>
    return;
 8001d16:	bf00      	nop
}
 8001d18:	3738      	adds	r7, #56	@ 0x38
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	080039e0 	.word	0x080039e0

08001d24 <oled_clear>:

/* ============================================================================
 * Public Functions
 * ============================================================================
 */
void oled_clear(void) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b0a2      	sub	sp, #136	@ 0x88
 8001d28:	af00      	add	r7, sp, #0
  uint8_t z[128] = {0};
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	2280      	movs	r2, #128	@ 0x80
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 fce7 	bl	8002704 <memset>
  for (uint8_t p = 0; p < 8; p++) {
 8001d36:	2300      	movs	r3, #0
 8001d38:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001d3c:	e00f      	b.n	8001d5e <oled_clear+0x3a>
    oled_setpos(p, 0);
 8001d3e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fcbf 	bl	80016c8 <oled_setpos>
    oled_data(z, 128);
 8001d4a:	1d3b      	adds	r3, r7, #4
 8001d4c:	2180      	movs	r1, #128	@ 0x80
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fc9b 	bl	800168a <oled_data>
  for (uint8_t p = 0; p < 8; p++) {
 8001d54:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001d58:	3301      	adds	r3, #1
 8001d5a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001d5e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001d62:	2b07      	cmp	r3, #7
 8001d64:	d9eb      	bls.n	8001d3e <oled_clear+0x1a>
  }
}
 8001d66:	bf00      	nop
 8001d68:	bf00      	nop
 8001d6a:	3788      	adds	r7, #136	@ 0x88
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <oled_init>:

void oled_init(void) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  I2C1_Init_OLED();
 8001d74:	f7ff fbb4 	bl	80014e0 <I2C1_Init_OLED>

  // Initialization sequence
  oled_cmd(0xAE);
 8001d78:	20ae      	movs	r0, #174	@ 0xae
 8001d7a:	f7ff fc71 	bl	8001660 <oled_cmd>
  oled_cmd(0xD5);
 8001d7e:	20d5      	movs	r0, #213	@ 0xd5
 8001d80:	f7ff fc6e 	bl	8001660 <oled_cmd>
  oled_cmd(0x80);
 8001d84:	2080      	movs	r0, #128	@ 0x80
 8001d86:	f7ff fc6b 	bl	8001660 <oled_cmd>
  oled_cmd(0xA8);
 8001d8a:	20a8      	movs	r0, #168	@ 0xa8
 8001d8c:	f7ff fc68 	bl	8001660 <oled_cmd>
  oled_cmd(0x3F);
 8001d90:	203f      	movs	r0, #63	@ 0x3f
 8001d92:	f7ff fc65 	bl	8001660 <oled_cmd>
  oled_cmd(0xD3);
 8001d96:	20d3      	movs	r0, #211	@ 0xd3
 8001d98:	f7ff fc62 	bl	8001660 <oled_cmd>
  oled_cmd(0x00);
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f7ff fc5f 	bl	8001660 <oled_cmd>
  oled_cmd(0x40);
 8001da2:	2040      	movs	r0, #64	@ 0x40
 8001da4:	f7ff fc5c 	bl	8001660 <oled_cmd>
  oled_cmd(0x8D);
 8001da8:	208d      	movs	r0, #141	@ 0x8d
 8001daa:	f7ff fc59 	bl	8001660 <oled_cmd>
  oled_cmd(0x14);
 8001dae:	2014      	movs	r0, #20
 8001db0:	f7ff fc56 	bl	8001660 <oled_cmd>
  oled_cmd(0x20);
 8001db4:	2020      	movs	r0, #32
 8001db6:	f7ff fc53 	bl	8001660 <oled_cmd>
  oled_cmd(0x00);
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f7ff fc50 	bl	8001660 <oled_cmd>
  oled_cmd(0xA1); // segment remap
 8001dc0:	20a1      	movs	r0, #161	@ 0xa1
 8001dc2:	f7ff fc4d 	bl	8001660 <oled_cmd>
  oled_cmd(0xC8); // COM scan dir
 8001dc6:	20c8      	movs	r0, #200	@ 0xc8
 8001dc8:	f7ff fc4a 	bl	8001660 <oled_cmd>
  oled_cmd(0xDA);
 8001dcc:	20da      	movs	r0, #218	@ 0xda
 8001dce:	f7ff fc47 	bl	8001660 <oled_cmd>
  oled_cmd(0x12);
 8001dd2:	2012      	movs	r0, #18
 8001dd4:	f7ff fc44 	bl	8001660 <oled_cmd>
  oled_cmd(0x81);
 8001dd8:	2081      	movs	r0, #129	@ 0x81
 8001dda:	f7ff fc41 	bl	8001660 <oled_cmd>
  oled_cmd(0x7F);
 8001dde:	207f      	movs	r0, #127	@ 0x7f
 8001de0:	f7ff fc3e 	bl	8001660 <oled_cmd>
  oled_cmd(0xD9);
 8001de4:	20d9      	movs	r0, #217	@ 0xd9
 8001de6:	f7ff fc3b 	bl	8001660 <oled_cmd>
  oled_cmd(0xF1);
 8001dea:	20f1      	movs	r0, #241	@ 0xf1
 8001dec:	f7ff fc38 	bl	8001660 <oled_cmd>
  oled_cmd(0xDB);
 8001df0:	20db      	movs	r0, #219	@ 0xdb
 8001df2:	f7ff fc35 	bl	8001660 <oled_cmd>
  oled_cmd(0x40);
 8001df6:	2040      	movs	r0, #64	@ 0x40
 8001df8:	f7ff fc32 	bl	8001660 <oled_cmd>
  oled_cmd(0xA4);
 8001dfc:	20a4      	movs	r0, #164	@ 0xa4
 8001dfe:	f7ff fc2f 	bl	8001660 <oled_cmd>
  oled_cmd(0xA6);
 8001e02:	20a6      	movs	r0, #166	@ 0xa6
 8001e04:	f7ff fc2c 	bl	8001660 <oled_cmd>
  oled_cmd(0xAF);
 8001e08:	20af      	movs	r0, #175	@ 0xaf
 8001e0a:	f7ff fc29 	bl	8001660 <oled_cmd>

  oled_clear();
 8001e0e:	f7ff ff89 	bl	8001d24 <oled_clear>
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <draw_section1>:

// Speed bar width (inside section1)
#define W_SPD_BAR 54

/* ----------------------------- Rendering ---------------------------------- */
static void draw_section1(void) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af02      	add	r7, sp, #8
  // Clear region pages we use
  oled_clear_region(S1_PAGE_LABEL, S1_COL_L, S1_COL_R);
 8001e1e:	2240      	movs	r2, #64	@ 0x40
 8001e20:	2100      	movs	r1, #0
 8001e22:	2000      	movs	r0, #0
 8001e24:	f7ff fd0e 	bl	8001844 <oled_clear_region>
  oled_clear_region(S1_PAGE_SPEED, S1_COL_L, S1_COL_R);
 8001e28:	2240      	movs	r2, #64	@ 0x40
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	2002      	movs	r0, #2
 8001e2e:	f7ff fd09 	bl	8001844 <oled_clear_region>
  oled_clear_region((uint8_t)(S1_PAGE_SPEED + 1), S1_COL_L, S1_COL_R); // safety
 8001e32:	2240      	movs	r2, #64	@ 0x40
 8001e34:	2100      	movs	r1, #0
 8001e36:	2003      	movs	r0, #3
 8001e38:	f7ff fd04 	bl	8001844 <oled_clear_region>

  // LEVEL label + number (left)
  oled_print_text(S1_COL_L + 0, S1_PAGE_LABEL, "LEVEL");
 8001e3c:	4a30      	ldr	r2, [pc, #192]	@ (8001f00 <draw_section1+0xe8>)
 8001e3e:	2100      	movs	r1, #0
 8001e40:	2000      	movs	r0, #0
 8001e42:	f7ff fd35 	bl	80018b0 <oled_print_text>
  oled_print_uint((uint8_t)(S1_COL_L + 6 * 6), S1_PAGE_LABEL, g_level);
 8001e46:	4b2f      	ldr	r3, [pc, #188]	@ (8001f04 <draw_section1+0xec>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2024      	movs	r0, #36	@ 0x24
 8001e50:	f7ff fdc0 	bl	80019d4 <oled_print_uint>

  // LIVES (hearts) right-aligned within section1
  {
    // each heart drawn with 8 columns + 1 spacing
    uint8_t total_w = (uint8_t)(INITIAL_LIVES * 9);
 8001e54:	2324      	movs	r3, #36	@ 0x24
 8001e56:	713b      	strb	r3, [r7, #4]
    uint8_t start_x =
        (uint8_t)((S1_COL_R - S1_COL_L > total_w) ? (S1_COL_R - total_w - 2)
 8001e58:	793b      	ldrb	r3, [r7, #4]
 8001e5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e5c:	d804      	bhi.n	8001e68 <draw_section1+0x50>
 8001e5e:	793b      	ldrb	r3, [r7, #4]
 8001e60:	f1c3 033e 	rsb	r3, r3, #62	@ 0x3e
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	e000      	b.n	8001e6a <draw_section1+0x52>
 8001e68:	2302      	movs	r3, #2
    uint8_t start_x =
 8001e6a:	70fb      	strb	r3, [r7, #3]
                                                  : (S1_COL_L + 2));
    for (uint8_t i = 0; i < INITIAL_LIVES; i++) {
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	71fb      	strb	r3, [r7, #7]
 8001e70:	e01c      	b.n	8001eac <draw_section1+0x94>
      uint8_t x = (uint8_t)(start_x + i * 9);
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	461a      	mov	r2, r3
 8001e76:	00d2      	lsls	r2, r2, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	4413      	add	r3, r2
 8001e80:	70bb      	strb	r3, [r7, #2]
      if (i < g_lives)
 8001e82:	4b21      	ldr	r3, [pc, #132]	@ (8001f08 <draw_section1+0xf0>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	79fa      	ldrb	r2, [r7, #7]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d206      	bcs.n	8001e9a <draw_section1+0x82>
        oled_draw_icon8_hflip(x, S1_PAGE_LABEL, ICON_HEART_ROT90);
 8001e8c:	78bb      	ldrb	r3, [r7, #2]
 8001e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8001f0c <draw_section1+0xf4>)
 8001e90:	2100      	movs	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fc43 	bl	800171e <oled_draw_icon8_hflip>
 8001e98:	e005      	b.n	8001ea6 <draw_section1+0x8e>
      else
        oled_draw_icon8_hflip(x, S1_PAGE_LABEL, ICON_HEART_EMPTY_ROT90);
 8001e9a:	78bb      	ldrb	r3, [r7, #2]
 8001e9c:	4a1c      	ldr	r2, [pc, #112]	@ (8001f10 <draw_section1+0xf8>)
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fc3c 	bl	800171e <oled_draw_icon8_hflip>
    for (uint8_t i = 0; i < INITIAL_LIVES; i++) {
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	71fb      	strb	r3, [r7, #7]
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d9df      	bls.n	8001e72 <draw_section1+0x5a>
    }
  }

  // SPEED line
  oled_print_text(S1_COL_L + 0, S1_PAGE_SPEED, "SPD");
 8001eb2:	4a18      	ldr	r2, [pc, #96]	@ (8001f14 <draw_section1+0xfc>)
 8001eb4:	2102      	movs	r1, #2
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f7ff fcfa 	bl	80018b0 <oled_print_text>
  // numeric value
  oled_print_uint((uint8_t)(S1_COL_L + 6 * 4), S1_PAGE_SPEED, g_difficulty);
 8001ebc:	4b16      	ldr	r3, [pc, #88]	@ (8001f18 <draw_section1+0x100>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	2102      	movs	r1, #2
 8001ec4:	2018      	movs	r0, #24
 8001ec6:	f7ff fd85 	bl	80019d4 <oled_print_uint>

  // draw speed bar within section1 width
  {
    uint8_t bar_x = (uint8_t)(S1_COL_R - W_SPD_BAR - 2);
 8001eca:	2308      	movs	r3, #8
 8001ecc:	71bb      	strb	r3, [r7, #6]
    if (bar_x < (S1_COL_L + 6 * 8))
 8001ece:	79bb      	ldrb	r3, [r7, #6]
 8001ed0:	2b2f      	cmp	r3, #47	@ 0x2f
 8001ed2:	d801      	bhi.n	8001ed8 <draw_section1+0xc0>
      bar_x = (uint8_t)(S1_COL_L + 6 * 8); // keep some gap from number
 8001ed4:	2330      	movs	r3, #48	@ 0x30
 8001ed6:	71bb      	strb	r3, [r7, #6]
    uint8_t spd = g_difficulty;
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f18 <draw_section1+0x100>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	717b      	strb	r3, [r7, #5]
    if (spd > 5)
 8001ede:	797b      	ldrb	r3, [r7, #5]
 8001ee0:	2b05      	cmp	r3, #5
 8001ee2:	d901      	bls.n	8001ee8 <draw_section1+0xd0>
      spd = 5;
 8001ee4:	2305      	movs	r3, #5
 8001ee6:	717b      	strb	r3, [r7, #5]
    oled_draw_bordered_progress(bar_x, S1_PAGE_SPEED, W_SPD_BAR, spd, 5);
 8001ee8:	797b      	ldrb	r3, [r7, #5]
 8001eea:	79b8      	ldrb	r0, [r7, #6]
 8001eec:	2205      	movs	r2, #5
 8001eee:	9200      	str	r2, [sp, #0]
 8001ef0:	2236      	movs	r2, #54	@ 0x36
 8001ef2:	2102      	movs	r1, #2
 8001ef4:	f7ff fc42 	bl	800177c <oled_draw_bordered_progress>
  }
}
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	0800395c 	.word	0x0800395c
 8001f04:	20000086 	.word	0x20000086
 8001f08:	2000008c 	.word	0x2000008c
 8001f0c:	08003ad0 	.word	0x08003ad0
 8001f10:	08003ad8 	.word	0x08003ad8
 8001f14:	08003964 	.word	0x08003964
 8001f18:	20000085 	.word	0x20000085

08001f1c <draw_section2>:

static void draw_section2(void) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
  // Title "TIME" centered on S2
  oled_clear_region(S2_PAGE_TITLE, S2_COL_L, S2_COL_R);
 8001f22:	2280      	movs	r2, #128	@ 0x80
 8001f24:	2140      	movs	r1, #64	@ 0x40
 8001f26:	2000      	movs	r0, #0
 8001f28:	f7ff fc8c 	bl	8001844 <oled_clear_region>
  oled_print_centered(S2_PAGE_TITLE, S2_COL_L, S2_COL_R, "TIME");
 8001f2c:	4b3c      	ldr	r3, [pc, #240]	@ (8002020 <draw_section2+0x104>)
 8001f2e:	2280      	movs	r2, #128	@ 0x80
 8001f30:	2140      	movs	r1, #64	@ 0x40
 8001f32:	2000      	movs	r0, #0
 8001f34:	f7ff fdbd 	bl	8001ab2 <oled_print_centered>

  // Big countdown number centered (uses pages 2 and 3)
  oled_clear_region(S2_PAGE_BIG_TOP, S2_COL_L, S2_COL_R);
 8001f38:	2280      	movs	r2, #128	@ 0x80
 8001f3a:	2140      	movs	r1, #64	@ 0x40
 8001f3c:	2002      	movs	r0, #2
 8001f3e:	f7ff fc81 	bl	8001844 <oled_clear_region>
  oled_clear_region((uint8_t)(S2_PAGE_BIG_TOP + 1), S2_COL_L, S2_COL_R);
 8001f42:	2280      	movs	r2, #128	@ 0x80
 8001f44:	2140      	movs	r1, #64	@ 0x40
 8001f46:	2003      	movs	r0, #3
 8001f48:	f7ff fc7c 	bl	8001844 <oled_clear_region>

  // Determine digits to display (10 -> "10", else '0'..'9')
  char buf[3] = {0};
 8001f4c:	463b      	mov	r3, r7
 8001f4e:	2100      	movs	r1, #0
 8001f50:	460a      	mov	r2, r1
 8001f52:	801a      	strh	r2, [r3, #0]
 8001f54:	460a      	mov	r2, r1
 8001f56:	709a      	strb	r2, [r3, #2]
  if (g_countdown == 10) {
 8001f58:	4b32      	ldr	r3, [pc, #200]	@ (8002024 <draw_section2+0x108>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b0a      	cmp	r3, #10
 8001f60:	d104      	bne.n	8001f6c <draw_section2+0x50>
    buf[0] = '1';
 8001f62:	2331      	movs	r3, #49	@ 0x31
 8001f64:	703b      	strb	r3, [r7, #0]
    buf[1] = '0';
 8001f66:	2330      	movs	r3, #48	@ 0x30
 8001f68:	707b      	strb	r3, [r7, #1]
 8001f6a:	e011      	b.n	8001f90 <draw_section2+0x74>
  } else {
    buf[0] = (char)('0' + (g_countdown % 10));
 8001f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8002024 <draw_section2+0x108>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	4b2d      	ldr	r3, [pc, #180]	@ (8002028 <draw_section2+0x10c>)
 8001f74:	fba3 1302 	umull	r1, r3, r3, r2
 8001f78:	08d9      	lsrs	r1, r3, #3
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	440b      	add	r3, r1
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	3330      	adds	r3, #48	@ 0x30
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	703b      	strb	r3, [r7, #0]
    buf[1] = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	707b      	strb	r3, [r7, #1]
  }

  // Big digit width ≈ 10 columns each, plus 2 cols spacing between
  uint8_t digits = (uint8_t)((buf[1] == 0) ? 1 : 2);
 8001f90:	787b      	ldrb	r3, [r7, #1]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <draw_section2+0x7e>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <draw_section2+0x80>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	737b      	strb	r3, [r7, #13]
  uint8_t total_w = (uint8_t)(digits * 10 + ((digits > 1) ? 2 : 0));
 8001f9e:	7b7b      	ldrb	r3, [r7, #13]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	0092      	lsls	r2, r2, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	7b7a      	ldrb	r2, [r7, #13]
 8001fac:	2a01      	cmp	r2, #1
 8001fae:	d901      	bls.n	8001fb4 <draw_section2+0x98>
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	e000      	b.n	8001fb6 <draw_section2+0x9a>
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	4413      	add	r3, r2
 8001fb8:	733b      	strb	r3, [r7, #12]

  // Center horizontally within section2
  uint8_t s2w = (uint8_t)(S2_COL_R - S2_COL_L);
 8001fba:	2340      	movs	r3, #64	@ 0x40
 8001fbc:	72fb      	strb	r3, [r7, #11]
  uint8_t x0 =
      (uint8_t)(S2_COL_L + ((s2w > total_w) ? ((s2w - total_w) / 2) : 0));
 8001fbe:	7afa      	ldrb	r2, [r7, #11]
 8001fc0:	7b3b      	ldrb	r3, [r7, #12]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d909      	bls.n	8001fda <draw_section2+0xbe>
 8001fc6:	7afa      	ldrb	r2, [r7, #11]
 8001fc8:	7b3b      	ldrb	r3, [r7, #12]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	0fda      	lsrs	r2, r3, #31
 8001fce:	4413      	add	r3, r2
 8001fd0:	105b      	asrs	r3, r3, #1
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	3340      	adds	r3, #64	@ 0x40
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	e000      	b.n	8001fdc <draw_section2+0xc0>
 8001fda:	2340      	movs	r3, #64	@ 0x40
  uint8_t x0 =
 8001fdc:	72bb      	strb	r3, [r7, #10]

  // Draw
  uint8_t x = x0;
 8001fde:	7abb      	ldrb	r3, [r7, #10]
 8001fe0:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < digits; i++) {
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	73bb      	strb	r3, [r7, #14]
 8001fe6:	e012      	b.n	800200e <draw_section2+0xf2>
    int d = buf[i] - '0';
 8001fe8:	7bbb      	ldrb	r3, [r7, #14]
 8001fea:	3310      	adds	r3, #16
 8001fec:	443b      	add	r3, r7
 8001fee:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001ff2:	3b30      	subs	r3, #48	@ 0x30
 8001ff4:	607b      	str	r3, [r7, #4]
    oled_draw_big_digit2x(x, S2_PAGE_BIG_TOP, d);
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	2102      	movs	r1, #2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff fd85 	bl	8001b0c <oled_draw_big_digit2x>
    x = (uint8_t)(x + 10 + 2); // 2 col spacing
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	330c      	adds	r3, #12
 8002006:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < digits; i++) {
 8002008:	7bbb      	ldrb	r3, [r7, #14]
 800200a:	3301      	adds	r3, #1
 800200c:	73bb      	strb	r3, [r7, #14]
 800200e:	7bba      	ldrb	r2, [r7, #14]
 8002010:	7b7b      	ldrb	r3, [r7, #13]
 8002012:	429a      	cmp	r2, r3
 8002014:	d3e8      	bcc.n	8001fe8 <draw_section2+0xcc>
  }
}
 8002016:	bf00      	nop
 8002018:	bf00      	nop
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	08003968 	.word	0x08003968
 8002024:	20000008 	.word	0x20000008
 8002028:	cccccccd 	.word	0xcccccccd

0800202c <state_text>:

static const char *state_text(GameState_t s) {
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
  switch (s) {
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	3b01      	subs	r3, #1
 800203a:	2b06      	cmp	r3, #6
 800203c:	d81c      	bhi.n	8002078 <state_text+0x4c>
 800203e:	a201      	add	r2, pc, #4	@ (adr r2, 8002044 <state_text+0x18>)
 8002040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002044:	08002071 	.word	0x08002071
 8002048:	08002075 	.word	0x08002075
 800204c:	08002069 	.word	0x08002069
 8002050:	0800206d 	.word	0x0800206d
 8002054:	08002079 	.word	0x08002079
 8002058:	08002061 	.word	0x08002061
 800205c:	08002065 	.word	0x08002065
  case GAME_STATE_VICTORY:
    return "VICTORY";
 8002060:	4b09      	ldr	r3, [pc, #36]	@ (8002088 <state_text+0x5c>)
 8002062:	e00a      	b.n	800207a <state_text+0x4e>
  case GAME_STATE_GAME_DEATH:
    return "GAME OVER";
 8002064:	4b09      	ldr	r3, [pc, #36]	@ (800208c <state_text+0x60>)
 8002066:	e008      	b.n	800207a <state_text+0x4e>
  case GAME_STATE_PATTERN_DISPLAY:
    return "WATCH";
 8002068:	4b09      	ldr	r3, [pc, #36]	@ (8002090 <state_text+0x64>)
 800206a:	e006      	b.n	800207a <state_text+0x4e>
  case GAME_STATE_INPUT_WAIT:
    return "YOUR TURN";
 800206c:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <state_text+0x68>)
 800206e:	e004      	b.n	800207a <state_text+0x4e>
  case GAME_STATE_DIFFICULTY_SELECT:
    return "SELECT SPEED";
 8002070:	4b09      	ldr	r3, [pc, #36]	@ (8002098 <state_text+0x6c>)
 8002072:	e002      	b.n	800207a <state_text+0x4e>
  case GAME_STATE_LEVEL_INTRO:
    return "GET READY";
 8002074:	4b09      	ldr	r3, [pc, #36]	@ (800209c <state_text+0x70>)
 8002076:	e000      	b.n	800207a <state_text+0x4e>
  default:
    return "READY";
 8002078:	4b09      	ldr	r3, [pc, #36]	@ (80020a0 <state_text+0x74>)
  }
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	08003970 	.word	0x08003970
 800208c:	08003978 	.word	0x08003978
 8002090:	08003984 	.word	0x08003984
 8002094:	0800398c 	.word	0x0800398c
 8002098:	08003998 	.word	0x08003998
 800209c:	080039a8 	.word	0x080039a8
 80020a0:	080039b4 	.word	0x080039b4

080020a4 <draw_footer>:

static void draw_footer(void) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  oled_clear_region(FOOTER_PAGE, 0, 128);
 80020a8:	2280      	movs	r2, #128	@ 0x80
 80020aa:	2100      	movs	r1, #0
 80020ac:	2007      	movs	r0, #7
 80020ae:	f7ff fbc9 	bl	8001844 <oled_clear_region>
  oled_print_centered(FOOTER_PAGE, 0, 128, state_text(g_game_state));
 80020b2:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <draw_footer+0x28>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff ffb8 	bl	800202c <state_text>
 80020bc:	4603      	mov	r3, r0
 80020be:	2280      	movs	r2, #128	@ 0x80
 80020c0:	2100      	movs	r1, #0
 80020c2:	2007      	movs	r0, #7
 80020c4:	f7ff fcf5 	bl	8001ab2 <oled_print_centered>
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000084 	.word	0x20000084

080020d0 <OLED_ShowStatus>:

/* ============================================================================
 * Single entry to render the whole screen with the new layout
 * ============================================================================
 */
void OLED_ShowStatus(void) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  // You can keep selective updates with prev_* if you like; for clarity we
  // redraw the three zones.
  draw_section1();
 80020d4:	f7ff fea0 	bl	8001e18 <draw_section1>
  draw_section2();
 80020d8:	f7ff ff20 	bl	8001f1c <draw_section2>
  draw_footer();
 80020dc:	f7ff ffe2 	bl	80020a4 <draw_footer>
}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return 1;
 80020e8:	2301      	movs	r3, #1
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <_kill>:

int _kill(int pid, int sig)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020fe:	f000 fb4f 	bl	80027a0 <__errno>
 8002102:	4603      	mov	r3, r0
 8002104:	2216      	movs	r2, #22
 8002106:	601a      	str	r2, [r3, #0]
  return -1;
 8002108:	f04f 33ff 	mov.w	r3, #4294967295
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <_exit>:

void _exit (int status)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800211c:	f04f 31ff 	mov.w	r1, #4294967295
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ffe7 	bl	80020f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002126:	bf00      	nop
 8002128:	e7fd      	b.n	8002126 <_exit+0x12>

0800212a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b086      	sub	sp, #24
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	e00a      	b.n	8002152 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800213c:	f3af 8000 	nop.w
 8002140:	4601      	mov	r1, r0
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	1c5a      	adds	r2, r3, #1
 8002146:	60ba      	str	r2, [r7, #8]
 8002148:	b2ca      	uxtb	r2, r1
 800214a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	3301      	adds	r3, #1
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	429a      	cmp	r2, r3
 8002158:	dbf0      	blt.n	800213c <_read+0x12>
  }

  return len;
 800215a:	687b      	ldr	r3, [r7, #4]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	e009      	b.n	800218a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	60ba      	str	r2, [r7, #8]
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	3301      	adds	r3, #1
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	429a      	cmp	r2, r3
 8002190:	dbf1      	blt.n	8002176 <_write+0x12>
  }
  return len;
 8002192:	687b      	ldr	r3, [r7, #4]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <_close>:

int _close(int file)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021c4:	605a      	str	r2, [r3, #4]
  return 0;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <_isatty>:

int _isatty(int file)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021dc:	2301      	movs	r3, #1
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b085      	sub	sp, #20
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800220c:	4a14      	ldr	r2, [pc, #80]	@ (8002260 <_sbrk+0x5c>)
 800220e:	4b15      	ldr	r3, [pc, #84]	@ (8002264 <_sbrk+0x60>)
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002218:	4b13      	ldr	r3, [pc, #76]	@ (8002268 <_sbrk+0x64>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d102      	bne.n	8002226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002220:	4b11      	ldr	r3, [pc, #68]	@ (8002268 <_sbrk+0x64>)
 8002222:	4a12      	ldr	r2, [pc, #72]	@ (800226c <_sbrk+0x68>)
 8002224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002226:	4b10      	ldr	r3, [pc, #64]	@ (8002268 <_sbrk+0x64>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	429a      	cmp	r2, r3
 8002232:	d207      	bcs.n	8002244 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002234:	f000 fab4 	bl	80027a0 <__errno>
 8002238:	4603      	mov	r3, r0
 800223a:	220c      	movs	r2, #12
 800223c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800223e:	f04f 33ff 	mov.w	r3, #4294967295
 8002242:	e009      	b.n	8002258 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002244:	4b08      	ldr	r3, [pc, #32]	@ (8002268 <_sbrk+0x64>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800224a:	4b07      	ldr	r3, [pc, #28]	@ (8002268 <_sbrk+0x64>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	4a05      	ldr	r2, [pc, #20]	@ (8002268 <_sbrk+0x64>)
 8002254:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002256:	68fb      	ldr	r3, [r7, #12]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20020000 	.word	0x20020000
 8002264:	00000400 	.word	0x00000400
 8002268:	20000184 	.word	0x20000184
 800226c:	200002e0 	.word	0x200002e0

08002270 <Delay_ms>:
uint8_t g_system_initialized = 0;

/* ============================================================================
 * Timing Functions
 * ============================================================================ */
void Delay_ms(uint32_t ms) {
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
    uint32_t start = GetTick();
 8002278:	f000 f810 	bl	800229c <GetTick>
 800227c:	60f8      	str	r0, [r7, #12]
    while((GetTick() - start) < ms);
 800227e:	bf00      	nop
 8002280:	f000 f80c 	bl	800229c <GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	429a      	cmp	r2, r3
 800228e:	d8f7      	bhi.n	8002280 <Delay_ms+0x10>
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <GetTick>:

uint32_t GetTick(void) {
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
    return g_tick_counter;
 80022a0:	4b03      	ldr	r3, [pc, #12]	@ (80022b0 <GetTick+0x14>)
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20000188 	.word	0x20000188

080022b4 <Log_Print>:

/* ============================================================================
 * Logging Functions
 * ============================================================================ */
void Log_Print(const char* format, ...) {
 80022b4:	b40f      	push	{r0, r1, r2, r3}
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b0c2      	sub	sp, #264	@ 0x108
 80022ba:	af00      	add	r7, sp, #0
    if(!g_system_initialized) return;
 80022bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002330 <Log_Print+0x7c>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d02d      	beq.n	8002320 <Log_Print+0x6c>
    char buffer[256];
    va_list args;
    va_start(args, format);
 80022c4:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80022c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80022cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80022d0:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80022d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80022d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80022da:	1d38      	adds	r0, r7, #4
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80022e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022e6:	f000 f9ff 	bl	80026e8 <vsniprintf>
    va_end(args);
    for(char* p = buffer; *p; p++) {
 80022ea:	1d3b      	adds	r3, r7, #4
 80022ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80022f0:	e010      	b.n	8002314 <Log_Print+0x60>
        while(!(USART2->SR & USART_SR_TXE));
 80022f2:	bf00      	nop
 80022f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002334 <Log_Print+0x80>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f9      	beq.n	80022f4 <Log_Print+0x40>
        USART2->DR = *p;
 8002300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002304:	781a      	ldrb	r2, [r3, #0]
 8002306:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <Log_Print+0x80>)
 8002308:	605a      	str	r2, [r3, #4]
    for(char* p = buffer; *p; p++) {
 800230a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800230e:	3301      	adds	r3, #1
 8002310:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1e9      	bne.n	80022f2 <Log_Print+0x3e>
 800231e:	e000      	b.n	8002322 <Log_Print+0x6e>
    if(!g_system_initialized) return;
 8002320:	bf00      	nop
    }
}
 8002322:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002326:	46bd      	mov	sp, r7
 8002328:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800232c:	b004      	add	sp, #16
 800232e:	4770      	bx	lr
 8002330:	2000018c 	.word	0x2000018c
 8002334:	40004400 	.word	0x40004400

08002338 <SysTick_Handler>:

/* ============================================================================
 * Interrupt Handler
 * ============================================================================ */
void SysTick_Handler(void) {
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
    g_tick_counter++;
 800233c:	4b04      	ldr	r3, [pc, #16]	@ (8002350 <SysTick_Handler+0x18>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	3301      	adds	r3, #1
 8002342:	4a03      	ldr	r2, [pc, #12]	@ (8002350 <SysTick_Handler+0x18>)
 8002344:	6013      	str	r3, [r2, #0]
}
 8002346:	bf00      	nop
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	20000188 	.word	0x20000188

08002354 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002354:	480d      	ldr	r0, [pc, #52]	@ (800238c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002356:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002358:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800235c:	480c      	ldr	r0, [pc, #48]	@ (8002390 <LoopForever+0x6>)
  ldr r1, =_edata
 800235e:	490d      	ldr	r1, [pc, #52]	@ (8002394 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002360:	4a0d      	ldr	r2, [pc, #52]	@ (8002398 <LoopForever+0xe>)
  movs r3, #0
 8002362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002364:	e002      	b.n	800236c <LoopCopyDataInit>

08002366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800236a:	3304      	adds	r3, #4

0800236c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800236c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800236e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002370:	d3f9      	bcc.n	8002366 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002372:	4a0a      	ldr	r2, [pc, #40]	@ (800239c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002374:	4c0a      	ldr	r4, [pc, #40]	@ (80023a0 <LoopForever+0x16>)
  movs r3, #0
 8002376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002378:	e001      	b.n	800237e <LoopFillZerobss>

0800237a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800237a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800237c:	3204      	adds	r2, #4

0800237e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800237e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002380:	d3fb      	bcc.n	800237a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8002382:	f000 fa13 	bl	80027ac <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8002386:	f7ff f875 	bl	8001474 <main>

0800238a <LoopForever>:

LoopForever:
  b LoopForever
 800238a:	e7fe      	b.n	800238a <LoopForever>
  ldr   r0, =_estack
 800238c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002394:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002398:	08003bd0 	.word	0x08003bd0
  ldr r2, =_sbss
 800239c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80023a0:	200002dc 	.word	0x200002dc

080023a4 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023a4:	e7fe      	b.n	80023a4 <BusFault_Handler>
	...

080023a8 <srand>:
 80023a8:	b538      	push	{r3, r4, r5, lr}
 80023aa:	4b10      	ldr	r3, [pc, #64]	@ (80023ec <srand+0x44>)
 80023ac:	681d      	ldr	r5, [r3, #0]
 80023ae:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80023b0:	4604      	mov	r4, r0
 80023b2:	b9b3      	cbnz	r3, 80023e2 <srand+0x3a>
 80023b4:	2018      	movs	r0, #24
 80023b6:	f000 fa89 	bl	80028cc <malloc>
 80023ba:	4602      	mov	r2, r0
 80023bc:	6328      	str	r0, [r5, #48]	@ 0x30
 80023be:	b920      	cbnz	r0, 80023ca <srand+0x22>
 80023c0:	4b0b      	ldr	r3, [pc, #44]	@ (80023f0 <srand+0x48>)
 80023c2:	480c      	ldr	r0, [pc, #48]	@ (80023f4 <srand+0x4c>)
 80023c4:	2146      	movs	r1, #70	@ 0x46
 80023c6:	f000 fa19 	bl	80027fc <__assert_func>
 80023ca:	490b      	ldr	r1, [pc, #44]	@ (80023f8 <srand+0x50>)
 80023cc:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <srand+0x54>)
 80023ce:	e9c0 1300 	strd	r1, r3, [r0]
 80023d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <srand+0x58>)
 80023d4:	6083      	str	r3, [r0, #8]
 80023d6:	230b      	movs	r3, #11
 80023d8:	8183      	strh	r3, [r0, #12]
 80023da:	2100      	movs	r1, #0
 80023dc:	2001      	movs	r0, #1
 80023de:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80023e2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80023e4:	2200      	movs	r2, #0
 80023e6:	611c      	str	r4, [r3, #16]
 80023e8:	615a      	str	r2, [r3, #20]
 80023ea:	bd38      	pop	{r3, r4, r5, pc}
 80023ec:	20000018 	.word	0x20000018
 80023f0:	08003ae0 	.word	0x08003ae0
 80023f4:	08003af7 	.word	0x08003af7
 80023f8:	abcd330e 	.word	0xabcd330e
 80023fc:	e66d1234 	.word	0xe66d1234
 8002400:	0005deec 	.word	0x0005deec

08002404 <rand>:
 8002404:	4b16      	ldr	r3, [pc, #88]	@ (8002460 <rand+0x5c>)
 8002406:	b510      	push	{r4, lr}
 8002408:	681c      	ldr	r4, [r3, #0]
 800240a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800240c:	b9b3      	cbnz	r3, 800243c <rand+0x38>
 800240e:	2018      	movs	r0, #24
 8002410:	f000 fa5c 	bl	80028cc <malloc>
 8002414:	4602      	mov	r2, r0
 8002416:	6320      	str	r0, [r4, #48]	@ 0x30
 8002418:	b920      	cbnz	r0, 8002424 <rand+0x20>
 800241a:	4b12      	ldr	r3, [pc, #72]	@ (8002464 <rand+0x60>)
 800241c:	4812      	ldr	r0, [pc, #72]	@ (8002468 <rand+0x64>)
 800241e:	2152      	movs	r1, #82	@ 0x52
 8002420:	f000 f9ec 	bl	80027fc <__assert_func>
 8002424:	4911      	ldr	r1, [pc, #68]	@ (800246c <rand+0x68>)
 8002426:	4b12      	ldr	r3, [pc, #72]	@ (8002470 <rand+0x6c>)
 8002428:	e9c0 1300 	strd	r1, r3, [r0]
 800242c:	4b11      	ldr	r3, [pc, #68]	@ (8002474 <rand+0x70>)
 800242e:	6083      	str	r3, [r0, #8]
 8002430:	230b      	movs	r3, #11
 8002432:	8183      	strh	r3, [r0, #12]
 8002434:	2100      	movs	r1, #0
 8002436:	2001      	movs	r0, #1
 8002438:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800243c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800243e:	480e      	ldr	r0, [pc, #56]	@ (8002478 <rand+0x74>)
 8002440:	690b      	ldr	r3, [r1, #16]
 8002442:	694c      	ldr	r4, [r1, #20]
 8002444:	4a0d      	ldr	r2, [pc, #52]	@ (800247c <rand+0x78>)
 8002446:	4358      	muls	r0, r3
 8002448:	fb02 0004 	mla	r0, r2, r4, r0
 800244c:	fba3 3202 	umull	r3, r2, r3, r2
 8002450:	3301      	adds	r3, #1
 8002452:	eb40 0002 	adc.w	r0, r0, r2
 8002456:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800245a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800245e:	bd10      	pop	{r4, pc}
 8002460:	20000018 	.word	0x20000018
 8002464:	08003ae0 	.word	0x08003ae0
 8002468:	08003af7 	.word	0x08003af7
 800246c:	abcd330e 	.word	0xabcd330e
 8002470:	e66d1234 	.word	0xe66d1234
 8002474:	0005deec 	.word	0x0005deec
 8002478:	5851f42d 	.word	0x5851f42d
 800247c:	4c957f2d 	.word	0x4c957f2d

08002480 <std>:
 8002480:	2300      	movs	r3, #0
 8002482:	b510      	push	{r4, lr}
 8002484:	4604      	mov	r4, r0
 8002486:	e9c0 3300 	strd	r3, r3, [r0]
 800248a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800248e:	6083      	str	r3, [r0, #8]
 8002490:	8181      	strh	r1, [r0, #12]
 8002492:	6643      	str	r3, [r0, #100]	@ 0x64
 8002494:	81c2      	strh	r2, [r0, #14]
 8002496:	6183      	str	r3, [r0, #24]
 8002498:	4619      	mov	r1, r3
 800249a:	2208      	movs	r2, #8
 800249c:	305c      	adds	r0, #92	@ 0x5c
 800249e:	f000 f931 	bl	8002704 <memset>
 80024a2:	4b0d      	ldr	r3, [pc, #52]	@ (80024d8 <std+0x58>)
 80024a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80024a6:	4b0d      	ldr	r3, [pc, #52]	@ (80024dc <std+0x5c>)
 80024a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80024aa:	4b0d      	ldr	r3, [pc, #52]	@ (80024e0 <std+0x60>)
 80024ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80024ae:	4b0d      	ldr	r3, [pc, #52]	@ (80024e4 <std+0x64>)
 80024b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80024b2:	4b0d      	ldr	r3, [pc, #52]	@ (80024e8 <std+0x68>)
 80024b4:	6224      	str	r4, [r4, #32]
 80024b6:	429c      	cmp	r4, r3
 80024b8:	d006      	beq.n	80024c8 <std+0x48>
 80024ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80024be:	4294      	cmp	r4, r2
 80024c0:	d002      	beq.n	80024c8 <std+0x48>
 80024c2:	33d0      	adds	r3, #208	@ 0xd0
 80024c4:	429c      	cmp	r4, r3
 80024c6:	d105      	bne.n	80024d4 <std+0x54>
 80024c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80024cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024d0:	f000 b990 	b.w	80027f4 <__retarget_lock_init_recursive>
 80024d4:	bd10      	pop	{r4, pc}
 80024d6:	bf00      	nop
 80024d8:	08002605 	.word	0x08002605
 80024dc:	08002627 	.word	0x08002627
 80024e0:	0800265f 	.word	0x0800265f
 80024e4:	08002683 	.word	0x08002683
 80024e8:	20000190 	.word	0x20000190

080024ec <stdio_exit_handler>:
 80024ec:	4a02      	ldr	r2, [pc, #8]	@ (80024f8 <stdio_exit_handler+0xc>)
 80024ee:	4903      	ldr	r1, [pc, #12]	@ (80024fc <stdio_exit_handler+0x10>)
 80024f0:	4803      	ldr	r0, [pc, #12]	@ (8002500 <stdio_exit_handler+0x14>)
 80024f2:	f000 b869 	b.w	80025c8 <_fwalk_sglue>
 80024f6:	bf00      	nop
 80024f8:	2000000c 	.word	0x2000000c
 80024fc:	08003109 	.word	0x08003109
 8002500:	2000001c 	.word	0x2000001c

08002504 <cleanup_stdio>:
 8002504:	6841      	ldr	r1, [r0, #4]
 8002506:	4b0c      	ldr	r3, [pc, #48]	@ (8002538 <cleanup_stdio+0x34>)
 8002508:	4299      	cmp	r1, r3
 800250a:	b510      	push	{r4, lr}
 800250c:	4604      	mov	r4, r0
 800250e:	d001      	beq.n	8002514 <cleanup_stdio+0x10>
 8002510:	f000 fdfa 	bl	8003108 <_fflush_r>
 8002514:	68a1      	ldr	r1, [r4, #8]
 8002516:	4b09      	ldr	r3, [pc, #36]	@ (800253c <cleanup_stdio+0x38>)
 8002518:	4299      	cmp	r1, r3
 800251a:	d002      	beq.n	8002522 <cleanup_stdio+0x1e>
 800251c:	4620      	mov	r0, r4
 800251e:	f000 fdf3 	bl	8003108 <_fflush_r>
 8002522:	68e1      	ldr	r1, [r4, #12]
 8002524:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <cleanup_stdio+0x3c>)
 8002526:	4299      	cmp	r1, r3
 8002528:	d004      	beq.n	8002534 <cleanup_stdio+0x30>
 800252a:	4620      	mov	r0, r4
 800252c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002530:	f000 bdea 	b.w	8003108 <_fflush_r>
 8002534:	bd10      	pop	{r4, pc}
 8002536:	bf00      	nop
 8002538:	20000190 	.word	0x20000190
 800253c:	200001f8 	.word	0x200001f8
 8002540:	20000260 	.word	0x20000260

08002544 <global_stdio_init.part.0>:
 8002544:	b510      	push	{r4, lr}
 8002546:	4b0b      	ldr	r3, [pc, #44]	@ (8002574 <global_stdio_init.part.0+0x30>)
 8002548:	4c0b      	ldr	r4, [pc, #44]	@ (8002578 <global_stdio_init.part.0+0x34>)
 800254a:	4a0c      	ldr	r2, [pc, #48]	@ (800257c <global_stdio_init.part.0+0x38>)
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	4620      	mov	r0, r4
 8002550:	2200      	movs	r2, #0
 8002552:	2104      	movs	r1, #4
 8002554:	f7ff ff94 	bl	8002480 <std>
 8002558:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800255c:	2201      	movs	r2, #1
 800255e:	2109      	movs	r1, #9
 8002560:	f7ff ff8e 	bl	8002480 <std>
 8002564:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002568:	2202      	movs	r2, #2
 800256a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800256e:	2112      	movs	r1, #18
 8002570:	f7ff bf86 	b.w	8002480 <std>
 8002574:	200002c8 	.word	0x200002c8
 8002578:	20000190 	.word	0x20000190
 800257c:	080024ed 	.word	0x080024ed

08002580 <__sfp_lock_acquire>:
 8002580:	4801      	ldr	r0, [pc, #4]	@ (8002588 <__sfp_lock_acquire+0x8>)
 8002582:	f000 b938 	b.w	80027f6 <__retarget_lock_acquire_recursive>
 8002586:	bf00      	nop
 8002588:	200002d1 	.word	0x200002d1

0800258c <__sfp_lock_release>:
 800258c:	4801      	ldr	r0, [pc, #4]	@ (8002594 <__sfp_lock_release+0x8>)
 800258e:	f000 b933 	b.w	80027f8 <__retarget_lock_release_recursive>
 8002592:	bf00      	nop
 8002594:	200002d1 	.word	0x200002d1

08002598 <__sinit>:
 8002598:	b510      	push	{r4, lr}
 800259a:	4604      	mov	r4, r0
 800259c:	f7ff fff0 	bl	8002580 <__sfp_lock_acquire>
 80025a0:	6a23      	ldr	r3, [r4, #32]
 80025a2:	b11b      	cbz	r3, 80025ac <__sinit+0x14>
 80025a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025a8:	f7ff bff0 	b.w	800258c <__sfp_lock_release>
 80025ac:	4b04      	ldr	r3, [pc, #16]	@ (80025c0 <__sinit+0x28>)
 80025ae:	6223      	str	r3, [r4, #32]
 80025b0:	4b04      	ldr	r3, [pc, #16]	@ (80025c4 <__sinit+0x2c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f5      	bne.n	80025a4 <__sinit+0xc>
 80025b8:	f7ff ffc4 	bl	8002544 <global_stdio_init.part.0>
 80025bc:	e7f2      	b.n	80025a4 <__sinit+0xc>
 80025be:	bf00      	nop
 80025c0:	08002505 	.word	0x08002505
 80025c4:	200002c8 	.word	0x200002c8

080025c8 <_fwalk_sglue>:
 80025c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025cc:	4607      	mov	r7, r0
 80025ce:	4688      	mov	r8, r1
 80025d0:	4614      	mov	r4, r2
 80025d2:	2600      	movs	r6, #0
 80025d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80025d8:	f1b9 0901 	subs.w	r9, r9, #1
 80025dc:	d505      	bpl.n	80025ea <_fwalk_sglue+0x22>
 80025de:	6824      	ldr	r4, [r4, #0]
 80025e0:	2c00      	cmp	r4, #0
 80025e2:	d1f7      	bne.n	80025d4 <_fwalk_sglue+0xc>
 80025e4:	4630      	mov	r0, r6
 80025e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025ea:	89ab      	ldrh	r3, [r5, #12]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d907      	bls.n	8002600 <_fwalk_sglue+0x38>
 80025f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80025f4:	3301      	adds	r3, #1
 80025f6:	d003      	beq.n	8002600 <_fwalk_sglue+0x38>
 80025f8:	4629      	mov	r1, r5
 80025fa:	4638      	mov	r0, r7
 80025fc:	47c0      	blx	r8
 80025fe:	4306      	orrs	r6, r0
 8002600:	3568      	adds	r5, #104	@ 0x68
 8002602:	e7e9      	b.n	80025d8 <_fwalk_sglue+0x10>

08002604 <__sread>:
 8002604:	b510      	push	{r4, lr}
 8002606:	460c      	mov	r4, r1
 8002608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800260c:	f000 f8a4 	bl	8002758 <_read_r>
 8002610:	2800      	cmp	r0, #0
 8002612:	bfab      	itete	ge
 8002614:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002616:	89a3      	ldrhlt	r3, [r4, #12]
 8002618:	181b      	addge	r3, r3, r0
 800261a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800261e:	bfac      	ite	ge
 8002620:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002622:	81a3      	strhlt	r3, [r4, #12]
 8002624:	bd10      	pop	{r4, pc}

08002626 <__swrite>:
 8002626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800262a:	461f      	mov	r7, r3
 800262c:	898b      	ldrh	r3, [r1, #12]
 800262e:	05db      	lsls	r3, r3, #23
 8002630:	4605      	mov	r5, r0
 8002632:	460c      	mov	r4, r1
 8002634:	4616      	mov	r6, r2
 8002636:	d505      	bpl.n	8002644 <__swrite+0x1e>
 8002638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800263c:	2302      	movs	r3, #2
 800263e:	2200      	movs	r2, #0
 8002640:	f000 f878 	bl	8002734 <_lseek_r>
 8002644:	89a3      	ldrh	r3, [r4, #12]
 8002646:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800264a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800264e:	81a3      	strh	r3, [r4, #12]
 8002650:	4632      	mov	r2, r6
 8002652:	463b      	mov	r3, r7
 8002654:	4628      	mov	r0, r5
 8002656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800265a:	f000 b88f 	b.w	800277c <_write_r>

0800265e <__sseek>:
 800265e:	b510      	push	{r4, lr}
 8002660:	460c      	mov	r4, r1
 8002662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002666:	f000 f865 	bl	8002734 <_lseek_r>
 800266a:	1c43      	adds	r3, r0, #1
 800266c:	89a3      	ldrh	r3, [r4, #12]
 800266e:	bf15      	itete	ne
 8002670:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002672:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002676:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800267a:	81a3      	strheq	r3, [r4, #12]
 800267c:	bf18      	it	ne
 800267e:	81a3      	strhne	r3, [r4, #12]
 8002680:	bd10      	pop	{r4, pc}

08002682 <__sclose>:
 8002682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002686:	f000 b845 	b.w	8002714 <_close_r>

0800268a <_vsniprintf_r>:
 800268a:	b530      	push	{r4, r5, lr}
 800268c:	4614      	mov	r4, r2
 800268e:	2c00      	cmp	r4, #0
 8002690:	b09b      	sub	sp, #108	@ 0x6c
 8002692:	4605      	mov	r5, r0
 8002694:	461a      	mov	r2, r3
 8002696:	da05      	bge.n	80026a4 <_vsniprintf_r+0x1a>
 8002698:	238b      	movs	r3, #139	@ 0x8b
 800269a:	6003      	str	r3, [r0, #0]
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	b01b      	add	sp, #108	@ 0x6c
 80026a2:	bd30      	pop	{r4, r5, pc}
 80026a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80026a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	9319      	str	r3, [sp, #100]	@ 0x64
 80026b2:	bf14      	ite	ne
 80026b4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80026b8:	4623      	moveq	r3, r4
 80026ba:	9302      	str	r3, [sp, #8]
 80026bc:	9305      	str	r3, [sp, #20]
 80026be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026c2:	9100      	str	r1, [sp, #0]
 80026c4:	9104      	str	r1, [sp, #16]
 80026c6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80026ca:	4669      	mov	r1, sp
 80026cc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80026ce:	f000 fa0f 	bl	8002af0 <_svfiprintf_r>
 80026d2:	1c43      	adds	r3, r0, #1
 80026d4:	bfbc      	itt	lt
 80026d6:	238b      	movlt	r3, #139	@ 0x8b
 80026d8:	602b      	strlt	r3, [r5, #0]
 80026da:	2c00      	cmp	r4, #0
 80026dc:	d0e0      	beq.n	80026a0 <_vsniprintf_r+0x16>
 80026de:	9b00      	ldr	r3, [sp, #0]
 80026e0:	2200      	movs	r2, #0
 80026e2:	701a      	strb	r2, [r3, #0]
 80026e4:	e7dc      	b.n	80026a0 <_vsniprintf_r+0x16>
	...

080026e8 <vsniprintf>:
 80026e8:	b507      	push	{r0, r1, r2, lr}
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	4613      	mov	r3, r2
 80026ee:	460a      	mov	r2, r1
 80026f0:	4601      	mov	r1, r0
 80026f2:	4803      	ldr	r0, [pc, #12]	@ (8002700 <vsniprintf+0x18>)
 80026f4:	6800      	ldr	r0, [r0, #0]
 80026f6:	f7ff ffc8 	bl	800268a <_vsniprintf_r>
 80026fa:	b003      	add	sp, #12
 80026fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8002700:	20000018 	.word	0x20000018

08002704 <memset>:
 8002704:	4402      	add	r2, r0
 8002706:	4603      	mov	r3, r0
 8002708:	4293      	cmp	r3, r2
 800270a:	d100      	bne.n	800270e <memset+0xa>
 800270c:	4770      	bx	lr
 800270e:	f803 1b01 	strb.w	r1, [r3], #1
 8002712:	e7f9      	b.n	8002708 <memset+0x4>

08002714 <_close_r>:
 8002714:	b538      	push	{r3, r4, r5, lr}
 8002716:	4d06      	ldr	r5, [pc, #24]	@ (8002730 <_close_r+0x1c>)
 8002718:	2300      	movs	r3, #0
 800271a:	4604      	mov	r4, r0
 800271c:	4608      	mov	r0, r1
 800271e:	602b      	str	r3, [r5, #0]
 8002720:	f7ff fd3c 	bl	800219c <_close>
 8002724:	1c43      	adds	r3, r0, #1
 8002726:	d102      	bne.n	800272e <_close_r+0x1a>
 8002728:	682b      	ldr	r3, [r5, #0]
 800272a:	b103      	cbz	r3, 800272e <_close_r+0x1a>
 800272c:	6023      	str	r3, [r4, #0]
 800272e:	bd38      	pop	{r3, r4, r5, pc}
 8002730:	200002cc 	.word	0x200002cc

08002734 <_lseek_r>:
 8002734:	b538      	push	{r3, r4, r5, lr}
 8002736:	4d07      	ldr	r5, [pc, #28]	@ (8002754 <_lseek_r+0x20>)
 8002738:	4604      	mov	r4, r0
 800273a:	4608      	mov	r0, r1
 800273c:	4611      	mov	r1, r2
 800273e:	2200      	movs	r2, #0
 8002740:	602a      	str	r2, [r5, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	f7ff fd51 	bl	80021ea <_lseek>
 8002748:	1c43      	adds	r3, r0, #1
 800274a:	d102      	bne.n	8002752 <_lseek_r+0x1e>
 800274c:	682b      	ldr	r3, [r5, #0]
 800274e:	b103      	cbz	r3, 8002752 <_lseek_r+0x1e>
 8002750:	6023      	str	r3, [r4, #0]
 8002752:	bd38      	pop	{r3, r4, r5, pc}
 8002754:	200002cc 	.word	0x200002cc

08002758 <_read_r>:
 8002758:	b538      	push	{r3, r4, r5, lr}
 800275a:	4d07      	ldr	r5, [pc, #28]	@ (8002778 <_read_r+0x20>)
 800275c:	4604      	mov	r4, r0
 800275e:	4608      	mov	r0, r1
 8002760:	4611      	mov	r1, r2
 8002762:	2200      	movs	r2, #0
 8002764:	602a      	str	r2, [r5, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	f7ff fcdf 	bl	800212a <_read>
 800276c:	1c43      	adds	r3, r0, #1
 800276e:	d102      	bne.n	8002776 <_read_r+0x1e>
 8002770:	682b      	ldr	r3, [r5, #0]
 8002772:	b103      	cbz	r3, 8002776 <_read_r+0x1e>
 8002774:	6023      	str	r3, [r4, #0]
 8002776:	bd38      	pop	{r3, r4, r5, pc}
 8002778:	200002cc 	.word	0x200002cc

0800277c <_write_r>:
 800277c:	b538      	push	{r3, r4, r5, lr}
 800277e:	4d07      	ldr	r5, [pc, #28]	@ (800279c <_write_r+0x20>)
 8002780:	4604      	mov	r4, r0
 8002782:	4608      	mov	r0, r1
 8002784:	4611      	mov	r1, r2
 8002786:	2200      	movs	r2, #0
 8002788:	602a      	str	r2, [r5, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	f7ff fcea 	bl	8002164 <_write>
 8002790:	1c43      	adds	r3, r0, #1
 8002792:	d102      	bne.n	800279a <_write_r+0x1e>
 8002794:	682b      	ldr	r3, [r5, #0]
 8002796:	b103      	cbz	r3, 800279a <_write_r+0x1e>
 8002798:	6023      	str	r3, [r4, #0]
 800279a:	bd38      	pop	{r3, r4, r5, pc}
 800279c:	200002cc 	.word	0x200002cc

080027a0 <__errno>:
 80027a0:	4b01      	ldr	r3, [pc, #4]	@ (80027a8 <__errno+0x8>)
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	20000018 	.word	0x20000018

080027ac <__libc_init_array>:
 80027ac:	b570      	push	{r4, r5, r6, lr}
 80027ae:	4d0d      	ldr	r5, [pc, #52]	@ (80027e4 <__libc_init_array+0x38>)
 80027b0:	4c0d      	ldr	r4, [pc, #52]	@ (80027e8 <__libc_init_array+0x3c>)
 80027b2:	1b64      	subs	r4, r4, r5
 80027b4:	10a4      	asrs	r4, r4, #2
 80027b6:	2600      	movs	r6, #0
 80027b8:	42a6      	cmp	r6, r4
 80027ba:	d109      	bne.n	80027d0 <__libc_init_array+0x24>
 80027bc:	4d0b      	ldr	r5, [pc, #44]	@ (80027ec <__libc_init_array+0x40>)
 80027be:	4c0c      	ldr	r4, [pc, #48]	@ (80027f0 <__libc_init_array+0x44>)
 80027c0:	f000 ffee 	bl	80037a0 <_init>
 80027c4:	1b64      	subs	r4, r4, r5
 80027c6:	10a4      	asrs	r4, r4, #2
 80027c8:	2600      	movs	r6, #0
 80027ca:	42a6      	cmp	r6, r4
 80027cc:	d105      	bne.n	80027da <__libc_init_array+0x2e>
 80027ce:	bd70      	pop	{r4, r5, r6, pc}
 80027d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027d4:	4798      	blx	r3
 80027d6:	3601      	adds	r6, #1
 80027d8:	e7ee      	b.n	80027b8 <__libc_init_array+0xc>
 80027da:	f855 3b04 	ldr.w	r3, [r5], #4
 80027de:	4798      	blx	r3
 80027e0:	3601      	adds	r6, #1
 80027e2:	e7f2      	b.n	80027ca <__libc_init_array+0x1e>
 80027e4:	08003bc8 	.word	0x08003bc8
 80027e8:	08003bc8 	.word	0x08003bc8
 80027ec:	08003bc8 	.word	0x08003bc8
 80027f0:	08003bcc 	.word	0x08003bcc

080027f4 <__retarget_lock_init_recursive>:
 80027f4:	4770      	bx	lr

080027f6 <__retarget_lock_acquire_recursive>:
 80027f6:	4770      	bx	lr

080027f8 <__retarget_lock_release_recursive>:
 80027f8:	4770      	bx	lr
	...

080027fc <__assert_func>:
 80027fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80027fe:	4614      	mov	r4, r2
 8002800:	461a      	mov	r2, r3
 8002802:	4b09      	ldr	r3, [pc, #36]	@ (8002828 <__assert_func+0x2c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4605      	mov	r5, r0
 8002808:	68d8      	ldr	r0, [r3, #12]
 800280a:	b14c      	cbz	r4, 8002820 <__assert_func+0x24>
 800280c:	4b07      	ldr	r3, [pc, #28]	@ (800282c <__assert_func+0x30>)
 800280e:	9100      	str	r1, [sp, #0]
 8002810:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002814:	4906      	ldr	r1, [pc, #24]	@ (8002830 <__assert_func+0x34>)
 8002816:	462b      	mov	r3, r5
 8002818:	f000 fc9e 	bl	8003158 <fiprintf>
 800281c:	f000 fce6 	bl	80031ec <abort>
 8002820:	4b04      	ldr	r3, [pc, #16]	@ (8002834 <__assert_func+0x38>)
 8002822:	461c      	mov	r4, r3
 8002824:	e7f3      	b.n	800280e <__assert_func+0x12>
 8002826:	bf00      	nop
 8002828:	20000018 	.word	0x20000018
 800282c:	08003b4f 	.word	0x08003b4f
 8002830:	08003b5c 	.word	0x08003b5c
 8002834:	08003b8a 	.word	0x08003b8a

08002838 <_free_r>:
 8002838:	b538      	push	{r3, r4, r5, lr}
 800283a:	4605      	mov	r5, r0
 800283c:	2900      	cmp	r1, #0
 800283e:	d041      	beq.n	80028c4 <_free_r+0x8c>
 8002840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002844:	1f0c      	subs	r4, r1, #4
 8002846:	2b00      	cmp	r3, #0
 8002848:	bfb8      	it	lt
 800284a:	18e4      	addlt	r4, r4, r3
 800284c:	f000 f8e8 	bl	8002a20 <__malloc_lock>
 8002850:	4a1d      	ldr	r2, [pc, #116]	@ (80028c8 <_free_r+0x90>)
 8002852:	6813      	ldr	r3, [r2, #0]
 8002854:	b933      	cbnz	r3, 8002864 <_free_r+0x2c>
 8002856:	6063      	str	r3, [r4, #4]
 8002858:	6014      	str	r4, [r2, #0]
 800285a:	4628      	mov	r0, r5
 800285c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002860:	f000 b8e4 	b.w	8002a2c <__malloc_unlock>
 8002864:	42a3      	cmp	r3, r4
 8002866:	d908      	bls.n	800287a <_free_r+0x42>
 8002868:	6820      	ldr	r0, [r4, #0]
 800286a:	1821      	adds	r1, r4, r0
 800286c:	428b      	cmp	r3, r1
 800286e:	bf01      	itttt	eq
 8002870:	6819      	ldreq	r1, [r3, #0]
 8002872:	685b      	ldreq	r3, [r3, #4]
 8002874:	1809      	addeq	r1, r1, r0
 8002876:	6021      	streq	r1, [r4, #0]
 8002878:	e7ed      	b.n	8002856 <_free_r+0x1e>
 800287a:	461a      	mov	r2, r3
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	b10b      	cbz	r3, 8002884 <_free_r+0x4c>
 8002880:	42a3      	cmp	r3, r4
 8002882:	d9fa      	bls.n	800287a <_free_r+0x42>
 8002884:	6811      	ldr	r1, [r2, #0]
 8002886:	1850      	adds	r0, r2, r1
 8002888:	42a0      	cmp	r0, r4
 800288a:	d10b      	bne.n	80028a4 <_free_r+0x6c>
 800288c:	6820      	ldr	r0, [r4, #0]
 800288e:	4401      	add	r1, r0
 8002890:	1850      	adds	r0, r2, r1
 8002892:	4283      	cmp	r3, r0
 8002894:	6011      	str	r1, [r2, #0]
 8002896:	d1e0      	bne.n	800285a <_free_r+0x22>
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	6053      	str	r3, [r2, #4]
 800289e:	4408      	add	r0, r1
 80028a0:	6010      	str	r0, [r2, #0]
 80028a2:	e7da      	b.n	800285a <_free_r+0x22>
 80028a4:	d902      	bls.n	80028ac <_free_r+0x74>
 80028a6:	230c      	movs	r3, #12
 80028a8:	602b      	str	r3, [r5, #0]
 80028aa:	e7d6      	b.n	800285a <_free_r+0x22>
 80028ac:	6820      	ldr	r0, [r4, #0]
 80028ae:	1821      	adds	r1, r4, r0
 80028b0:	428b      	cmp	r3, r1
 80028b2:	bf04      	itt	eq
 80028b4:	6819      	ldreq	r1, [r3, #0]
 80028b6:	685b      	ldreq	r3, [r3, #4]
 80028b8:	6063      	str	r3, [r4, #4]
 80028ba:	bf04      	itt	eq
 80028bc:	1809      	addeq	r1, r1, r0
 80028be:	6021      	streq	r1, [r4, #0]
 80028c0:	6054      	str	r4, [r2, #4]
 80028c2:	e7ca      	b.n	800285a <_free_r+0x22>
 80028c4:	bd38      	pop	{r3, r4, r5, pc}
 80028c6:	bf00      	nop
 80028c8:	200002d8 	.word	0x200002d8

080028cc <malloc>:
 80028cc:	4b02      	ldr	r3, [pc, #8]	@ (80028d8 <malloc+0xc>)
 80028ce:	4601      	mov	r1, r0
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	f000 b825 	b.w	8002920 <_malloc_r>
 80028d6:	bf00      	nop
 80028d8:	20000018 	.word	0x20000018

080028dc <sbrk_aligned>:
 80028dc:	b570      	push	{r4, r5, r6, lr}
 80028de:	4e0f      	ldr	r6, [pc, #60]	@ (800291c <sbrk_aligned+0x40>)
 80028e0:	460c      	mov	r4, r1
 80028e2:	6831      	ldr	r1, [r6, #0]
 80028e4:	4605      	mov	r5, r0
 80028e6:	b911      	cbnz	r1, 80028ee <sbrk_aligned+0x12>
 80028e8:	f000 fc62 	bl	80031b0 <_sbrk_r>
 80028ec:	6030      	str	r0, [r6, #0]
 80028ee:	4621      	mov	r1, r4
 80028f0:	4628      	mov	r0, r5
 80028f2:	f000 fc5d 	bl	80031b0 <_sbrk_r>
 80028f6:	1c43      	adds	r3, r0, #1
 80028f8:	d103      	bne.n	8002902 <sbrk_aligned+0x26>
 80028fa:	f04f 34ff 	mov.w	r4, #4294967295
 80028fe:	4620      	mov	r0, r4
 8002900:	bd70      	pop	{r4, r5, r6, pc}
 8002902:	1cc4      	adds	r4, r0, #3
 8002904:	f024 0403 	bic.w	r4, r4, #3
 8002908:	42a0      	cmp	r0, r4
 800290a:	d0f8      	beq.n	80028fe <sbrk_aligned+0x22>
 800290c:	1a21      	subs	r1, r4, r0
 800290e:	4628      	mov	r0, r5
 8002910:	f000 fc4e 	bl	80031b0 <_sbrk_r>
 8002914:	3001      	adds	r0, #1
 8002916:	d1f2      	bne.n	80028fe <sbrk_aligned+0x22>
 8002918:	e7ef      	b.n	80028fa <sbrk_aligned+0x1e>
 800291a:	bf00      	nop
 800291c:	200002d4 	.word	0x200002d4

08002920 <_malloc_r>:
 8002920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002924:	1ccd      	adds	r5, r1, #3
 8002926:	f025 0503 	bic.w	r5, r5, #3
 800292a:	3508      	adds	r5, #8
 800292c:	2d0c      	cmp	r5, #12
 800292e:	bf38      	it	cc
 8002930:	250c      	movcc	r5, #12
 8002932:	2d00      	cmp	r5, #0
 8002934:	4606      	mov	r6, r0
 8002936:	db01      	blt.n	800293c <_malloc_r+0x1c>
 8002938:	42a9      	cmp	r1, r5
 800293a:	d904      	bls.n	8002946 <_malloc_r+0x26>
 800293c:	230c      	movs	r3, #12
 800293e:	6033      	str	r3, [r6, #0]
 8002940:	2000      	movs	r0, #0
 8002942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002946:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002a1c <_malloc_r+0xfc>
 800294a:	f000 f869 	bl	8002a20 <__malloc_lock>
 800294e:	f8d8 3000 	ldr.w	r3, [r8]
 8002952:	461c      	mov	r4, r3
 8002954:	bb44      	cbnz	r4, 80029a8 <_malloc_r+0x88>
 8002956:	4629      	mov	r1, r5
 8002958:	4630      	mov	r0, r6
 800295a:	f7ff ffbf 	bl	80028dc <sbrk_aligned>
 800295e:	1c43      	adds	r3, r0, #1
 8002960:	4604      	mov	r4, r0
 8002962:	d158      	bne.n	8002a16 <_malloc_r+0xf6>
 8002964:	f8d8 4000 	ldr.w	r4, [r8]
 8002968:	4627      	mov	r7, r4
 800296a:	2f00      	cmp	r7, #0
 800296c:	d143      	bne.n	80029f6 <_malloc_r+0xd6>
 800296e:	2c00      	cmp	r4, #0
 8002970:	d04b      	beq.n	8002a0a <_malloc_r+0xea>
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	4639      	mov	r1, r7
 8002976:	4630      	mov	r0, r6
 8002978:	eb04 0903 	add.w	r9, r4, r3
 800297c:	f000 fc18 	bl	80031b0 <_sbrk_r>
 8002980:	4581      	cmp	r9, r0
 8002982:	d142      	bne.n	8002a0a <_malloc_r+0xea>
 8002984:	6821      	ldr	r1, [r4, #0]
 8002986:	1a6d      	subs	r5, r5, r1
 8002988:	4629      	mov	r1, r5
 800298a:	4630      	mov	r0, r6
 800298c:	f7ff ffa6 	bl	80028dc <sbrk_aligned>
 8002990:	3001      	adds	r0, #1
 8002992:	d03a      	beq.n	8002a0a <_malloc_r+0xea>
 8002994:	6823      	ldr	r3, [r4, #0]
 8002996:	442b      	add	r3, r5
 8002998:	6023      	str	r3, [r4, #0]
 800299a:	f8d8 3000 	ldr.w	r3, [r8]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	bb62      	cbnz	r2, 80029fc <_malloc_r+0xdc>
 80029a2:	f8c8 7000 	str.w	r7, [r8]
 80029a6:	e00f      	b.n	80029c8 <_malloc_r+0xa8>
 80029a8:	6822      	ldr	r2, [r4, #0]
 80029aa:	1b52      	subs	r2, r2, r5
 80029ac:	d420      	bmi.n	80029f0 <_malloc_r+0xd0>
 80029ae:	2a0b      	cmp	r2, #11
 80029b0:	d917      	bls.n	80029e2 <_malloc_r+0xc2>
 80029b2:	1961      	adds	r1, r4, r5
 80029b4:	42a3      	cmp	r3, r4
 80029b6:	6025      	str	r5, [r4, #0]
 80029b8:	bf18      	it	ne
 80029ba:	6059      	strne	r1, [r3, #4]
 80029bc:	6863      	ldr	r3, [r4, #4]
 80029be:	bf08      	it	eq
 80029c0:	f8c8 1000 	streq.w	r1, [r8]
 80029c4:	5162      	str	r2, [r4, r5]
 80029c6:	604b      	str	r3, [r1, #4]
 80029c8:	4630      	mov	r0, r6
 80029ca:	f000 f82f 	bl	8002a2c <__malloc_unlock>
 80029ce:	f104 000b 	add.w	r0, r4, #11
 80029d2:	1d23      	adds	r3, r4, #4
 80029d4:	f020 0007 	bic.w	r0, r0, #7
 80029d8:	1ac2      	subs	r2, r0, r3
 80029da:	bf1c      	itt	ne
 80029dc:	1a1b      	subne	r3, r3, r0
 80029de:	50a3      	strne	r3, [r4, r2]
 80029e0:	e7af      	b.n	8002942 <_malloc_r+0x22>
 80029e2:	6862      	ldr	r2, [r4, #4]
 80029e4:	42a3      	cmp	r3, r4
 80029e6:	bf0c      	ite	eq
 80029e8:	f8c8 2000 	streq.w	r2, [r8]
 80029ec:	605a      	strne	r2, [r3, #4]
 80029ee:	e7eb      	b.n	80029c8 <_malloc_r+0xa8>
 80029f0:	4623      	mov	r3, r4
 80029f2:	6864      	ldr	r4, [r4, #4]
 80029f4:	e7ae      	b.n	8002954 <_malloc_r+0x34>
 80029f6:	463c      	mov	r4, r7
 80029f8:	687f      	ldr	r7, [r7, #4]
 80029fa:	e7b6      	b.n	800296a <_malloc_r+0x4a>
 80029fc:	461a      	mov	r2, r3
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	42a3      	cmp	r3, r4
 8002a02:	d1fb      	bne.n	80029fc <_malloc_r+0xdc>
 8002a04:	2300      	movs	r3, #0
 8002a06:	6053      	str	r3, [r2, #4]
 8002a08:	e7de      	b.n	80029c8 <_malloc_r+0xa8>
 8002a0a:	230c      	movs	r3, #12
 8002a0c:	6033      	str	r3, [r6, #0]
 8002a0e:	4630      	mov	r0, r6
 8002a10:	f000 f80c 	bl	8002a2c <__malloc_unlock>
 8002a14:	e794      	b.n	8002940 <_malloc_r+0x20>
 8002a16:	6005      	str	r5, [r0, #0]
 8002a18:	e7d6      	b.n	80029c8 <_malloc_r+0xa8>
 8002a1a:	bf00      	nop
 8002a1c:	200002d8 	.word	0x200002d8

08002a20 <__malloc_lock>:
 8002a20:	4801      	ldr	r0, [pc, #4]	@ (8002a28 <__malloc_lock+0x8>)
 8002a22:	f7ff bee8 	b.w	80027f6 <__retarget_lock_acquire_recursive>
 8002a26:	bf00      	nop
 8002a28:	200002d0 	.word	0x200002d0

08002a2c <__malloc_unlock>:
 8002a2c:	4801      	ldr	r0, [pc, #4]	@ (8002a34 <__malloc_unlock+0x8>)
 8002a2e:	f7ff bee3 	b.w	80027f8 <__retarget_lock_release_recursive>
 8002a32:	bf00      	nop
 8002a34:	200002d0 	.word	0x200002d0

08002a38 <__ssputs_r>:
 8002a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a3c:	688e      	ldr	r6, [r1, #8]
 8002a3e:	461f      	mov	r7, r3
 8002a40:	42be      	cmp	r6, r7
 8002a42:	680b      	ldr	r3, [r1, #0]
 8002a44:	4682      	mov	sl, r0
 8002a46:	460c      	mov	r4, r1
 8002a48:	4690      	mov	r8, r2
 8002a4a:	d82d      	bhi.n	8002aa8 <__ssputs_r+0x70>
 8002a4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002a50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002a54:	d026      	beq.n	8002aa4 <__ssputs_r+0x6c>
 8002a56:	6965      	ldr	r5, [r4, #20]
 8002a58:	6909      	ldr	r1, [r1, #16]
 8002a5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a5e:	eba3 0901 	sub.w	r9, r3, r1
 8002a62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002a66:	1c7b      	adds	r3, r7, #1
 8002a68:	444b      	add	r3, r9
 8002a6a:	106d      	asrs	r5, r5, #1
 8002a6c:	429d      	cmp	r5, r3
 8002a6e:	bf38      	it	cc
 8002a70:	461d      	movcc	r5, r3
 8002a72:	0553      	lsls	r3, r2, #21
 8002a74:	d527      	bpl.n	8002ac6 <__ssputs_r+0x8e>
 8002a76:	4629      	mov	r1, r5
 8002a78:	f7ff ff52 	bl	8002920 <_malloc_r>
 8002a7c:	4606      	mov	r6, r0
 8002a7e:	b360      	cbz	r0, 8002ada <__ssputs_r+0xa2>
 8002a80:	6921      	ldr	r1, [r4, #16]
 8002a82:	464a      	mov	r2, r9
 8002a84:	f000 fba4 	bl	80031d0 <memcpy>
 8002a88:	89a3      	ldrh	r3, [r4, #12]
 8002a8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a92:	81a3      	strh	r3, [r4, #12]
 8002a94:	6126      	str	r6, [r4, #16]
 8002a96:	6165      	str	r5, [r4, #20]
 8002a98:	444e      	add	r6, r9
 8002a9a:	eba5 0509 	sub.w	r5, r5, r9
 8002a9e:	6026      	str	r6, [r4, #0]
 8002aa0:	60a5      	str	r5, [r4, #8]
 8002aa2:	463e      	mov	r6, r7
 8002aa4:	42be      	cmp	r6, r7
 8002aa6:	d900      	bls.n	8002aaa <__ssputs_r+0x72>
 8002aa8:	463e      	mov	r6, r7
 8002aaa:	6820      	ldr	r0, [r4, #0]
 8002aac:	4632      	mov	r2, r6
 8002aae:	4641      	mov	r1, r8
 8002ab0:	f000 fb64 	bl	800317c <memmove>
 8002ab4:	68a3      	ldr	r3, [r4, #8]
 8002ab6:	1b9b      	subs	r3, r3, r6
 8002ab8:	60a3      	str	r3, [r4, #8]
 8002aba:	6823      	ldr	r3, [r4, #0]
 8002abc:	4433      	add	r3, r6
 8002abe:	6023      	str	r3, [r4, #0]
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ac6:	462a      	mov	r2, r5
 8002ac8:	f000 fb97 	bl	80031fa <_realloc_r>
 8002acc:	4606      	mov	r6, r0
 8002ace:	2800      	cmp	r0, #0
 8002ad0:	d1e0      	bne.n	8002a94 <__ssputs_r+0x5c>
 8002ad2:	6921      	ldr	r1, [r4, #16]
 8002ad4:	4650      	mov	r0, sl
 8002ad6:	f7ff feaf 	bl	8002838 <_free_r>
 8002ada:	230c      	movs	r3, #12
 8002adc:	f8ca 3000 	str.w	r3, [sl]
 8002ae0:	89a3      	ldrh	r3, [r4, #12]
 8002ae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ae6:	81a3      	strh	r3, [r4, #12]
 8002ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aec:	e7e9      	b.n	8002ac2 <__ssputs_r+0x8a>
	...

08002af0 <_svfiprintf_r>:
 8002af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002af4:	4698      	mov	r8, r3
 8002af6:	898b      	ldrh	r3, [r1, #12]
 8002af8:	061b      	lsls	r3, r3, #24
 8002afa:	b09d      	sub	sp, #116	@ 0x74
 8002afc:	4607      	mov	r7, r0
 8002afe:	460d      	mov	r5, r1
 8002b00:	4614      	mov	r4, r2
 8002b02:	d510      	bpl.n	8002b26 <_svfiprintf_r+0x36>
 8002b04:	690b      	ldr	r3, [r1, #16]
 8002b06:	b973      	cbnz	r3, 8002b26 <_svfiprintf_r+0x36>
 8002b08:	2140      	movs	r1, #64	@ 0x40
 8002b0a:	f7ff ff09 	bl	8002920 <_malloc_r>
 8002b0e:	6028      	str	r0, [r5, #0]
 8002b10:	6128      	str	r0, [r5, #16]
 8002b12:	b930      	cbnz	r0, 8002b22 <_svfiprintf_r+0x32>
 8002b14:	230c      	movs	r3, #12
 8002b16:	603b      	str	r3, [r7, #0]
 8002b18:	f04f 30ff 	mov.w	r0, #4294967295
 8002b1c:	b01d      	add	sp, #116	@ 0x74
 8002b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b22:	2340      	movs	r3, #64	@ 0x40
 8002b24:	616b      	str	r3, [r5, #20]
 8002b26:	2300      	movs	r3, #0
 8002b28:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b2a:	2320      	movs	r3, #32
 8002b2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002b30:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b34:	2330      	movs	r3, #48	@ 0x30
 8002b36:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002cd4 <_svfiprintf_r+0x1e4>
 8002b3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002b3e:	f04f 0901 	mov.w	r9, #1
 8002b42:	4623      	mov	r3, r4
 8002b44:	469a      	mov	sl, r3
 8002b46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b4a:	b10a      	cbz	r2, 8002b50 <_svfiprintf_r+0x60>
 8002b4c:	2a25      	cmp	r2, #37	@ 0x25
 8002b4e:	d1f9      	bne.n	8002b44 <_svfiprintf_r+0x54>
 8002b50:	ebba 0b04 	subs.w	fp, sl, r4
 8002b54:	d00b      	beq.n	8002b6e <_svfiprintf_r+0x7e>
 8002b56:	465b      	mov	r3, fp
 8002b58:	4622      	mov	r2, r4
 8002b5a:	4629      	mov	r1, r5
 8002b5c:	4638      	mov	r0, r7
 8002b5e:	f7ff ff6b 	bl	8002a38 <__ssputs_r>
 8002b62:	3001      	adds	r0, #1
 8002b64:	f000 80a7 	beq.w	8002cb6 <_svfiprintf_r+0x1c6>
 8002b68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002b6a:	445a      	add	r2, fp
 8002b6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8002b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 809f 	beq.w	8002cb6 <_svfiprintf_r+0x1c6>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b82:	f10a 0a01 	add.w	sl, sl, #1
 8002b86:	9304      	str	r3, [sp, #16]
 8002b88:	9307      	str	r3, [sp, #28]
 8002b8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002b8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002b90:	4654      	mov	r4, sl
 8002b92:	2205      	movs	r2, #5
 8002b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b98:	484e      	ldr	r0, [pc, #312]	@ (8002cd4 <_svfiprintf_r+0x1e4>)
 8002b9a:	f7fd fb21 	bl	80001e0 <memchr>
 8002b9e:	9a04      	ldr	r2, [sp, #16]
 8002ba0:	b9d8      	cbnz	r0, 8002bda <_svfiprintf_r+0xea>
 8002ba2:	06d0      	lsls	r0, r2, #27
 8002ba4:	bf44      	itt	mi
 8002ba6:	2320      	movmi	r3, #32
 8002ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002bac:	0711      	lsls	r1, r2, #28
 8002bae:	bf44      	itt	mi
 8002bb0:	232b      	movmi	r3, #43	@ 0x2b
 8002bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8002bba:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bbc:	d015      	beq.n	8002bea <_svfiprintf_r+0xfa>
 8002bbe:	9a07      	ldr	r2, [sp, #28]
 8002bc0:	4654      	mov	r4, sl
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	f04f 0c0a 	mov.w	ip, #10
 8002bc8:	4621      	mov	r1, r4
 8002bca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002bce:	3b30      	subs	r3, #48	@ 0x30
 8002bd0:	2b09      	cmp	r3, #9
 8002bd2:	d94b      	bls.n	8002c6c <_svfiprintf_r+0x17c>
 8002bd4:	b1b0      	cbz	r0, 8002c04 <_svfiprintf_r+0x114>
 8002bd6:	9207      	str	r2, [sp, #28]
 8002bd8:	e014      	b.n	8002c04 <_svfiprintf_r+0x114>
 8002bda:	eba0 0308 	sub.w	r3, r0, r8
 8002bde:	fa09 f303 	lsl.w	r3, r9, r3
 8002be2:	4313      	orrs	r3, r2
 8002be4:	9304      	str	r3, [sp, #16]
 8002be6:	46a2      	mov	sl, r4
 8002be8:	e7d2      	b.n	8002b90 <_svfiprintf_r+0xa0>
 8002bea:	9b03      	ldr	r3, [sp, #12]
 8002bec:	1d19      	adds	r1, r3, #4
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	9103      	str	r1, [sp, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	bfbb      	ittet	lt
 8002bf6:	425b      	neglt	r3, r3
 8002bf8:	f042 0202 	orrlt.w	r2, r2, #2
 8002bfc:	9307      	strge	r3, [sp, #28]
 8002bfe:	9307      	strlt	r3, [sp, #28]
 8002c00:	bfb8      	it	lt
 8002c02:	9204      	strlt	r2, [sp, #16]
 8002c04:	7823      	ldrb	r3, [r4, #0]
 8002c06:	2b2e      	cmp	r3, #46	@ 0x2e
 8002c08:	d10a      	bne.n	8002c20 <_svfiprintf_r+0x130>
 8002c0a:	7863      	ldrb	r3, [r4, #1]
 8002c0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c0e:	d132      	bne.n	8002c76 <_svfiprintf_r+0x186>
 8002c10:	9b03      	ldr	r3, [sp, #12]
 8002c12:	1d1a      	adds	r2, r3, #4
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	9203      	str	r2, [sp, #12]
 8002c18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002c1c:	3402      	adds	r4, #2
 8002c1e:	9305      	str	r3, [sp, #20]
 8002c20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002ce4 <_svfiprintf_r+0x1f4>
 8002c24:	7821      	ldrb	r1, [r4, #0]
 8002c26:	2203      	movs	r2, #3
 8002c28:	4650      	mov	r0, sl
 8002c2a:	f7fd fad9 	bl	80001e0 <memchr>
 8002c2e:	b138      	cbz	r0, 8002c40 <_svfiprintf_r+0x150>
 8002c30:	9b04      	ldr	r3, [sp, #16]
 8002c32:	eba0 000a 	sub.w	r0, r0, sl
 8002c36:	2240      	movs	r2, #64	@ 0x40
 8002c38:	4082      	lsls	r2, r0
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	3401      	adds	r4, #1
 8002c3e:	9304      	str	r3, [sp, #16]
 8002c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c44:	4824      	ldr	r0, [pc, #144]	@ (8002cd8 <_svfiprintf_r+0x1e8>)
 8002c46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002c4a:	2206      	movs	r2, #6
 8002c4c:	f7fd fac8 	bl	80001e0 <memchr>
 8002c50:	2800      	cmp	r0, #0
 8002c52:	d036      	beq.n	8002cc2 <_svfiprintf_r+0x1d2>
 8002c54:	4b21      	ldr	r3, [pc, #132]	@ (8002cdc <_svfiprintf_r+0x1ec>)
 8002c56:	bb1b      	cbnz	r3, 8002ca0 <_svfiprintf_r+0x1b0>
 8002c58:	9b03      	ldr	r3, [sp, #12]
 8002c5a:	3307      	adds	r3, #7
 8002c5c:	f023 0307 	bic.w	r3, r3, #7
 8002c60:	3308      	adds	r3, #8
 8002c62:	9303      	str	r3, [sp, #12]
 8002c64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002c66:	4433      	add	r3, r6
 8002c68:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c6a:	e76a      	b.n	8002b42 <_svfiprintf_r+0x52>
 8002c6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c70:	460c      	mov	r4, r1
 8002c72:	2001      	movs	r0, #1
 8002c74:	e7a8      	b.n	8002bc8 <_svfiprintf_r+0xd8>
 8002c76:	2300      	movs	r3, #0
 8002c78:	3401      	adds	r4, #1
 8002c7a:	9305      	str	r3, [sp, #20]
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f04f 0c0a 	mov.w	ip, #10
 8002c82:	4620      	mov	r0, r4
 8002c84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c88:	3a30      	subs	r2, #48	@ 0x30
 8002c8a:	2a09      	cmp	r2, #9
 8002c8c:	d903      	bls.n	8002c96 <_svfiprintf_r+0x1a6>
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0c6      	beq.n	8002c20 <_svfiprintf_r+0x130>
 8002c92:	9105      	str	r1, [sp, #20]
 8002c94:	e7c4      	b.n	8002c20 <_svfiprintf_r+0x130>
 8002c96:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e7f0      	b.n	8002c82 <_svfiprintf_r+0x192>
 8002ca0:	ab03      	add	r3, sp, #12
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	462a      	mov	r2, r5
 8002ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce0 <_svfiprintf_r+0x1f0>)
 8002ca8:	a904      	add	r1, sp, #16
 8002caa:	4638      	mov	r0, r7
 8002cac:	f3af 8000 	nop.w
 8002cb0:	1c42      	adds	r2, r0, #1
 8002cb2:	4606      	mov	r6, r0
 8002cb4:	d1d6      	bne.n	8002c64 <_svfiprintf_r+0x174>
 8002cb6:	89ab      	ldrh	r3, [r5, #12]
 8002cb8:	065b      	lsls	r3, r3, #25
 8002cba:	f53f af2d 	bmi.w	8002b18 <_svfiprintf_r+0x28>
 8002cbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002cc0:	e72c      	b.n	8002b1c <_svfiprintf_r+0x2c>
 8002cc2:	ab03      	add	r3, sp, #12
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	462a      	mov	r2, r5
 8002cc8:	4b05      	ldr	r3, [pc, #20]	@ (8002ce0 <_svfiprintf_r+0x1f0>)
 8002cca:	a904      	add	r1, sp, #16
 8002ccc:	4638      	mov	r0, r7
 8002cce:	f000 f879 	bl	8002dc4 <_printf_i>
 8002cd2:	e7ed      	b.n	8002cb0 <_svfiprintf_r+0x1c0>
 8002cd4:	08003b8b 	.word	0x08003b8b
 8002cd8:	08003b95 	.word	0x08003b95
 8002cdc:	00000000 	.word	0x00000000
 8002ce0:	08002a39 	.word	0x08002a39
 8002ce4:	08003b91 	.word	0x08003b91

08002ce8 <_printf_common>:
 8002ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cec:	4616      	mov	r6, r2
 8002cee:	4698      	mov	r8, r3
 8002cf0:	688a      	ldr	r2, [r1, #8]
 8002cf2:	690b      	ldr	r3, [r1, #16]
 8002cf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	bfb8      	it	lt
 8002cfc:	4613      	movlt	r3, r2
 8002cfe:	6033      	str	r3, [r6, #0]
 8002d00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002d04:	4607      	mov	r7, r0
 8002d06:	460c      	mov	r4, r1
 8002d08:	b10a      	cbz	r2, 8002d0e <_printf_common+0x26>
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	6033      	str	r3, [r6, #0]
 8002d0e:	6823      	ldr	r3, [r4, #0]
 8002d10:	0699      	lsls	r1, r3, #26
 8002d12:	bf42      	ittt	mi
 8002d14:	6833      	ldrmi	r3, [r6, #0]
 8002d16:	3302      	addmi	r3, #2
 8002d18:	6033      	strmi	r3, [r6, #0]
 8002d1a:	6825      	ldr	r5, [r4, #0]
 8002d1c:	f015 0506 	ands.w	r5, r5, #6
 8002d20:	d106      	bne.n	8002d30 <_printf_common+0x48>
 8002d22:	f104 0a19 	add.w	sl, r4, #25
 8002d26:	68e3      	ldr	r3, [r4, #12]
 8002d28:	6832      	ldr	r2, [r6, #0]
 8002d2a:	1a9b      	subs	r3, r3, r2
 8002d2c:	42ab      	cmp	r3, r5
 8002d2e:	dc26      	bgt.n	8002d7e <_printf_common+0x96>
 8002d30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002d34:	6822      	ldr	r2, [r4, #0]
 8002d36:	3b00      	subs	r3, #0
 8002d38:	bf18      	it	ne
 8002d3a:	2301      	movne	r3, #1
 8002d3c:	0692      	lsls	r2, r2, #26
 8002d3e:	d42b      	bmi.n	8002d98 <_printf_common+0xb0>
 8002d40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002d44:	4641      	mov	r1, r8
 8002d46:	4638      	mov	r0, r7
 8002d48:	47c8      	blx	r9
 8002d4a:	3001      	adds	r0, #1
 8002d4c:	d01e      	beq.n	8002d8c <_printf_common+0xa4>
 8002d4e:	6823      	ldr	r3, [r4, #0]
 8002d50:	6922      	ldr	r2, [r4, #16]
 8002d52:	f003 0306 	and.w	r3, r3, #6
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	bf02      	ittt	eq
 8002d5a:	68e5      	ldreq	r5, [r4, #12]
 8002d5c:	6833      	ldreq	r3, [r6, #0]
 8002d5e:	1aed      	subeq	r5, r5, r3
 8002d60:	68a3      	ldr	r3, [r4, #8]
 8002d62:	bf0c      	ite	eq
 8002d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d68:	2500      	movne	r5, #0
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	bfc4      	itt	gt
 8002d6e:	1a9b      	subgt	r3, r3, r2
 8002d70:	18ed      	addgt	r5, r5, r3
 8002d72:	2600      	movs	r6, #0
 8002d74:	341a      	adds	r4, #26
 8002d76:	42b5      	cmp	r5, r6
 8002d78:	d11a      	bne.n	8002db0 <_printf_common+0xc8>
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	e008      	b.n	8002d90 <_printf_common+0xa8>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	4652      	mov	r2, sl
 8002d82:	4641      	mov	r1, r8
 8002d84:	4638      	mov	r0, r7
 8002d86:	47c8      	blx	r9
 8002d88:	3001      	adds	r0, #1
 8002d8a:	d103      	bne.n	8002d94 <_printf_common+0xac>
 8002d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d94:	3501      	adds	r5, #1
 8002d96:	e7c6      	b.n	8002d26 <_printf_common+0x3e>
 8002d98:	18e1      	adds	r1, r4, r3
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	2030      	movs	r0, #48	@ 0x30
 8002d9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002da2:	4422      	add	r2, r4
 8002da4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002da8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002dac:	3302      	adds	r3, #2
 8002dae:	e7c7      	b.n	8002d40 <_printf_common+0x58>
 8002db0:	2301      	movs	r3, #1
 8002db2:	4622      	mov	r2, r4
 8002db4:	4641      	mov	r1, r8
 8002db6:	4638      	mov	r0, r7
 8002db8:	47c8      	blx	r9
 8002dba:	3001      	adds	r0, #1
 8002dbc:	d0e6      	beq.n	8002d8c <_printf_common+0xa4>
 8002dbe:	3601      	adds	r6, #1
 8002dc0:	e7d9      	b.n	8002d76 <_printf_common+0x8e>
	...

08002dc4 <_printf_i>:
 8002dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002dc8:	7e0f      	ldrb	r7, [r1, #24]
 8002dca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002dcc:	2f78      	cmp	r7, #120	@ 0x78
 8002dce:	4691      	mov	r9, r2
 8002dd0:	4680      	mov	r8, r0
 8002dd2:	460c      	mov	r4, r1
 8002dd4:	469a      	mov	sl, r3
 8002dd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002dda:	d807      	bhi.n	8002dec <_printf_i+0x28>
 8002ddc:	2f62      	cmp	r7, #98	@ 0x62
 8002dde:	d80a      	bhi.n	8002df6 <_printf_i+0x32>
 8002de0:	2f00      	cmp	r7, #0
 8002de2:	f000 80d1 	beq.w	8002f88 <_printf_i+0x1c4>
 8002de6:	2f58      	cmp	r7, #88	@ 0x58
 8002de8:	f000 80b8 	beq.w	8002f5c <_printf_i+0x198>
 8002dec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002df0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002df4:	e03a      	b.n	8002e6c <_printf_i+0xa8>
 8002df6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002dfa:	2b15      	cmp	r3, #21
 8002dfc:	d8f6      	bhi.n	8002dec <_printf_i+0x28>
 8002dfe:	a101      	add	r1, pc, #4	@ (adr r1, 8002e04 <_printf_i+0x40>)
 8002e00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002e04:	08002e5d 	.word	0x08002e5d
 8002e08:	08002e71 	.word	0x08002e71
 8002e0c:	08002ded 	.word	0x08002ded
 8002e10:	08002ded 	.word	0x08002ded
 8002e14:	08002ded 	.word	0x08002ded
 8002e18:	08002ded 	.word	0x08002ded
 8002e1c:	08002e71 	.word	0x08002e71
 8002e20:	08002ded 	.word	0x08002ded
 8002e24:	08002ded 	.word	0x08002ded
 8002e28:	08002ded 	.word	0x08002ded
 8002e2c:	08002ded 	.word	0x08002ded
 8002e30:	08002f6f 	.word	0x08002f6f
 8002e34:	08002e9b 	.word	0x08002e9b
 8002e38:	08002f29 	.word	0x08002f29
 8002e3c:	08002ded 	.word	0x08002ded
 8002e40:	08002ded 	.word	0x08002ded
 8002e44:	08002f91 	.word	0x08002f91
 8002e48:	08002ded 	.word	0x08002ded
 8002e4c:	08002e9b 	.word	0x08002e9b
 8002e50:	08002ded 	.word	0x08002ded
 8002e54:	08002ded 	.word	0x08002ded
 8002e58:	08002f31 	.word	0x08002f31
 8002e5c:	6833      	ldr	r3, [r6, #0]
 8002e5e:	1d1a      	adds	r2, r3, #4
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6032      	str	r2, [r6, #0]
 8002e64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002e68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e09c      	b.n	8002faa <_printf_i+0x1e6>
 8002e70:	6833      	ldr	r3, [r6, #0]
 8002e72:	6820      	ldr	r0, [r4, #0]
 8002e74:	1d19      	adds	r1, r3, #4
 8002e76:	6031      	str	r1, [r6, #0]
 8002e78:	0606      	lsls	r6, r0, #24
 8002e7a:	d501      	bpl.n	8002e80 <_printf_i+0xbc>
 8002e7c:	681d      	ldr	r5, [r3, #0]
 8002e7e:	e003      	b.n	8002e88 <_printf_i+0xc4>
 8002e80:	0645      	lsls	r5, r0, #25
 8002e82:	d5fb      	bpl.n	8002e7c <_printf_i+0xb8>
 8002e84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002e88:	2d00      	cmp	r5, #0
 8002e8a:	da03      	bge.n	8002e94 <_printf_i+0xd0>
 8002e8c:	232d      	movs	r3, #45	@ 0x2d
 8002e8e:	426d      	negs	r5, r5
 8002e90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e94:	4858      	ldr	r0, [pc, #352]	@ (8002ff8 <_printf_i+0x234>)
 8002e96:	230a      	movs	r3, #10
 8002e98:	e011      	b.n	8002ebe <_printf_i+0xfa>
 8002e9a:	6821      	ldr	r1, [r4, #0]
 8002e9c:	6833      	ldr	r3, [r6, #0]
 8002e9e:	0608      	lsls	r0, r1, #24
 8002ea0:	f853 5b04 	ldr.w	r5, [r3], #4
 8002ea4:	d402      	bmi.n	8002eac <_printf_i+0xe8>
 8002ea6:	0649      	lsls	r1, r1, #25
 8002ea8:	bf48      	it	mi
 8002eaa:	b2ad      	uxthmi	r5, r5
 8002eac:	2f6f      	cmp	r7, #111	@ 0x6f
 8002eae:	4852      	ldr	r0, [pc, #328]	@ (8002ff8 <_printf_i+0x234>)
 8002eb0:	6033      	str	r3, [r6, #0]
 8002eb2:	bf14      	ite	ne
 8002eb4:	230a      	movne	r3, #10
 8002eb6:	2308      	moveq	r3, #8
 8002eb8:	2100      	movs	r1, #0
 8002eba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002ebe:	6866      	ldr	r6, [r4, #4]
 8002ec0:	60a6      	str	r6, [r4, #8]
 8002ec2:	2e00      	cmp	r6, #0
 8002ec4:	db05      	blt.n	8002ed2 <_printf_i+0x10e>
 8002ec6:	6821      	ldr	r1, [r4, #0]
 8002ec8:	432e      	orrs	r6, r5
 8002eca:	f021 0104 	bic.w	r1, r1, #4
 8002ece:	6021      	str	r1, [r4, #0]
 8002ed0:	d04b      	beq.n	8002f6a <_printf_i+0x1a6>
 8002ed2:	4616      	mov	r6, r2
 8002ed4:	fbb5 f1f3 	udiv	r1, r5, r3
 8002ed8:	fb03 5711 	mls	r7, r3, r1, r5
 8002edc:	5dc7      	ldrb	r7, [r0, r7]
 8002ede:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002ee2:	462f      	mov	r7, r5
 8002ee4:	42bb      	cmp	r3, r7
 8002ee6:	460d      	mov	r5, r1
 8002ee8:	d9f4      	bls.n	8002ed4 <_printf_i+0x110>
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d10b      	bne.n	8002f06 <_printf_i+0x142>
 8002eee:	6823      	ldr	r3, [r4, #0]
 8002ef0:	07df      	lsls	r7, r3, #31
 8002ef2:	d508      	bpl.n	8002f06 <_printf_i+0x142>
 8002ef4:	6923      	ldr	r3, [r4, #16]
 8002ef6:	6861      	ldr	r1, [r4, #4]
 8002ef8:	4299      	cmp	r1, r3
 8002efa:	bfde      	ittt	le
 8002efc:	2330      	movle	r3, #48	@ 0x30
 8002efe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002f02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002f06:	1b92      	subs	r2, r2, r6
 8002f08:	6122      	str	r2, [r4, #16]
 8002f0a:	f8cd a000 	str.w	sl, [sp]
 8002f0e:	464b      	mov	r3, r9
 8002f10:	aa03      	add	r2, sp, #12
 8002f12:	4621      	mov	r1, r4
 8002f14:	4640      	mov	r0, r8
 8002f16:	f7ff fee7 	bl	8002ce8 <_printf_common>
 8002f1a:	3001      	adds	r0, #1
 8002f1c:	d14a      	bne.n	8002fb4 <_printf_i+0x1f0>
 8002f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f22:	b004      	add	sp, #16
 8002f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f28:	6823      	ldr	r3, [r4, #0]
 8002f2a:	f043 0320 	orr.w	r3, r3, #32
 8002f2e:	6023      	str	r3, [r4, #0]
 8002f30:	4832      	ldr	r0, [pc, #200]	@ (8002ffc <_printf_i+0x238>)
 8002f32:	2778      	movs	r7, #120	@ 0x78
 8002f34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002f38:	6823      	ldr	r3, [r4, #0]
 8002f3a:	6831      	ldr	r1, [r6, #0]
 8002f3c:	061f      	lsls	r7, r3, #24
 8002f3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8002f42:	d402      	bmi.n	8002f4a <_printf_i+0x186>
 8002f44:	065f      	lsls	r7, r3, #25
 8002f46:	bf48      	it	mi
 8002f48:	b2ad      	uxthmi	r5, r5
 8002f4a:	6031      	str	r1, [r6, #0]
 8002f4c:	07d9      	lsls	r1, r3, #31
 8002f4e:	bf44      	itt	mi
 8002f50:	f043 0320 	orrmi.w	r3, r3, #32
 8002f54:	6023      	strmi	r3, [r4, #0]
 8002f56:	b11d      	cbz	r5, 8002f60 <_printf_i+0x19c>
 8002f58:	2310      	movs	r3, #16
 8002f5a:	e7ad      	b.n	8002eb8 <_printf_i+0xf4>
 8002f5c:	4826      	ldr	r0, [pc, #152]	@ (8002ff8 <_printf_i+0x234>)
 8002f5e:	e7e9      	b.n	8002f34 <_printf_i+0x170>
 8002f60:	6823      	ldr	r3, [r4, #0]
 8002f62:	f023 0320 	bic.w	r3, r3, #32
 8002f66:	6023      	str	r3, [r4, #0]
 8002f68:	e7f6      	b.n	8002f58 <_printf_i+0x194>
 8002f6a:	4616      	mov	r6, r2
 8002f6c:	e7bd      	b.n	8002eea <_printf_i+0x126>
 8002f6e:	6833      	ldr	r3, [r6, #0]
 8002f70:	6825      	ldr	r5, [r4, #0]
 8002f72:	6961      	ldr	r1, [r4, #20]
 8002f74:	1d18      	adds	r0, r3, #4
 8002f76:	6030      	str	r0, [r6, #0]
 8002f78:	062e      	lsls	r6, r5, #24
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	d501      	bpl.n	8002f82 <_printf_i+0x1be>
 8002f7e:	6019      	str	r1, [r3, #0]
 8002f80:	e002      	b.n	8002f88 <_printf_i+0x1c4>
 8002f82:	0668      	lsls	r0, r5, #25
 8002f84:	d5fb      	bpl.n	8002f7e <_printf_i+0x1ba>
 8002f86:	8019      	strh	r1, [r3, #0]
 8002f88:	2300      	movs	r3, #0
 8002f8a:	6123      	str	r3, [r4, #16]
 8002f8c:	4616      	mov	r6, r2
 8002f8e:	e7bc      	b.n	8002f0a <_printf_i+0x146>
 8002f90:	6833      	ldr	r3, [r6, #0]
 8002f92:	1d1a      	adds	r2, r3, #4
 8002f94:	6032      	str	r2, [r6, #0]
 8002f96:	681e      	ldr	r6, [r3, #0]
 8002f98:	6862      	ldr	r2, [r4, #4]
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4630      	mov	r0, r6
 8002f9e:	f7fd f91f 	bl	80001e0 <memchr>
 8002fa2:	b108      	cbz	r0, 8002fa8 <_printf_i+0x1e4>
 8002fa4:	1b80      	subs	r0, r0, r6
 8002fa6:	6060      	str	r0, [r4, #4]
 8002fa8:	6863      	ldr	r3, [r4, #4]
 8002faa:	6123      	str	r3, [r4, #16]
 8002fac:	2300      	movs	r3, #0
 8002fae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002fb2:	e7aa      	b.n	8002f0a <_printf_i+0x146>
 8002fb4:	6923      	ldr	r3, [r4, #16]
 8002fb6:	4632      	mov	r2, r6
 8002fb8:	4649      	mov	r1, r9
 8002fba:	4640      	mov	r0, r8
 8002fbc:	47d0      	blx	sl
 8002fbe:	3001      	adds	r0, #1
 8002fc0:	d0ad      	beq.n	8002f1e <_printf_i+0x15a>
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	079b      	lsls	r3, r3, #30
 8002fc6:	d413      	bmi.n	8002ff0 <_printf_i+0x22c>
 8002fc8:	68e0      	ldr	r0, [r4, #12]
 8002fca:	9b03      	ldr	r3, [sp, #12]
 8002fcc:	4298      	cmp	r0, r3
 8002fce:	bfb8      	it	lt
 8002fd0:	4618      	movlt	r0, r3
 8002fd2:	e7a6      	b.n	8002f22 <_printf_i+0x15e>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	4632      	mov	r2, r6
 8002fd8:	4649      	mov	r1, r9
 8002fda:	4640      	mov	r0, r8
 8002fdc:	47d0      	blx	sl
 8002fde:	3001      	adds	r0, #1
 8002fe0:	d09d      	beq.n	8002f1e <_printf_i+0x15a>
 8002fe2:	3501      	adds	r5, #1
 8002fe4:	68e3      	ldr	r3, [r4, #12]
 8002fe6:	9903      	ldr	r1, [sp, #12]
 8002fe8:	1a5b      	subs	r3, r3, r1
 8002fea:	42ab      	cmp	r3, r5
 8002fec:	dcf2      	bgt.n	8002fd4 <_printf_i+0x210>
 8002fee:	e7eb      	b.n	8002fc8 <_printf_i+0x204>
 8002ff0:	2500      	movs	r5, #0
 8002ff2:	f104 0619 	add.w	r6, r4, #25
 8002ff6:	e7f5      	b.n	8002fe4 <_printf_i+0x220>
 8002ff8:	08003b9c 	.word	0x08003b9c
 8002ffc:	08003bad 	.word	0x08003bad

08003000 <__sflush_r>:
 8003000:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003008:	0716      	lsls	r6, r2, #28
 800300a:	4605      	mov	r5, r0
 800300c:	460c      	mov	r4, r1
 800300e:	d454      	bmi.n	80030ba <__sflush_r+0xba>
 8003010:	684b      	ldr	r3, [r1, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	dc02      	bgt.n	800301c <__sflush_r+0x1c>
 8003016:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003018:	2b00      	cmp	r3, #0
 800301a:	dd48      	ble.n	80030ae <__sflush_r+0xae>
 800301c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800301e:	2e00      	cmp	r6, #0
 8003020:	d045      	beq.n	80030ae <__sflush_r+0xae>
 8003022:	2300      	movs	r3, #0
 8003024:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003028:	682f      	ldr	r7, [r5, #0]
 800302a:	6a21      	ldr	r1, [r4, #32]
 800302c:	602b      	str	r3, [r5, #0]
 800302e:	d030      	beq.n	8003092 <__sflush_r+0x92>
 8003030:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003032:	89a3      	ldrh	r3, [r4, #12]
 8003034:	0759      	lsls	r1, r3, #29
 8003036:	d505      	bpl.n	8003044 <__sflush_r+0x44>
 8003038:	6863      	ldr	r3, [r4, #4]
 800303a:	1ad2      	subs	r2, r2, r3
 800303c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800303e:	b10b      	cbz	r3, 8003044 <__sflush_r+0x44>
 8003040:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003042:	1ad2      	subs	r2, r2, r3
 8003044:	2300      	movs	r3, #0
 8003046:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003048:	6a21      	ldr	r1, [r4, #32]
 800304a:	4628      	mov	r0, r5
 800304c:	47b0      	blx	r6
 800304e:	1c43      	adds	r3, r0, #1
 8003050:	89a3      	ldrh	r3, [r4, #12]
 8003052:	d106      	bne.n	8003062 <__sflush_r+0x62>
 8003054:	6829      	ldr	r1, [r5, #0]
 8003056:	291d      	cmp	r1, #29
 8003058:	d82b      	bhi.n	80030b2 <__sflush_r+0xb2>
 800305a:	4a2a      	ldr	r2, [pc, #168]	@ (8003104 <__sflush_r+0x104>)
 800305c:	40ca      	lsrs	r2, r1
 800305e:	07d6      	lsls	r6, r2, #31
 8003060:	d527      	bpl.n	80030b2 <__sflush_r+0xb2>
 8003062:	2200      	movs	r2, #0
 8003064:	6062      	str	r2, [r4, #4]
 8003066:	04d9      	lsls	r1, r3, #19
 8003068:	6922      	ldr	r2, [r4, #16]
 800306a:	6022      	str	r2, [r4, #0]
 800306c:	d504      	bpl.n	8003078 <__sflush_r+0x78>
 800306e:	1c42      	adds	r2, r0, #1
 8003070:	d101      	bne.n	8003076 <__sflush_r+0x76>
 8003072:	682b      	ldr	r3, [r5, #0]
 8003074:	b903      	cbnz	r3, 8003078 <__sflush_r+0x78>
 8003076:	6560      	str	r0, [r4, #84]	@ 0x54
 8003078:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800307a:	602f      	str	r7, [r5, #0]
 800307c:	b1b9      	cbz	r1, 80030ae <__sflush_r+0xae>
 800307e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003082:	4299      	cmp	r1, r3
 8003084:	d002      	beq.n	800308c <__sflush_r+0x8c>
 8003086:	4628      	mov	r0, r5
 8003088:	f7ff fbd6 	bl	8002838 <_free_r>
 800308c:	2300      	movs	r3, #0
 800308e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003090:	e00d      	b.n	80030ae <__sflush_r+0xae>
 8003092:	2301      	movs	r3, #1
 8003094:	4628      	mov	r0, r5
 8003096:	47b0      	blx	r6
 8003098:	4602      	mov	r2, r0
 800309a:	1c50      	adds	r0, r2, #1
 800309c:	d1c9      	bne.n	8003032 <__sflush_r+0x32>
 800309e:	682b      	ldr	r3, [r5, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0c6      	beq.n	8003032 <__sflush_r+0x32>
 80030a4:	2b1d      	cmp	r3, #29
 80030a6:	d001      	beq.n	80030ac <__sflush_r+0xac>
 80030a8:	2b16      	cmp	r3, #22
 80030aa:	d11e      	bne.n	80030ea <__sflush_r+0xea>
 80030ac:	602f      	str	r7, [r5, #0]
 80030ae:	2000      	movs	r0, #0
 80030b0:	e022      	b.n	80030f8 <__sflush_r+0xf8>
 80030b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030b6:	b21b      	sxth	r3, r3
 80030b8:	e01b      	b.n	80030f2 <__sflush_r+0xf2>
 80030ba:	690f      	ldr	r7, [r1, #16]
 80030bc:	2f00      	cmp	r7, #0
 80030be:	d0f6      	beq.n	80030ae <__sflush_r+0xae>
 80030c0:	0793      	lsls	r3, r2, #30
 80030c2:	680e      	ldr	r6, [r1, #0]
 80030c4:	bf08      	it	eq
 80030c6:	694b      	ldreq	r3, [r1, #20]
 80030c8:	600f      	str	r7, [r1, #0]
 80030ca:	bf18      	it	ne
 80030cc:	2300      	movne	r3, #0
 80030ce:	eba6 0807 	sub.w	r8, r6, r7
 80030d2:	608b      	str	r3, [r1, #8]
 80030d4:	f1b8 0f00 	cmp.w	r8, #0
 80030d8:	dde9      	ble.n	80030ae <__sflush_r+0xae>
 80030da:	6a21      	ldr	r1, [r4, #32]
 80030dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80030de:	4643      	mov	r3, r8
 80030e0:	463a      	mov	r2, r7
 80030e2:	4628      	mov	r0, r5
 80030e4:	47b0      	blx	r6
 80030e6:	2800      	cmp	r0, #0
 80030e8:	dc08      	bgt.n	80030fc <__sflush_r+0xfc>
 80030ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030f2:	81a3      	strh	r3, [r4, #12]
 80030f4:	f04f 30ff 	mov.w	r0, #4294967295
 80030f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030fc:	4407      	add	r7, r0
 80030fe:	eba8 0800 	sub.w	r8, r8, r0
 8003102:	e7e7      	b.n	80030d4 <__sflush_r+0xd4>
 8003104:	20400001 	.word	0x20400001

08003108 <_fflush_r>:
 8003108:	b538      	push	{r3, r4, r5, lr}
 800310a:	690b      	ldr	r3, [r1, #16]
 800310c:	4605      	mov	r5, r0
 800310e:	460c      	mov	r4, r1
 8003110:	b913      	cbnz	r3, 8003118 <_fflush_r+0x10>
 8003112:	2500      	movs	r5, #0
 8003114:	4628      	mov	r0, r5
 8003116:	bd38      	pop	{r3, r4, r5, pc}
 8003118:	b118      	cbz	r0, 8003122 <_fflush_r+0x1a>
 800311a:	6a03      	ldr	r3, [r0, #32]
 800311c:	b90b      	cbnz	r3, 8003122 <_fflush_r+0x1a>
 800311e:	f7ff fa3b 	bl	8002598 <__sinit>
 8003122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f3      	beq.n	8003112 <_fflush_r+0xa>
 800312a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800312c:	07d0      	lsls	r0, r2, #31
 800312e:	d404      	bmi.n	800313a <_fflush_r+0x32>
 8003130:	0599      	lsls	r1, r3, #22
 8003132:	d402      	bmi.n	800313a <_fflush_r+0x32>
 8003134:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003136:	f7ff fb5e 	bl	80027f6 <__retarget_lock_acquire_recursive>
 800313a:	4628      	mov	r0, r5
 800313c:	4621      	mov	r1, r4
 800313e:	f7ff ff5f 	bl	8003000 <__sflush_r>
 8003142:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003144:	07da      	lsls	r2, r3, #31
 8003146:	4605      	mov	r5, r0
 8003148:	d4e4      	bmi.n	8003114 <_fflush_r+0xc>
 800314a:	89a3      	ldrh	r3, [r4, #12]
 800314c:	059b      	lsls	r3, r3, #22
 800314e:	d4e1      	bmi.n	8003114 <_fflush_r+0xc>
 8003150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003152:	f7ff fb51 	bl	80027f8 <__retarget_lock_release_recursive>
 8003156:	e7dd      	b.n	8003114 <_fflush_r+0xc>

08003158 <fiprintf>:
 8003158:	b40e      	push	{r1, r2, r3}
 800315a:	b503      	push	{r0, r1, lr}
 800315c:	4601      	mov	r1, r0
 800315e:	ab03      	add	r3, sp, #12
 8003160:	4805      	ldr	r0, [pc, #20]	@ (8003178 <fiprintf+0x20>)
 8003162:	f853 2b04 	ldr.w	r2, [r3], #4
 8003166:	6800      	ldr	r0, [r0, #0]
 8003168:	9301      	str	r3, [sp, #4]
 800316a:	f000 f89d 	bl	80032a8 <_vfiprintf_r>
 800316e:	b002      	add	sp, #8
 8003170:	f85d eb04 	ldr.w	lr, [sp], #4
 8003174:	b003      	add	sp, #12
 8003176:	4770      	bx	lr
 8003178:	20000018 	.word	0x20000018

0800317c <memmove>:
 800317c:	4288      	cmp	r0, r1
 800317e:	b510      	push	{r4, lr}
 8003180:	eb01 0402 	add.w	r4, r1, r2
 8003184:	d902      	bls.n	800318c <memmove+0x10>
 8003186:	4284      	cmp	r4, r0
 8003188:	4623      	mov	r3, r4
 800318a:	d807      	bhi.n	800319c <memmove+0x20>
 800318c:	1e43      	subs	r3, r0, #1
 800318e:	42a1      	cmp	r1, r4
 8003190:	d008      	beq.n	80031a4 <memmove+0x28>
 8003192:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003196:	f803 2f01 	strb.w	r2, [r3, #1]!
 800319a:	e7f8      	b.n	800318e <memmove+0x12>
 800319c:	4402      	add	r2, r0
 800319e:	4601      	mov	r1, r0
 80031a0:	428a      	cmp	r2, r1
 80031a2:	d100      	bne.n	80031a6 <memmove+0x2a>
 80031a4:	bd10      	pop	{r4, pc}
 80031a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80031aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80031ae:	e7f7      	b.n	80031a0 <memmove+0x24>

080031b0 <_sbrk_r>:
 80031b0:	b538      	push	{r3, r4, r5, lr}
 80031b2:	4d06      	ldr	r5, [pc, #24]	@ (80031cc <_sbrk_r+0x1c>)
 80031b4:	2300      	movs	r3, #0
 80031b6:	4604      	mov	r4, r0
 80031b8:	4608      	mov	r0, r1
 80031ba:	602b      	str	r3, [r5, #0]
 80031bc:	f7ff f822 	bl	8002204 <_sbrk>
 80031c0:	1c43      	adds	r3, r0, #1
 80031c2:	d102      	bne.n	80031ca <_sbrk_r+0x1a>
 80031c4:	682b      	ldr	r3, [r5, #0]
 80031c6:	b103      	cbz	r3, 80031ca <_sbrk_r+0x1a>
 80031c8:	6023      	str	r3, [r4, #0]
 80031ca:	bd38      	pop	{r3, r4, r5, pc}
 80031cc:	200002cc 	.word	0x200002cc

080031d0 <memcpy>:
 80031d0:	440a      	add	r2, r1
 80031d2:	4291      	cmp	r1, r2
 80031d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80031d8:	d100      	bne.n	80031dc <memcpy+0xc>
 80031da:	4770      	bx	lr
 80031dc:	b510      	push	{r4, lr}
 80031de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031e6:	4291      	cmp	r1, r2
 80031e8:	d1f9      	bne.n	80031de <memcpy+0xe>
 80031ea:	bd10      	pop	{r4, pc}

080031ec <abort>:
 80031ec:	b508      	push	{r3, lr}
 80031ee:	2006      	movs	r0, #6
 80031f0:	f000 fa2e 	bl	8003650 <raise>
 80031f4:	2001      	movs	r0, #1
 80031f6:	f7fe ff8d 	bl	8002114 <_exit>

080031fa <_realloc_r>:
 80031fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031fe:	4607      	mov	r7, r0
 8003200:	4614      	mov	r4, r2
 8003202:	460d      	mov	r5, r1
 8003204:	b921      	cbnz	r1, 8003210 <_realloc_r+0x16>
 8003206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800320a:	4611      	mov	r1, r2
 800320c:	f7ff bb88 	b.w	8002920 <_malloc_r>
 8003210:	b92a      	cbnz	r2, 800321e <_realloc_r+0x24>
 8003212:	f7ff fb11 	bl	8002838 <_free_r>
 8003216:	4625      	mov	r5, r4
 8003218:	4628      	mov	r0, r5
 800321a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800321e:	f000 fa33 	bl	8003688 <_malloc_usable_size_r>
 8003222:	4284      	cmp	r4, r0
 8003224:	4606      	mov	r6, r0
 8003226:	d802      	bhi.n	800322e <_realloc_r+0x34>
 8003228:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800322c:	d8f4      	bhi.n	8003218 <_realloc_r+0x1e>
 800322e:	4621      	mov	r1, r4
 8003230:	4638      	mov	r0, r7
 8003232:	f7ff fb75 	bl	8002920 <_malloc_r>
 8003236:	4680      	mov	r8, r0
 8003238:	b908      	cbnz	r0, 800323e <_realloc_r+0x44>
 800323a:	4645      	mov	r5, r8
 800323c:	e7ec      	b.n	8003218 <_realloc_r+0x1e>
 800323e:	42b4      	cmp	r4, r6
 8003240:	4622      	mov	r2, r4
 8003242:	4629      	mov	r1, r5
 8003244:	bf28      	it	cs
 8003246:	4632      	movcs	r2, r6
 8003248:	f7ff ffc2 	bl	80031d0 <memcpy>
 800324c:	4629      	mov	r1, r5
 800324e:	4638      	mov	r0, r7
 8003250:	f7ff faf2 	bl	8002838 <_free_r>
 8003254:	e7f1      	b.n	800323a <_realloc_r+0x40>

08003256 <__sfputc_r>:
 8003256:	6893      	ldr	r3, [r2, #8]
 8003258:	3b01      	subs	r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	b410      	push	{r4}
 800325e:	6093      	str	r3, [r2, #8]
 8003260:	da08      	bge.n	8003274 <__sfputc_r+0x1e>
 8003262:	6994      	ldr	r4, [r2, #24]
 8003264:	42a3      	cmp	r3, r4
 8003266:	db01      	blt.n	800326c <__sfputc_r+0x16>
 8003268:	290a      	cmp	r1, #10
 800326a:	d103      	bne.n	8003274 <__sfputc_r+0x1e>
 800326c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003270:	f000 b932 	b.w	80034d8 <__swbuf_r>
 8003274:	6813      	ldr	r3, [r2, #0]
 8003276:	1c58      	adds	r0, r3, #1
 8003278:	6010      	str	r0, [r2, #0]
 800327a:	7019      	strb	r1, [r3, #0]
 800327c:	4608      	mov	r0, r1
 800327e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003282:	4770      	bx	lr

08003284 <__sfputs_r>:
 8003284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003286:	4606      	mov	r6, r0
 8003288:	460f      	mov	r7, r1
 800328a:	4614      	mov	r4, r2
 800328c:	18d5      	adds	r5, r2, r3
 800328e:	42ac      	cmp	r4, r5
 8003290:	d101      	bne.n	8003296 <__sfputs_r+0x12>
 8003292:	2000      	movs	r0, #0
 8003294:	e007      	b.n	80032a6 <__sfputs_r+0x22>
 8003296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800329a:	463a      	mov	r2, r7
 800329c:	4630      	mov	r0, r6
 800329e:	f7ff ffda 	bl	8003256 <__sfputc_r>
 80032a2:	1c43      	adds	r3, r0, #1
 80032a4:	d1f3      	bne.n	800328e <__sfputs_r+0xa>
 80032a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080032a8 <_vfiprintf_r>:
 80032a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ac:	460d      	mov	r5, r1
 80032ae:	b09d      	sub	sp, #116	@ 0x74
 80032b0:	4614      	mov	r4, r2
 80032b2:	4698      	mov	r8, r3
 80032b4:	4606      	mov	r6, r0
 80032b6:	b118      	cbz	r0, 80032c0 <_vfiprintf_r+0x18>
 80032b8:	6a03      	ldr	r3, [r0, #32]
 80032ba:	b90b      	cbnz	r3, 80032c0 <_vfiprintf_r+0x18>
 80032bc:	f7ff f96c 	bl	8002598 <__sinit>
 80032c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80032c2:	07d9      	lsls	r1, r3, #31
 80032c4:	d405      	bmi.n	80032d2 <_vfiprintf_r+0x2a>
 80032c6:	89ab      	ldrh	r3, [r5, #12]
 80032c8:	059a      	lsls	r2, r3, #22
 80032ca:	d402      	bmi.n	80032d2 <_vfiprintf_r+0x2a>
 80032cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80032ce:	f7ff fa92 	bl	80027f6 <__retarget_lock_acquire_recursive>
 80032d2:	89ab      	ldrh	r3, [r5, #12]
 80032d4:	071b      	lsls	r3, r3, #28
 80032d6:	d501      	bpl.n	80032dc <_vfiprintf_r+0x34>
 80032d8:	692b      	ldr	r3, [r5, #16]
 80032da:	b99b      	cbnz	r3, 8003304 <_vfiprintf_r+0x5c>
 80032dc:	4629      	mov	r1, r5
 80032de:	4630      	mov	r0, r6
 80032e0:	f000 f938 	bl	8003554 <__swsetup_r>
 80032e4:	b170      	cbz	r0, 8003304 <_vfiprintf_r+0x5c>
 80032e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80032e8:	07dc      	lsls	r4, r3, #31
 80032ea:	d504      	bpl.n	80032f6 <_vfiprintf_r+0x4e>
 80032ec:	f04f 30ff 	mov.w	r0, #4294967295
 80032f0:	b01d      	add	sp, #116	@ 0x74
 80032f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032f6:	89ab      	ldrh	r3, [r5, #12]
 80032f8:	0598      	lsls	r0, r3, #22
 80032fa:	d4f7      	bmi.n	80032ec <_vfiprintf_r+0x44>
 80032fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80032fe:	f7ff fa7b 	bl	80027f8 <__retarget_lock_release_recursive>
 8003302:	e7f3      	b.n	80032ec <_vfiprintf_r+0x44>
 8003304:	2300      	movs	r3, #0
 8003306:	9309      	str	r3, [sp, #36]	@ 0x24
 8003308:	2320      	movs	r3, #32
 800330a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800330e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003312:	2330      	movs	r3, #48	@ 0x30
 8003314:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80034c4 <_vfiprintf_r+0x21c>
 8003318:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800331c:	f04f 0901 	mov.w	r9, #1
 8003320:	4623      	mov	r3, r4
 8003322:	469a      	mov	sl, r3
 8003324:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003328:	b10a      	cbz	r2, 800332e <_vfiprintf_r+0x86>
 800332a:	2a25      	cmp	r2, #37	@ 0x25
 800332c:	d1f9      	bne.n	8003322 <_vfiprintf_r+0x7a>
 800332e:	ebba 0b04 	subs.w	fp, sl, r4
 8003332:	d00b      	beq.n	800334c <_vfiprintf_r+0xa4>
 8003334:	465b      	mov	r3, fp
 8003336:	4622      	mov	r2, r4
 8003338:	4629      	mov	r1, r5
 800333a:	4630      	mov	r0, r6
 800333c:	f7ff ffa2 	bl	8003284 <__sfputs_r>
 8003340:	3001      	adds	r0, #1
 8003342:	f000 80a7 	beq.w	8003494 <_vfiprintf_r+0x1ec>
 8003346:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003348:	445a      	add	r2, fp
 800334a:	9209      	str	r2, [sp, #36]	@ 0x24
 800334c:	f89a 3000 	ldrb.w	r3, [sl]
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 809f 	beq.w	8003494 <_vfiprintf_r+0x1ec>
 8003356:	2300      	movs	r3, #0
 8003358:	f04f 32ff 	mov.w	r2, #4294967295
 800335c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003360:	f10a 0a01 	add.w	sl, sl, #1
 8003364:	9304      	str	r3, [sp, #16]
 8003366:	9307      	str	r3, [sp, #28]
 8003368:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800336c:	931a      	str	r3, [sp, #104]	@ 0x68
 800336e:	4654      	mov	r4, sl
 8003370:	2205      	movs	r2, #5
 8003372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003376:	4853      	ldr	r0, [pc, #332]	@ (80034c4 <_vfiprintf_r+0x21c>)
 8003378:	f7fc ff32 	bl	80001e0 <memchr>
 800337c:	9a04      	ldr	r2, [sp, #16]
 800337e:	b9d8      	cbnz	r0, 80033b8 <_vfiprintf_r+0x110>
 8003380:	06d1      	lsls	r1, r2, #27
 8003382:	bf44      	itt	mi
 8003384:	2320      	movmi	r3, #32
 8003386:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800338a:	0713      	lsls	r3, r2, #28
 800338c:	bf44      	itt	mi
 800338e:	232b      	movmi	r3, #43	@ 0x2b
 8003390:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003394:	f89a 3000 	ldrb.w	r3, [sl]
 8003398:	2b2a      	cmp	r3, #42	@ 0x2a
 800339a:	d015      	beq.n	80033c8 <_vfiprintf_r+0x120>
 800339c:	9a07      	ldr	r2, [sp, #28]
 800339e:	4654      	mov	r4, sl
 80033a0:	2000      	movs	r0, #0
 80033a2:	f04f 0c0a 	mov.w	ip, #10
 80033a6:	4621      	mov	r1, r4
 80033a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033ac:	3b30      	subs	r3, #48	@ 0x30
 80033ae:	2b09      	cmp	r3, #9
 80033b0:	d94b      	bls.n	800344a <_vfiprintf_r+0x1a2>
 80033b2:	b1b0      	cbz	r0, 80033e2 <_vfiprintf_r+0x13a>
 80033b4:	9207      	str	r2, [sp, #28]
 80033b6:	e014      	b.n	80033e2 <_vfiprintf_r+0x13a>
 80033b8:	eba0 0308 	sub.w	r3, r0, r8
 80033bc:	fa09 f303 	lsl.w	r3, r9, r3
 80033c0:	4313      	orrs	r3, r2
 80033c2:	9304      	str	r3, [sp, #16]
 80033c4:	46a2      	mov	sl, r4
 80033c6:	e7d2      	b.n	800336e <_vfiprintf_r+0xc6>
 80033c8:	9b03      	ldr	r3, [sp, #12]
 80033ca:	1d19      	adds	r1, r3, #4
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	9103      	str	r1, [sp, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bfbb      	ittet	lt
 80033d4:	425b      	neglt	r3, r3
 80033d6:	f042 0202 	orrlt.w	r2, r2, #2
 80033da:	9307      	strge	r3, [sp, #28]
 80033dc:	9307      	strlt	r3, [sp, #28]
 80033de:	bfb8      	it	lt
 80033e0:	9204      	strlt	r2, [sp, #16]
 80033e2:	7823      	ldrb	r3, [r4, #0]
 80033e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80033e6:	d10a      	bne.n	80033fe <_vfiprintf_r+0x156>
 80033e8:	7863      	ldrb	r3, [r4, #1]
 80033ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80033ec:	d132      	bne.n	8003454 <_vfiprintf_r+0x1ac>
 80033ee:	9b03      	ldr	r3, [sp, #12]
 80033f0:	1d1a      	adds	r2, r3, #4
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	9203      	str	r2, [sp, #12]
 80033f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80033fa:	3402      	adds	r4, #2
 80033fc:	9305      	str	r3, [sp, #20]
 80033fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80034d4 <_vfiprintf_r+0x22c>
 8003402:	7821      	ldrb	r1, [r4, #0]
 8003404:	2203      	movs	r2, #3
 8003406:	4650      	mov	r0, sl
 8003408:	f7fc feea 	bl	80001e0 <memchr>
 800340c:	b138      	cbz	r0, 800341e <_vfiprintf_r+0x176>
 800340e:	9b04      	ldr	r3, [sp, #16]
 8003410:	eba0 000a 	sub.w	r0, r0, sl
 8003414:	2240      	movs	r2, #64	@ 0x40
 8003416:	4082      	lsls	r2, r0
 8003418:	4313      	orrs	r3, r2
 800341a:	3401      	adds	r4, #1
 800341c:	9304      	str	r3, [sp, #16]
 800341e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003422:	4829      	ldr	r0, [pc, #164]	@ (80034c8 <_vfiprintf_r+0x220>)
 8003424:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003428:	2206      	movs	r2, #6
 800342a:	f7fc fed9 	bl	80001e0 <memchr>
 800342e:	2800      	cmp	r0, #0
 8003430:	d03f      	beq.n	80034b2 <_vfiprintf_r+0x20a>
 8003432:	4b26      	ldr	r3, [pc, #152]	@ (80034cc <_vfiprintf_r+0x224>)
 8003434:	bb1b      	cbnz	r3, 800347e <_vfiprintf_r+0x1d6>
 8003436:	9b03      	ldr	r3, [sp, #12]
 8003438:	3307      	adds	r3, #7
 800343a:	f023 0307 	bic.w	r3, r3, #7
 800343e:	3308      	adds	r3, #8
 8003440:	9303      	str	r3, [sp, #12]
 8003442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003444:	443b      	add	r3, r7
 8003446:	9309      	str	r3, [sp, #36]	@ 0x24
 8003448:	e76a      	b.n	8003320 <_vfiprintf_r+0x78>
 800344a:	fb0c 3202 	mla	r2, ip, r2, r3
 800344e:	460c      	mov	r4, r1
 8003450:	2001      	movs	r0, #1
 8003452:	e7a8      	b.n	80033a6 <_vfiprintf_r+0xfe>
 8003454:	2300      	movs	r3, #0
 8003456:	3401      	adds	r4, #1
 8003458:	9305      	str	r3, [sp, #20]
 800345a:	4619      	mov	r1, r3
 800345c:	f04f 0c0a 	mov.w	ip, #10
 8003460:	4620      	mov	r0, r4
 8003462:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003466:	3a30      	subs	r2, #48	@ 0x30
 8003468:	2a09      	cmp	r2, #9
 800346a:	d903      	bls.n	8003474 <_vfiprintf_r+0x1cc>
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0c6      	beq.n	80033fe <_vfiprintf_r+0x156>
 8003470:	9105      	str	r1, [sp, #20]
 8003472:	e7c4      	b.n	80033fe <_vfiprintf_r+0x156>
 8003474:	fb0c 2101 	mla	r1, ip, r1, r2
 8003478:	4604      	mov	r4, r0
 800347a:	2301      	movs	r3, #1
 800347c:	e7f0      	b.n	8003460 <_vfiprintf_r+0x1b8>
 800347e:	ab03      	add	r3, sp, #12
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	462a      	mov	r2, r5
 8003484:	4b12      	ldr	r3, [pc, #72]	@ (80034d0 <_vfiprintf_r+0x228>)
 8003486:	a904      	add	r1, sp, #16
 8003488:	4630      	mov	r0, r6
 800348a:	f3af 8000 	nop.w
 800348e:	4607      	mov	r7, r0
 8003490:	1c78      	adds	r0, r7, #1
 8003492:	d1d6      	bne.n	8003442 <_vfiprintf_r+0x19a>
 8003494:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003496:	07d9      	lsls	r1, r3, #31
 8003498:	d405      	bmi.n	80034a6 <_vfiprintf_r+0x1fe>
 800349a:	89ab      	ldrh	r3, [r5, #12]
 800349c:	059a      	lsls	r2, r3, #22
 800349e:	d402      	bmi.n	80034a6 <_vfiprintf_r+0x1fe>
 80034a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034a2:	f7ff f9a9 	bl	80027f8 <__retarget_lock_release_recursive>
 80034a6:	89ab      	ldrh	r3, [r5, #12]
 80034a8:	065b      	lsls	r3, r3, #25
 80034aa:	f53f af1f 	bmi.w	80032ec <_vfiprintf_r+0x44>
 80034ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80034b0:	e71e      	b.n	80032f0 <_vfiprintf_r+0x48>
 80034b2:	ab03      	add	r3, sp, #12
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	462a      	mov	r2, r5
 80034b8:	4b05      	ldr	r3, [pc, #20]	@ (80034d0 <_vfiprintf_r+0x228>)
 80034ba:	a904      	add	r1, sp, #16
 80034bc:	4630      	mov	r0, r6
 80034be:	f7ff fc81 	bl	8002dc4 <_printf_i>
 80034c2:	e7e4      	b.n	800348e <_vfiprintf_r+0x1e6>
 80034c4:	08003b8b 	.word	0x08003b8b
 80034c8:	08003b95 	.word	0x08003b95
 80034cc:	00000000 	.word	0x00000000
 80034d0:	08003285 	.word	0x08003285
 80034d4:	08003b91 	.word	0x08003b91

080034d8 <__swbuf_r>:
 80034d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034da:	460e      	mov	r6, r1
 80034dc:	4614      	mov	r4, r2
 80034de:	4605      	mov	r5, r0
 80034e0:	b118      	cbz	r0, 80034ea <__swbuf_r+0x12>
 80034e2:	6a03      	ldr	r3, [r0, #32]
 80034e4:	b90b      	cbnz	r3, 80034ea <__swbuf_r+0x12>
 80034e6:	f7ff f857 	bl	8002598 <__sinit>
 80034ea:	69a3      	ldr	r3, [r4, #24]
 80034ec:	60a3      	str	r3, [r4, #8]
 80034ee:	89a3      	ldrh	r3, [r4, #12]
 80034f0:	071a      	lsls	r2, r3, #28
 80034f2:	d501      	bpl.n	80034f8 <__swbuf_r+0x20>
 80034f4:	6923      	ldr	r3, [r4, #16]
 80034f6:	b943      	cbnz	r3, 800350a <__swbuf_r+0x32>
 80034f8:	4621      	mov	r1, r4
 80034fa:	4628      	mov	r0, r5
 80034fc:	f000 f82a 	bl	8003554 <__swsetup_r>
 8003500:	b118      	cbz	r0, 800350a <__swbuf_r+0x32>
 8003502:	f04f 37ff 	mov.w	r7, #4294967295
 8003506:	4638      	mov	r0, r7
 8003508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	6922      	ldr	r2, [r4, #16]
 800350e:	1a98      	subs	r0, r3, r2
 8003510:	6963      	ldr	r3, [r4, #20]
 8003512:	b2f6      	uxtb	r6, r6
 8003514:	4283      	cmp	r3, r0
 8003516:	4637      	mov	r7, r6
 8003518:	dc05      	bgt.n	8003526 <__swbuf_r+0x4e>
 800351a:	4621      	mov	r1, r4
 800351c:	4628      	mov	r0, r5
 800351e:	f7ff fdf3 	bl	8003108 <_fflush_r>
 8003522:	2800      	cmp	r0, #0
 8003524:	d1ed      	bne.n	8003502 <__swbuf_r+0x2a>
 8003526:	68a3      	ldr	r3, [r4, #8]
 8003528:	3b01      	subs	r3, #1
 800352a:	60a3      	str	r3, [r4, #8]
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	6022      	str	r2, [r4, #0]
 8003532:	701e      	strb	r6, [r3, #0]
 8003534:	6962      	ldr	r2, [r4, #20]
 8003536:	1c43      	adds	r3, r0, #1
 8003538:	429a      	cmp	r2, r3
 800353a:	d004      	beq.n	8003546 <__swbuf_r+0x6e>
 800353c:	89a3      	ldrh	r3, [r4, #12]
 800353e:	07db      	lsls	r3, r3, #31
 8003540:	d5e1      	bpl.n	8003506 <__swbuf_r+0x2e>
 8003542:	2e0a      	cmp	r6, #10
 8003544:	d1df      	bne.n	8003506 <__swbuf_r+0x2e>
 8003546:	4621      	mov	r1, r4
 8003548:	4628      	mov	r0, r5
 800354a:	f7ff fddd 	bl	8003108 <_fflush_r>
 800354e:	2800      	cmp	r0, #0
 8003550:	d0d9      	beq.n	8003506 <__swbuf_r+0x2e>
 8003552:	e7d6      	b.n	8003502 <__swbuf_r+0x2a>

08003554 <__swsetup_r>:
 8003554:	b538      	push	{r3, r4, r5, lr}
 8003556:	4b29      	ldr	r3, [pc, #164]	@ (80035fc <__swsetup_r+0xa8>)
 8003558:	4605      	mov	r5, r0
 800355a:	6818      	ldr	r0, [r3, #0]
 800355c:	460c      	mov	r4, r1
 800355e:	b118      	cbz	r0, 8003568 <__swsetup_r+0x14>
 8003560:	6a03      	ldr	r3, [r0, #32]
 8003562:	b90b      	cbnz	r3, 8003568 <__swsetup_r+0x14>
 8003564:	f7ff f818 	bl	8002598 <__sinit>
 8003568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800356c:	0719      	lsls	r1, r3, #28
 800356e:	d422      	bmi.n	80035b6 <__swsetup_r+0x62>
 8003570:	06da      	lsls	r2, r3, #27
 8003572:	d407      	bmi.n	8003584 <__swsetup_r+0x30>
 8003574:	2209      	movs	r2, #9
 8003576:	602a      	str	r2, [r5, #0]
 8003578:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800357c:	81a3      	strh	r3, [r4, #12]
 800357e:	f04f 30ff 	mov.w	r0, #4294967295
 8003582:	e033      	b.n	80035ec <__swsetup_r+0x98>
 8003584:	0758      	lsls	r0, r3, #29
 8003586:	d512      	bpl.n	80035ae <__swsetup_r+0x5a>
 8003588:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800358a:	b141      	cbz	r1, 800359e <__swsetup_r+0x4a>
 800358c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003590:	4299      	cmp	r1, r3
 8003592:	d002      	beq.n	800359a <__swsetup_r+0x46>
 8003594:	4628      	mov	r0, r5
 8003596:	f7ff f94f 	bl	8002838 <_free_r>
 800359a:	2300      	movs	r3, #0
 800359c:	6363      	str	r3, [r4, #52]	@ 0x34
 800359e:	89a3      	ldrh	r3, [r4, #12]
 80035a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80035a4:	81a3      	strh	r3, [r4, #12]
 80035a6:	2300      	movs	r3, #0
 80035a8:	6063      	str	r3, [r4, #4]
 80035aa:	6923      	ldr	r3, [r4, #16]
 80035ac:	6023      	str	r3, [r4, #0]
 80035ae:	89a3      	ldrh	r3, [r4, #12]
 80035b0:	f043 0308 	orr.w	r3, r3, #8
 80035b4:	81a3      	strh	r3, [r4, #12]
 80035b6:	6923      	ldr	r3, [r4, #16]
 80035b8:	b94b      	cbnz	r3, 80035ce <__swsetup_r+0x7a>
 80035ba:	89a3      	ldrh	r3, [r4, #12]
 80035bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80035c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035c4:	d003      	beq.n	80035ce <__swsetup_r+0x7a>
 80035c6:	4621      	mov	r1, r4
 80035c8:	4628      	mov	r0, r5
 80035ca:	f000 f88b 	bl	80036e4 <__smakebuf_r>
 80035ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035d2:	f013 0201 	ands.w	r2, r3, #1
 80035d6:	d00a      	beq.n	80035ee <__swsetup_r+0x9a>
 80035d8:	2200      	movs	r2, #0
 80035da:	60a2      	str	r2, [r4, #8]
 80035dc:	6962      	ldr	r2, [r4, #20]
 80035de:	4252      	negs	r2, r2
 80035e0:	61a2      	str	r2, [r4, #24]
 80035e2:	6922      	ldr	r2, [r4, #16]
 80035e4:	b942      	cbnz	r2, 80035f8 <__swsetup_r+0xa4>
 80035e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80035ea:	d1c5      	bne.n	8003578 <__swsetup_r+0x24>
 80035ec:	bd38      	pop	{r3, r4, r5, pc}
 80035ee:	0799      	lsls	r1, r3, #30
 80035f0:	bf58      	it	pl
 80035f2:	6962      	ldrpl	r2, [r4, #20]
 80035f4:	60a2      	str	r2, [r4, #8]
 80035f6:	e7f4      	b.n	80035e2 <__swsetup_r+0x8e>
 80035f8:	2000      	movs	r0, #0
 80035fa:	e7f7      	b.n	80035ec <__swsetup_r+0x98>
 80035fc:	20000018 	.word	0x20000018

08003600 <_raise_r>:
 8003600:	291f      	cmp	r1, #31
 8003602:	b538      	push	{r3, r4, r5, lr}
 8003604:	4605      	mov	r5, r0
 8003606:	460c      	mov	r4, r1
 8003608:	d904      	bls.n	8003614 <_raise_r+0x14>
 800360a:	2316      	movs	r3, #22
 800360c:	6003      	str	r3, [r0, #0]
 800360e:	f04f 30ff 	mov.w	r0, #4294967295
 8003612:	bd38      	pop	{r3, r4, r5, pc}
 8003614:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003616:	b112      	cbz	r2, 800361e <_raise_r+0x1e>
 8003618:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800361c:	b94b      	cbnz	r3, 8003632 <_raise_r+0x32>
 800361e:	4628      	mov	r0, r5
 8003620:	f000 f830 	bl	8003684 <_getpid_r>
 8003624:	4622      	mov	r2, r4
 8003626:	4601      	mov	r1, r0
 8003628:	4628      	mov	r0, r5
 800362a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800362e:	f000 b817 	b.w	8003660 <_kill_r>
 8003632:	2b01      	cmp	r3, #1
 8003634:	d00a      	beq.n	800364c <_raise_r+0x4c>
 8003636:	1c59      	adds	r1, r3, #1
 8003638:	d103      	bne.n	8003642 <_raise_r+0x42>
 800363a:	2316      	movs	r3, #22
 800363c:	6003      	str	r3, [r0, #0]
 800363e:	2001      	movs	r0, #1
 8003640:	e7e7      	b.n	8003612 <_raise_r+0x12>
 8003642:	2100      	movs	r1, #0
 8003644:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003648:	4620      	mov	r0, r4
 800364a:	4798      	blx	r3
 800364c:	2000      	movs	r0, #0
 800364e:	e7e0      	b.n	8003612 <_raise_r+0x12>

08003650 <raise>:
 8003650:	4b02      	ldr	r3, [pc, #8]	@ (800365c <raise+0xc>)
 8003652:	4601      	mov	r1, r0
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	f7ff bfd3 	b.w	8003600 <_raise_r>
 800365a:	bf00      	nop
 800365c:	20000018 	.word	0x20000018

08003660 <_kill_r>:
 8003660:	b538      	push	{r3, r4, r5, lr}
 8003662:	4d07      	ldr	r5, [pc, #28]	@ (8003680 <_kill_r+0x20>)
 8003664:	2300      	movs	r3, #0
 8003666:	4604      	mov	r4, r0
 8003668:	4608      	mov	r0, r1
 800366a:	4611      	mov	r1, r2
 800366c:	602b      	str	r3, [r5, #0]
 800366e:	f7fe fd41 	bl	80020f4 <_kill>
 8003672:	1c43      	adds	r3, r0, #1
 8003674:	d102      	bne.n	800367c <_kill_r+0x1c>
 8003676:	682b      	ldr	r3, [r5, #0]
 8003678:	b103      	cbz	r3, 800367c <_kill_r+0x1c>
 800367a:	6023      	str	r3, [r4, #0]
 800367c:	bd38      	pop	{r3, r4, r5, pc}
 800367e:	bf00      	nop
 8003680:	200002cc 	.word	0x200002cc

08003684 <_getpid_r>:
 8003684:	f7fe bd2e 	b.w	80020e4 <_getpid>

08003688 <_malloc_usable_size_r>:
 8003688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800368c:	1f18      	subs	r0, r3, #4
 800368e:	2b00      	cmp	r3, #0
 8003690:	bfbc      	itt	lt
 8003692:	580b      	ldrlt	r3, [r1, r0]
 8003694:	18c0      	addlt	r0, r0, r3
 8003696:	4770      	bx	lr

08003698 <__swhatbuf_r>:
 8003698:	b570      	push	{r4, r5, r6, lr}
 800369a:	460c      	mov	r4, r1
 800369c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036a0:	2900      	cmp	r1, #0
 80036a2:	b096      	sub	sp, #88	@ 0x58
 80036a4:	4615      	mov	r5, r2
 80036a6:	461e      	mov	r6, r3
 80036a8:	da0d      	bge.n	80036c6 <__swhatbuf_r+0x2e>
 80036aa:	89a3      	ldrh	r3, [r4, #12]
 80036ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80036b0:	f04f 0100 	mov.w	r1, #0
 80036b4:	bf14      	ite	ne
 80036b6:	2340      	movne	r3, #64	@ 0x40
 80036b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80036bc:	2000      	movs	r0, #0
 80036be:	6031      	str	r1, [r6, #0]
 80036c0:	602b      	str	r3, [r5, #0]
 80036c2:	b016      	add	sp, #88	@ 0x58
 80036c4:	bd70      	pop	{r4, r5, r6, pc}
 80036c6:	466a      	mov	r2, sp
 80036c8:	f000 f848 	bl	800375c <_fstat_r>
 80036cc:	2800      	cmp	r0, #0
 80036ce:	dbec      	blt.n	80036aa <__swhatbuf_r+0x12>
 80036d0:	9901      	ldr	r1, [sp, #4]
 80036d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80036d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80036da:	4259      	negs	r1, r3
 80036dc:	4159      	adcs	r1, r3
 80036de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036e2:	e7eb      	b.n	80036bc <__swhatbuf_r+0x24>

080036e4 <__smakebuf_r>:
 80036e4:	898b      	ldrh	r3, [r1, #12]
 80036e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036e8:	079d      	lsls	r5, r3, #30
 80036ea:	4606      	mov	r6, r0
 80036ec:	460c      	mov	r4, r1
 80036ee:	d507      	bpl.n	8003700 <__smakebuf_r+0x1c>
 80036f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80036f4:	6023      	str	r3, [r4, #0]
 80036f6:	6123      	str	r3, [r4, #16]
 80036f8:	2301      	movs	r3, #1
 80036fa:	6163      	str	r3, [r4, #20]
 80036fc:	b003      	add	sp, #12
 80036fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003700:	ab01      	add	r3, sp, #4
 8003702:	466a      	mov	r2, sp
 8003704:	f7ff ffc8 	bl	8003698 <__swhatbuf_r>
 8003708:	9f00      	ldr	r7, [sp, #0]
 800370a:	4605      	mov	r5, r0
 800370c:	4639      	mov	r1, r7
 800370e:	4630      	mov	r0, r6
 8003710:	f7ff f906 	bl	8002920 <_malloc_r>
 8003714:	b948      	cbnz	r0, 800372a <__smakebuf_r+0x46>
 8003716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800371a:	059a      	lsls	r2, r3, #22
 800371c:	d4ee      	bmi.n	80036fc <__smakebuf_r+0x18>
 800371e:	f023 0303 	bic.w	r3, r3, #3
 8003722:	f043 0302 	orr.w	r3, r3, #2
 8003726:	81a3      	strh	r3, [r4, #12]
 8003728:	e7e2      	b.n	80036f0 <__smakebuf_r+0xc>
 800372a:	89a3      	ldrh	r3, [r4, #12]
 800372c:	6020      	str	r0, [r4, #0]
 800372e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003732:	81a3      	strh	r3, [r4, #12]
 8003734:	9b01      	ldr	r3, [sp, #4]
 8003736:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800373a:	b15b      	cbz	r3, 8003754 <__smakebuf_r+0x70>
 800373c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003740:	4630      	mov	r0, r6
 8003742:	f000 f81d 	bl	8003780 <_isatty_r>
 8003746:	b128      	cbz	r0, 8003754 <__smakebuf_r+0x70>
 8003748:	89a3      	ldrh	r3, [r4, #12]
 800374a:	f023 0303 	bic.w	r3, r3, #3
 800374e:	f043 0301 	orr.w	r3, r3, #1
 8003752:	81a3      	strh	r3, [r4, #12]
 8003754:	89a3      	ldrh	r3, [r4, #12]
 8003756:	431d      	orrs	r5, r3
 8003758:	81a5      	strh	r5, [r4, #12]
 800375a:	e7cf      	b.n	80036fc <__smakebuf_r+0x18>

0800375c <_fstat_r>:
 800375c:	b538      	push	{r3, r4, r5, lr}
 800375e:	4d07      	ldr	r5, [pc, #28]	@ (800377c <_fstat_r+0x20>)
 8003760:	2300      	movs	r3, #0
 8003762:	4604      	mov	r4, r0
 8003764:	4608      	mov	r0, r1
 8003766:	4611      	mov	r1, r2
 8003768:	602b      	str	r3, [r5, #0]
 800376a:	f7fe fd23 	bl	80021b4 <_fstat>
 800376e:	1c43      	adds	r3, r0, #1
 8003770:	d102      	bne.n	8003778 <_fstat_r+0x1c>
 8003772:	682b      	ldr	r3, [r5, #0]
 8003774:	b103      	cbz	r3, 8003778 <_fstat_r+0x1c>
 8003776:	6023      	str	r3, [r4, #0]
 8003778:	bd38      	pop	{r3, r4, r5, pc}
 800377a:	bf00      	nop
 800377c:	200002cc 	.word	0x200002cc

08003780 <_isatty_r>:
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	4d06      	ldr	r5, [pc, #24]	@ (800379c <_isatty_r+0x1c>)
 8003784:	2300      	movs	r3, #0
 8003786:	4604      	mov	r4, r0
 8003788:	4608      	mov	r0, r1
 800378a:	602b      	str	r3, [r5, #0]
 800378c:	f7fe fd22 	bl	80021d4 <_isatty>
 8003790:	1c43      	adds	r3, r0, #1
 8003792:	d102      	bne.n	800379a <_isatty_r+0x1a>
 8003794:	682b      	ldr	r3, [r5, #0]
 8003796:	b103      	cbz	r3, 800379a <_isatty_r+0x1a>
 8003798:	6023      	str	r3, [r4, #0]
 800379a:	bd38      	pop	{r3, r4, r5, pc}
 800379c:	200002cc 	.word	0x200002cc

080037a0 <_init>:
 80037a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a2:	bf00      	nop
 80037a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a6:	bc08      	pop	{r3}
 80037a8:	469e      	mov	lr, r3
 80037aa:	4770      	bx	lr

080037ac <_fini>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	bf00      	nop
 80037b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b2:	bc08      	pop	{r3}
 80037b4:	469e      	mov	lr, r3
 80037b6:	4770      	bx	lr
