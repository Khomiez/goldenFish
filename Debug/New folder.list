
New folder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003210  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  080033b0  080033b0  000043b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037c8  080037c8  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080037c8  080037c8  000047c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037d0  080037d0  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037d0  080037d0  000047d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037d4  080037d4  000047d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080037d8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  20000068  08003840  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08003840  000052c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003207  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d4a  00000000  00000000  0000829f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000360  00000000  00000000  00008ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000293  00000000  00000000  00009350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001067f  00000000  00000000  000095e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003dab  00000000  00000000  00019c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000578bc  00000000  00000000  0001da0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000752c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000171c  00000000  00000000  0007530c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00076a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003398 	.word	0x08003398

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003398 	.word	0x08003398

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <clamp_u8>:
GameState_t g_last_state_logged = (GameState_t)-1;

/* ============================================================================
 * Difficulty Timing Functions
 * ============================================================================ */
uint8_t clamp_u8(uint8_t v, uint8_t lo, uint8_t hi) {
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
 800028a:	460b      	mov	r3, r1
 800028c:	71bb      	strb	r3, [r7, #6]
 800028e:	4613      	mov	r3, r2
 8000290:	717b      	strb	r3, [r7, #5]
    return v < lo ? lo : (v > hi ? hi : v);
 8000292:	79fa      	ldrb	r2, [r7, #7]
 8000294:	79bb      	ldrb	r3, [r7, #6]
 8000296:	429a      	cmp	r2, r3
 8000298:	d306      	bcc.n	80002a8 <clamp_u8+0x28>
 800029a:	79fa      	ldrb	r2, [r7, #7]
 800029c:	797b      	ldrb	r3, [r7, #5]
 800029e:	4293      	cmp	r3, r2
 80002a0:	bf28      	it	cs
 80002a2:	4613      	movcs	r3, r2
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	e000      	b.n	80002aa <clamp_u8+0x2a>
 80002a8:	79bb      	ldrb	r3, [r7, #6]
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
	...

080002b8 <diff_on_ms>:

uint16_t diff_on_ms(uint8_t diff) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
    static const uint16_t T[5] = {500, 400, 300, 220, 150}; // DIFF 1..5
    diff = clamp_u8(diff, 1, 5);
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	2205      	movs	r2, #5
 80002c6:	2101      	movs	r1, #1
 80002c8:	4618      	mov	r0, r3
 80002ca:	f7ff ffd9 	bl	8000280 <clamp_u8>
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]
    return T[diff-1];
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	3b01      	subs	r3, #1
 80002d6:	4a03      	ldr	r2, [pc, #12]	@ (80002e4 <diff_on_ms+0x2c>)
 80002d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	080035d0 	.word	0x080035d0

080002e8 <diff_off_ms>:

uint16_t diff_off_ms(uint8_t diff) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	71fb      	strb	r3, [r7, #7]
    static const uint16_t T[5] = {250, 200, 150, 110, 80};  // DIFF 1..5
    diff = clamp_u8(diff, 1, 5);
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	2205      	movs	r2, #5
 80002f6:	2101      	movs	r1, #1
 80002f8:	4618      	mov	r0, r3
 80002fa:	f7ff ffc1 	bl	8000280 <clamp_u8>
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
    return T[diff-1];
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	3b01      	subs	r3, #1
 8000306:	4a03      	ldr	r2, [pc, #12]	@ (8000314 <diff_off_ms+0x2c>)
 8000308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 800030c:	4618      	mov	r0, r3
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	080035dc 	.word	0x080035dc

08000318 <set_game_state>:

/* ============================================================================
 * Internal Helper Functions
 * ============================================================================ */
static void set_game_state(GameState_t new_state) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
    g_game_state = new_state;
 8000322:	4a06      	ldr	r2, [pc, #24]	@ (800033c <set_game_state+0x24>)
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	7013      	strb	r3, [r2, #0]
    g_state_entry_time = GetTick();
 8000328:	f001 fdb4 	bl	8001e94 <GetTick>
 800032c:	4603      	mov	r3, r0
 800032e:	4a04      	ldr	r2, [pc, #16]	@ (8000340 <set_game_state+0x28>)
 8000330:	6013      	str	r3, [r2, #0]
}
 8000332:	bf00      	nop
 8000334:	3708      	adds	r7, #8
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000084 	.word	0x20000084
 8000340:	20000090 	.word	0x20000090

08000344 <generate_pattern>:

static void generate_pattern(uint8_t length) {
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < length; i++)
 800034e:	2300      	movs	r3, #0
 8000350:	73fb      	strb	r3, [r7, #15]
 8000352:	e010      	b.n	8000376 <generate_pattern+0x32>
        g_pattern[i] = rand() % 4;
 8000354:	f001 fe52 	bl	8001ffc <rand>
 8000358:	4603      	mov	r3, r0
 800035a:	425a      	negs	r2, r3
 800035c:	f003 0303 	and.w	r3, r3, #3
 8000360:	f002 0203 	and.w	r2, r2, #3
 8000364:	bf58      	it	pl
 8000366:	4253      	negpl	r3, r2
 8000368:	7bfa      	ldrb	r2, [r7, #15]
 800036a:	b2d9      	uxtb	r1, r3
 800036c:	4b07      	ldr	r3, [pc, #28]	@ (800038c <generate_pattern+0x48>)
 800036e:	5499      	strb	r1, [r3, r2]
    for (uint8_t i = 0; i < length; i++)
 8000370:	7bfb      	ldrb	r3, [r7, #15]
 8000372:	3301      	adds	r3, #1
 8000374:	73fb      	strb	r3, [r7, #15]
 8000376:	7bfa      	ldrb	r2, [r7, #15]
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	429a      	cmp	r2, r3
 800037c:	d3ea      	bcc.n	8000354 <generate_pattern+0x10>
    g_pattern_length = length;
 800037e:	4a04      	ldr	r2, [pc, #16]	@ (8000390 <generate_pattern+0x4c>)
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	7013      	strb	r3, [r2, #0]
}
 8000384:	bf00      	nop
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000098 	.word	0x20000098
 8000390:	200000b8 	.word	0x200000b8

08000394 <show_led>:

static void show_led(uint8_t idx) {
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
    LED_SetPattern(1 << button_to_led_map[idx]);
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	4a06      	ldr	r2, [pc, #24]	@ (80003bc <show_led+0x28>)
 80003a2:	5cd3      	ldrb	r3, [r2, r3]
 80003a4:	461a      	mov	r2, r3
 80003a6:	2301      	movs	r3, #1
 80003a8:	4093      	lsls	r3, r2
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	4618      	mov	r0, r3
 80003ae:	f000 fd3b 	bl	8000e28 <LED_SetPattern>
}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	080035cc 	.word	0x080035cc

080003c0 <clear_leds>:

static void clear_leds(void) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
    LED_SetPattern(0);
 80003c4:	2000      	movs	r0, #0
 80003c6:	f000 fd2f 	bl	8000e28 <LED_SetPattern>
}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
	...

080003d0 <handle_boot>:

/* ============================================================================
 * State Handler Functions
 * ============================================================================ */
static void handle_boot(void) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
    g_level = 1;
 80003d4:	4b06      	ldr	r3, [pc, #24]	@ (80003f0 <handle_boot+0x20>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	701a      	strb	r2, [r3, #0]
    g_score = 0;
 80003da:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <handle_boot+0x24>)
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
    g_lives = INITIAL_LIVES;
 80003e0:	4b05      	ldr	r3, [pc, #20]	@ (80003f8 <handle_boot+0x28>)
 80003e2:	2204      	movs	r2, #4
 80003e4:	701a      	strb	r2, [r3, #0]
    set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 80003e6:	2001      	movs	r0, #1
 80003e8:	f7ff ff96 	bl	8000318 <set_game_state>
}
 80003ec:	bf00      	nop
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000086 	.word	0x20000086
 80003f4:	20000088 	.word	0x20000088
 80003f8:	2000008c 	.word	0x2000008c

080003fc <handle_difficulty_select>:

static void handle_difficulty_select(void) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
    uint32_t current_time = GetTick();
 8000402:	f001 fd47 	bl	8001e94 <GetTick>
 8000406:	60b8      	str	r0, [r7, #8]
    static uint32_t last_log_time = 0;
    static uint8_t last_difficulty = 0;

    if (!g_difficulty_locked) {
 8000408:	4b2d      	ldr	r3, [pc, #180]	@ (80004c0 <handle_difficulty_select+0xc4>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d14f      	bne.n	80004b0 <handle_difficulty_select+0xb4>
        uint16_t pot_value = g_adc_values[0];
 8000410:	4b2c      	ldr	r3, [pc, #176]	@ (80004c4 <handle_difficulty_select+0xc8>)
 8000412:	881b      	ldrh	r3, [r3, #0]
 8000414:	80fb      	strh	r3, [r7, #6]
        g_difficulty = (uint32_t)(pot_value * 5) / 1024 + 1;  // 1..5
 8000416:	88fa      	ldrh	r2, [r7, #6]
 8000418:	4613      	mov	r3, r2
 800041a:	009b      	lsls	r3, r3, #2
 800041c:	4413      	add	r3, r2
 800041e:	0a9b      	lsrs	r3, r3, #10
 8000420:	b2db      	uxtb	r3, r3
 8000422:	3301      	adds	r3, #1
 8000424:	b2da      	uxtb	r2, r3
 8000426:	4b28      	ldr	r3, [pc, #160]	@ (80004c8 <handle_difficulty_select+0xcc>)
 8000428:	701a      	strb	r2, [r3, #0]
        SevenSeg_Display(g_difficulty);
 800042a:	4b27      	ldr	r3, [pc, #156]	@ (80004c8 <handle_difficulty_select+0xcc>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	4618      	mov	r0, r3
 8000430:	f000 fd3e 	bl	8000eb0 <SevenSeg_Display>

        if (g_difficulty != last_difficulty || (current_time - last_log_time) > 1000) {
 8000434:	4b24      	ldr	r3, [pc, #144]	@ (80004c8 <handle_difficulty_select+0xcc>)
 8000436:	781a      	ldrb	r2, [r3, #0]
 8000438:	4b24      	ldr	r3, [pc, #144]	@ (80004cc <handle_difficulty_select+0xd0>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	429a      	cmp	r2, r3
 800043e:	d106      	bne.n	800044e <handle_difficulty_select+0x52>
 8000440:	4b23      	ldr	r3, [pc, #140]	@ (80004d0 <handle_difficulty_select+0xd4>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	68ba      	ldr	r2, [r7, #8]
 8000446:	1ad3      	subs	r3, r2, r3
 8000448:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800044c:	d90f      	bls.n	800046e <handle_difficulty_select+0x72>
            Log_Print("[DIFFICULTY] Pot:%u -> Diff:%u\r\n", pot_value, g_difficulty);
 800044e:	88fb      	ldrh	r3, [r7, #6]
 8000450:	4a1d      	ldr	r2, [pc, #116]	@ (80004c8 <handle_difficulty_select+0xcc>)
 8000452:	7812      	ldrb	r2, [r2, #0]
 8000454:	4619      	mov	r1, r3
 8000456:	481f      	ldr	r0, [pc, #124]	@ (80004d4 <handle_difficulty_select+0xd8>)
 8000458:	f001 fd28 	bl	8001eac <Log_Print>
            last_log_time = current_time;
 800045c:	4a1c      	ldr	r2, [pc, #112]	@ (80004d0 <handle_difficulty_select+0xd4>)
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	6013      	str	r3, [r2, #0]
            last_difficulty = g_difficulty;
 8000462:	4b19      	ldr	r3, [pc, #100]	@ (80004c8 <handle_difficulty_select+0xcc>)
 8000464:	781a      	ldrb	r2, [r3, #0]
 8000466:	4b19      	ldr	r3, [pc, #100]	@ (80004cc <handle_difficulty_select+0xd0>)
 8000468:	701a      	strb	r2, [r3, #0]
            OLED_ShowStatus();
 800046a:	f001 fc2d 	bl	8001cc8 <OLED_ShowStatus>
        }

        for (int i = 0; i < 4; i++) {
 800046e:	2300      	movs	r3, #0
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	e019      	b.n	80004a8 <handle_difficulty_select+0xac>
            if (g_buttons[i].current_state == 1 &&
 8000474:	4a18      	ldr	r2, [pc, #96]	@ (80004d8 <handle_difficulty_select+0xdc>)
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d110      	bne.n	80004a2 <handle_difficulty_select+0xa6>
               (current_time - g_buttons[i].last_change_time) >= LONG_PRESS_DURATION_MS) {
 8000480:	4a15      	ldr	r2, [pc, #84]	@ (80004d8 <handle_difficulty_select+0xdc>)
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	00db      	lsls	r3, r3, #3
 8000486:	4413      	add	r3, r2
 8000488:	685b      	ldr	r3, [r3, #4]
 800048a:	68ba      	ldr	r2, [r7, #8]
 800048c:	1ad3      	subs	r3, r2, r3
            if (g_buttons[i].current_state == 1 &&
 800048e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000492:	d306      	bcc.n	80004a2 <handle_difficulty_select+0xa6>
                g_difficulty_locked = 1;
 8000494:	4b0a      	ldr	r3, [pc, #40]	@ (80004c0 <handle_difficulty_select+0xc4>)
 8000496:	2201      	movs	r2, #1
 8000498:	701a      	strb	r2, [r3, #0]
                set_game_state(GAME_STATE_LEVEL_INTRO);
 800049a:	2002      	movs	r0, #2
 800049c:	f7ff ff3c 	bl	8000318 <set_game_state>
                return;
 80004a0:	e00b      	b.n	80004ba <handle_difficulty_select+0xbe>
        for (int i = 0; i < 4; i++) {
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	3301      	adds	r3, #1
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	2b03      	cmp	r3, #3
 80004ac:	dde2      	ble.n	8000474 <handle_difficulty_select+0x78>
 80004ae:	e004      	b.n	80004ba <handle_difficulty_select+0xbe>
            }
        }
    } else {
        SevenSeg_Display(g_difficulty);
 80004b0:	4b05      	ldr	r3, [pc, #20]	@ (80004c8 <handle_difficulty_select+0xcc>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	4618      	mov	r0, r3
 80004b6:	f000 fcfb 	bl	8000eb0 <SevenSeg_Display>
    }
}
 80004ba:	3710      	adds	r7, #16
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000094 	.word	0x20000094
 80004c4:	200000e4 	.word	0x200000e4
 80004c8:	20000085 	.word	0x20000085
 80004cc:	200000bb 	.word	0x200000bb
 80004d0:	200000bc 	.word	0x200000bc
 80004d4:	080033b0 	.word	0x080033b0
 80004d8:	200000c4 	.word	0x200000c4

080004dc <handle_level_intro>:

static void handle_level_intro(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
    Log_Print("Level %u. Lives: %u. Score: %lu\r\n", g_level, g_lives, g_score);
 80004e2:	4b25      	ldr	r3, [pc, #148]	@ (8000578 <handle_level_intro+0x9c>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	4619      	mov	r1, r3
 80004e8:	4b24      	ldr	r3, [pc, #144]	@ (800057c <handle_level_intro+0xa0>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	461a      	mov	r2, r3
 80004ee:	4b24      	ldr	r3, [pc, #144]	@ (8000580 <handle_level_intro+0xa4>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4824      	ldr	r0, [pc, #144]	@ (8000584 <handle_level_intro+0xa8>)
 80004f4:	f001 fcda 	bl	8001eac <Log_Print>
    OLED_ShowStatus();
 80004f8:	f001 fbe6 	bl	8001cc8 <OLED_ShowStatus>
    Delay_ms(800);
 80004fc:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000500:	f001 fcb2 	bl	8001e68 <Delay_ms>

    // Back-and-forth LED animation only for first level
    if (g_level == 1) {
 8000504:	4b1c      	ldr	r3, [pc, #112]	@ (8000578 <handle_level_intro+0x9c>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d126      	bne.n	800055a <handle_level_intro+0x7e>
        // Forward: LED0 -> LED1 -> LED2 -> LED3
        for (int i = 0; i < 4; i++) {
 800050c:	2300      	movs	r3, #0
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	e00a      	b.n	8000528 <handle_level_intro+0x4c>
            show_led(i);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	b2db      	uxtb	r3, r3
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff ff3c 	bl	8000394 <show_led>
            Delay_ms(150);
 800051c:	2096      	movs	r0, #150	@ 0x96
 800051e:	f001 fca3 	bl	8001e68 <Delay_ms>
        for (int i = 0; i < 4; i++) {
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3301      	adds	r3, #1
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b03      	cmp	r3, #3
 800052c:	ddf1      	ble.n	8000512 <handle_level_intro+0x36>
        }
        // Backward: LED3 -> LED2 -> LED1 -> LED0
        for (int i = 2; i >= 0; i--) {
 800052e:	2302      	movs	r3, #2
 8000530:	603b      	str	r3, [r7, #0]
 8000532:	e00a      	b.n	800054a <handle_level_intro+0x6e>
            show_led(i);
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ff2b 	bl	8000394 <show_led>
            Delay_ms(150);
 800053e:	2096      	movs	r0, #150	@ 0x96
 8000540:	f001 fc92 	bl	8001e68 <Delay_ms>
        for (int i = 2; i >= 0; i--) {
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	3b01      	subs	r3, #1
 8000548:	603b      	str	r3, [r7, #0]
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	daf1      	bge.n	8000534 <handle_level_intro+0x58>
        }
        clear_leds();
 8000550:	f7ff ff36 	bl	80003c0 <clear_leds>
        Delay_ms(200);
 8000554:	20c8      	movs	r0, #200	@ 0xc8
 8000556:	f001 fc87 	bl	8001e68 <Delay_ms>
    }

    generate_pattern(g_level);
 800055a:	4b07      	ldr	r3, [pc, #28]	@ (8000578 <handle_level_intro+0x9c>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff fef0 	bl	8000344 <generate_pattern>
    g_pattern_index = 0;
 8000564:	4b08      	ldr	r3, [pc, #32]	@ (8000588 <handle_level_intro+0xac>)
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
    set_game_state(GAME_STATE_PATTERN_DISPLAY);
 800056a:	2003      	movs	r0, #3
 800056c:	f7ff fed4 	bl	8000318 <set_game_state>
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000086 	.word	0x20000086
 800057c:	2000008c 	.word	0x2000008c
 8000580:	20000088 	.word	0x20000088
 8000584:	080033d4 	.word	0x080033d4
 8000588:	200000b9 	.word	0x200000b9

0800058c <handle_pattern_display>:

static void handle_pattern_display(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
    uint16_t t_on  = diff_on_ms(g_difficulty);
 8000592:	4b1e      	ldr	r3, [pc, #120]	@ (800060c <handle_pattern_display+0x80>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff fe8e 	bl	80002b8 <diff_on_ms>
 800059c:	4603      	mov	r3, r0
 800059e:	80fb      	strh	r3, [r7, #6]
    uint16_t t_off = diff_off_ms(g_difficulty);
 80005a0:	4b1a      	ldr	r3, [pc, #104]	@ (800060c <handle_pattern_display+0x80>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fe9f 	bl	80002e8 <diff_off_ms>
 80005aa:	4603      	mov	r3, r0
 80005ac:	80bb      	strh	r3, [r7, #4]

    if (g_pattern_index < g_pattern_length) {
 80005ae:	4b18      	ldr	r3, [pc, #96]	@ (8000610 <handle_pattern_display+0x84>)
 80005b0:	781a      	ldrb	r2, [r3, #0]
 80005b2:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <handle_pattern_display+0x88>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d218      	bcs.n	80005ec <handle_pattern_display+0x60>
        show_led(g_pattern[g_pattern_index]);
 80005ba:	4b15      	ldr	r3, [pc, #84]	@ (8000610 <handle_pattern_display+0x84>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	461a      	mov	r2, r3
 80005c0:	4b15      	ldr	r3, [pc, #84]	@ (8000618 <handle_pattern_display+0x8c>)
 80005c2:	5c9b      	ldrb	r3, [r3, r2]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff fee5 	bl	8000394 <show_led>
        Delay_ms(t_on);
 80005ca:	88fb      	ldrh	r3, [r7, #6]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 fc4b 	bl	8001e68 <Delay_ms>
        clear_leds();
 80005d2:	f7ff fef5 	bl	80003c0 <clear_leds>
        Delay_ms(t_off);
 80005d6:	88bb      	ldrh	r3, [r7, #4]
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 fc45 	bl	8001e68 <Delay_ms>
        g_pattern_index++;
 80005de:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <handle_pattern_display+0x84>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	3301      	adds	r3, #1
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <handle_pattern_display+0x84>)
 80005e8:	701a      	strb	r2, [r3, #0]
        g_pattern_index = 0;
        g_input_index = 0;
        g_input_correct = 1;
        set_game_state(GAME_STATE_INPUT_WAIT);
    }
}
 80005ea:	e00b      	b.n	8000604 <handle_pattern_display+0x78>
        g_pattern_index = 0;
 80005ec:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <handle_pattern_display+0x84>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
        g_input_index = 0;
 80005f2:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <handle_pattern_display+0x90>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
        g_input_correct = 1;
 80005f8:	4b09      	ldr	r3, [pc, #36]	@ (8000620 <handle_pattern_display+0x94>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
        set_game_state(GAME_STATE_INPUT_WAIT);
 80005fe:	2004      	movs	r0, #4
 8000600:	f7ff fe8a 	bl	8000318 <set_game_state>
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000085 	.word	0x20000085
 8000610:	200000b9 	.word	0x200000b9
 8000614:	200000b8 	.word	0x200000b8
 8000618:	20000098 	.word	0x20000098
 800061c:	200000ba 	.word	0x200000ba
 8000620:	20000000 	.word	0x20000000

08000624 <handle_input_wait>:

static void handle_input_wait(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
    if (g_input_index < g_pattern_length) {
 800062a:	4b25      	ldr	r3, [pc, #148]	@ (80006c0 <handle_input_wait+0x9c>)
 800062c:	781a      	ldrb	r2, [r3, #0]
 800062e:	4b25      	ldr	r3, [pc, #148]	@ (80006c4 <handle_input_wait+0xa0>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	429a      	cmp	r2, r3
 8000634:	d23c      	bcs.n	80006b0 <handle_input_wait+0x8c>
        for (int i = 0; i < 4; i++) {
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	e035      	b.n	80006a8 <handle_input_wait+0x84>
            if (g_buttons[i].current_state == 1 && g_buttons[i].previous_state == 0) {
 800063c:	4a22      	ldr	r2, [pc, #136]	@ (80006c8 <handle_input_wait+0xa4>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d12c      	bne.n	80006a2 <handle_input_wait+0x7e>
 8000648:	4a1f      	ldr	r2, [pc, #124]	@ (80006c8 <handle_input_wait+0xa4>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	00db      	lsls	r3, r3, #3
 800064e:	4413      	add	r3, r2
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d125      	bne.n	80006a2 <handle_input_wait+0x7e>
                show_led(i);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fe9a 	bl	8000394 <show_led>
                Delay_ms(diff_on_ms(g_difficulty) / 2);
 8000660:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <handle_input_wait+0xa8>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff fe27 	bl	80002b8 <diff_on_ms>
 800066a:	4603      	mov	r3, r0
 800066c:	085b      	lsrs	r3, r3, #1
 800066e:	b29b      	uxth	r3, r3
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fbf9 	bl	8001e68 <Delay_ms>
                clear_leds();
 8000676:	f7ff fea3 	bl	80003c0 <clear_leds>
                if (i != g_pattern[g_input_index]) {
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <handle_input_wait+0x9c>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	461a      	mov	r2, r3
 8000680:	4b13      	ldr	r3, [pc, #76]	@ (80006d0 <handle_input_wait+0xac>)
 8000682:	5c9b      	ldrb	r3, [r3, r2]
 8000684:	461a      	mov	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4293      	cmp	r3, r2
 800068a:	d002      	beq.n	8000692 <handle_input_wait+0x6e>
                    g_input_correct = 0;
 800068c:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <handle_input_wait+0xb0>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
                }
                g_input_index++;
 8000692:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <handle_input_wait+0x9c>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	3301      	adds	r3, #1
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <handle_input_wait+0x9c>)
 800069c:	701a      	strb	r2, [r3, #0]
                break;
 800069e:	bf00      	nop
            }
        }
    } else {
        set_game_state(GAME_STATE_RESULT_PROCESS);
    }
}
 80006a0:	e009      	b.n	80006b6 <handle_input_wait+0x92>
        for (int i = 0; i < 4; i++) {
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	3301      	adds	r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b03      	cmp	r3, #3
 80006ac:	ddc6      	ble.n	800063c <handle_input_wait+0x18>
}
 80006ae:	e002      	b.n	80006b6 <handle_input_wait+0x92>
        set_game_state(GAME_STATE_RESULT_PROCESS);
 80006b0:	2005      	movs	r0, #5
 80006b2:	f7ff fe31 	bl	8000318 <set_game_state>
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200000ba 	.word	0x200000ba
 80006c4:	200000b8 	.word	0x200000b8
 80006c8:	200000c4 	.word	0x200000c4
 80006cc:	20000085 	.word	0x20000085
 80006d0:	20000098 	.word	0x20000098
 80006d4:	20000000 	.word	0x20000000

080006d8 <handle_result_process>:

static void handle_result_process(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
    if (g_input_correct) {
 80006dc:	4b22      	ldr	r3, [pc, #136]	@ (8000768 <handle_result_process+0x90>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d024      	beq.n	800072e <handle_result_process+0x56>
        g_score += 10 * g_level * g_difficulty;
 80006e4:	4b21      	ldr	r3, [pc, #132]	@ (800076c <handle_result_process+0x94>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b21      	ldr	r3, [pc, #132]	@ (8000770 <handle_result_process+0x98>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	fb03 f202 	mul.w	r2, r3, r2
 80006f2:	4613      	mov	r3, r2
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	4413      	add	r3, r2
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	461a      	mov	r2, r3
 80006fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <handle_result_process+0x9c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4413      	add	r3, r2
 8000702:	4a1c      	ldr	r2, [pc, #112]	@ (8000774 <handle_result_process+0x9c>)
 8000704:	6013      	str	r3, [r2, #0]
        g_level++;
 8000706:	4b19      	ldr	r3, [pc, #100]	@ (800076c <handle_result_process+0x94>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	3301      	adds	r3, #1
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4b17      	ldr	r3, [pc, #92]	@ (800076c <handle_result_process+0x94>)
 8000710:	701a      	strb	r2, [r3, #0]
        OLED_ShowStatus();
 8000712:	f001 fad9 	bl	8001cc8 <OLED_ShowStatus>
        if (g_level > 9)
 8000716:	4b15      	ldr	r3, [pc, #84]	@ (800076c <handle_result_process+0x94>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b09      	cmp	r3, #9
 800071c:	d903      	bls.n	8000726 <handle_result_process+0x4e>
            set_game_state(GAME_STATE_VICTORY);
 800071e:	2006      	movs	r0, #6
 8000720:	f7ff fdfa 	bl	8000318 <set_game_state>
        else {
            Log_Print("Try again!\r\n");
            set_game_state(GAME_STATE_LEVEL_INTRO);
        }
    }
}
 8000724:	e01d      	b.n	8000762 <handle_result_process+0x8a>
            set_game_state(GAME_STATE_LEVEL_INTRO);
 8000726:	2002      	movs	r0, #2
 8000728:	f7ff fdf6 	bl	8000318 <set_game_state>
}
 800072c:	e019      	b.n	8000762 <handle_result_process+0x8a>
        if (g_lives > 0) g_lives--;
 800072e:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <handle_result_process+0xa0>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d005      	beq.n	8000742 <handle_result_process+0x6a>
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <handle_result_process+0xa0>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	3b01      	subs	r3, #1
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <handle_result_process+0xa0>)
 8000740:	701a      	strb	r2, [r3, #0]
        OLED_ShowStatus();
 8000742:	f001 fac1 	bl	8001cc8 <OLED_ShowStatus>
        if (g_lives == 0)
 8000746:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <handle_result_process+0xa0>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d103      	bne.n	8000756 <handle_result_process+0x7e>
            set_game_state(GAME_STATE_GAME_DEATH);
 800074e:	2007      	movs	r0, #7
 8000750:	f7ff fde2 	bl	8000318 <set_game_state>
}
 8000754:	e005      	b.n	8000762 <handle_result_process+0x8a>
            Log_Print("Try again!\r\n");
 8000756:	4809      	ldr	r0, [pc, #36]	@ (800077c <handle_result_process+0xa4>)
 8000758:	f001 fba8 	bl	8001eac <Log_Print>
            set_game_state(GAME_STATE_LEVEL_INTRO);
 800075c:	2002      	movs	r0, #2
 800075e:	f7ff fddb 	bl	8000318 <set_game_state>
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000000 	.word	0x20000000
 800076c:	20000086 	.word	0x20000086
 8000770:	20000085 	.word	0x20000085
 8000774:	20000088 	.word	0x20000088
 8000778:	2000008c 	.word	0x2000008c
 800077c:	080033f8 	.word	0x080033f8

08000780 <handle_victory>:

static void handle_victory(void) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
    Log_Print("Congratulations! Final Score: %lu\r\n", g_score);
 8000786:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <handle_victory+0x6c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4619      	mov	r1, r3
 800078c:	4818      	ldr	r0, [pc, #96]	@ (80007f0 <handle_victory+0x70>)
 800078e:	f001 fb8d 	bl	8001eac <Log_Print>
    OLED_ShowStatus();
 8000792:	f001 fa99 	bl	8001cc8 <OLED_ShowStatus>

    for (int i = 0; i < 4; i++) {
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	e01f      	b.n	80007dc <handle_victory+0x5c>
        if (g_buttons[i].current_state == 1 && g_buttons[i].previous_state == 0) {
 800079c:	4a15      	ldr	r2, [pc, #84]	@ (80007f4 <handle_victory+0x74>)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d116      	bne.n	80007d6 <handle_victory+0x56>
 80007a8:	4a12      	ldr	r2, [pc, #72]	@ (80007f4 <handle_victory+0x74>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	00db      	lsls	r3, r3, #3
 80007ae:	4413      	add	r3, r2
 80007b0:	785b      	ldrb	r3, [r3, #1]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d10f      	bne.n	80007d6 <handle_victory+0x56>
            g_level = 1;
 80007b6:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <handle_victory+0x78>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
            g_score = 0;
 80007bc:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <handle_victory+0x6c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
            g_lives = INITIAL_LIVES;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <handle_victory+0x7c>)
 80007c4:	2204      	movs	r2, #4
 80007c6:	701a      	strb	r2, [r3, #0]
            g_difficulty_locked = 0;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000800 <handle_victory+0x80>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
            set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 80007ce:	2001      	movs	r0, #1
 80007d0:	f7ff fda2 	bl	8000318 <set_game_state>
            break;
 80007d4:	e006      	b.n	80007e4 <handle_victory+0x64>
    for (int i = 0; i < 4; i++) {
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	3301      	adds	r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b03      	cmp	r3, #3
 80007e0:	dddc      	ble.n	800079c <handle_victory+0x1c>
        }
    }
}
 80007e2:	bf00      	nop
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000088 	.word	0x20000088
 80007f0:	08003408 	.word	0x08003408
 80007f4:	200000c4 	.word	0x200000c4
 80007f8:	20000086 	.word	0x20000086
 80007fc:	2000008c 	.word	0x2000008c
 8000800:	20000094 	.word	0x20000094

08000804 <handle_game_death>:

static void handle_game_death(void) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
    static uint8_t animation_played = 0;

    // Play game over animation once upon entering this state
    if (!animation_played) {
 800080a:	4b3b      	ldr	r3, [pc, #236]	@ (80008f8 <handle_game_death+0xf4>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d144      	bne.n	800089c <handle_game_death+0x98>
        Log_Print("Game Over! Final Score: %lu\r\n", g_score);
 8000812:	4b3a      	ldr	r3, [pc, #232]	@ (80008fc <handle_game_death+0xf8>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4619      	mov	r1, r3
 8000818:	4839      	ldr	r0, [pc, #228]	@ (8000900 <handle_game_death+0xfc>)
 800081a:	f001 fb47 	bl	8001eac <Log_Print>

        // Rapid blink: 3 cycles
        for (int cycle = 0; cycle < 3; cycle++) {
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	e00e      	b.n	8000842 <handle_game_death+0x3e>
            LED_SetPattern(0x0F);  // All LEDs on
 8000824:	200f      	movs	r0, #15
 8000826:	f000 faff 	bl	8000e28 <LED_SetPattern>
            Delay_ms(150);
 800082a:	2096      	movs	r0, #150	@ 0x96
 800082c:	f001 fb1c 	bl	8001e68 <Delay_ms>
            LED_SetPattern(0x00);  // All LEDs off
 8000830:	2000      	movs	r0, #0
 8000832:	f000 faf9 	bl	8000e28 <LED_SetPattern>
            Delay_ms(150);
 8000836:	2096      	movs	r0, #150	@ 0x96
 8000838:	f001 fb16 	bl	8001e68 <Delay_ms>
        for (int cycle = 0; cycle < 3; cycle++) {
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	3301      	adds	r3, #1
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	2b02      	cmp	r3, #2
 8000846:	dded      	ble.n	8000824 <handle_game_death+0x20>
        }

        // Gradual fade out simulation
        for (int brightness = 10; brightness > 0; brightness--) {
 8000848:	230a      	movs	r3, #10
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	e01b      	b.n	8000886 <handle_game_death+0x82>
            for (int pulse = 0; pulse < 20; pulse++) {
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	e012      	b.n	800087a <handle_game_death+0x76>
                LED_SetPattern(0x0F);
 8000854:	200f      	movs	r0, #15
 8000856:	f000 fae7 	bl	8000e28 <LED_SetPattern>
                Delay_ms(brightness);
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	4618      	mov	r0, r3
 800085e:	f001 fb03 	bl	8001e68 <Delay_ms>
                LED_SetPattern(0x00);
 8000862:	2000      	movs	r0, #0
 8000864:	f000 fae0 	bl	8000e28 <LED_SetPattern>
                Delay_ms(11 - brightness);
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	f1c3 030b 	rsb	r3, r3, #11
 800086e:	4618      	mov	r0, r3
 8000870:	f001 fafa 	bl	8001e68 <Delay_ms>
            for (int pulse = 0; pulse < 20; pulse++) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3301      	adds	r3, #1
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b13      	cmp	r3, #19
 800087e:	dde9      	ble.n	8000854 <handle_game_death+0x50>
        for (int brightness = 10; brightness > 0; brightness--) {
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	3b01      	subs	r3, #1
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	2b00      	cmp	r3, #0
 800088a:	dce0      	bgt.n	800084e <handle_game_death+0x4a>
            }
        }

        LED_SetPattern(0x00);  // Ensure all off
 800088c:	2000      	movs	r0, #0
 800088e:	f000 facb 	bl	8000e28 <LED_SetPattern>
        OLED_ShowStatus();
 8000892:	f001 fa19 	bl	8001cc8 <OLED_ShowStatus>
        animation_played = 1;
 8000896:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <handle_game_death+0xf4>)
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
    }

    // Wait for button press to restart
    for (int i = 0; i < 4; i++) {
 800089c:	2300      	movs	r3, #0
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	e022      	b.n	80008e8 <handle_game_death+0xe4>
        if (g_buttons[i].current_state == 1 && g_buttons[i].previous_state == 0) {
 80008a2:	4a18      	ldr	r2, [pc, #96]	@ (8000904 <handle_game_death+0x100>)
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d119      	bne.n	80008e2 <handle_game_death+0xde>
 80008ae:	4a15      	ldr	r2, [pc, #84]	@ (8000904 <handle_game_death+0x100>)
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	00db      	lsls	r3, r3, #3
 80008b4:	4413      	add	r3, r2
 80008b6:	785b      	ldrb	r3, [r3, #1]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d112      	bne.n	80008e2 <handle_game_death+0xde>
            g_level = 1;
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <handle_game_death+0x104>)
 80008be:	2201      	movs	r2, #1
 80008c0:	701a      	strb	r2, [r3, #0]
            g_score = 0;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <handle_game_death+0xf8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
            g_lives = INITIAL_LIVES;
 80008c8:	4b10      	ldr	r3, [pc, #64]	@ (800090c <handle_game_death+0x108>)
 80008ca:	2204      	movs	r2, #4
 80008cc:	701a      	strb	r2, [r3, #0]
            g_difficulty_locked = 0;
 80008ce:	4b10      	ldr	r3, [pc, #64]	@ (8000910 <handle_game_death+0x10c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
            animation_played = 0;  // Reset for next game over
 80008d4:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <handle_game_death+0xf4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
            set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 80008da:	2001      	movs	r0, #1
 80008dc:	f7ff fd1c 	bl	8000318 <set_game_state>
            break;
 80008e0:	e006      	b.n	80008f0 <handle_game_death+0xec>
    for (int i = 0; i < 4; i++) {
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	2b03      	cmp	r3, #3
 80008ec:	ddd9      	ble.n	80008a2 <handle_game_death+0x9e>
        }
    }
}
 80008ee:	bf00      	nop
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200000c0 	.word	0x200000c0
 80008fc:	20000088 	.word	0x20000088
 8000900:	0800342c 	.word	0x0800342c
 8000904:	200000c4 	.word	0x200000c4
 8000908:	20000086 	.word	0x20000086
 800090c:	2000008c 	.word	0x2000008c
 8000910:	20000094 	.word	0x20000094

08000914 <Game_Init>:

/* ============================================================================
 * Public Functions
 * ============================================================================ */
void Game_Init(void) {
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
    Log_Print("\r\n[GAME] Initializing Simon Game...\r\n");
 800091a:	480e      	ldr	r0, [pc, #56]	@ (8000954 <Game_Init+0x40>)
 800091c:	f001 fac6 	bl	8001eac <Log_Print>
    uint32_t seed = g_adc_values[1] + g_adc_values[2] + GetTick();
 8000920:	4b0d      	ldr	r3, [pc, #52]	@ (8000958 <Game_Init+0x44>)
 8000922:	885b      	ldrh	r3, [r3, #2]
 8000924:	461a      	mov	r2, r3
 8000926:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <Game_Init+0x44>)
 8000928:	889b      	ldrh	r3, [r3, #4]
 800092a:	4413      	add	r3, r2
 800092c:	461c      	mov	r4, r3
 800092e:	f001 fab1 	bl	8001e94 <GetTick>
 8000932:	4603      	mov	r3, r0
 8000934:	4423      	add	r3, r4
 8000936:	607b      	str	r3, [r7, #4]
    srand(seed);
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f001 fb31 	bl	8001fa0 <srand>
    Log_Print("[GAME] Random seed set to: %lu\r\n", seed);
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	4806      	ldr	r0, [pc, #24]	@ (800095c <Game_Init+0x48>)
 8000942:	f001 fab3 	bl	8001eac <Log_Print>
    set_game_state(GAME_STATE_BOOT);
 8000946:	2000      	movs	r0, #0
 8000948:	f7ff fce6 	bl	8000318 <set_game_state>
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	0800344c 	.word	0x0800344c
 8000958:	200000e4 	.word	0x200000e4
 800095c:	08003474 	.word	0x08003474

08000960 <Game_Run>:

void Game_Run(void) {
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
    // Log state transitions
    if (g_last_state_logged != g_game_state) {
 8000964:	4b3e      	ldr	r3, [pc, #248]	@ (8000a60 <Game_Run+0x100>)
 8000966:	781a      	ldrb	r2, [r3, #0]
 8000968:	4b3e      	ldr	r3, [pc, #248]	@ (8000a64 <Game_Run+0x104>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	429a      	cmp	r2, r3
 800096e:	d03d      	beq.n	80009ec <Game_Run+0x8c>
        switch(g_game_state) {
 8000970:	4b3c      	ldr	r3, [pc, #240]	@ (8000a64 <Game_Run+0x104>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b07      	cmp	r3, #7
 8000976:	d833      	bhi.n	80009e0 <Game_Run+0x80>
 8000978:	a201      	add	r2, pc, #4	@ (adr r2, 8000980 <Game_Run+0x20>)
 800097a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097e:	bf00      	nop
 8000980:	080009a1 	.word	0x080009a1
 8000984:	080009a9 	.word	0x080009a9
 8000988:	080009b1 	.word	0x080009b1
 800098c:	080009b9 	.word	0x080009b9
 8000990:	080009c1 	.word	0x080009c1
 8000994:	080009c9 	.word	0x080009c9
 8000998:	080009d1 	.word	0x080009d1
 800099c:	080009d9 	.word	0x080009d9
            case GAME_STATE_BOOT:
                Log_Print("[STATE] -> BOOT\r\n");
 80009a0:	4831      	ldr	r0, [pc, #196]	@ (8000a68 <Game_Run+0x108>)
 80009a2:	f001 fa83 	bl	8001eac <Log_Print>
                break;
 80009a6:	e01b      	b.n	80009e0 <Game_Run+0x80>
            case GAME_STATE_DIFFICULTY_SELECT:
                Log_Print("[STATE] -> DIFFICULTY_SELECT\r\n");
 80009a8:	4830      	ldr	r0, [pc, #192]	@ (8000a6c <Game_Run+0x10c>)
 80009aa:	f001 fa7f 	bl	8001eac <Log_Print>
                break;
 80009ae:	e017      	b.n	80009e0 <Game_Run+0x80>
            case GAME_STATE_LEVEL_INTRO:
                Log_Print("[STATE] -> LEVEL_INTRO\r\n");
 80009b0:	482f      	ldr	r0, [pc, #188]	@ (8000a70 <Game_Run+0x110>)
 80009b2:	f001 fa7b 	bl	8001eac <Log_Print>
                break;
 80009b6:	e013      	b.n	80009e0 <Game_Run+0x80>
            case GAME_STATE_PATTERN_DISPLAY:
                Log_Print("[STATE] -> PATTERN_DISPLAY\r\n");
 80009b8:	482e      	ldr	r0, [pc, #184]	@ (8000a74 <Game_Run+0x114>)
 80009ba:	f001 fa77 	bl	8001eac <Log_Print>
                break;
 80009be:	e00f      	b.n	80009e0 <Game_Run+0x80>
            case GAME_STATE_INPUT_WAIT:
                Log_Print("[STATE] -> INPUT_WAIT\r\n");
 80009c0:	482d      	ldr	r0, [pc, #180]	@ (8000a78 <Game_Run+0x118>)
 80009c2:	f001 fa73 	bl	8001eac <Log_Print>
                break;
 80009c6:	e00b      	b.n	80009e0 <Game_Run+0x80>
            case GAME_STATE_RESULT_PROCESS:
                Log_Print("[STATE] -> RESULT_PROCESS\r\n");
 80009c8:	482c      	ldr	r0, [pc, #176]	@ (8000a7c <Game_Run+0x11c>)
 80009ca:	f001 fa6f 	bl	8001eac <Log_Print>
                break;
 80009ce:	e007      	b.n	80009e0 <Game_Run+0x80>
            case GAME_STATE_VICTORY:
                Log_Print("[STATE] -> VICTORY\r\n");
 80009d0:	482b      	ldr	r0, [pc, #172]	@ (8000a80 <Game_Run+0x120>)
 80009d2:	f001 fa6b 	bl	8001eac <Log_Print>
                break;
 80009d6:	e003      	b.n	80009e0 <Game_Run+0x80>
            case GAME_STATE_GAME_DEATH:
                Log_Print("[STATE] -> GAME_DEATH\r\n");
 80009d8:	482a      	ldr	r0, [pc, #168]	@ (8000a84 <Game_Run+0x124>)
 80009da:	f001 fa67 	bl	8001eac <Log_Print>
                break;
 80009de:	bf00      	nop
        }
        g_last_state_logged = g_game_state;
 80009e0:	4b20      	ldr	r3, [pc, #128]	@ (8000a64 <Game_Run+0x104>)
 80009e2:	781a      	ldrb	r2, [r3, #0]
 80009e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a60 <Game_Run+0x100>)
 80009e6:	701a      	strb	r2, [r3, #0]
        OLED_ShowStatus();
 80009e8:	f001 f96e 	bl	8001cc8 <OLED_ShowStatus>
    }

    // Execute current state handler
    switch(g_game_state) {
 80009ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000a64 <Game_Run+0x104>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b07      	cmp	r3, #7
 80009f2:	d82b      	bhi.n	8000a4c <Game_Run+0xec>
 80009f4:	a201      	add	r2, pc, #4	@ (adr r2, 80009fc <Game_Run+0x9c>)
 80009f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009fa:	bf00      	nop
 80009fc:	08000a1d 	.word	0x08000a1d
 8000a00:	08000a23 	.word	0x08000a23
 8000a04:	08000a29 	.word	0x08000a29
 8000a08:	08000a2f 	.word	0x08000a2f
 8000a0c:	08000a35 	.word	0x08000a35
 8000a10:	08000a3b 	.word	0x08000a3b
 8000a14:	08000a41 	.word	0x08000a41
 8000a18:	08000a47 	.word	0x08000a47
        case GAME_STATE_BOOT:
            handle_boot();
 8000a1c:	f7ff fcd8 	bl	80003d0 <handle_boot>
            break;
 8000a20:	e01c      	b.n	8000a5c <Game_Run+0xfc>
        case GAME_STATE_DIFFICULTY_SELECT:
            handle_difficulty_select();
 8000a22:	f7ff fceb 	bl	80003fc <handle_difficulty_select>
            break;
 8000a26:	e019      	b.n	8000a5c <Game_Run+0xfc>
        case GAME_STATE_LEVEL_INTRO:
            handle_level_intro();
 8000a28:	f7ff fd58 	bl	80004dc <handle_level_intro>
            break;
 8000a2c:	e016      	b.n	8000a5c <Game_Run+0xfc>
        case GAME_STATE_PATTERN_DISPLAY:
            handle_pattern_display();
 8000a2e:	f7ff fdad 	bl	800058c <handle_pattern_display>
            break;
 8000a32:	e013      	b.n	8000a5c <Game_Run+0xfc>
        case GAME_STATE_INPUT_WAIT:
            handle_input_wait();
 8000a34:	f7ff fdf6 	bl	8000624 <handle_input_wait>
            break;
 8000a38:	e010      	b.n	8000a5c <Game_Run+0xfc>
        case GAME_STATE_RESULT_PROCESS:
            handle_result_process();
 8000a3a:	f7ff fe4d 	bl	80006d8 <handle_result_process>
            break;
 8000a3e:	e00d      	b.n	8000a5c <Game_Run+0xfc>
        case GAME_STATE_VICTORY:
            handle_victory();
 8000a40:	f7ff fe9e 	bl	8000780 <handle_victory>
            break;
 8000a44:	e00a      	b.n	8000a5c <Game_Run+0xfc>
        case GAME_STATE_GAME_DEATH:
            handle_game_death();
 8000a46:	f7ff fedd 	bl	8000804 <handle_game_death>
            break;
 8000a4a:	e007      	b.n	8000a5c <Game_Run+0xfc>
        default:
            set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f7ff fc63 	bl	8000318 <set_game_state>
            Delay_ms(1000);
 8000a52:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a56:	f001 fa07 	bl	8001e68 <Delay_ms>
            break;
 8000a5a:	bf00      	nop
    }
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000001 	.word	0x20000001
 8000a64:	20000084 	.word	0x20000084
 8000a68:	08003498 	.word	0x08003498
 8000a6c:	080034ac 	.word	0x080034ac
 8000a70:	080034cc 	.word	0x080034cc
 8000a74:	080034e8 	.word	0x080034e8
 8000a78:	08003508 	.word	0x08003508
 8000a7c:	08003520 	.word	0x08003520
 8000a80:	0800353c 	.word	0x0800353c
 8000a84:	08003554 	.word	0x08003554

08000a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	db0b      	blt.n	8000ab2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	f003 021f 	and.w	r2, r3, #31
 8000aa0:	4907      	ldr	r1, [pc, #28]	@ (8000ac0 <__NVIC_EnableIRQ+0x38>)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	095b      	lsrs	r3, r3, #5
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000e100 	.word	0xe000e100

08000ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	6039      	str	r1, [r7, #0]
 8000ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db0a      	blt.n	8000aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	490c      	ldr	r1, [pc, #48]	@ (8000b10 <__NVIC_SetPriority+0x4c>)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	0112      	lsls	r2, r2, #4
 8000ae4:	b2d2      	uxtb	r2, r2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aec:	e00a      	b.n	8000b04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4908      	ldr	r1, [pc, #32]	@ (8000b14 <__NVIC_SetPriority+0x50>)
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	f003 030f 	and.w	r3, r3, #15
 8000afa:	3b04      	subs	r3, #4
 8000afc:	0112      	lsls	r2, r2, #4
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	440b      	add	r3, r1
 8000b02:	761a      	strb	r2, [r3, #24]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000e100 	.word	0xe000e100
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <SystemClock_Config>:
uint8_t g_current_adc_channel = 0;

/* ============================================================================
 * System Initialization
 * ============================================================================ */
void SystemClock_Config(void) {
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
    RCC->CR |= RCC_CR_HSION;
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b94 <SystemClock_Config+0x7c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a1c      	ldr	r2, [pc, #112]	@ (8000b94 <SystemClock_Config+0x7c>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_HSIRDY));
 8000b28:	bf00      	nop
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b94 <SystemClock_Config+0x7c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d0f9      	beq.n	8000b2a <SystemClock_Config+0x12>

    RCC->PLLCFGR = (RCC_PLLCFGR_PLLSRC_HSI) |
 8000b36:	4b17      	ldr	r3, [pc, #92]	@ (8000b94 <SystemClock_Config+0x7c>)
 8000b38:	f642 2210 	movw	r2, #10768	@ 0x2a10
 8000b3c:	605a      	str	r2, [r3, #4]
                   (16 << RCC_PLLCFGR_PLLM_Pos) |
                   (168 << RCC_PLLCFGR_PLLN_Pos) |
                   (0 << RCC_PLLCFGR_PLLP_Pos);

    RCC->CR |= RCC_CR_PLLON;
 8000b3e:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <SystemClock_Config+0x7c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a14      	ldr	r2, [pc, #80]	@ (8000b94 <SystemClock_Config+0x7c>)
 8000b44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000b48:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_PLLRDY));
 8000b4a:	bf00      	nop
 8000b4c:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <SystemClock_Config+0x7c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d0f9      	beq.n	8000b4c <SystemClock_Config+0x34>

    FLASH->ACR = FLASH_ACR_LATENCY_2WS;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <SystemClock_Config+0x80>)
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	601a      	str	r2, [r3, #0]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV2 | RCC_CFGR_PPRE2_DIV1;
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b94 <SystemClock_Config+0x7c>)
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	4a0c      	ldr	r2, [pc, #48]	@ (8000b94 <SystemClock_Config+0x7c>)
 8000b64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b68:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <SystemClock_Config+0x7c>)
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	4a09      	ldr	r2, [pc, #36]	@ (8000b94 <SystemClock_Config+0x7c>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	6093      	str	r3, [r2, #8]
    while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000b76:	bf00      	nop
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <SystemClock_Config+0x7c>)
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	f003 030c 	and.w	r3, r3, #12
 8000b80:	2b08      	cmp	r3, #8
 8000b82:	d1f9      	bne.n	8000b78 <SystemClock_Config+0x60>

    SystemCoreClock = 84000000;
 8000b84:	4b05      	ldr	r3, [pc, #20]	@ (8000b9c <SystemClock_Config+0x84>)
 8000b86:	4a06      	ldr	r2, [pc, #24]	@ (8000ba0 <SystemClock_Config+0x88>)
 8000b88:	601a      	str	r2, [r3, #0]
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40023c00 	.word	0x40023c00
 8000b9c:	20000004 	.word	0x20000004
 8000ba0:	0501bd00 	.word	0x0501bd00

08000ba4 <GPIO_Init>:

void GPIO_Init(void) {
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;
 8000ba8:	4b27      	ldr	r3, [pc, #156]	@ (8000c48 <GPIO_Init+0xa4>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bac:	4a26      	ldr	r2, [pc, #152]	@ (8000c48 <GPIO_Init+0xa4>)
 8000bae:	f043 0307 	orr.w	r3, r3, #7
 8000bb2:	6313      	str	r3, [r2, #48]	@ 0x30

    // LEDs as outputs
    GPIOA->MODER |= (1 << (LED1_PIN*2)) | (1 << (LED2_PIN*2)) | (1 << (LED3_PIN*2));
 8000bb4:	4b25      	ldr	r3, [pc, #148]	@ (8000c4c <GPIO_Init+0xa8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a24      	ldr	r2, [pc, #144]	@ (8000c4c <GPIO_Init+0xa8>)
 8000bba:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 8000bbe:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (1 << (LED4_PIN*2));
 8000bc0:	4b23      	ldr	r3, [pc, #140]	@ (8000c50 <GPIO_Init+0xac>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a22      	ldr	r2, [pc, #136]	@ (8000c50 <GPIO_Init+0xac>)
 8000bc6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bca:	6013      	str	r3, [r2, #0]

    // Buttons with pull-ups
    GPIOA->PUPDR |= (1 << (BTN0_PIN*2));
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c4c <GPIO_Init+0xa8>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	4a1e      	ldr	r2, [pc, #120]	@ (8000c4c <GPIO_Init+0xa8>)
 8000bd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000bd6:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (1 << (BTN1_PIN*2)) | (1 << (BTN2_PIN*2)) | (1 << (BTN3_PIN*2));
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <GPIO_Init+0xac>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8000c50 <GPIO_Init+0xac>)
 8000bde:	f443 63a8 	orr.w	r3, r3, #1344	@ 0x540
 8000be2:	60d3      	str	r3, [r2, #12]

    // ADC pins as analog
    GPIOA->MODER |= (3 << (POT_PIN*2)) | (3 << (TEMP_PIN*2)) | (3 << (LIGHT_PIN*2));
 8000be4:	4b19      	ldr	r3, [pc, #100]	@ (8000c4c <GPIO_Init+0xa8>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a18      	ldr	r2, [pc, #96]	@ (8000c4c <GPIO_Init+0xa8>)
 8000bea:	f443 7343 	orr.w	r3, r3, #780	@ 0x30c
 8000bee:	f043 0303 	orr.w	r3, r3, #3
 8000bf2:	6013      	str	r3, [r2, #0]

    // UART2: PA2, PA3 as AF7
    GPIOA->MODER |= (2 << (2*2)) | (2 << (3*2));
 8000bf4:	4b15      	ldr	r3, [pc, #84]	@ (8000c4c <GPIO_Init+0xa8>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a14      	ldr	r2, [pc, #80]	@ (8000c4c <GPIO_Init+0xa8>)
 8000bfa:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000bfe:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (7 << (2*4)) | (7 << (3*4));
 8000c00:	4b12      	ldr	r3, [pc, #72]	@ (8000c4c <GPIO_Init+0xa8>)
 8000c02:	6a1b      	ldr	r3, [r3, #32]
 8000c04:	4a11      	ldr	r2, [pc, #68]	@ (8000c4c <GPIO_Init+0xa8>)
 8000c06:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000c0a:	6213      	str	r3, [r2, #32]

    // 7-Segment BCD outputs
    GPIOC->MODER = (GPIOC->MODER & ~(3U << (BCD_2_0_PIN*2))) | (1U << (BCD_2_0_PIN*2));
 8000c0c:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <GPIO_Init+0xb0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c14:	4a0f      	ldr	r2, [pc, #60]	@ (8000c54 <GPIO_Init+0xb0>)
 8000c16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c1a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER = (GPIOA->MODER & ~((3U << (BCD_2_1_PIN*2)) | (3U << (BCD_2_3_PIN*2)))) |
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <GPIO_Init+0xa8>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000c24:	4a09      	ldr	r2, [pc, #36]	@ (8000c4c <GPIO_Init+0xa8>)
                   (1U << (BCD_2_1_PIN*2)) | (1U << (BCD_2_3_PIN*2));
 8000c26:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
    GPIOA->MODER = (GPIOA->MODER & ~((3U << (BCD_2_1_PIN*2)) | (3U << (BCD_2_3_PIN*2)))) |
 8000c2a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER = (GPIOB->MODER & ~(3U << (BCD_2_2_PIN*2))) | (1U << (BCD_2_2_PIN*2));
 8000c2c:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <GPIO_Init+0xac>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000c34:	4a06      	ldr	r2, [pc, #24]	@ (8000c50 <GPIO_Init+0xac>)
 8000c36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000c3a:	6013      	str	r3, [r2, #0]
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	40020400 	.word	0x40020400
 8000c54:	40020800 	.word	0x40020800

08000c58 <ADC_Init>:

void ADC_Init(void) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000c5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <ADC_Init+0x50>)
 8000c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c60:	4a11      	ldr	r2, [pc, #68]	@ (8000ca8 <ADC_Init+0x50>)
 8000c62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c66:	6453      	str	r3, [r2, #68]	@ 0x44
    ADC1->CR2 |= ADC_CR2_ADON;
 8000c68:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <ADC_Init+0x54>)
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000cac <ADC_Init+0x54>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6093      	str	r3, [r2, #8]
    ADC1->CR1 |= ADC_CR1_EOCIE;
 8000c74:	4b0d      	ldr	r3, [pc, #52]	@ (8000cac <ADC_Init+0x54>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	4a0c      	ldr	r2, [pc, #48]	@ (8000cac <ADC_Init+0x54>)
 8000c7a:	f043 0320 	orr.w	r3, r3, #32
 8000c7e:	6053      	str	r3, [r2, #4]
    ADC1->CR1 |= (1 << ADC_CR1_RES_Pos); // 10-bit resolution
 8000c80:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <ADC_Init+0x54>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	4a09      	ldr	r2, [pc, #36]	@ (8000cac <ADC_Init+0x54>)
 8000c86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c8a:	6053      	str	r3, [r2, #4]
    ADC1->SMPR2 |= (7 << ADC_SMPR2_SMP0_Pos) |
 8000c8c:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <ADC_Init+0x54>)
 8000c8e:	691b      	ldr	r3, [r3, #16]
 8000c90:	4a06      	ldr	r2, [pc, #24]	@ (8000cac <ADC_Init+0x54>)
 8000c92:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000c96:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8000c9a:	6113      	str	r3, [r2, #16]
                   (7 << ADC_SMPR2_SMP1_Pos) |
                   (7 << ADC_SMPR2_SMP4_Pos);
    Delay_ms(2);
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	f001 f8e3 	bl	8001e68 <Delay_ms>
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40012000 	.word	0x40012000

08000cb0 <USART2_Init>:

void USART2_Init(void) {
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <USART2_Init+0x34>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <USART2_Init+0x34>)
 8000cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cbe:	6413      	str	r3, [r2, #64]	@ 0x40
    USART2->BRR = 0x16C; // 115200 @ 42MHz
 8000cc0:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <USART2_Init+0x38>)
 8000cc2:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8000cc6:	609a      	str	r2, [r3, #8]
    USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000cc8:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <USART2_Init+0x38>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	4a06      	ldr	r2, [pc, #24]	@ (8000ce8 <USART2_Init+0x38>)
 8000cce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cd2:	f043 030c 	orr.w	r3, r3, #12
 8000cd6:	60d3      	str	r3, [r2, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40004400 	.word	0x40004400

08000cec <NVIC_Init>:

void NVIC_Init(void) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(ADC_IRQn);
 8000cf0:	2012      	movs	r0, #18
 8000cf2:	f7ff fec9 	bl	8000a88 <__NVIC_EnableIRQ>
    NVIC_SetPriority(ADC_IRQn, 1);
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	2012      	movs	r0, #18
 8000cfa:	f7ff fee3 	bl	8000ac4 <__NVIC_SetPriority>
    NVIC_SetPriority(SysTick_IRQn, 0);
 8000cfe:	2100      	movs	r1, #0
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f7ff fede 	bl	8000ac4 <__NVIC_SetPriority>
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <ADC_StartConversion>:

void ADC_StartConversion(void) {
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
    ADC1->SQR3 = (ADC1->SQR3 & ~ADC_SQR3_SQ1) | POT_PIN;
 8000d10:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <ADC_StartConversion+0x2c>)
 8000d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d14:	f023 031f 	bic.w	r3, r3, #31
 8000d18:	4a07      	ldr	r2, [pc, #28]	@ (8000d38 <ADC_StartConversion+0x2c>)
 8000d1a:	f043 0304 	orr.w	r3, r3, #4
 8000d1e:	6353      	str	r3, [r2, #52]	@ 0x34
    ADC1->CR2 |= ADC_CR2_SWSTART;
 8000d20:	4b05      	ldr	r3, [pc, #20]	@ (8000d38 <ADC_StartConversion+0x2c>)
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	4a04      	ldr	r2, [pc, #16]	@ (8000d38 <ADC_StartConversion+0x2c>)
 8000d26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000d2a:	6093      	str	r3, [r2, #8]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40012000 	.word	0x40012000

08000d3c <Monitor_Buttons>:

/* ============================================================================
 * Hardware Monitoring
 * ============================================================================ */
void Monitor_Buttons(void) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
    uint32_t current_time = GetTick();
 8000d42:	f001 f8a7 	bl	8001e94 <GetTick>
 8000d46:	60b8      	str	r0, [r7, #8]
    uint8_t readings[4] = {
        !(BTN0_PORT->IDR & (1 << BTN0_PIN)),
 8000d48:	4b30      	ldr	r3, [pc, #192]	@ (8000e0c <Monitor_Buttons+0xd0>)
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	bf0c      	ite	eq
 8000d54:	2301      	moveq	r3, #1
 8000d56:	2300      	movne	r3, #0
 8000d58:	b2db      	uxtb	r3, r3
    uint8_t readings[4] = {
 8000d5a:	713b      	strb	r3, [r7, #4]
        !(BTN1_PORT->IDR & (1 << BTN1_PIN)),
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e10 <Monitor_Buttons+0xd4>)
 8000d5e:	691b      	ldr	r3, [r3, #16]
 8000d60:	f003 0308 	and.w	r3, r3, #8
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	bf0c      	ite	eq
 8000d68:	2301      	moveq	r3, #1
 8000d6a:	2300      	movne	r3, #0
 8000d6c:	b2db      	uxtb	r3, r3
    uint8_t readings[4] = {
 8000d6e:	717b      	strb	r3, [r7, #5]
        !(BTN2_PORT->IDR & (1 << BTN2_PIN)),
 8000d70:	4b27      	ldr	r3, [pc, #156]	@ (8000e10 <Monitor_Buttons+0xd4>)
 8000d72:	691b      	ldr	r3, [r3, #16]
 8000d74:	f003 0320 	and.w	r3, r3, #32
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	bf0c      	ite	eq
 8000d7c:	2301      	moveq	r3, #1
 8000d7e:	2300      	movne	r3, #0
 8000d80:	b2db      	uxtb	r3, r3
    uint8_t readings[4] = {
 8000d82:	71bb      	strb	r3, [r7, #6]
        !(BTN3_PORT->IDR & (1 << BTN3_PIN))
 8000d84:	4b22      	ldr	r3, [pc, #136]	@ (8000e10 <Monitor_Buttons+0xd4>)
 8000d86:	691b      	ldr	r3, [r3, #16]
 8000d88:	f003 0310 	and.w	r3, r3, #16
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	bf0c      	ite	eq
 8000d90:	2301      	moveq	r3, #1
 8000d92:	2300      	movne	r3, #0
 8000d94:	b2db      	uxtb	r3, r3
    uint8_t readings[4] = {
 8000d96:	71fb      	strb	r3, [r7, #7]
    };

    for(int i = 0; i < 4; i++) {
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	e02e      	b.n	8000dfc <Monitor_Buttons+0xc0>
        g_buttons[i].previous_state = g_buttons[i].current_state;
 8000d9e:	4a1d      	ldr	r2, [pc, #116]	@ (8000e14 <Monitor_Buttons+0xd8>)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
 8000da6:	4a1b      	ldr	r2, [pc, #108]	@ (8000e14 <Monitor_Buttons+0xd8>)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	4413      	add	r3, r2
 8000dae:	460a      	mov	r2, r1
 8000db0:	705a      	strb	r2, [r3, #1]
        g_buttons[i].current_state = readings[i];
 8000db2:	1d3a      	adds	r2, r7, #4
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4413      	add	r3, r2
 8000db8:	7819      	ldrb	r1, [r3, #0]
 8000dba:	4a16      	ldr	r2, [pc, #88]	@ (8000e14 <Monitor_Buttons+0xd8>)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
        if(g_buttons[i].current_state != g_buttons[i].previous_state) {
 8000dc2:	4a14      	ldr	r2, [pc, #80]	@ (8000e14 <Monitor_Buttons+0xd8>)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8000dca:	4912      	ldr	r1, [pc, #72]	@ (8000e14 <Monitor_Buttons+0xd8>)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	00db      	lsls	r3, r3, #3
 8000dd0:	440b      	add	r3, r1
 8000dd2:	785b      	ldrb	r3, [r3, #1]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d00e      	beq.n	8000df6 <Monitor_Buttons+0xba>
            if((current_time - g_buttons[i].last_change_time) >= BUTTON_DEBOUNCE_MS) {
 8000dd8:	4a0e      	ldr	r2, [pc, #56]	@ (8000e14 <Monitor_Buttons+0xd8>)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	4413      	add	r3, r2
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b31      	cmp	r3, #49	@ 0x31
 8000de8:	d905      	bls.n	8000df6 <Monitor_Buttons+0xba>
                g_buttons[i].last_change_time = current_time;
 8000dea:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <Monitor_Buttons+0xd8>)
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	4413      	add	r3, r2
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	605a      	str	r2, [r3, #4]
    for(int i = 0; i < 4; i++) {
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	ddcd      	ble.n	8000d9e <Monitor_Buttons+0x62>
            }
        }
    }
}
 8000e02:	bf00      	nop
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40020000 	.word	0x40020000
 8000e10:	40020400 	.word	0x40020400
 8000e14:	200000c4 	.word	0x200000c4

08000e18 <Monitor_ADC>:

void Monitor_ADC(void) {
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
    /* ADC handled via interrupt */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <LED_SetPattern>:

/* ============================================================================
 * Hardware Control
 * ============================================================================ */
void LED_SetPattern(uint8_t pattern) {
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
    (pattern & 0x01) ? (LED1_PORT->BSRR = (1 << LED1_PIN)) :
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <LED_SetPattern+0x1c>
 8000e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea8 <LED_SetPattern+0x80>)
 8000e3e:	2220      	movs	r2, #32
 8000e40:	619a      	str	r2, [r3, #24]
 8000e42:	e003      	b.n	8000e4c <LED_SetPattern+0x24>
                       (LED1_PORT->BSRR = (1 << (LED1_PIN + 16)));
 8000e44:	4b18      	ldr	r3, [pc, #96]	@ (8000ea8 <LED_SetPattern+0x80>)
 8000e46:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000e4a:	619a      	str	r2, [r3, #24]
    (pattern & 0x02) ? (LED2_PORT->BSRR = (1 << LED2_PIN)) :
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <LED_SetPattern+0x36>
 8000e56:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <LED_SetPattern+0x80>)
 8000e58:	2240      	movs	r2, #64	@ 0x40
 8000e5a:	619a      	str	r2, [r3, #24]
 8000e5c:	e003      	b.n	8000e66 <LED_SetPattern+0x3e>
                       (LED2_PORT->BSRR = (1 << (LED2_PIN + 16)));
 8000e5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <LED_SetPattern+0x80>)
 8000e60:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e64:	619a      	str	r2, [r3, #24]
    (pattern & 0x04) ? (LED3_PORT->BSRR = (1 << LED3_PIN)) :
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d003      	beq.n	8000e78 <LED_SetPattern+0x50>
 8000e70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <LED_SetPattern+0x80>)
 8000e72:	2280      	movs	r2, #128	@ 0x80
 8000e74:	619a      	str	r2, [r3, #24]
 8000e76:	e003      	b.n	8000e80 <LED_SetPattern+0x58>
                       (LED3_PORT->BSRR = (1 << (LED3_PIN + 16)));
 8000e78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <LED_SetPattern+0x80>)
 8000e7a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e7e:	619a      	str	r2, [r3, #24]
    (pattern & 0x08) ? (LED4_PORT->BSRR = (1 << LED4_PIN)) :
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	f003 0308 	and.w	r3, r3, #8
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <LED_SetPattern+0x6a>
 8000e8a:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <LED_SetPattern+0x84>)
 8000e8c:	2240      	movs	r2, #64	@ 0x40
 8000e8e:	619a      	str	r2, [r3, #24]
                       (LED4_PORT->BSRR = (1 << (LED4_PIN + 16)));
}
 8000e90:	e003      	b.n	8000e9a <LED_SetPattern+0x72>
                       (LED4_PORT->BSRR = (1 << (LED4_PIN + 16)));
 8000e92:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <LED_SetPattern+0x84>)
 8000e94:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e98:	619a      	str	r2, [r3, #24]
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40020000 	.word	0x40020000
 8000eac:	40020400 	.word	0x40020400

08000eb0 <SevenSeg_Display>:

void SevenSeg_Display(uint8_t digit) {
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
    if(digit > 9) return;
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b09      	cmp	r3, #9
 8000ebe:	d837      	bhi.n	8000f30 <SevenSeg_Display+0x80>
    (digit & 0x01) ? (BCD_2_0_PORT->BSRR = (1 << BCD_2_0_PIN)) :
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <SevenSeg_Display+0x22>
 8000eca:	4b1c      	ldr	r3, [pc, #112]	@ (8000f3c <SevenSeg_Display+0x8c>)
 8000ecc:	2280      	movs	r2, #128	@ 0x80
 8000ece:	619a      	str	r2, [r3, #24]
 8000ed0:	e003      	b.n	8000eda <SevenSeg_Display+0x2a>
                     (BCD_2_0_PORT->BSRR = (1 << (BCD_2_0_PIN + 16)));
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f3c <SevenSeg_Display+0x8c>)
 8000ed4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ed8:	619a      	str	r2, [r3, #24]
    (digit & 0x02) ? (BCD_2_1_PORT->BSRR = (1 << BCD_2_1_PIN)) :
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d004      	beq.n	8000eee <SevenSeg_Display+0x3e>
 8000ee4:	4b16      	ldr	r3, [pc, #88]	@ (8000f40 <SevenSeg_Display+0x90>)
 8000ee6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000eea:	619a      	str	r2, [r3, #24]
 8000eec:	e003      	b.n	8000ef6 <SevenSeg_Display+0x46>
                     (BCD_2_1_PORT->BSRR = (1 << (BCD_2_1_PIN + 16)));
 8000eee:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <SevenSeg_Display+0x90>)
 8000ef0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000ef4:	619a      	str	r2, [r3, #24]
    (digit & 0x04) ? (BCD_2_2_PORT->BSRR = (1 << BCD_2_2_PIN)) :
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d004      	beq.n	8000f0a <SevenSeg_Display+0x5a>
 8000f00:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <SevenSeg_Display+0x94>)
 8000f02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f06:	619a      	str	r2, [r3, #24]
 8000f08:	e003      	b.n	8000f12 <SevenSeg_Display+0x62>
                     (BCD_2_2_PORT->BSRR = (1 << (BCD_2_2_PIN + 16)));
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <SevenSeg_Display+0x94>)
 8000f0c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f10:	619a      	str	r2, [r3, #24]
    (digit & 0x08) ? (BCD_2_3_PORT->BSRR = (1 << BCD_2_3_PIN)) :
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	f003 0308 	and.w	r3, r3, #8
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d004      	beq.n	8000f26 <SevenSeg_Display+0x76>
 8000f1c:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <SevenSeg_Display+0x90>)
 8000f1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f22:	619a      	str	r2, [r3, #24]
 8000f24:	e005      	b.n	8000f32 <SevenSeg_Display+0x82>
                     (BCD_2_3_PORT->BSRR = (1 << (BCD_2_3_PIN + 16)));
 8000f26:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <SevenSeg_Display+0x90>)
 8000f28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f2c:	619a      	str	r2, [r3, #24]
 8000f2e:	e000      	b.n	8000f32 <SevenSeg_Display+0x82>
    if(digit > 9) return;
 8000f30:	bf00      	nop
}
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	40020800 	.word	0x40020800
 8000f40:	40020000 	.word	0x40020000
 8000f44:	40020400 	.word	0x40020400

08000f48 <ADC_IRQHandler>:

/* ============================================================================
 * Interrupt Handler
 * ============================================================================ */
void ADC_IRQHandler(void) {
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
    if(ADC1->SR & ADC_SR_EOC) {
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc8 <ADC_IRQHandler+0x80>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d031      	beq.n	8000fbc <ADC_IRQHandler+0x74>
        g_adc_values[g_current_adc_channel] = ADC1->DR;
 8000f58:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <ADC_IRQHandler+0x80>)
 8000f5a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fcc <ADC_IRQHandler+0x84>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	b289      	uxth	r1, r1
 8000f64:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd0 <ADC_IRQHandler+0x88>)
 8000f66:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        g_current_adc_channel = (g_current_adc_channel + 1) % 3;
 8000f6a:	4b18      	ldr	r3, [pc, #96]	@ (8000fcc <ADC_IRQHandler+0x84>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <ADC_IRQHandler+0x8c>)
 8000f72:	fb83 3102 	smull	r3, r1, r3, r2
 8000f76:	17d3      	asrs	r3, r2, #31
 8000f78:	1ac9      	subs	r1, r1, r3
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	440b      	add	r3, r1
 8000f80:	1ad1      	subs	r1, r2, r3
 8000f82:	b2ca      	uxtb	r2, r1
 8000f84:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <ADC_IRQHandler+0x84>)
 8000f86:	701a      	strb	r2, [r3, #0]
        ADC1->SQR3 = (ADC1->SQR3 & ~ADC_SQR3_SQ1) |
 8000f88:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <ADC_IRQHandler+0x80>)
 8000f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f8c:	f023 021f 	bic.w	r2, r3, #31
                     (g_current_adc_channel == 0 ? POT_PIN :
 8000f90:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <ADC_IRQHandler+0x84>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d007      	beq.n	8000fa8 <ADC_IRQHandler+0x60>
                     (g_current_adc_channel == 1 ? TEMP_PIN : LIGHT_PIN));
 8000f98:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <ADC_IRQHandler+0x84>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
                     (g_current_adc_channel == 0 ? POT_PIN :
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d101      	bne.n	8000fa4 <ADC_IRQHandler+0x5c>
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e002      	b.n	8000faa <ADC_IRQHandler+0x62>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	e000      	b.n	8000faa <ADC_IRQHandler+0x62>
 8000fa8:	2304      	movs	r3, #4
        ADC1->SQR3 = (ADC1->SQR3 & ~ADC_SQR3_SQ1) |
 8000faa:	4907      	ldr	r1, [pc, #28]	@ (8000fc8 <ADC_IRQHandler+0x80>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	634b      	str	r3, [r1, #52]	@ 0x34
        ADC1->CR2 |= ADC_CR2_SWSTART;
 8000fb0:	4b05      	ldr	r3, [pc, #20]	@ (8000fc8 <ADC_IRQHandler+0x80>)
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	4a04      	ldr	r2, [pc, #16]	@ (8000fc8 <ADC_IRQHandler+0x80>)
 8000fb6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000fba:	6093      	str	r3, [r2, #8]
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40012000 	.word	0x40012000
 8000fcc:	200000ea 	.word	0x200000ea
 8000fd0:	200000e4 	.word	0x200000e4
 8000fd4:	55555556 	.word	0x55555556

08000fd8 <__NVIC_SetPriority>:
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db0a      	blt.n	8001002 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	490c      	ldr	r1, [pc, #48]	@ (8001024 <__NVIC_SetPriority+0x4c>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	0112      	lsls	r2, r2, #4
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001000:	e00a      	b.n	8001018 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4908      	ldr	r1, [pc, #32]	@ (8001028 <__NVIC_SetPriority+0x50>)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	3b04      	subs	r3, #4
 8001010:	0112      	lsls	r2, r2, #4
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	440b      	add	r3, r1
 8001016:	761a      	strb	r2, [r3, #24]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800103c:	d301      	bcc.n	8001042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103e:	2301      	movs	r3, #1
 8001040:	e00f      	b.n	8001062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001042:	4a0a      	ldr	r2, [pc, #40]	@ (800106c <SysTick_Config+0x40>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104a:	210f      	movs	r1, #15
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f7ff ffc2 	bl	8000fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001054:	4b05      	ldr	r3, [pc, #20]	@ (800106c <SysTick_Config+0x40>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105a:	4b04      	ldr	r3, [pc, #16]	@ (800106c <SysTick_Config+0x40>)
 800105c:	2207      	movs	r2, #7
 800105e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	e000e010 	.word	0xe000e010

08001070 <main>:
#include "utils.h"

/* ============================================================================
 * Main Function
 * ============================================================================ */
int main(void) {
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
    // Initialize hardware
    SystemClock_Config();
 8001074:	f7ff fd50 	bl	8000b18 <SystemClock_Config>
    GPIO_Init();
 8001078:	f7ff fd94 	bl	8000ba4 <GPIO_Init>
    USART2_Init();
 800107c:	f7ff fe18 	bl	8000cb0 <USART2_Init>
    SysTick_Config(SystemCoreClock / 1000); // 1ms ticks
 8001080:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <main+0x5c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a12      	ldr	r2, [pc, #72]	@ (80010d0 <main+0x60>)
 8001086:	fba2 2303 	umull	r2, r3, r2, r3
 800108a:	099b      	lsrs	r3, r3, #6
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ffcd 	bl	800102c <SysTick_Config>
    NVIC_Init();
 8001092:	f7ff fe2b 	bl	8000cec <NVIC_Init>
    ADC_Init();
 8001096:	f7ff fddf 	bl	8000c58 <ADC_Init>

    // Initialize OLED display
    oled_init();
 800109a:	f000 fc65 	bl	8001968 <oled_init>
    oled_clear();
 800109e:	f000 fc3d 	bl	800191c <oled_clear>

    // Mark system as initialized
    g_system_initialized = 1;
 80010a2:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <main+0x64>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]

    // Start ADC conversions
    ADC_StartConversion();
 80010a8:	f7ff fe30 	bl	8000d0c <ADC_StartConversion>
    Delay_ms(10);
 80010ac:	200a      	movs	r0, #10
 80010ae:	f000 fedb 	bl	8001e68 <Delay_ms>

    // Initialize game
    Game_Init();
 80010b2:	f7ff fc2f 	bl	8000914 <Game_Init>

    // Main loop
    while(1) {
        Monitor_Buttons();
 80010b6:	f7ff fe41 	bl	8000d3c <Monitor_Buttons>
        Monitor_ADC();
 80010ba:	f7ff fead 	bl	8000e18 <Monitor_ADC>
        Game_Run();
 80010be:	f7ff fc4f 	bl	8000960 <Game_Run>
        Delay_ms(5);
 80010c2:	2005      	movs	r0, #5
 80010c4:	f000 fed0 	bl	8001e68 <Delay_ms>
        Monitor_Buttons();
 80010c8:	bf00      	nop
 80010ca:	e7f4      	b.n	80010b6 <main+0x46>
 80010cc:	20000004 	.word	0x20000004
 80010d0:	10624dd3 	.word	0x10624dd3
 80010d4:	20000174 	.word	0x20000174

080010d8 <I2C1_Init_OLED>:

/* ============================================================================
 * I2C Low-Level Functions
 * ============================================================================
 */
static void I2C1_Init_OLED(void) {
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80010dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001194 <I2C1_Init_OLED+0xbc>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e0:	4a2c      	ldr	r2, [pc, #176]	@ (8001194 <I2C1_Init_OLED+0xbc>)
 80010e2:	f043 0302 	orr.w	r3, r3, #2
 80010e6:	6313      	str	r3, [r2, #48]	@ 0x30

  // PB8, PB9 AF4, Open-Drain, Pull-Up, High speed
  GPIOB->MODER &= ~((3u << (8 * 2)) | (3u << (9 * 2)));
 80010e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a2a      	ldr	r2, [pc, #168]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 80010ee:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80010f2:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= ((2u << (8 * 2)) | (2u << (9 * 2)));
 80010f4:	4b28      	ldr	r3, [pc, #160]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a27      	ldr	r2, [pc, #156]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 80010fa:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 80010fe:	6013      	str	r3, [r2, #0]
  GPIOB->OTYPER |= (1u << 8) | (1u << 9);
 8001100:	4b25      	ldr	r3, [pc, #148]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	4a24      	ldr	r2, [pc, #144]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 8001106:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800110a:	6053      	str	r3, [r2, #4]
  GPIOB->OSPEEDR |= (3u << (8 * 2)) | (3u << (9 * 2));
 800110c:	4b22      	ldr	r3, [pc, #136]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	4a21      	ldr	r2, [pc, #132]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 8001112:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8001116:	6093      	str	r3, [r2, #8]
  GPIOB->PUPDR &= ~((3u << (8 * 2)) | (3u << (9 * 2)));
 8001118:	4b1f      	ldr	r3, [pc, #124]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	4a1e      	ldr	r2, [pc, #120]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 800111e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8001122:	60d3      	str	r3, [r2, #12]
  GPIOB->PUPDR |= ((1u << (8 * 2)) | (1u << (9 * 2)));
 8001124:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	4a1b      	ldr	r2, [pc, #108]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 800112a:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 800112e:	60d3      	str	r3, [r2, #12]
  GPIOB->AFR[1] &= ~((0xFu << 0) | (0xFu << 4));
 8001130:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 8001132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001134:	4a18      	ldr	r2, [pc, #96]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 8001136:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800113a:	6253      	str	r3, [r2, #36]	@ 0x24
  GPIOB->AFR[1] |= ((4u << 0) | (4u << 4));
 800113c:	4b16      	ldr	r3, [pc, #88]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 800113e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001140:	4a15      	ldr	r2, [pc, #84]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 8001142:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8001146:	6253      	str	r3, [r2, #36]	@ 0x24

  RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8001148:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <I2C1_Init_OLED+0xbc>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114c:	4a11      	ldr	r2, [pc, #68]	@ (8001194 <I2C1_Init_OLED+0xbc>)
 800114e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001152:	6413      	str	r3, [r2, #64]	@ 0x40
  RCC->APB1RSTR |= RCC_APB1RSTR_I2C1RST;
 8001154:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <I2C1_Init_OLED+0xbc>)
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	4a0e      	ldr	r2, [pc, #56]	@ (8001194 <I2C1_Init_OLED+0xbc>)
 800115a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800115e:	6213      	str	r3, [r2, #32]
  RCC->APB1RSTR &= ~RCC_APB1RSTR_I2C1RST;
 8001160:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <I2C1_Init_OLED+0xbc>)
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	4a0b      	ldr	r2, [pc, #44]	@ (8001194 <I2C1_Init_OLED+0xbc>)
 8001166:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800116a:	6213      	str	r3, [r2, #32]

  I2C1->CR1 = 0;
 800116c:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <I2C1_Init_OLED+0xc4>)
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
  I2C1->CR2 = 42;  // APB1 = 42 MHz
 8001172:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <I2C1_Init_OLED+0xc4>)
 8001174:	222a      	movs	r2, #42	@ 0x2a
 8001176:	605a      	str	r2, [r3, #4]
  I2C1->CCR = 210; // 100 kHz
 8001178:	4b08      	ldr	r3, [pc, #32]	@ (800119c <I2C1_Init_OLED+0xc4>)
 800117a:	22d2      	movs	r2, #210	@ 0xd2
 800117c:	61da      	str	r2, [r3, #28]
  I2C1->TRISE = 43;
 800117e:	4b07      	ldr	r3, [pc, #28]	@ (800119c <I2C1_Init_OLED+0xc4>)
 8001180:	222b      	movs	r2, #43	@ 0x2b
 8001182:	621a      	str	r2, [r3, #32]
  I2C1->CR1 = I2C_CR1_PE;
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <I2C1_Init_OLED+0xc4>)
 8001186:	2201      	movs	r2, #1
 8001188:	601a      	str	r2, [r3, #0]
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	40023800 	.word	0x40023800
 8001198:	40020400 	.word	0x40020400
 800119c:	40005400 	.word	0x40005400

080011a0 <i2c_start>:

static void i2c_start(uint8_t addr) {
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
  I2C1->CR1 |= I2C_CR1_START;
 80011aa:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <i2c_start+0x54>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a11      	ldr	r2, [pc, #68]	@ (80011f4 <i2c_start+0x54>)
 80011b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b4:	6013      	str	r3, [r2, #0]
  while (!(I2C1->SR1 & I2C_SR1_SB)) {
 80011b6:	bf00      	nop
 80011b8:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <i2c_start+0x54>)
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f9      	beq.n	80011b8 <i2c_start+0x18>
  }
  (void)I2C1->SR1;
 80011c4:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <i2c_start+0x54>)
 80011c6:	695b      	ldr	r3, [r3, #20]
  I2C1->DR = (uint8_t)(addr << 1);
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <i2c_start+0x54>)
 80011d0:	611a      	str	r2, [r3, #16]
  while (!(I2C1->SR1 & I2C_SR1_ADDR)) {
 80011d2:	bf00      	nop
 80011d4:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <i2c_start+0x54>)
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f9      	beq.n	80011d4 <i2c_start+0x34>
  }
  (void)I2C1->SR1;
 80011e0:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <i2c_start+0x54>)
 80011e2:	695b      	ldr	r3, [r3, #20]
  (void)I2C1->SR2;
 80011e4:	4b03      	ldr	r3, [pc, #12]	@ (80011f4 <i2c_start+0x54>)
 80011e6:	699b      	ldr	r3, [r3, #24]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	40005400 	.word	0x40005400

080011f8 <i2c_w>:

static void i2c_w(uint8_t b) {
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  while (!(I2C1->SR1 & I2C_SR1_TXE)) {
 8001202:	bf00      	nop
 8001204:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <i2c_w+0x3c>)
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0f9      	beq.n	8001204 <i2c_w+0xc>
  }
  I2C1->DR = b;
 8001210:	4a08      	ldr	r2, [pc, #32]	@ (8001234 <i2c_w+0x3c>)
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	6113      	str	r3, [r2, #16]
  while (!(I2C1->SR1 & I2C_SR1_BTF)) {
 8001216:	bf00      	nop
 8001218:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <i2c_w+0x3c>)
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0f9      	beq.n	8001218 <i2c_w+0x20>
  }
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40005400 	.word	0x40005400

08001238 <i2c_stop>:

static void i2c_stop(void) { I2C1->CR1 |= I2C_CR1_STOP; }
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
 800123c:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <i2c_stop+0x1c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a04      	ldr	r2, [pc, #16]	@ (8001254 <i2c_stop+0x1c>)
 8001242:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40005400 	.word	0x40005400

08001258 <oled_cmd>:

/* ============================================================================
 * OLED Command/Data Functions
 * ============================================================================
 */
static void oled_cmd(uint8_t c) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  i2c_start(OLED_ADDR);
 8001262:	203c      	movs	r0, #60	@ 0x3c
 8001264:	f7ff ff9c 	bl	80011a0 <i2c_start>
  i2c_w(0x00);
 8001268:	2000      	movs	r0, #0
 800126a:	f7ff ffc5 	bl	80011f8 <i2c_w>
  i2c_w(c);
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ffc1 	bl	80011f8 <i2c_w>
  i2c_stop();
 8001276:	f7ff ffdf 	bl	8001238 <i2c_stop>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <oled_data>:

static void oled_data(const uint8_t *p, uint16_t n) {
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	460b      	mov	r3, r1
 800128c:	807b      	strh	r3, [r7, #2]
  i2c_start(OLED_ADDR);
 800128e:	203c      	movs	r0, #60	@ 0x3c
 8001290:	f7ff ff86 	bl	80011a0 <i2c_start>
  i2c_w(0x40);
 8001294:	2040      	movs	r0, #64	@ 0x40
 8001296:	f7ff ffaf 	bl	80011f8 <i2c_w>
  while (n--)
 800129a:	e006      	b.n	80012aa <oled_data+0x28>
    i2c_w(*p++);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ffa7 	bl	80011f8 <i2c_w>
  while (n--)
 80012aa:	887b      	ldrh	r3, [r7, #2]
 80012ac:	1e5a      	subs	r2, r3, #1
 80012ae:	807a      	strh	r2, [r7, #2]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1f3      	bne.n	800129c <oled_data+0x1a>
  i2c_stop();
 80012b4:	f7ff ffc0 	bl	8001238 <i2c_stop>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <oled_setpos>:

static void oled_setpos(uint8_t page, uint8_t col) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	460a      	mov	r2, r1
 80012ca:	71fb      	strb	r3, [r7, #7]
 80012cc:	4613      	mov	r3, r2
 80012ce:	71bb      	strb	r3, [r7, #6]
  col += OLED_COL_OFFSET;
 80012d0:	79bb      	ldrb	r3, [r7, #6]
 80012d2:	3302      	adds	r3, #2
 80012d4:	71bb      	strb	r3, [r7, #6]
  oled_cmd(0xB0 | (page & 7));
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	b25b      	sxtb	r3, r3
 80012e0:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80012e4:	b25b      	sxtb	r3, r3
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ffb5 	bl	8001258 <oled_cmd>
  oled_cmd(0x00 | (col & 0x0F));
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ffae 	bl	8001258 <oled_cmd>
  oled_cmd(0x10 | (col >> 4));
 80012fc:	79bb      	ldrb	r3, [r7, #6]
 80012fe:	091b      	lsrs	r3, r3, #4
 8001300:	b2db      	uxtb	r3, r3
 8001302:	f043 0310 	orr.w	r3, r3, #16
 8001306:	b2db      	uxtb	r3, r3
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ffa5 	bl	8001258 <oled_cmd>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <oled_draw_icon8_hflip>:
  oled_data(icon8, 8);
}

/* Horizontal flip for 8-col icons (fix mirrored hearts) */
static void oled_draw_icon8_hflip(uint8_t x, uint8_t page,
                                  const uint8_t *icon8) {
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	603a      	str	r2, [r7, #0]
 8001320:	71fb      	strb	r3, [r7, #7]
 8001322:	460b      	mov	r3, r1
 8001324:	71bb      	strb	r3, [r7, #6]
  uint8_t buf[8];
  for (int i = 0; i < 8; ++i)
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	e00f      	b.n	800134c <oled_draw_icon8_hflip+0x36>
    buf[i] = icon8[7 - i];
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f1c3 0307 	rsb	r3, r3, #7
 8001332:	461a      	mov	r2, r3
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	4413      	add	r3, r2
 8001338:	7819      	ldrb	r1, [r3, #0]
 800133a:	f107 020c 	add.w	r2, r7, #12
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	4413      	add	r3, r2
 8001342:	460a      	mov	r2, r1
 8001344:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 8; ++i)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	3301      	adds	r3, #1
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	2b07      	cmp	r3, #7
 8001350:	ddec      	ble.n	800132c <oled_draw_icon8_hflip+0x16>
  oled_setpos(page, x);
 8001352:	79fa      	ldrb	r2, [r7, #7]
 8001354:	79bb      	ldrb	r3, [r7, #6]
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ffb1 	bl	80012c0 <oled_setpos>
  oled_data(buf, 8);
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	2108      	movs	r1, #8
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff8c 	bl	8001282 <oled_data>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <oled_draw_bordered_progress>:

/* Bordered proportional progress (1 page tall) */
static void oled_draw_bordered_progress(uint8_t x, uint8_t page,
                                        uint8_t width_cols, uint8_t value,
                                        uint8_t max) {
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	4604      	mov	r4, r0
 800137c:	4608      	mov	r0, r1
 800137e:	4611      	mov	r1, r2
 8001380:	461a      	mov	r2, r3
 8001382:	4623      	mov	r3, r4
 8001384:	71fb      	strb	r3, [r7, #7]
 8001386:	4603      	mov	r3, r0
 8001388:	71bb      	strb	r3, [r7, #6]
 800138a:	460b      	mov	r3, r1
 800138c:	717b      	strb	r3, [r7, #5]
 800138e:	4613      	mov	r3, r2
 8001390:	713b      	strb	r3, [r7, #4]
  if (width_cols < 4)
 8001392:	797b      	ldrb	r3, [r7, #5]
 8001394:	2b03      	cmp	r3, #3
 8001396:	d94b      	bls.n	8001430 <oled_draw_bordered_progress+0xbc>
    return;
  if (max == 0)
 8001398:	f897 3020 	ldrb.w	r3, [r7, #32]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <oled_draw_bordered_progress+0x32>
    max = 1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	f887 3020 	strb.w	r3, [r7, #32]
  if (value > max)
 80013a6:	793a      	ldrb	r2, [r7, #4]
 80013a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d902      	bls.n	80013b6 <oled_draw_bordered_progress+0x42>
    value = max;
 80013b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013b4:	713b      	strb	r3, [r7, #4]

  static uint8_t colbuf[128];
  uint8_t w = width_cols;
 80013b6:	797b      	ldrb	r3, [r7, #5]
 80013b8:	73fb      	strb	r3, [r7, #15]
  if (w > sizeof(colbuf))
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	2b80      	cmp	r3, #128	@ 0x80
 80013be:	d901      	bls.n	80013c4 <oled_draw_bordered_progress+0x50>
    w = sizeof(colbuf);
 80013c0:	2380      	movs	r3, #128	@ 0x80
 80013c2:	73fb      	strb	r3, [r7, #15]

  uint8_t interior = (uint8_t)(w - 2);
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	3b02      	subs	r3, #2
 80013c8:	737b      	strb	r3, [r7, #13]
  uint8_t fill_cols = (uint8_t)((uint16_t)interior * value / max);
 80013ca:	7b7b      	ldrb	r3, [r7, #13]
 80013cc:	793a      	ldrb	r2, [r7, #4]
 80013ce:	fb03 f202 	mul.w	r2, r3, r2
 80013d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80013da:	733b      	strb	r3, [r7, #12]

  colbuf[0] = 0x7F; // left border
 80013dc:	4b16      	ldr	r3, [pc, #88]	@ (8001438 <oled_draw_bordered_progress+0xc4>)
 80013de:	227f      	movs	r2, #127	@ 0x7f
 80013e0:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < interior; i++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	73bb      	strb	r3, [r7, #14]
 80013e6:	e00d      	b.n	8001404 <oled_draw_bordered_progress+0x90>
    colbuf[1 + i] = (i < fill_cols) ? 0x7E : 0x41; // filled vs empty
 80013e8:	7bba      	ldrb	r2, [r7, #14]
 80013ea:	7b3b      	ldrb	r3, [r7, #12]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d201      	bcs.n	80013f4 <oled_draw_bordered_progress+0x80>
 80013f0:	217e      	movs	r1, #126	@ 0x7e
 80013f2:	e000      	b.n	80013f6 <oled_draw_bordered_progress+0x82>
 80013f4:	2141      	movs	r1, #65	@ 0x41
 80013f6:	7bbb      	ldrb	r3, [r7, #14]
 80013f8:	3301      	adds	r3, #1
 80013fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001438 <oled_draw_bordered_progress+0xc4>)
 80013fc:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < interior; i++)
 80013fe:	7bbb      	ldrb	r3, [r7, #14]
 8001400:	3301      	adds	r3, #1
 8001402:	73bb      	strb	r3, [r7, #14]
 8001404:	7bba      	ldrb	r2, [r7, #14]
 8001406:	7b7b      	ldrb	r3, [r7, #13]
 8001408:	429a      	cmp	r2, r3
 800140a:	d3ed      	bcc.n	80013e8 <oled_draw_bordered_progress+0x74>
  colbuf[w - 1] = 0x7F;                            // right border
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	3b01      	subs	r3, #1
 8001410:	4a09      	ldr	r2, [pc, #36]	@ (8001438 <oled_draw_bordered_progress+0xc4>)
 8001412:	217f      	movs	r1, #127	@ 0x7f
 8001414:	54d1      	strb	r1, [r2, r3]

  oled_setpos(page, x);
 8001416:	79fa      	ldrb	r2, [r7, #7]
 8001418:	79bb      	ldrb	r3, [r7, #6]
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff4f 	bl	80012c0 <oled_setpos>
  oled_data(colbuf, w);
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	b29b      	uxth	r3, r3
 8001426:	4619      	mov	r1, r3
 8001428:	4803      	ldr	r0, [pc, #12]	@ (8001438 <oled_draw_bordered_progress+0xc4>)
 800142a:	f7ff ff2a 	bl	8001282 <oled_data>
 800142e:	e000      	b.n	8001432 <oled_draw_bordered_progress+0xbe>
    return;
 8001430:	bf00      	nop
}
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	bd90      	pop	{r4, r7, pc}
 8001438:	200000ec 	.word	0x200000ec

0800143c <oled_clear_region>:

/* Clear a specific region (one page: [col_start, col_end) ) */
static void oled_clear_region(uint8_t page, uint8_t col_start,
                              uint8_t col_end) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b0a4      	sub	sp, #144	@ 0x90
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
 8001446:	460b      	mov	r3, r1
 8001448:	71bb      	strb	r3, [r7, #6]
 800144a:	4613      	mov	r3, r2
 800144c:	717b      	strb	r3, [r7, #5]
  if (col_end <= col_start)
 800144e:	797a      	ldrb	r2, [r7, #5]
 8001450:	79bb      	ldrb	r3, [r7, #6]
 8001452:	429a      	cmp	r2, r3
 8001454:	d923      	bls.n	800149e <oled_clear_region+0x62>
    return;
  uint8_t w = (uint8_t)(col_end - col_start);
 8001456:	797a      	ldrb	r2, [r7, #5]
 8001458:	79bb      	ldrb	r3, [r7, #6]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (w > 128)
 8001460:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001464:	2b80      	cmp	r3, #128	@ 0x80
 8001466:	d902      	bls.n	800146e <oled_clear_region+0x32>
    w = 128;
 8001468:	2380      	movs	r3, #128	@ 0x80
 800146a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint8_t z[128];
  memset(z, 0, w);
 800146e:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f000 ff3f 	bl	80022fc <memset>
  oled_setpos(page, col_start);
 800147e:	79ba      	ldrb	r2, [r7, #6]
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff1b 	bl	80012c0 <oled_setpos>
  oled_data(z, w);
 800148a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800148e:	b29a      	uxth	r2, r3
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4611      	mov	r1, r2
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fef3 	bl	8001282 <oled_data>
 800149c:	e000      	b.n	80014a0 <oled_clear_region+0x64>
    return;
 800149e:	bf00      	nop
}
 80014a0:	3790      	adds	r7, #144	@ 0x90
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <oled_print_text>:

/* Print ASCII (5x7) starting at (x,page) */
static void oled_print_text(uint8_t x, uint8_t page, const char *s) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	603a      	str	r2, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
 80014b4:	460b      	mov	r3, r1
 80014b6:	71bb      	strb	r3, [r7, #6]
  uint8_t cx = x;
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	73fb      	strb	r3, [r7, #15]
  while (*s) {
 80014bc:	e072      	b.n	80015a4 <oled_print_text+0xfc>
    char c = *s++;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	1c5a      	adds	r2, r3, #1
 80014c2:	603a      	str	r2, [r7, #0]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	73bb      	strb	r3, [r7, #14]
    if (c == ' ') {
 80014c8:	7bbb      	ldrb	r3, [r7, #14]
 80014ca:	2b20      	cmp	r3, #32
 80014cc:	d10d      	bne.n	80014ea <oled_print_text+0x42>
      oled_setpos(page, cx);
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	79bb      	ldrb	r3, [r7, #6]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fef3 	bl	80012c0 <oled_setpos>
      oled_data(FONT5x7_SPACE, 6);
 80014da:	2106      	movs	r1, #6
 80014dc:	4836      	ldr	r0, [pc, #216]	@ (80015b8 <oled_print_text+0x110>)
 80014de:	f7ff fed0 	bl	8001282 <oled_data>
      cx += 6;
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	3306      	adds	r3, #6
 80014e6:	73fb      	strb	r3, [r7, #15]
      continue;
 80014e8:	e05c      	b.n	80015a4 <oled_print_text+0xfc>
    }
    if (c >= 'A' && c <= 'Z') {
 80014ea:	7bbb      	ldrb	r3, [r7, #14]
 80014ec:	2b40      	cmp	r3, #64	@ 0x40
 80014ee:	d916      	bls.n	800151e <oled_print_text+0x76>
 80014f0:	7bbb      	ldrb	r3, [r7, #14]
 80014f2:	2b5a      	cmp	r3, #90	@ 0x5a
 80014f4:	d813      	bhi.n	800151e <oled_print_text+0x76>
      oled_setpos(page, cx);
 80014f6:	7bfa      	ldrb	r2, [r7, #15]
 80014f8:	79bb      	ldrb	r3, [r7, #6]
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fedf 	bl	80012c0 <oled_setpos>
      oled_data(FONT5x7_LET[c - 'A'], 6);
 8001502:	7bbb      	ldrb	r3, [r7, #14]
 8001504:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4a2a      	ldr	r2, [pc, #168]	@ (80015bc <oled_print_text+0x114>)
 8001512:	4413      	add	r3, r2
 8001514:	2106      	movs	r1, #6
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff feb3 	bl	8001282 <oled_data>
 800151c:	e03f      	b.n	800159e <oled_print_text+0xf6>
    } else if (c >= '0' && c <= '9') {
 800151e:	7bbb      	ldrb	r3, [r7, #14]
 8001520:	2b2f      	cmp	r3, #47	@ 0x2f
 8001522:	d916      	bls.n	8001552 <oled_print_text+0xaa>
 8001524:	7bbb      	ldrb	r3, [r7, #14]
 8001526:	2b39      	cmp	r3, #57	@ 0x39
 8001528:	d813      	bhi.n	8001552 <oled_print_text+0xaa>
      oled_setpos(page, cx);
 800152a:	7bfa      	ldrb	r2, [r7, #15]
 800152c:	79bb      	ldrb	r3, [r7, #6]
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fec5 	bl	80012c0 <oled_setpos>
      oled_data(FONT5x7_DIGIT[c - '0'], 6);
 8001536:	7bbb      	ldrb	r3, [r7, #14]
 8001538:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800153c:	4613      	mov	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4413      	add	r3, r2
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	4a1e      	ldr	r2, [pc, #120]	@ (80015c0 <oled_print_text+0x118>)
 8001546:	4413      	add	r3, r2
 8001548:	2106      	movs	r1, #6
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fe99 	bl	8001282 <oled_data>
 8001550:	e025      	b.n	800159e <oled_print_text+0xf6>
    } else if (c == '-') {
 8001552:	7bbb      	ldrb	r3, [r7, #14]
 8001554:	2b2d      	cmp	r3, #45	@ 0x2d
 8001556:	d10a      	bne.n	800156e <oled_print_text+0xc6>
      oled_setpos(page, cx);
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	79bb      	ldrb	r3, [r7, #6]
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff feae 	bl	80012c0 <oled_setpos>
      oled_data(FONT5x7_MINUS, 6);
 8001564:	2106      	movs	r1, #6
 8001566:	4817      	ldr	r0, [pc, #92]	@ (80015c4 <oled_print_text+0x11c>)
 8001568:	f7ff fe8b 	bl	8001282 <oled_data>
 800156c:	e017      	b.n	800159e <oled_print_text+0xf6>
    } else if (c == ':') {
 800156e:	7bbb      	ldrb	r3, [r7, #14]
 8001570:	2b3a      	cmp	r3, #58	@ 0x3a
 8001572:	d10a      	bne.n	800158a <oled_print_text+0xe2>
      oled_setpos(page, cx);
 8001574:	7bfa      	ldrb	r2, [r7, #15]
 8001576:	79bb      	ldrb	r3, [r7, #6]
 8001578:	4611      	mov	r1, r2
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fea0 	bl	80012c0 <oled_setpos>
      oled_data(FONT5x7_COLON, 6);
 8001580:	2106      	movs	r1, #6
 8001582:	4811      	ldr	r0, [pc, #68]	@ (80015c8 <oled_print_text+0x120>)
 8001584:	f7ff fe7d 	bl	8001282 <oled_data>
 8001588:	e009      	b.n	800159e <oled_print_text+0xf6>
    } else {
      oled_setpos(page, cx);
 800158a:	7bfa      	ldrb	r2, [r7, #15]
 800158c:	79bb      	ldrb	r3, [r7, #6]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fe95 	bl	80012c0 <oled_setpos>
      oled_data(FONT5x7_SPACE, 6);
 8001596:	2106      	movs	r1, #6
 8001598:	4807      	ldr	r0, [pc, #28]	@ (80015b8 <oled_print_text+0x110>)
 800159a:	f7ff fe72 	bl	8001282 <oled_data>
    }
    cx += 6;
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	3306      	adds	r3, #6
 80015a2:	73fb      	strb	r3, [r7, #15]
  while (*s) {
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d188      	bne.n	80014be <oled_print_text+0x16>
  }
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	080036c0 	.word	0x080036c0
 80015bc:	08003624 	.word	0x08003624
 80015c0:	080035e8 	.word	0x080035e8
 80015c4:	080036c8 	.word	0x080036c8
 80015c8:	080036d0 	.word	0x080036d0

080015cc <oled_print_uint>:

/* Print unsigned integer with 5x7 digits */
static void oled_print_uint(uint8_t x, uint8_t page, uint32_t v) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	603a      	str	r2, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
 80015d8:	460b      	mov	r3, r1
 80015da:	71bb      	strb	r3, [r7, #6]
  char buf[12]; // enough for 32-bit
  int idx = 11;
 80015dc:	230b      	movs	r3, #11
 80015de:	617b      	str	r3, [r7, #20]
  buf[idx] = 0;
 80015e0:	f107 0208 	add.w	r2, r7, #8
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	4413      	add	r3, r2
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
  idx--;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	617b      	str	r3, [r7, #20]
  if (v == 0) {
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d125      	bne.n	8001644 <oled_print_uint+0x78>
    buf[idx] = '0';
 80015f8:	f107 0208 	add.w	r2, r7, #8
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	4413      	add	r3, r2
 8001600:	2230      	movs	r2, #48	@ 0x30
 8001602:	701a      	strb	r2, [r3, #0]
    idx--;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	3b01      	subs	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
  }
  while (v > 0 && idx >= 0) {
 800160a:	e01b      	b.n	8001644 <oled_print_uint+0x78>
    buf[idx] = (char)('0' + (v % 10));
 800160c:	6839      	ldr	r1, [r7, #0]
 800160e:	4b17      	ldr	r3, [pc, #92]	@ (800166c <oled_print_uint+0xa0>)
 8001610:	fba3 2301 	umull	r2, r3, r3, r1
 8001614:	08da      	lsrs	r2, r3, #3
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	1aca      	subs	r2, r1, r3
 8001620:	b2d3      	uxtb	r3, r2
 8001622:	3330      	adds	r3, #48	@ 0x30
 8001624:	b2d9      	uxtb	r1, r3
 8001626:	f107 0208 	add.w	r2, r7, #8
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	4413      	add	r3, r2
 800162e:	460a      	mov	r2, r1
 8001630:	701a      	strb	r2, [r3, #0]
    v /= 10;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	4a0d      	ldr	r2, [pc, #52]	@ (800166c <oled_print_uint+0xa0>)
 8001636:	fba2 2303 	umull	r2, r3, r2, r3
 800163a:	08db      	lsrs	r3, r3, #3
 800163c:	603b      	str	r3, [r7, #0]
    idx--;
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	3b01      	subs	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
  while (v > 0 && idx >= 0) {
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d002      	beq.n	8001650 <oled_print_uint+0x84>
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2b00      	cmp	r3, #0
 800164e:	dadd      	bge.n	800160c <oled_print_uint+0x40>
  }
  oled_print_text(x, page, &buf[idx + 1]);
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	3301      	adds	r3, #1
 8001654:	f107 0208 	add.w	r2, r7, #8
 8001658:	441a      	add	r2, r3
 800165a:	79b9      	ldrb	r1, [r7, #6]
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff ff22 	bl	80014a8 <oled_print_text>
}
 8001664:	bf00      	nop
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	cccccccd 	.word	0xcccccccd

08001670 <text_width_5x7>:

/* -------- Centering helpers (within a column range) -------- */
static uint8_t text_width_5x7(const char *s) {
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint16_t n = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	81fb      	strh	r3, [r7, #14]
  while (*s++)
 800167c:	e002      	b.n	8001684 <text_width_5x7+0x14>
    n++;
 800167e:	89fb      	ldrh	r3, [r7, #14]
 8001680:	3301      	adds	r3, #1
 8001682:	81fb      	strh	r3, [r7, #14]
  while (*s++)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f6      	bne.n	800167e <text_width_5x7+0xe>
  return (uint8_t)(n * 6);
 8001690:	89fb      	ldrh	r3, [r7, #14]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	461a      	mov	r2, r3
 8001696:	0052      	lsls	r2, r2, #1
 8001698:	4413      	add	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	b2db      	uxtb	r3, r3
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <oled_print_centered>:

static void oled_print_centered(uint8_t page, uint8_t col_l, uint8_t col_r,
                                const char *s) {
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b084      	sub	sp, #16
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	603b      	str	r3, [r7, #0]
 80016b2:	4603      	mov	r3, r0
 80016b4:	71fb      	strb	r3, [r7, #7]
 80016b6:	460b      	mov	r3, r1
 80016b8:	71bb      	strb	r3, [r7, #6]
 80016ba:	4613      	mov	r3, r2
 80016bc:	717b      	strb	r3, [r7, #5]
  uint8_t W = (uint8_t)(col_r - col_l);
 80016be:	797a      	ldrb	r2, [r7, #5]
 80016c0:	79bb      	ldrb	r3, [r7, #6]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	73fb      	strb	r3, [r7, #15]
  uint8_t tw = text_width_5x7(s);
 80016c6:	6838      	ldr	r0, [r7, #0]
 80016c8:	f7ff ffd2 	bl	8001670 <text_width_5x7>
 80016cc:	4603      	mov	r3, r0
 80016ce:	73bb      	strb	r3, [r7, #14]
  uint8_t x = col_l + (uint8_t)((W > tw) ? ((W - tw) / 2) : 0);
 80016d0:	7bfa      	ldrb	r2, [r7, #15]
 80016d2:	7bbb      	ldrb	r3, [r7, #14]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d907      	bls.n	80016e8 <oled_print_centered+0x3e>
 80016d8:	7bfa      	ldrb	r2, [r7, #15]
 80016da:	7bbb      	ldrb	r3, [r7, #14]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	0fda      	lsrs	r2, r3, #31
 80016e0:	4413      	add	r3, r2
 80016e2:	105b      	asrs	r3, r3, #1
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	e000      	b.n	80016ea <oled_print_centered+0x40>
 80016e8:	2300      	movs	r3, #0
 80016ea:	79ba      	ldrb	r2, [r7, #6]
 80016ec:	4413      	add	r3, r2
 80016ee:	737b      	strb	r3, [r7, #13]
  oled_print_text(x, page, s);
 80016f0:	79f9      	ldrb	r1, [r7, #7]
 80016f2:	7b7b      	ldrb	r3, [r7, #13]
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fed6 	bl	80014a8 <oled_print_text>
}
 80016fc:	bf00      	nop
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <oled_draw_big_digit2x>:
/* ----------------- 2x scaled big digit (from 5x7) -----------------
 * Renders one digit as ~10x14 pixels (2 pages tall)
 * Each original column is duplicated horizontally; each row is doubled
 * vertically. Drawn across pages (page_top) and (page_top+1).
 */
static void oled_draw_big_digit2x(uint8_t x, uint8_t page_top, int d) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b08e      	sub	sp, #56	@ 0x38
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	603a      	str	r2, [r7, #0]
 800170e:	71fb      	strb	r3, [r7, #7]
 8001710:	460b      	mov	r3, r1
 8001712:	71bb      	strb	r3, [r7, #6]
  if (d < 0 || d > 9)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	f2c0 80f9 	blt.w	800190e <oled_draw_big_digit2x+0x20a>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	2b09      	cmp	r3, #9
 8001720:	f300 80f5 	bgt.w	800190e <oled_draw_big_digit2x+0x20a>
    return;
  const uint8_t *src = FONT5x7_DIGIT[d];
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	4613      	mov	r3, r2
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	4413      	add	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4a7a      	ldr	r2, [pc, #488]	@ (8001918 <oled_draw_big_digit2x+0x214>)
 8001730:	4413      	add	r3, r2
 8001732:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // Build two page buffers of width 10 (5 cols doubled) + optional 2-col
  // spacing
  uint8_t w = 10;
 8001734:	230a      	movs	r3, #10
 8001736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t top[12];    // <=12 safety
  uint8_t bottom[12]; // <=12 safety
  memset(top, 0, sizeof(top));
 800173a:	f107 0318 	add.w	r3, r7, #24
 800173e:	220c      	movs	r2, #12
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f000 fdda 	bl	80022fc <memset>
  memset(bottom, 0, sizeof(bottom));
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	220c      	movs	r2, #12
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f000 fdd3 	bl	80022fc <memset>

  uint8_t outc = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  for (uint8_t c = 0; c < 6; c++) {
 800175c:	2300      	movs	r3, #0
 800175e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001762:	e0ac      	b.n	80018be <oled_draw_big_digit2x+0x1ba>
    if (c == 5)
 8001764:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001768:	2b05      	cmp	r3, #5
 800176a:	f000 80ae 	beq.w	80018ca <oled_draw_big_digit2x+0x1c6>
      break;            // last column in font is blank spacing
    uint8_t b = src[c]; // bit0..bit6 used
 800176e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001772:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001774:	4413      	add	r3, r2
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    // Build doubled vertical mapping into two pages:
    // rows 0..3 (doubled -> 0..7) go to top page
    // rows 4..6 (doubled -> 8..13) go to bottom page positions 0..5
    uint8_t top_byte = 0, bot_byte = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001782:	2300      	movs	r3, #0
 8001784:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    for (uint8_t row = 0; row < 7; row++) {
 8001788:	2300      	movs	r3, #0
 800178a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800178e:	e05b      	b.n	8001848 <oled_draw_big_digit2x+0x144>
      if (b & (1u << row)) {
 8001790:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8001794:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001798:	fa22 f303 	lsr.w	r3, r2, r3
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d04c      	beq.n	800183e <oled_draw_big_digit2x+0x13a>
        uint8_t y0 = (uint8_t)(2 * row);
 80017a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
        uint8_t y1 = (uint8_t)(y0 + 1);
 80017ae:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80017b2:	3301      	adds	r3, #1
 80017b4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        if (y1 <= 7) {
 80017b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80017bc:	2b07      	cmp	r3, #7
 80017be:	d816      	bhi.n	80017ee <oled_draw_big_digit2x+0xea>
          // stays on top page
          top_byte |= (uint8_t)(1u << y0);
 80017c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80017c4:	2201      	movs	r2, #1
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80017d0:	4313      	orrs	r3, r2
 80017d2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
          top_byte |= (uint8_t)(1u << y1);
 80017d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80017da:	2201      	movs	r2, #1
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80017e6:	4313      	orrs	r3, r2
 80017e8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80017ec:	e027      	b.n	800183e <oled_draw_big_digit2x+0x13a>
        } else {
          // goes to bottom page (shifted by -8)
          uint8_t yb0 = (uint8_t)(y0 - 8);
 80017ee:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80017f2:	3b08      	subs	r3, #8
 80017f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          uint8_t yb1 = (uint8_t)(y1 - 8);
 80017f8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80017fc:	3b08      	subs	r3, #8
 80017fe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          if (yb0 < 8)
 8001802:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001806:	2b07      	cmp	r3, #7
 8001808:	d80a      	bhi.n	8001820 <oled_draw_big_digit2x+0x11c>
            bot_byte |= (uint8_t)(1u << yb0);
 800180a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800180e:	2201      	movs	r2, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	b2da      	uxtb	r2, r3
 8001816:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800181a:	4313      	orrs	r3, r2
 800181c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
          if (yb1 < 8)
 8001820:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001824:	2b07      	cmp	r3, #7
 8001826:	d80a      	bhi.n	800183e <oled_draw_big_digit2x+0x13a>
            bot_byte |= (uint8_t)(1u << yb1);
 8001828:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800182c:	2201      	movs	r2, #1
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	b2da      	uxtb	r2, r3
 8001834:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001838:	4313      	orrs	r3, r2
 800183a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    for (uint8_t row = 0; row < 7; row++) {
 800183e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001842:	3301      	adds	r3, #1
 8001844:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001848:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800184c:	2b06      	cmp	r3, #6
 800184e:	d99f      	bls.n	8001790 <oled_draw_big_digit2x+0x8c>
        }
      }
    }

    // duplicate horizontally
    if (outc < sizeof(top)) {
 8001850:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001854:	2b0b      	cmp	r3, #11
 8001856:	d814      	bhi.n	8001882 <oled_draw_big_digit2x+0x17e>
      top[outc] = top_byte;
 8001858:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800185c:	3338      	adds	r3, #56	@ 0x38
 800185e:	443b      	add	r3, r7
 8001860:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8001864:	f803 2c20 	strb.w	r2, [r3, #-32]
      bottom[outc] = bot_byte;
 8001868:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800186c:	3338      	adds	r3, #56	@ 0x38
 800186e:	443b      	add	r3, r7
 8001870:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8001874:	f803 2c2c 	strb.w	r2, [r3, #-44]
      outc++;
 8001878:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800187c:	3301      	adds	r3, #1
 800187e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }
    if (outc < sizeof(top)) {
 8001882:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001886:	2b0b      	cmp	r3, #11
 8001888:	d814      	bhi.n	80018b4 <oled_draw_big_digit2x+0x1b0>
      top[outc] = top_byte;
 800188a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800188e:	3338      	adds	r3, #56	@ 0x38
 8001890:	443b      	add	r3, r7
 8001892:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8001896:	f803 2c20 	strb.w	r2, [r3, #-32]
      bottom[outc] = bot_byte;
 800189a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800189e:	3338      	adds	r3, #56	@ 0x38
 80018a0:	443b      	add	r3, r7
 80018a2:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 80018a6:	f803 2c2c 	strb.w	r2, [r3, #-44]
      outc++;
 80018aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80018ae:	3301      	adds	r3, #1
 80018b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  for (uint8_t c = 0; c < 6; c++) {
 80018b4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80018b8:	3301      	adds	r3, #1
 80018ba:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80018be:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80018c2:	2b05      	cmp	r3, #5
 80018c4:	f67f af4e 	bls.w	8001764 <oled_draw_big_digit2x+0x60>
 80018c8:	e000      	b.n	80018cc <oled_draw_big_digit2x+0x1c8>
      break;            // last column in font is blank spacing
 80018ca:	bf00      	nop
    }
  }

  // Write to OLED: top page then bottom page
  oled_setpos(page_top, x);
 80018cc:	79fa      	ldrb	r2, [r7, #7]
 80018ce:	79bb      	ldrb	r3, [r7, #6]
 80018d0:	4611      	mov	r1, r2
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fcf4 	bl	80012c0 <oled_setpos>
  oled_data(top, outc);
 80018d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80018dc:	b29a      	uxth	r2, r3
 80018de:	f107 0318 	add.w	r3, r7, #24
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fccc 	bl	8001282 <oled_data>
  oled_setpos((uint8_t)(page_top + 1), x);
 80018ea:	79bb      	ldrb	r3, [r7, #6]
 80018ec:	3301      	adds	r3, #1
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	79fa      	ldrb	r2, [r7, #7]
 80018f2:	4611      	mov	r1, r2
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fce3 	bl	80012c0 <oled_setpos>
  oled_data(bottom, outc);
 80018fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80018fe:	b29a      	uxth	r2, r3
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	4611      	mov	r1, r2
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fcbb 	bl	8001282 <oled_data>
 800190c:	e000      	b.n	8001910 <oled_draw_big_digit2x+0x20c>
    return;
 800190e:	bf00      	nop
}
 8001910:	3738      	adds	r7, #56	@ 0x38
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	080035e8 	.word	0x080035e8

0800191c <oled_clear>:

/* ============================================================================
 * Public Functions
 * ============================================================================
 */
void oled_clear(void) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b0a2      	sub	sp, #136	@ 0x88
 8001920:	af00      	add	r7, sp, #0
  uint8_t z[128] = {0};
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	2280      	movs	r2, #128	@ 0x80
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f000 fce7 	bl	80022fc <memset>
  for (uint8_t p = 0; p < 8; p++) {
 800192e:	2300      	movs	r3, #0
 8001930:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001934:	e00f      	b.n	8001956 <oled_clear+0x3a>
    oled_setpos(p, 0);
 8001936:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fcbf 	bl	80012c0 <oled_setpos>
    oled_data(z, 128);
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	2180      	movs	r1, #128	@ 0x80
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fc9b 	bl	8001282 <oled_data>
  for (uint8_t p = 0; p < 8; p++) {
 800194c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001950:	3301      	adds	r3, #1
 8001952:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001956:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800195a:	2b07      	cmp	r3, #7
 800195c:	d9eb      	bls.n	8001936 <oled_clear+0x1a>
  }
}
 800195e:	bf00      	nop
 8001960:	bf00      	nop
 8001962:	3788      	adds	r7, #136	@ 0x88
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <oled_init>:

void oled_init(void) {
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  I2C1_Init_OLED();
 800196c:	f7ff fbb4 	bl	80010d8 <I2C1_Init_OLED>

  // Initialization sequence
  oled_cmd(0xAE);
 8001970:	20ae      	movs	r0, #174	@ 0xae
 8001972:	f7ff fc71 	bl	8001258 <oled_cmd>
  oled_cmd(0xD5);
 8001976:	20d5      	movs	r0, #213	@ 0xd5
 8001978:	f7ff fc6e 	bl	8001258 <oled_cmd>
  oled_cmd(0x80);
 800197c:	2080      	movs	r0, #128	@ 0x80
 800197e:	f7ff fc6b 	bl	8001258 <oled_cmd>
  oled_cmd(0xA8);
 8001982:	20a8      	movs	r0, #168	@ 0xa8
 8001984:	f7ff fc68 	bl	8001258 <oled_cmd>
  oled_cmd(0x3F);
 8001988:	203f      	movs	r0, #63	@ 0x3f
 800198a:	f7ff fc65 	bl	8001258 <oled_cmd>
  oled_cmd(0xD3);
 800198e:	20d3      	movs	r0, #211	@ 0xd3
 8001990:	f7ff fc62 	bl	8001258 <oled_cmd>
  oled_cmd(0x00);
 8001994:	2000      	movs	r0, #0
 8001996:	f7ff fc5f 	bl	8001258 <oled_cmd>
  oled_cmd(0x40);
 800199a:	2040      	movs	r0, #64	@ 0x40
 800199c:	f7ff fc5c 	bl	8001258 <oled_cmd>
  oled_cmd(0x8D);
 80019a0:	208d      	movs	r0, #141	@ 0x8d
 80019a2:	f7ff fc59 	bl	8001258 <oled_cmd>
  oled_cmd(0x14);
 80019a6:	2014      	movs	r0, #20
 80019a8:	f7ff fc56 	bl	8001258 <oled_cmd>
  oled_cmd(0x20);
 80019ac:	2020      	movs	r0, #32
 80019ae:	f7ff fc53 	bl	8001258 <oled_cmd>
  oled_cmd(0x00);
 80019b2:	2000      	movs	r0, #0
 80019b4:	f7ff fc50 	bl	8001258 <oled_cmd>
  oled_cmd(0xA1); // segment remap
 80019b8:	20a1      	movs	r0, #161	@ 0xa1
 80019ba:	f7ff fc4d 	bl	8001258 <oled_cmd>
  oled_cmd(0xC8); // COM scan dir
 80019be:	20c8      	movs	r0, #200	@ 0xc8
 80019c0:	f7ff fc4a 	bl	8001258 <oled_cmd>
  oled_cmd(0xDA);
 80019c4:	20da      	movs	r0, #218	@ 0xda
 80019c6:	f7ff fc47 	bl	8001258 <oled_cmd>
  oled_cmd(0x12);
 80019ca:	2012      	movs	r0, #18
 80019cc:	f7ff fc44 	bl	8001258 <oled_cmd>
  oled_cmd(0x81);
 80019d0:	2081      	movs	r0, #129	@ 0x81
 80019d2:	f7ff fc41 	bl	8001258 <oled_cmd>
  oled_cmd(0x7F);
 80019d6:	207f      	movs	r0, #127	@ 0x7f
 80019d8:	f7ff fc3e 	bl	8001258 <oled_cmd>
  oled_cmd(0xD9);
 80019dc:	20d9      	movs	r0, #217	@ 0xd9
 80019de:	f7ff fc3b 	bl	8001258 <oled_cmd>
  oled_cmd(0xF1);
 80019e2:	20f1      	movs	r0, #241	@ 0xf1
 80019e4:	f7ff fc38 	bl	8001258 <oled_cmd>
  oled_cmd(0xDB);
 80019e8:	20db      	movs	r0, #219	@ 0xdb
 80019ea:	f7ff fc35 	bl	8001258 <oled_cmd>
  oled_cmd(0x40);
 80019ee:	2040      	movs	r0, #64	@ 0x40
 80019f0:	f7ff fc32 	bl	8001258 <oled_cmd>
  oled_cmd(0xA4);
 80019f4:	20a4      	movs	r0, #164	@ 0xa4
 80019f6:	f7ff fc2f 	bl	8001258 <oled_cmd>
  oled_cmd(0xA6);
 80019fa:	20a6      	movs	r0, #166	@ 0xa6
 80019fc:	f7ff fc2c 	bl	8001258 <oled_cmd>
  oled_cmd(0xAF);
 8001a00:	20af      	movs	r0, #175	@ 0xaf
 8001a02:	f7ff fc29 	bl	8001258 <oled_cmd>

  oled_clear();
 8001a06:	f7ff ff89 	bl	800191c <oled_clear>
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <draw_section1>:

// Speed bar width (inside section1)
#define W_SPD_BAR 54

/* ----------------------------- Rendering ---------------------------------- */
static void draw_section1(void) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af02      	add	r7, sp, #8
  // Clear region pages we use
  oled_clear_region(S1_PAGE_LABEL, S1_COL_L, S1_COL_R);
 8001a16:	2240      	movs	r2, #64	@ 0x40
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f7ff fd0e 	bl	800143c <oled_clear_region>
  oled_clear_region(S1_PAGE_SPEED, S1_COL_L, S1_COL_R);
 8001a20:	2240      	movs	r2, #64	@ 0x40
 8001a22:	2100      	movs	r1, #0
 8001a24:	2002      	movs	r0, #2
 8001a26:	f7ff fd09 	bl	800143c <oled_clear_region>
  oled_clear_region((uint8_t)(S1_PAGE_SPEED + 1), S1_COL_L, S1_COL_R); // safety
 8001a2a:	2240      	movs	r2, #64	@ 0x40
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2003      	movs	r0, #3
 8001a30:	f7ff fd04 	bl	800143c <oled_clear_region>

  // LEVEL label + number (left)
  oled_print_text(S1_COL_L + 0, S1_PAGE_LABEL, "LEVEL");
 8001a34:	4a30      	ldr	r2, [pc, #192]	@ (8001af8 <draw_section1+0xe8>)
 8001a36:	2100      	movs	r1, #0
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f7ff fd35 	bl	80014a8 <oled_print_text>
  oled_print_uint((uint8_t)(S1_COL_L + 6 * 6), S1_PAGE_LABEL, g_level);
 8001a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001afc <draw_section1+0xec>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	2100      	movs	r1, #0
 8001a46:	2024      	movs	r0, #36	@ 0x24
 8001a48:	f7ff fdc0 	bl	80015cc <oled_print_uint>

  // LIVES (hearts) right-aligned within section1
  {
    // each heart drawn with 8 columns + 1 spacing
    uint8_t total_w = (uint8_t)(INITIAL_LIVES * 9);
 8001a4c:	2324      	movs	r3, #36	@ 0x24
 8001a4e:	713b      	strb	r3, [r7, #4]
    uint8_t start_x =
        (uint8_t)((S1_COL_R - S1_COL_L > total_w) ? (S1_COL_R - total_w - 2)
 8001a50:	793b      	ldrb	r3, [r7, #4]
 8001a52:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a54:	d804      	bhi.n	8001a60 <draw_section1+0x50>
 8001a56:	793b      	ldrb	r3, [r7, #4]
 8001a58:	f1c3 033e 	rsb	r3, r3, #62	@ 0x3e
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	e000      	b.n	8001a62 <draw_section1+0x52>
 8001a60:	2302      	movs	r3, #2
    uint8_t start_x =
 8001a62:	70fb      	strb	r3, [r7, #3]
                                                  : (S1_COL_L + 2));
    for (uint8_t i = 0; i < INITIAL_LIVES; i++) {
 8001a64:	2300      	movs	r3, #0
 8001a66:	71fb      	strb	r3, [r7, #7]
 8001a68:	e01c      	b.n	8001aa4 <draw_section1+0x94>
      uint8_t x = (uint8_t)(start_x + i * 9);
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	00d2      	lsls	r2, r2, #3
 8001a70:	4413      	add	r3, r2
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	78fb      	ldrb	r3, [r7, #3]
 8001a76:	4413      	add	r3, r2
 8001a78:	70bb      	strb	r3, [r7, #2]
      if (i < g_lives)
 8001a7a:	4b21      	ldr	r3, [pc, #132]	@ (8001b00 <draw_section1+0xf0>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	79fa      	ldrb	r2, [r7, #7]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d206      	bcs.n	8001a92 <draw_section1+0x82>
        oled_draw_icon8_hflip(x, S1_PAGE_LABEL, ICON_HEART_ROT90);
 8001a84:	78bb      	ldrb	r3, [r7, #2]
 8001a86:	4a1f      	ldr	r2, [pc, #124]	@ (8001b04 <draw_section1+0xf4>)
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fc43 	bl	8001316 <oled_draw_icon8_hflip>
 8001a90:	e005      	b.n	8001a9e <draw_section1+0x8e>
      else
        oled_draw_icon8_hflip(x, S1_PAGE_LABEL, ICON_HEART_EMPTY_ROT90);
 8001a92:	78bb      	ldrb	r3, [r7, #2]
 8001a94:	4a1c      	ldr	r2, [pc, #112]	@ (8001b08 <draw_section1+0xf8>)
 8001a96:	2100      	movs	r1, #0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fc3c 	bl	8001316 <oled_draw_icon8_hflip>
    for (uint8_t i = 0; i < INITIAL_LIVES; i++) {
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	71fb      	strb	r3, [r7, #7]
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	2b03      	cmp	r3, #3
 8001aa8:	d9df      	bls.n	8001a6a <draw_section1+0x5a>
    }
  }

  // SPEED line
  oled_print_text(S1_COL_L + 0, S1_PAGE_SPEED, "SPD");
 8001aaa:	4a18      	ldr	r2, [pc, #96]	@ (8001b0c <draw_section1+0xfc>)
 8001aac:	2102      	movs	r1, #2
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f7ff fcfa 	bl	80014a8 <oled_print_text>
  // numeric value
  oled_print_uint((uint8_t)(S1_COL_L + 6 * 4), S1_PAGE_SPEED, g_difficulty);
 8001ab4:	4b16      	ldr	r3, [pc, #88]	@ (8001b10 <draw_section1+0x100>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	2102      	movs	r1, #2
 8001abc:	2018      	movs	r0, #24
 8001abe:	f7ff fd85 	bl	80015cc <oled_print_uint>

  // draw speed bar within section1 width
  {
    uint8_t bar_x = (uint8_t)(S1_COL_R - W_SPD_BAR - 2);
 8001ac2:	2308      	movs	r3, #8
 8001ac4:	71bb      	strb	r3, [r7, #6]
    if (bar_x < (S1_COL_L + 6 * 8))
 8001ac6:	79bb      	ldrb	r3, [r7, #6]
 8001ac8:	2b2f      	cmp	r3, #47	@ 0x2f
 8001aca:	d801      	bhi.n	8001ad0 <draw_section1+0xc0>
      bar_x = (uint8_t)(S1_COL_L + 6 * 8); // keep some gap from number
 8001acc:	2330      	movs	r3, #48	@ 0x30
 8001ace:	71bb      	strb	r3, [r7, #6]
    uint8_t spd = g_difficulty;
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b10 <draw_section1+0x100>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	717b      	strb	r3, [r7, #5]
    if (spd > 5)
 8001ad6:	797b      	ldrb	r3, [r7, #5]
 8001ad8:	2b05      	cmp	r3, #5
 8001ada:	d901      	bls.n	8001ae0 <draw_section1+0xd0>
      spd = 5;
 8001adc:	2305      	movs	r3, #5
 8001ade:	717b      	strb	r3, [r7, #5]
    oled_draw_bordered_progress(bar_x, S1_PAGE_SPEED, W_SPD_BAR, spd, 5);
 8001ae0:	797b      	ldrb	r3, [r7, #5]
 8001ae2:	79b8      	ldrb	r0, [r7, #6]
 8001ae4:	2205      	movs	r2, #5
 8001ae6:	9200      	str	r2, [sp, #0]
 8001ae8:	2236      	movs	r2, #54	@ 0x36
 8001aea:	2102      	movs	r1, #2
 8001aec:	f7ff fc42 	bl	8001374 <oled_draw_bordered_progress>
  }
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	0800356c 	.word	0x0800356c
 8001afc:	20000086 	.word	0x20000086
 8001b00:	2000008c 	.word	0x2000008c
 8001b04:	080036d8 	.word	0x080036d8
 8001b08:	080036e0 	.word	0x080036e0
 8001b0c:	08003574 	.word	0x08003574
 8001b10:	20000085 	.word	0x20000085

08001b14 <draw_section2>:

static void draw_section2(void) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
  // Title "TIME" centered on S2
  oled_clear_region(S2_PAGE_TITLE, S2_COL_L, S2_COL_R);
 8001b1a:	2280      	movs	r2, #128	@ 0x80
 8001b1c:	2140      	movs	r1, #64	@ 0x40
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f7ff fc8c 	bl	800143c <oled_clear_region>
  oled_print_centered(S2_PAGE_TITLE, S2_COL_L, S2_COL_R, "TIME");
 8001b24:	4b3c      	ldr	r3, [pc, #240]	@ (8001c18 <draw_section2+0x104>)
 8001b26:	2280      	movs	r2, #128	@ 0x80
 8001b28:	2140      	movs	r1, #64	@ 0x40
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f7ff fdbd 	bl	80016aa <oled_print_centered>

  // Big countdown number centered (uses pages 2 and 3)
  oled_clear_region(S2_PAGE_BIG_TOP, S2_COL_L, S2_COL_R);
 8001b30:	2280      	movs	r2, #128	@ 0x80
 8001b32:	2140      	movs	r1, #64	@ 0x40
 8001b34:	2002      	movs	r0, #2
 8001b36:	f7ff fc81 	bl	800143c <oled_clear_region>
  oled_clear_region((uint8_t)(S2_PAGE_BIG_TOP + 1), S2_COL_L, S2_COL_R);
 8001b3a:	2280      	movs	r2, #128	@ 0x80
 8001b3c:	2140      	movs	r1, #64	@ 0x40
 8001b3e:	2003      	movs	r0, #3
 8001b40:	f7ff fc7c 	bl	800143c <oled_clear_region>

  // Determine digits to display (10 -> "10", else '0'..'9')
  char buf[3] = {0};
 8001b44:	463b      	mov	r3, r7
 8001b46:	2100      	movs	r1, #0
 8001b48:	460a      	mov	r2, r1
 8001b4a:	801a      	strh	r2, [r3, #0]
 8001b4c:	460a      	mov	r2, r1
 8001b4e:	709a      	strb	r2, [r3, #2]
  if (g_countdown == 10) {
 8001b50:	4b32      	ldr	r3, [pc, #200]	@ (8001c1c <draw_section2+0x108>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b0a      	cmp	r3, #10
 8001b58:	d104      	bne.n	8001b64 <draw_section2+0x50>
    buf[0] = '1';
 8001b5a:	2331      	movs	r3, #49	@ 0x31
 8001b5c:	703b      	strb	r3, [r7, #0]
    buf[1] = '0';
 8001b5e:	2330      	movs	r3, #48	@ 0x30
 8001b60:	707b      	strb	r3, [r7, #1]
 8001b62:	e011      	b.n	8001b88 <draw_section2+0x74>
  } else {
    buf[0] = (char)('0' + (g_countdown % 10));
 8001b64:	4b2d      	ldr	r3, [pc, #180]	@ (8001c1c <draw_section2+0x108>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c20 <draw_section2+0x10c>)
 8001b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8001b70:	08d9      	lsrs	r1, r3, #3
 8001b72:	460b      	mov	r3, r1
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	440b      	add	r3, r1
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	3330      	adds	r3, #48	@ 0x30
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	703b      	strb	r3, [r7, #0]
    buf[1] = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	707b      	strb	r3, [r7, #1]
  }

  // Big digit width ≈ 10 columns each, plus 2 cols spacing between
  uint8_t digits = (uint8_t)((buf[1] == 0) ? 1 : 2);
 8001b88:	787b      	ldrb	r3, [r7, #1]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <draw_section2+0x7e>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <draw_section2+0x80>
 8001b92:	2302      	movs	r3, #2
 8001b94:	737b      	strb	r3, [r7, #13]
  uint8_t total_w = (uint8_t)(digits * 10 + ((digits > 1) ? 2 : 0));
 8001b96:	7b7b      	ldrb	r3, [r7, #13]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	0092      	lsls	r2, r2, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	7b7a      	ldrb	r2, [r7, #13]
 8001ba4:	2a01      	cmp	r2, #1
 8001ba6:	d901      	bls.n	8001bac <draw_section2+0x98>
 8001ba8:	2202      	movs	r2, #2
 8001baa:	e000      	b.n	8001bae <draw_section2+0x9a>
 8001bac:	2200      	movs	r2, #0
 8001bae:	4413      	add	r3, r2
 8001bb0:	733b      	strb	r3, [r7, #12]

  // Center horizontally within section2
  uint8_t s2w = (uint8_t)(S2_COL_R - S2_COL_L);
 8001bb2:	2340      	movs	r3, #64	@ 0x40
 8001bb4:	72fb      	strb	r3, [r7, #11]
  uint8_t x0 =
      (uint8_t)(S2_COL_L + ((s2w > total_w) ? ((s2w - total_w) / 2) : 0));
 8001bb6:	7afa      	ldrb	r2, [r7, #11]
 8001bb8:	7b3b      	ldrb	r3, [r7, #12]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d909      	bls.n	8001bd2 <draw_section2+0xbe>
 8001bbe:	7afa      	ldrb	r2, [r7, #11]
 8001bc0:	7b3b      	ldrb	r3, [r7, #12]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	0fda      	lsrs	r2, r3, #31
 8001bc6:	4413      	add	r3, r2
 8001bc8:	105b      	asrs	r3, r3, #1
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	3340      	adds	r3, #64	@ 0x40
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	e000      	b.n	8001bd4 <draw_section2+0xc0>
 8001bd2:	2340      	movs	r3, #64	@ 0x40
  uint8_t x0 =
 8001bd4:	72bb      	strb	r3, [r7, #10]

  // Draw
  uint8_t x = x0;
 8001bd6:	7abb      	ldrb	r3, [r7, #10]
 8001bd8:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < digits; i++) {
 8001bda:	2300      	movs	r3, #0
 8001bdc:	73bb      	strb	r3, [r7, #14]
 8001bde:	e012      	b.n	8001c06 <draw_section2+0xf2>
    int d = buf[i] - '0';
 8001be0:	7bbb      	ldrb	r3, [r7, #14]
 8001be2:	3310      	adds	r3, #16
 8001be4:	443b      	add	r3, r7
 8001be6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001bea:	3b30      	subs	r3, #48	@ 0x30
 8001bec:	607b      	str	r3, [r7, #4]
    oled_draw_big_digit2x(x, S2_PAGE_BIG_TOP, d);
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	2102      	movs	r1, #2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fd85 	bl	8001704 <oled_draw_big_digit2x>
    x = (uint8_t)(x + 10 + 2); // 2 col spacing
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	330c      	adds	r3, #12
 8001bfe:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < digits; i++) {
 8001c00:	7bbb      	ldrb	r3, [r7, #14]
 8001c02:	3301      	adds	r3, #1
 8001c04:	73bb      	strb	r3, [r7, #14]
 8001c06:	7bba      	ldrb	r2, [r7, #14]
 8001c08:	7b7b      	ldrb	r3, [r7, #13]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d3e8      	bcc.n	8001be0 <draw_section2+0xcc>
  }
}
 8001c0e:	bf00      	nop
 8001c10:	bf00      	nop
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	08003578 	.word	0x08003578
 8001c1c:	20000008 	.word	0x20000008
 8001c20:	cccccccd 	.word	0xcccccccd

08001c24 <state_text>:

static const char *state_text(GameState_t s) {
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
  switch (s) {
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d81c      	bhi.n	8001c70 <state_text+0x4c>
 8001c36:	a201      	add	r2, pc, #4	@ (adr r2, 8001c3c <state_text+0x18>)
 8001c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3c:	08001c69 	.word	0x08001c69
 8001c40:	08001c6d 	.word	0x08001c6d
 8001c44:	08001c61 	.word	0x08001c61
 8001c48:	08001c65 	.word	0x08001c65
 8001c4c:	08001c71 	.word	0x08001c71
 8001c50:	08001c59 	.word	0x08001c59
 8001c54:	08001c5d 	.word	0x08001c5d
  case GAME_STATE_VICTORY:
    return "VICTORY";
 8001c58:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <state_text+0x5c>)
 8001c5a:	e00a      	b.n	8001c72 <state_text+0x4e>
  case GAME_STATE_GAME_DEATH:
    return "GAME OVER";
 8001c5c:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <state_text+0x60>)
 8001c5e:	e008      	b.n	8001c72 <state_text+0x4e>
  case GAME_STATE_PATTERN_DISPLAY:
    return "WATCH";
 8001c60:	4b09      	ldr	r3, [pc, #36]	@ (8001c88 <state_text+0x64>)
 8001c62:	e006      	b.n	8001c72 <state_text+0x4e>
  case GAME_STATE_INPUT_WAIT:
    return "YOUR TURN";
 8001c64:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <state_text+0x68>)
 8001c66:	e004      	b.n	8001c72 <state_text+0x4e>
  case GAME_STATE_DIFFICULTY_SELECT:
    return "SELECT SPEED";
 8001c68:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <state_text+0x6c>)
 8001c6a:	e002      	b.n	8001c72 <state_text+0x4e>
  case GAME_STATE_LEVEL_INTRO:
    return "GET READY";
 8001c6c:	4b09      	ldr	r3, [pc, #36]	@ (8001c94 <state_text+0x70>)
 8001c6e:	e000      	b.n	8001c72 <state_text+0x4e>
  default:
    return "READY";
 8001c70:	4b09      	ldr	r3, [pc, #36]	@ (8001c98 <state_text+0x74>)
  }
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	08003580 	.word	0x08003580
 8001c84:	08003588 	.word	0x08003588
 8001c88:	08003594 	.word	0x08003594
 8001c8c:	0800359c 	.word	0x0800359c
 8001c90:	080035a8 	.word	0x080035a8
 8001c94:	080035b8 	.word	0x080035b8
 8001c98:	080035c4 	.word	0x080035c4

08001c9c <draw_footer>:

static void draw_footer(void) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  oled_clear_region(FOOTER_PAGE, 0, 128);
 8001ca0:	2280      	movs	r2, #128	@ 0x80
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2007      	movs	r0, #7
 8001ca6:	f7ff fbc9 	bl	800143c <oled_clear_region>
  oled_print_centered(FOOTER_PAGE, 0, 128, state_text(g_game_state));
 8001caa:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <draw_footer+0x28>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ffb8 	bl	8001c24 <state_text>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2280      	movs	r2, #128	@ 0x80
 8001cb8:	2100      	movs	r1, #0
 8001cba:	2007      	movs	r0, #7
 8001cbc:	f7ff fcf5 	bl	80016aa <oled_print_centered>
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000084 	.word	0x20000084

08001cc8 <OLED_ShowStatus>:

/* ============================================================================
 * Single entry to render the whole screen with the new layout
 * ============================================================================
 */
void OLED_ShowStatus(void) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  // You can keep selective updates with prev_* if you like; for clarity we
  // redraw the three zones.
  draw_section1();
 8001ccc:	f7ff fea0 	bl	8001a10 <draw_section1>
  draw_section2();
 8001cd0:	f7ff ff20 	bl	8001b14 <draw_section2>
  draw_footer();
 8001cd4:	f7ff ffe2 	bl	8001c9c <draw_footer>
}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return 1;
 8001ce0:	2301      	movs	r3, #1
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <_kill>:

int _kill(int pid, int sig)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cf6:	f000 fb4f 	bl	8002398 <__errno>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2216      	movs	r2, #22
 8001cfe:	601a      	str	r2, [r3, #0]
  return -1;
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <_exit>:

void _exit (int status)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d14:	f04f 31ff 	mov.w	r1, #4294967295
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff ffe7 	bl	8001cec <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d1e:	bf00      	nop
 8001d20:	e7fd      	b.n	8001d1e <_exit+0x12>

08001d22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	e00a      	b.n	8001d4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d34:	f3af 8000 	nop.w
 8001d38:	4601      	mov	r1, r0
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	60ba      	str	r2, [r7, #8]
 8001d40:	b2ca      	uxtb	r2, r1
 8001d42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	3301      	adds	r3, #1
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	dbf0      	blt.n	8001d34 <_read+0x12>
  }

  return len;
 8001d52:	687b      	ldr	r3, [r7, #4]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	e009      	b.n	8001d82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	60ba      	str	r2, [r7, #8]
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	dbf1      	blt.n	8001d6e <_write+0x12>
  }
  return len;
 8001d8a:	687b      	ldr	r3, [r7, #4]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <_close>:

int _close(int file)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dbc:	605a      	str	r2, [r3, #4]
  return 0;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <_isatty>:

int _isatty(int file)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dd4:	2301      	movs	r3, #1
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b085      	sub	sp, #20
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e04:	4a14      	ldr	r2, [pc, #80]	@ (8001e58 <_sbrk+0x5c>)
 8001e06:	4b15      	ldr	r3, [pc, #84]	@ (8001e5c <_sbrk+0x60>)
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e10:	4b13      	ldr	r3, [pc, #76]	@ (8001e60 <_sbrk+0x64>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d102      	bne.n	8001e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e18:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <_sbrk+0x64>)
 8001e1a:	4a12      	ldr	r2, [pc, #72]	@ (8001e64 <_sbrk+0x68>)
 8001e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e1e:	4b10      	ldr	r3, [pc, #64]	@ (8001e60 <_sbrk+0x64>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d207      	bcs.n	8001e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e2c:	f000 fab4 	bl	8002398 <__errno>
 8001e30:	4603      	mov	r3, r0
 8001e32:	220c      	movs	r2, #12
 8001e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3a:	e009      	b.n	8001e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e3c:	4b08      	ldr	r3, [pc, #32]	@ (8001e60 <_sbrk+0x64>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e42:	4b07      	ldr	r3, [pc, #28]	@ (8001e60 <_sbrk+0x64>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	4a05      	ldr	r2, [pc, #20]	@ (8001e60 <_sbrk+0x64>)
 8001e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20020000 	.word	0x20020000
 8001e5c:	00000400 	.word	0x00000400
 8001e60:	2000016c 	.word	0x2000016c
 8001e64:	200002c8 	.word	0x200002c8

08001e68 <Delay_ms>:
uint8_t g_system_initialized = 0;

/* ============================================================================
 * Timing Functions
 * ============================================================================ */
void Delay_ms(uint32_t ms) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
    uint32_t start = GetTick();
 8001e70:	f000 f810 	bl	8001e94 <GetTick>
 8001e74:	60f8      	str	r0, [r7, #12]
    while((GetTick() - start) < ms);
 8001e76:	bf00      	nop
 8001e78:	f000 f80c 	bl	8001e94 <GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d8f7      	bhi.n	8001e78 <Delay_ms+0x10>
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <GetTick>:

uint32_t GetTick(void) {
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
    return g_tick_counter;
 8001e98:	4b03      	ldr	r3, [pc, #12]	@ (8001ea8 <GetTick+0x14>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000170 	.word	0x20000170

08001eac <Log_Print>:

/* ============================================================================
 * Logging Functions
 * ============================================================================ */
void Log_Print(const char* format, ...) {
 8001eac:	b40f      	push	{r0, r1, r2, r3}
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b0c2      	sub	sp, #264	@ 0x108
 8001eb2:	af00      	add	r7, sp, #0
    if(!g_system_initialized) return;
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f28 <Log_Print+0x7c>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d02d      	beq.n	8001f18 <Log_Print+0x6c>
    char buffer[256];
    va_list args;
    va_start(args, format);
 8001ebc:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8001ec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001ec4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ec8:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8001eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001ece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ed2:	1d38      	adds	r0, r7, #4
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001eda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ede:	f000 f9ff 	bl	80022e0 <vsniprintf>
    va_end(args);
    for(char* p = buffer; *p; p++) {
 8001ee2:	1d3b      	adds	r3, r7, #4
 8001ee4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001ee8:	e010      	b.n	8001f0c <Log_Print+0x60>
        while(!(USART2->SR & USART_SR_TXE));
 8001eea:	bf00      	nop
 8001eec:	4b0f      	ldr	r3, [pc, #60]	@ (8001f2c <Log_Print+0x80>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f9      	beq.n	8001eec <Log_Print+0x40>
        USART2->DR = *p;
 8001ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001efc:	781a      	ldrb	r2, [r3, #0]
 8001efe:	4b0b      	ldr	r3, [pc, #44]	@ (8001f2c <Log_Print+0x80>)
 8001f00:	605a      	str	r2, [r3, #4]
    for(char* p = buffer; *p; p++) {
 8001f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001f06:	3301      	adds	r3, #1
 8001f08:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1e9      	bne.n	8001eea <Log_Print+0x3e>
 8001f16:	e000      	b.n	8001f1a <Log_Print+0x6e>
    if(!g_system_initialized) return;
 8001f18:	bf00      	nop
    }
}
 8001f1a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f24:	b004      	add	sp, #16
 8001f26:	4770      	bx	lr
 8001f28:	20000174 	.word	0x20000174
 8001f2c:	40004400 	.word	0x40004400

08001f30 <SysTick_Handler>:

/* ============================================================================
 * Interrupt Handler
 * ============================================================================ */
void SysTick_Handler(void) {
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
    g_tick_counter++;
 8001f34:	4b04      	ldr	r3, [pc, #16]	@ (8001f48 <SysTick_Handler+0x18>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	4a03      	ldr	r2, [pc, #12]	@ (8001f48 <SysTick_Handler+0x18>)
 8001f3c:	6013      	str	r3, [r2, #0]
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	20000170 	.word	0x20000170

08001f4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f4c:	480d      	ldr	r0, [pc, #52]	@ (8001f84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f4e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f50:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f54:	480c      	ldr	r0, [pc, #48]	@ (8001f88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f56:	490d      	ldr	r1, [pc, #52]	@ (8001f8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f58:	4a0d      	ldr	r2, [pc, #52]	@ (8001f90 <LoopForever+0xe>)
  movs r3, #0
 8001f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f5c:	e002      	b.n	8001f64 <LoopCopyDataInit>

08001f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f62:	3304      	adds	r3, #4

08001f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f68:	d3f9      	bcc.n	8001f5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f98 <LoopForever+0x16>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f70:	e001      	b.n	8001f76 <LoopFillZerobss>

08001f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f74:	3204      	adds	r2, #4

08001f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f78:	d3fb      	bcc.n	8001f72 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001f7a:	f000 fa13 	bl	80023a4 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8001f7e:	f7ff f877 	bl	8001070 <main>

08001f82 <LoopForever>:

LoopForever:
  b LoopForever
 8001f82:	e7fe      	b.n	8001f82 <LoopForever>
  ldr   r0, =_estack
 8001f84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f8c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001f90:	080037d8 	.word	0x080037d8
  ldr r2, =_sbss
 8001f94:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001f98:	200002c4 	.word	0x200002c4

08001f9c <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f9c:	e7fe      	b.n	8001f9c <BusFault_Handler>
	...

08001fa0 <srand>:
 8001fa0:	b538      	push	{r3, r4, r5, lr}
 8001fa2:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <srand+0x44>)
 8001fa4:	681d      	ldr	r5, [r3, #0]
 8001fa6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001fa8:	4604      	mov	r4, r0
 8001faa:	b9b3      	cbnz	r3, 8001fda <srand+0x3a>
 8001fac:	2018      	movs	r0, #24
 8001fae:	f000 fa89 	bl	80024c4 <malloc>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	6328      	str	r0, [r5, #48]	@ 0x30
 8001fb6:	b920      	cbnz	r0, 8001fc2 <srand+0x22>
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe8 <srand+0x48>)
 8001fba:	480c      	ldr	r0, [pc, #48]	@ (8001fec <srand+0x4c>)
 8001fbc:	2146      	movs	r1, #70	@ 0x46
 8001fbe:	f000 fa19 	bl	80023f4 <__assert_func>
 8001fc2:	490b      	ldr	r1, [pc, #44]	@ (8001ff0 <srand+0x50>)
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff4 <srand+0x54>)
 8001fc6:	e9c0 1300 	strd	r1, r3, [r0]
 8001fca:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff8 <srand+0x58>)
 8001fcc:	6083      	str	r3, [r0, #8]
 8001fce:	230b      	movs	r3, #11
 8001fd0:	8183      	strh	r3, [r0, #12]
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001fda:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611c      	str	r4, [r3, #16]
 8001fe0:	615a      	str	r2, [r3, #20]
 8001fe2:	bd38      	pop	{r3, r4, r5, pc}
 8001fe4:	20000018 	.word	0x20000018
 8001fe8:	080036e8 	.word	0x080036e8
 8001fec:	080036ff 	.word	0x080036ff
 8001ff0:	abcd330e 	.word	0xabcd330e
 8001ff4:	e66d1234 	.word	0xe66d1234
 8001ff8:	0005deec 	.word	0x0005deec

08001ffc <rand>:
 8001ffc:	4b16      	ldr	r3, [pc, #88]	@ (8002058 <rand+0x5c>)
 8001ffe:	b510      	push	{r4, lr}
 8002000:	681c      	ldr	r4, [r3, #0]
 8002002:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002004:	b9b3      	cbnz	r3, 8002034 <rand+0x38>
 8002006:	2018      	movs	r0, #24
 8002008:	f000 fa5c 	bl	80024c4 <malloc>
 800200c:	4602      	mov	r2, r0
 800200e:	6320      	str	r0, [r4, #48]	@ 0x30
 8002010:	b920      	cbnz	r0, 800201c <rand+0x20>
 8002012:	4b12      	ldr	r3, [pc, #72]	@ (800205c <rand+0x60>)
 8002014:	4812      	ldr	r0, [pc, #72]	@ (8002060 <rand+0x64>)
 8002016:	2152      	movs	r1, #82	@ 0x52
 8002018:	f000 f9ec 	bl	80023f4 <__assert_func>
 800201c:	4911      	ldr	r1, [pc, #68]	@ (8002064 <rand+0x68>)
 800201e:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <rand+0x6c>)
 8002020:	e9c0 1300 	strd	r1, r3, [r0]
 8002024:	4b11      	ldr	r3, [pc, #68]	@ (800206c <rand+0x70>)
 8002026:	6083      	str	r3, [r0, #8]
 8002028:	230b      	movs	r3, #11
 800202a:	8183      	strh	r3, [r0, #12]
 800202c:	2100      	movs	r1, #0
 800202e:	2001      	movs	r0, #1
 8002030:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002034:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002036:	480e      	ldr	r0, [pc, #56]	@ (8002070 <rand+0x74>)
 8002038:	690b      	ldr	r3, [r1, #16]
 800203a:	694c      	ldr	r4, [r1, #20]
 800203c:	4a0d      	ldr	r2, [pc, #52]	@ (8002074 <rand+0x78>)
 800203e:	4358      	muls	r0, r3
 8002040:	fb02 0004 	mla	r0, r2, r4, r0
 8002044:	fba3 3202 	umull	r3, r2, r3, r2
 8002048:	3301      	adds	r3, #1
 800204a:	eb40 0002 	adc.w	r0, r0, r2
 800204e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8002052:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002056:	bd10      	pop	{r4, pc}
 8002058:	20000018 	.word	0x20000018
 800205c:	080036e8 	.word	0x080036e8
 8002060:	080036ff 	.word	0x080036ff
 8002064:	abcd330e 	.word	0xabcd330e
 8002068:	e66d1234 	.word	0xe66d1234
 800206c:	0005deec 	.word	0x0005deec
 8002070:	5851f42d 	.word	0x5851f42d
 8002074:	4c957f2d 	.word	0x4c957f2d

08002078 <std>:
 8002078:	2300      	movs	r3, #0
 800207a:	b510      	push	{r4, lr}
 800207c:	4604      	mov	r4, r0
 800207e:	e9c0 3300 	strd	r3, r3, [r0]
 8002082:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002086:	6083      	str	r3, [r0, #8]
 8002088:	8181      	strh	r1, [r0, #12]
 800208a:	6643      	str	r3, [r0, #100]	@ 0x64
 800208c:	81c2      	strh	r2, [r0, #14]
 800208e:	6183      	str	r3, [r0, #24]
 8002090:	4619      	mov	r1, r3
 8002092:	2208      	movs	r2, #8
 8002094:	305c      	adds	r0, #92	@ 0x5c
 8002096:	f000 f931 	bl	80022fc <memset>
 800209a:	4b0d      	ldr	r3, [pc, #52]	@ (80020d0 <std+0x58>)
 800209c:	6263      	str	r3, [r4, #36]	@ 0x24
 800209e:	4b0d      	ldr	r3, [pc, #52]	@ (80020d4 <std+0x5c>)
 80020a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80020a2:	4b0d      	ldr	r3, [pc, #52]	@ (80020d8 <std+0x60>)
 80020a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <std+0x64>)
 80020a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80020aa:	4b0d      	ldr	r3, [pc, #52]	@ (80020e0 <std+0x68>)
 80020ac:	6224      	str	r4, [r4, #32]
 80020ae:	429c      	cmp	r4, r3
 80020b0:	d006      	beq.n	80020c0 <std+0x48>
 80020b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80020b6:	4294      	cmp	r4, r2
 80020b8:	d002      	beq.n	80020c0 <std+0x48>
 80020ba:	33d0      	adds	r3, #208	@ 0xd0
 80020bc:	429c      	cmp	r4, r3
 80020be:	d105      	bne.n	80020cc <std+0x54>
 80020c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80020c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020c8:	f000 b990 	b.w	80023ec <__retarget_lock_init_recursive>
 80020cc:	bd10      	pop	{r4, pc}
 80020ce:	bf00      	nop
 80020d0:	080021fd 	.word	0x080021fd
 80020d4:	0800221f 	.word	0x0800221f
 80020d8:	08002257 	.word	0x08002257
 80020dc:	0800227b 	.word	0x0800227b
 80020e0:	20000178 	.word	0x20000178

080020e4 <stdio_exit_handler>:
 80020e4:	4a02      	ldr	r2, [pc, #8]	@ (80020f0 <stdio_exit_handler+0xc>)
 80020e6:	4903      	ldr	r1, [pc, #12]	@ (80020f4 <stdio_exit_handler+0x10>)
 80020e8:	4803      	ldr	r0, [pc, #12]	@ (80020f8 <stdio_exit_handler+0x14>)
 80020ea:	f000 b869 	b.w	80021c0 <_fwalk_sglue>
 80020ee:	bf00      	nop
 80020f0:	2000000c 	.word	0x2000000c
 80020f4:	08002d01 	.word	0x08002d01
 80020f8:	2000001c 	.word	0x2000001c

080020fc <cleanup_stdio>:
 80020fc:	6841      	ldr	r1, [r0, #4]
 80020fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002130 <cleanup_stdio+0x34>)
 8002100:	4299      	cmp	r1, r3
 8002102:	b510      	push	{r4, lr}
 8002104:	4604      	mov	r4, r0
 8002106:	d001      	beq.n	800210c <cleanup_stdio+0x10>
 8002108:	f000 fdfa 	bl	8002d00 <_fflush_r>
 800210c:	68a1      	ldr	r1, [r4, #8]
 800210e:	4b09      	ldr	r3, [pc, #36]	@ (8002134 <cleanup_stdio+0x38>)
 8002110:	4299      	cmp	r1, r3
 8002112:	d002      	beq.n	800211a <cleanup_stdio+0x1e>
 8002114:	4620      	mov	r0, r4
 8002116:	f000 fdf3 	bl	8002d00 <_fflush_r>
 800211a:	68e1      	ldr	r1, [r4, #12]
 800211c:	4b06      	ldr	r3, [pc, #24]	@ (8002138 <cleanup_stdio+0x3c>)
 800211e:	4299      	cmp	r1, r3
 8002120:	d004      	beq.n	800212c <cleanup_stdio+0x30>
 8002122:	4620      	mov	r0, r4
 8002124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002128:	f000 bdea 	b.w	8002d00 <_fflush_r>
 800212c:	bd10      	pop	{r4, pc}
 800212e:	bf00      	nop
 8002130:	20000178 	.word	0x20000178
 8002134:	200001e0 	.word	0x200001e0
 8002138:	20000248 	.word	0x20000248

0800213c <global_stdio_init.part.0>:
 800213c:	b510      	push	{r4, lr}
 800213e:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <global_stdio_init.part.0+0x30>)
 8002140:	4c0b      	ldr	r4, [pc, #44]	@ (8002170 <global_stdio_init.part.0+0x34>)
 8002142:	4a0c      	ldr	r2, [pc, #48]	@ (8002174 <global_stdio_init.part.0+0x38>)
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	4620      	mov	r0, r4
 8002148:	2200      	movs	r2, #0
 800214a:	2104      	movs	r1, #4
 800214c:	f7ff ff94 	bl	8002078 <std>
 8002150:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002154:	2201      	movs	r2, #1
 8002156:	2109      	movs	r1, #9
 8002158:	f7ff ff8e 	bl	8002078 <std>
 800215c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002160:	2202      	movs	r2, #2
 8002162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002166:	2112      	movs	r1, #18
 8002168:	f7ff bf86 	b.w	8002078 <std>
 800216c:	200002b0 	.word	0x200002b0
 8002170:	20000178 	.word	0x20000178
 8002174:	080020e5 	.word	0x080020e5

08002178 <__sfp_lock_acquire>:
 8002178:	4801      	ldr	r0, [pc, #4]	@ (8002180 <__sfp_lock_acquire+0x8>)
 800217a:	f000 b938 	b.w	80023ee <__retarget_lock_acquire_recursive>
 800217e:	bf00      	nop
 8002180:	200002b9 	.word	0x200002b9

08002184 <__sfp_lock_release>:
 8002184:	4801      	ldr	r0, [pc, #4]	@ (800218c <__sfp_lock_release+0x8>)
 8002186:	f000 b933 	b.w	80023f0 <__retarget_lock_release_recursive>
 800218a:	bf00      	nop
 800218c:	200002b9 	.word	0x200002b9

08002190 <__sinit>:
 8002190:	b510      	push	{r4, lr}
 8002192:	4604      	mov	r4, r0
 8002194:	f7ff fff0 	bl	8002178 <__sfp_lock_acquire>
 8002198:	6a23      	ldr	r3, [r4, #32]
 800219a:	b11b      	cbz	r3, 80021a4 <__sinit+0x14>
 800219c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021a0:	f7ff bff0 	b.w	8002184 <__sfp_lock_release>
 80021a4:	4b04      	ldr	r3, [pc, #16]	@ (80021b8 <__sinit+0x28>)
 80021a6:	6223      	str	r3, [r4, #32]
 80021a8:	4b04      	ldr	r3, [pc, #16]	@ (80021bc <__sinit+0x2c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f5      	bne.n	800219c <__sinit+0xc>
 80021b0:	f7ff ffc4 	bl	800213c <global_stdio_init.part.0>
 80021b4:	e7f2      	b.n	800219c <__sinit+0xc>
 80021b6:	bf00      	nop
 80021b8:	080020fd 	.word	0x080020fd
 80021bc:	200002b0 	.word	0x200002b0

080021c0 <_fwalk_sglue>:
 80021c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021c4:	4607      	mov	r7, r0
 80021c6:	4688      	mov	r8, r1
 80021c8:	4614      	mov	r4, r2
 80021ca:	2600      	movs	r6, #0
 80021cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80021d0:	f1b9 0901 	subs.w	r9, r9, #1
 80021d4:	d505      	bpl.n	80021e2 <_fwalk_sglue+0x22>
 80021d6:	6824      	ldr	r4, [r4, #0]
 80021d8:	2c00      	cmp	r4, #0
 80021da:	d1f7      	bne.n	80021cc <_fwalk_sglue+0xc>
 80021dc:	4630      	mov	r0, r6
 80021de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021e2:	89ab      	ldrh	r3, [r5, #12]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d907      	bls.n	80021f8 <_fwalk_sglue+0x38>
 80021e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80021ec:	3301      	adds	r3, #1
 80021ee:	d003      	beq.n	80021f8 <_fwalk_sglue+0x38>
 80021f0:	4629      	mov	r1, r5
 80021f2:	4638      	mov	r0, r7
 80021f4:	47c0      	blx	r8
 80021f6:	4306      	orrs	r6, r0
 80021f8:	3568      	adds	r5, #104	@ 0x68
 80021fa:	e7e9      	b.n	80021d0 <_fwalk_sglue+0x10>

080021fc <__sread>:
 80021fc:	b510      	push	{r4, lr}
 80021fe:	460c      	mov	r4, r1
 8002200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002204:	f000 f8a4 	bl	8002350 <_read_r>
 8002208:	2800      	cmp	r0, #0
 800220a:	bfab      	itete	ge
 800220c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800220e:	89a3      	ldrhlt	r3, [r4, #12]
 8002210:	181b      	addge	r3, r3, r0
 8002212:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002216:	bfac      	ite	ge
 8002218:	6563      	strge	r3, [r4, #84]	@ 0x54
 800221a:	81a3      	strhlt	r3, [r4, #12]
 800221c:	bd10      	pop	{r4, pc}

0800221e <__swrite>:
 800221e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002222:	461f      	mov	r7, r3
 8002224:	898b      	ldrh	r3, [r1, #12]
 8002226:	05db      	lsls	r3, r3, #23
 8002228:	4605      	mov	r5, r0
 800222a:	460c      	mov	r4, r1
 800222c:	4616      	mov	r6, r2
 800222e:	d505      	bpl.n	800223c <__swrite+0x1e>
 8002230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002234:	2302      	movs	r3, #2
 8002236:	2200      	movs	r2, #0
 8002238:	f000 f878 	bl	800232c <_lseek_r>
 800223c:	89a3      	ldrh	r3, [r4, #12]
 800223e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002242:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002246:	81a3      	strh	r3, [r4, #12]
 8002248:	4632      	mov	r2, r6
 800224a:	463b      	mov	r3, r7
 800224c:	4628      	mov	r0, r5
 800224e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002252:	f000 b88f 	b.w	8002374 <_write_r>

08002256 <__sseek>:
 8002256:	b510      	push	{r4, lr}
 8002258:	460c      	mov	r4, r1
 800225a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800225e:	f000 f865 	bl	800232c <_lseek_r>
 8002262:	1c43      	adds	r3, r0, #1
 8002264:	89a3      	ldrh	r3, [r4, #12]
 8002266:	bf15      	itete	ne
 8002268:	6560      	strne	r0, [r4, #84]	@ 0x54
 800226a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800226e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002272:	81a3      	strheq	r3, [r4, #12]
 8002274:	bf18      	it	ne
 8002276:	81a3      	strhne	r3, [r4, #12]
 8002278:	bd10      	pop	{r4, pc}

0800227a <__sclose>:
 800227a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800227e:	f000 b845 	b.w	800230c <_close_r>

08002282 <_vsniprintf_r>:
 8002282:	b530      	push	{r4, r5, lr}
 8002284:	4614      	mov	r4, r2
 8002286:	2c00      	cmp	r4, #0
 8002288:	b09b      	sub	sp, #108	@ 0x6c
 800228a:	4605      	mov	r5, r0
 800228c:	461a      	mov	r2, r3
 800228e:	da05      	bge.n	800229c <_vsniprintf_r+0x1a>
 8002290:	238b      	movs	r3, #139	@ 0x8b
 8002292:	6003      	str	r3, [r0, #0]
 8002294:	f04f 30ff 	mov.w	r0, #4294967295
 8002298:	b01b      	add	sp, #108	@ 0x6c
 800229a:	bd30      	pop	{r4, r5, pc}
 800229c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80022a0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	9319      	str	r3, [sp, #100]	@ 0x64
 80022aa:	bf14      	ite	ne
 80022ac:	f104 33ff 	addne.w	r3, r4, #4294967295
 80022b0:	4623      	moveq	r3, r4
 80022b2:	9302      	str	r3, [sp, #8]
 80022b4:	9305      	str	r3, [sp, #20]
 80022b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022ba:	9100      	str	r1, [sp, #0]
 80022bc:	9104      	str	r1, [sp, #16]
 80022be:	f8ad 300e 	strh.w	r3, [sp, #14]
 80022c2:	4669      	mov	r1, sp
 80022c4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80022c6:	f000 fa0f 	bl	80026e8 <_svfiprintf_r>
 80022ca:	1c43      	adds	r3, r0, #1
 80022cc:	bfbc      	itt	lt
 80022ce:	238b      	movlt	r3, #139	@ 0x8b
 80022d0:	602b      	strlt	r3, [r5, #0]
 80022d2:	2c00      	cmp	r4, #0
 80022d4:	d0e0      	beq.n	8002298 <_vsniprintf_r+0x16>
 80022d6:	9b00      	ldr	r3, [sp, #0]
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
 80022dc:	e7dc      	b.n	8002298 <_vsniprintf_r+0x16>
	...

080022e0 <vsniprintf>:
 80022e0:	b507      	push	{r0, r1, r2, lr}
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	4613      	mov	r3, r2
 80022e6:	460a      	mov	r2, r1
 80022e8:	4601      	mov	r1, r0
 80022ea:	4803      	ldr	r0, [pc, #12]	@ (80022f8 <vsniprintf+0x18>)
 80022ec:	6800      	ldr	r0, [r0, #0]
 80022ee:	f7ff ffc8 	bl	8002282 <_vsniprintf_r>
 80022f2:	b003      	add	sp, #12
 80022f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80022f8:	20000018 	.word	0x20000018

080022fc <memset>:
 80022fc:	4402      	add	r2, r0
 80022fe:	4603      	mov	r3, r0
 8002300:	4293      	cmp	r3, r2
 8002302:	d100      	bne.n	8002306 <memset+0xa>
 8002304:	4770      	bx	lr
 8002306:	f803 1b01 	strb.w	r1, [r3], #1
 800230a:	e7f9      	b.n	8002300 <memset+0x4>

0800230c <_close_r>:
 800230c:	b538      	push	{r3, r4, r5, lr}
 800230e:	4d06      	ldr	r5, [pc, #24]	@ (8002328 <_close_r+0x1c>)
 8002310:	2300      	movs	r3, #0
 8002312:	4604      	mov	r4, r0
 8002314:	4608      	mov	r0, r1
 8002316:	602b      	str	r3, [r5, #0]
 8002318:	f7ff fd3c 	bl	8001d94 <_close>
 800231c:	1c43      	adds	r3, r0, #1
 800231e:	d102      	bne.n	8002326 <_close_r+0x1a>
 8002320:	682b      	ldr	r3, [r5, #0]
 8002322:	b103      	cbz	r3, 8002326 <_close_r+0x1a>
 8002324:	6023      	str	r3, [r4, #0]
 8002326:	bd38      	pop	{r3, r4, r5, pc}
 8002328:	200002b4 	.word	0x200002b4

0800232c <_lseek_r>:
 800232c:	b538      	push	{r3, r4, r5, lr}
 800232e:	4d07      	ldr	r5, [pc, #28]	@ (800234c <_lseek_r+0x20>)
 8002330:	4604      	mov	r4, r0
 8002332:	4608      	mov	r0, r1
 8002334:	4611      	mov	r1, r2
 8002336:	2200      	movs	r2, #0
 8002338:	602a      	str	r2, [r5, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	f7ff fd51 	bl	8001de2 <_lseek>
 8002340:	1c43      	adds	r3, r0, #1
 8002342:	d102      	bne.n	800234a <_lseek_r+0x1e>
 8002344:	682b      	ldr	r3, [r5, #0]
 8002346:	b103      	cbz	r3, 800234a <_lseek_r+0x1e>
 8002348:	6023      	str	r3, [r4, #0]
 800234a:	bd38      	pop	{r3, r4, r5, pc}
 800234c:	200002b4 	.word	0x200002b4

08002350 <_read_r>:
 8002350:	b538      	push	{r3, r4, r5, lr}
 8002352:	4d07      	ldr	r5, [pc, #28]	@ (8002370 <_read_r+0x20>)
 8002354:	4604      	mov	r4, r0
 8002356:	4608      	mov	r0, r1
 8002358:	4611      	mov	r1, r2
 800235a:	2200      	movs	r2, #0
 800235c:	602a      	str	r2, [r5, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	f7ff fcdf 	bl	8001d22 <_read>
 8002364:	1c43      	adds	r3, r0, #1
 8002366:	d102      	bne.n	800236e <_read_r+0x1e>
 8002368:	682b      	ldr	r3, [r5, #0]
 800236a:	b103      	cbz	r3, 800236e <_read_r+0x1e>
 800236c:	6023      	str	r3, [r4, #0]
 800236e:	bd38      	pop	{r3, r4, r5, pc}
 8002370:	200002b4 	.word	0x200002b4

08002374 <_write_r>:
 8002374:	b538      	push	{r3, r4, r5, lr}
 8002376:	4d07      	ldr	r5, [pc, #28]	@ (8002394 <_write_r+0x20>)
 8002378:	4604      	mov	r4, r0
 800237a:	4608      	mov	r0, r1
 800237c:	4611      	mov	r1, r2
 800237e:	2200      	movs	r2, #0
 8002380:	602a      	str	r2, [r5, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	f7ff fcea 	bl	8001d5c <_write>
 8002388:	1c43      	adds	r3, r0, #1
 800238a:	d102      	bne.n	8002392 <_write_r+0x1e>
 800238c:	682b      	ldr	r3, [r5, #0]
 800238e:	b103      	cbz	r3, 8002392 <_write_r+0x1e>
 8002390:	6023      	str	r3, [r4, #0]
 8002392:	bd38      	pop	{r3, r4, r5, pc}
 8002394:	200002b4 	.word	0x200002b4

08002398 <__errno>:
 8002398:	4b01      	ldr	r3, [pc, #4]	@ (80023a0 <__errno+0x8>)
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000018 	.word	0x20000018

080023a4 <__libc_init_array>:
 80023a4:	b570      	push	{r4, r5, r6, lr}
 80023a6:	4d0d      	ldr	r5, [pc, #52]	@ (80023dc <__libc_init_array+0x38>)
 80023a8:	4c0d      	ldr	r4, [pc, #52]	@ (80023e0 <__libc_init_array+0x3c>)
 80023aa:	1b64      	subs	r4, r4, r5
 80023ac:	10a4      	asrs	r4, r4, #2
 80023ae:	2600      	movs	r6, #0
 80023b0:	42a6      	cmp	r6, r4
 80023b2:	d109      	bne.n	80023c8 <__libc_init_array+0x24>
 80023b4:	4d0b      	ldr	r5, [pc, #44]	@ (80023e4 <__libc_init_array+0x40>)
 80023b6:	4c0c      	ldr	r4, [pc, #48]	@ (80023e8 <__libc_init_array+0x44>)
 80023b8:	f000 ffee 	bl	8003398 <_init>
 80023bc:	1b64      	subs	r4, r4, r5
 80023be:	10a4      	asrs	r4, r4, #2
 80023c0:	2600      	movs	r6, #0
 80023c2:	42a6      	cmp	r6, r4
 80023c4:	d105      	bne.n	80023d2 <__libc_init_array+0x2e>
 80023c6:	bd70      	pop	{r4, r5, r6, pc}
 80023c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80023cc:	4798      	blx	r3
 80023ce:	3601      	adds	r6, #1
 80023d0:	e7ee      	b.n	80023b0 <__libc_init_array+0xc>
 80023d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80023d6:	4798      	blx	r3
 80023d8:	3601      	adds	r6, #1
 80023da:	e7f2      	b.n	80023c2 <__libc_init_array+0x1e>
 80023dc:	080037d0 	.word	0x080037d0
 80023e0:	080037d0 	.word	0x080037d0
 80023e4:	080037d0 	.word	0x080037d0
 80023e8:	080037d4 	.word	0x080037d4

080023ec <__retarget_lock_init_recursive>:
 80023ec:	4770      	bx	lr

080023ee <__retarget_lock_acquire_recursive>:
 80023ee:	4770      	bx	lr

080023f0 <__retarget_lock_release_recursive>:
 80023f0:	4770      	bx	lr
	...

080023f4 <__assert_func>:
 80023f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80023f6:	4614      	mov	r4, r2
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b09      	ldr	r3, [pc, #36]	@ (8002420 <__assert_func+0x2c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4605      	mov	r5, r0
 8002400:	68d8      	ldr	r0, [r3, #12]
 8002402:	b14c      	cbz	r4, 8002418 <__assert_func+0x24>
 8002404:	4b07      	ldr	r3, [pc, #28]	@ (8002424 <__assert_func+0x30>)
 8002406:	9100      	str	r1, [sp, #0]
 8002408:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800240c:	4906      	ldr	r1, [pc, #24]	@ (8002428 <__assert_func+0x34>)
 800240e:	462b      	mov	r3, r5
 8002410:	f000 fc9e 	bl	8002d50 <fiprintf>
 8002414:	f000 fce6 	bl	8002de4 <abort>
 8002418:	4b04      	ldr	r3, [pc, #16]	@ (800242c <__assert_func+0x38>)
 800241a:	461c      	mov	r4, r3
 800241c:	e7f3      	b.n	8002406 <__assert_func+0x12>
 800241e:	bf00      	nop
 8002420:	20000018 	.word	0x20000018
 8002424:	08003757 	.word	0x08003757
 8002428:	08003764 	.word	0x08003764
 800242c:	08003792 	.word	0x08003792

08002430 <_free_r>:
 8002430:	b538      	push	{r3, r4, r5, lr}
 8002432:	4605      	mov	r5, r0
 8002434:	2900      	cmp	r1, #0
 8002436:	d041      	beq.n	80024bc <_free_r+0x8c>
 8002438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800243c:	1f0c      	subs	r4, r1, #4
 800243e:	2b00      	cmp	r3, #0
 8002440:	bfb8      	it	lt
 8002442:	18e4      	addlt	r4, r4, r3
 8002444:	f000 f8e8 	bl	8002618 <__malloc_lock>
 8002448:	4a1d      	ldr	r2, [pc, #116]	@ (80024c0 <_free_r+0x90>)
 800244a:	6813      	ldr	r3, [r2, #0]
 800244c:	b933      	cbnz	r3, 800245c <_free_r+0x2c>
 800244e:	6063      	str	r3, [r4, #4]
 8002450:	6014      	str	r4, [r2, #0]
 8002452:	4628      	mov	r0, r5
 8002454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002458:	f000 b8e4 	b.w	8002624 <__malloc_unlock>
 800245c:	42a3      	cmp	r3, r4
 800245e:	d908      	bls.n	8002472 <_free_r+0x42>
 8002460:	6820      	ldr	r0, [r4, #0]
 8002462:	1821      	adds	r1, r4, r0
 8002464:	428b      	cmp	r3, r1
 8002466:	bf01      	itttt	eq
 8002468:	6819      	ldreq	r1, [r3, #0]
 800246a:	685b      	ldreq	r3, [r3, #4]
 800246c:	1809      	addeq	r1, r1, r0
 800246e:	6021      	streq	r1, [r4, #0]
 8002470:	e7ed      	b.n	800244e <_free_r+0x1e>
 8002472:	461a      	mov	r2, r3
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	b10b      	cbz	r3, 800247c <_free_r+0x4c>
 8002478:	42a3      	cmp	r3, r4
 800247a:	d9fa      	bls.n	8002472 <_free_r+0x42>
 800247c:	6811      	ldr	r1, [r2, #0]
 800247e:	1850      	adds	r0, r2, r1
 8002480:	42a0      	cmp	r0, r4
 8002482:	d10b      	bne.n	800249c <_free_r+0x6c>
 8002484:	6820      	ldr	r0, [r4, #0]
 8002486:	4401      	add	r1, r0
 8002488:	1850      	adds	r0, r2, r1
 800248a:	4283      	cmp	r3, r0
 800248c:	6011      	str	r1, [r2, #0]
 800248e:	d1e0      	bne.n	8002452 <_free_r+0x22>
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	6053      	str	r3, [r2, #4]
 8002496:	4408      	add	r0, r1
 8002498:	6010      	str	r0, [r2, #0]
 800249a:	e7da      	b.n	8002452 <_free_r+0x22>
 800249c:	d902      	bls.n	80024a4 <_free_r+0x74>
 800249e:	230c      	movs	r3, #12
 80024a0:	602b      	str	r3, [r5, #0]
 80024a2:	e7d6      	b.n	8002452 <_free_r+0x22>
 80024a4:	6820      	ldr	r0, [r4, #0]
 80024a6:	1821      	adds	r1, r4, r0
 80024a8:	428b      	cmp	r3, r1
 80024aa:	bf04      	itt	eq
 80024ac:	6819      	ldreq	r1, [r3, #0]
 80024ae:	685b      	ldreq	r3, [r3, #4]
 80024b0:	6063      	str	r3, [r4, #4]
 80024b2:	bf04      	itt	eq
 80024b4:	1809      	addeq	r1, r1, r0
 80024b6:	6021      	streq	r1, [r4, #0]
 80024b8:	6054      	str	r4, [r2, #4]
 80024ba:	e7ca      	b.n	8002452 <_free_r+0x22>
 80024bc:	bd38      	pop	{r3, r4, r5, pc}
 80024be:	bf00      	nop
 80024c0:	200002c0 	.word	0x200002c0

080024c4 <malloc>:
 80024c4:	4b02      	ldr	r3, [pc, #8]	@ (80024d0 <malloc+0xc>)
 80024c6:	4601      	mov	r1, r0
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	f000 b825 	b.w	8002518 <_malloc_r>
 80024ce:	bf00      	nop
 80024d0:	20000018 	.word	0x20000018

080024d4 <sbrk_aligned>:
 80024d4:	b570      	push	{r4, r5, r6, lr}
 80024d6:	4e0f      	ldr	r6, [pc, #60]	@ (8002514 <sbrk_aligned+0x40>)
 80024d8:	460c      	mov	r4, r1
 80024da:	6831      	ldr	r1, [r6, #0]
 80024dc:	4605      	mov	r5, r0
 80024de:	b911      	cbnz	r1, 80024e6 <sbrk_aligned+0x12>
 80024e0:	f000 fc62 	bl	8002da8 <_sbrk_r>
 80024e4:	6030      	str	r0, [r6, #0]
 80024e6:	4621      	mov	r1, r4
 80024e8:	4628      	mov	r0, r5
 80024ea:	f000 fc5d 	bl	8002da8 <_sbrk_r>
 80024ee:	1c43      	adds	r3, r0, #1
 80024f0:	d103      	bne.n	80024fa <sbrk_aligned+0x26>
 80024f2:	f04f 34ff 	mov.w	r4, #4294967295
 80024f6:	4620      	mov	r0, r4
 80024f8:	bd70      	pop	{r4, r5, r6, pc}
 80024fa:	1cc4      	adds	r4, r0, #3
 80024fc:	f024 0403 	bic.w	r4, r4, #3
 8002500:	42a0      	cmp	r0, r4
 8002502:	d0f8      	beq.n	80024f6 <sbrk_aligned+0x22>
 8002504:	1a21      	subs	r1, r4, r0
 8002506:	4628      	mov	r0, r5
 8002508:	f000 fc4e 	bl	8002da8 <_sbrk_r>
 800250c:	3001      	adds	r0, #1
 800250e:	d1f2      	bne.n	80024f6 <sbrk_aligned+0x22>
 8002510:	e7ef      	b.n	80024f2 <sbrk_aligned+0x1e>
 8002512:	bf00      	nop
 8002514:	200002bc 	.word	0x200002bc

08002518 <_malloc_r>:
 8002518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800251c:	1ccd      	adds	r5, r1, #3
 800251e:	f025 0503 	bic.w	r5, r5, #3
 8002522:	3508      	adds	r5, #8
 8002524:	2d0c      	cmp	r5, #12
 8002526:	bf38      	it	cc
 8002528:	250c      	movcc	r5, #12
 800252a:	2d00      	cmp	r5, #0
 800252c:	4606      	mov	r6, r0
 800252e:	db01      	blt.n	8002534 <_malloc_r+0x1c>
 8002530:	42a9      	cmp	r1, r5
 8002532:	d904      	bls.n	800253e <_malloc_r+0x26>
 8002534:	230c      	movs	r3, #12
 8002536:	6033      	str	r3, [r6, #0]
 8002538:	2000      	movs	r0, #0
 800253a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800253e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002614 <_malloc_r+0xfc>
 8002542:	f000 f869 	bl	8002618 <__malloc_lock>
 8002546:	f8d8 3000 	ldr.w	r3, [r8]
 800254a:	461c      	mov	r4, r3
 800254c:	bb44      	cbnz	r4, 80025a0 <_malloc_r+0x88>
 800254e:	4629      	mov	r1, r5
 8002550:	4630      	mov	r0, r6
 8002552:	f7ff ffbf 	bl	80024d4 <sbrk_aligned>
 8002556:	1c43      	adds	r3, r0, #1
 8002558:	4604      	mov	r4, r0
 800255a:	d158      	bne.n	800260e <_malloc_r+0xf6>
 800255c:	f8d8 4000 	ldr.w	r4, [r8]
 8002560:	4627      	mov	r7, r4
 8002562:	2f00      	cmp	r7, #0
 8002564:	d143      	bne.n	80025ee <_malloc_r+0xd6>
 8002566:	2c00      	cmp	r4, #0
 8002568:	d04b      	beq.n	8002602 <_malloc_r+0xea>
 800256a:	6823      	ldr	r3, [r4, #0]
 800256c:	4639      	mov	r1, r7
 800256e:	4630      	mov	r0, r6
 8002570:	eb04 0903 	add.w	r9, r4, r3
 8002574:	f000 fc18 	bl	8002da8 <_sbrk_r>
 8002578:	4581      	cmp	r9, r0
 800257a:	d142      	bne.n	8002602 <_malloc_r+0xea>
 800257c:	6821      	ldr	r1, [r4, #0]
 800257e:	1a6d      	subs	r5, r5, r1
 8002580:	4629      	mov	r1, r5
 8002582:	4630      	mov	r0, r6
 8002584:	f7ff ffa6 	bl	80024d4 <sbrk_aligned>
 8002588:	3001      	adds	r0, #1
 800258a:	d03a      	beq.n	8002602 <_malloc_r+0xea>
 800258c:	6823      	ldr	r3, [r4, #0]
 800258e:	442b      	add	r3, r5
 8002590:	6023      	str	r3, [r4, #0]
 8002592:	f8d8 3000 	ldr.w	r3, [r8]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	bb62      	cbnz	r2, 80025f4 <_malloc_r+0xdc>
 800259a:	f8c8 7000 	str.w	r7, [r8]
 800259e:	e00f      	b.n	80025c0 <_malloc_r+0xa8>
 80025a0:	6822      	ldr	r2, [r4, #0]
 80025a2:	1b52      	subs	r2, r2, r5
 80025a4:	d420      	bmi.n	80025e8 <_malloc_r+0xd0>
 80025a6:	2a0b      	cmp	r2, #11
 80025a8:	d917      	bls.n	80025da <_malloc_r+0xc2>
 80025aa:	1961      	adds	r1, r4, r5
 80025ac:	42a3      	cmp	r3, r4
 80025ae:	6025      	str	r5, [r4, #0]
 80025b0:	bf18      	it	ne
 80025b2:	6059      	strne	r1, [r3, #4]
 80025b4:	6863      	ldr	r3, [r4, #4]
 80025b6:	bf08      	it	eq
 80025b8:	f8c8 1000 	streq.w	r1, [r8]
 80025bc:	5162      	str	r2, [r4, r5]
 80025be:	604b      	str	r3, [r1, #4]
 80025c0:	4630      	mov	r0, r6
 80025c2:	f000 f82f 	bl	8002624 <__malloc_unlock>
 80025c6:	f104 000b 	add.w	r0, r4, #11
 80025ca:	1d23      	adds	r3, r4, #4
 80025cc:	f020 0007 	bic.w	r0, r0, #7
 80025d0:	1ac2      	subs	r2, r0, r3
 80025d2:	bf1c      	itt	ne
 80025d4:	1a1b      	subne	r3, r3, r0
 80025d6:	50a3      	strne	r3, [r4, r2]
 80025d8:	e7af      	b.n	800253a <_malloc_r+0x22>
 80025da:	6862      	ldr	r2, [r4, #4]
 80025dc:	42a3      	cmp	r3, r4
 80025de:	bf0c      	ite	eq
 80025e0:	f8c8 2000 	streq.w	r2, [r8]
 80025e4:	605a      	strne	r2, [r3, #4]
 80025e6:	e7eb      	b.n	80025c0 <_malloc_r+0xa8>
 80025e8:	4623      	mov	r3, r4
 80025ea:	6864      	ldr	r4, [r4, #4]
 80025ec:	e7ae      	b.n	800254c <_malloc_r+0x34>
 80025ee:	463c      	mov	r4, r7
 80025f0:	687f      	ldr	r7, [r7, #4]
 80025f2:	e7b6      	b.n	8002562 <_malloc_r+0x4a>
 80025f4:	461a      	mov	r2, r3
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	42a3      	cmp	r3, r4
 80025fa:	d1fb      	bne.n	80025f4 <_malloc_r+0xdc>
 80025fc:	2300      	movs	r3, #0
 80025fe:	6053      	str	r3, [r2, #4]
 8002600:	e7de      	b.n	80025c0 <_malloc_r+0xa8>
 8002602:	230c      	movs	r3, #12
 8002604:	6033      	str	r3, [r6, #0]
 8002606:	4630      	mov	r0, r6
 8002608:	f000 f80c 	bl	8002624 <__malloc_unlock>
 800260c:	e794      	b.n	8002538 <_malloc_r+0x20>
 800260e:	6005      	str	r5, [r0, #0]
 8002610:	e7d6      	b.n	80025c0 <_malloc_r+0xa8>
 8002612:	bf00      	nop
 8002614:	200002c0 	.word	0x200002c0

08002618 <__malloc_lock>:
 8002618:	4801      	ldr	r0, [pc, #4]	@ (8002620 <__malloc_lock+0x8>)
 800261a:	f7ff bee8 	b.w	80023ee <__retarget_lock_acquire_recursive>
 800261e:	bf00      	nop
 8002620:	200002b8 	.word	0x200002b8

08002624 <__malloc_unlock>:
 8002624:	4801      	ldr	r0, [pc, #4]	@ (800262c <__malloc_unlock+0x8>)
 8002626:	f7ff bee3 	b.w	80023f0 <__retarget_lock_release_recursive>
 800262a:	bf00      	nop
 800262c:	200002b8 	.word	0x200002b8

08002630 <__ssputs_r>:
 8002630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002634:	688e      	ldr	r6, [r1, #8]
 8002636:	461f      	mov	r7, r3
 8002638:	42be      	cmp	r6, r7
 800263a:	680b      	ldr	r3, [r1, #0]
 800263c:	4682      	mov	sl, r0
 800263e:	460c      	mov	r4, r1
 8002640:	4690      	mov	r8, r2
 8002642:	d82d      	bhi.n	80026a0 <__ssputs_r+0x70>
 8002644:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002648:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800264c:	d026      	beq.n	800269c <__ssputs_r+0x6c>
 800264e:	6965      	ldr	r5, [r4, #20]
 8002650:	6909      	ldr	r1, [r1, #16]
 8002652:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002656:	eba3 0901 	sub.w	r9, r3, r1
 800265a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800265e:	1c7b      	adds	r3, r7, #1
 8002660:	444b      	add	r3, r9
 8002662:	106d      	asrs	r5, r5, #1
 8002664:	429d      	cmp	r5, r3
 8002666:	bf38      	it	cc
 8002668:	461d      	movcc	r5, r3
 800266a:	0553      	lsls	r3, r2, #21
 800266c:	d527      	bpl.n	80026be <__ssputs_r+0x8e>
 800266e:	4629      	mov	r1, r5
 8002670:	f7ff ff52 	bl	8002518 <_malloc_r>
 8002674:	4606      	mov	r6, r0
 8002676:	b360      	cbz	r0, 80026d2 <__ssputs_r+0xa2>
 8002678:	6921      	ldr	r1, [r4, #16]
 800267a:	464a      	mov	r2, r9
 800267c:	f000 fba4 	bl	8002dc8 <memcpy>
 8002680:	89a3      	ldrh	r3, [r4, #12]
 8002682:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800268a:	81a3      	strh	r3, [r4, #12]
 800268c:	6126      	str	r6, [r4, #16]
 800268e:	6165      	str	r5, [r4, #20]
 8002690:	444e      	add	r6, r9
 8002692:	eba5 0509 	sub.w	r5, r5, r9
 8002696:	6026      	str	r6, [r4, #0]
 8002698:	60a5      	str	r5, [r4, #8]
 800269a:	463e      	mov	r6, r7
 800269c:	42be      	cmp	r6, r7
 800269e:	d900      	bls.n	80026a2 <__ssputs_r+0x72>
 80026a0:	463e      	mov	r6, r7
 80026a2:	6820      	ldr	r0, [r4, #0]
 80026a4:	4632      	mov	r2, r6
 80026a6:	4641      	mov	r1, r8
 80026a8:	f000 fb64 	bl	8002d74 <memmove>
 80026ac:	68a3      	ldr	r3, [r4, #8]
 80026ae:	1b9b      	subs	r3, r3, r6
 80026b0:	60a3      	str	r3, [r4, #8]
 80026b2:	6823      	ldr	r3, [r4, #0]
 80026b4:	4433      	add	r3, r6
 80026b6:	6023      	str	r3, [r4, #0]
 80026b8:	2000      	movs	r0, #0
 80026ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026be:	462a      	mov	r2, r5
 80026c0:	f000 fb97 	bl	8002df2 <_realloc_r>
 80026c4:	4606      	mov	r6, r0
 80026c6:	2800      	cmp	r0, #0
 80026c8:	d1e0      	bne.n	800268c <__ssputs_r+0x5c>
 80026ca:	6921      	ldr	r1, [r4, #16]
 80026cc:	4650      	mov	r0, sl
 80026ce:	f7ff feaf 	bl	8002430 <_free_r>
 80026d2:	230c      	movs	r3, #12
 80026d4:	f8ca 3000 	str.w	r3, [sl]
 80026d8:	89a3      	ldrh	r3, [r4, #12]
 80026da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026de:	81a3      	strh	r3, [r4, #12]
 80026e0:	f04f 30ff 	mov.w	r0, #4294967295
 80026e4:	e7e9      	b.n	80026ba <__ssputs_r+0x8a>
	...

080026e8 <_svfiprintf_r>:
 80026e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026ec:	4698      	mov	r8, r3
 80026ee:	898b      	ldrh	r3, [r1, #12]
 80026f0:	061b      	lsls	r3, r3, #24
 80026f2:	b09d      	sub	sp, #116	@ 0x74
 80026f4:	4607      	mov	r7, r0
 80026f6:	460d      	mov	r5, r1
 80026f8:	4614      	mov	r4, r2
 80026fa:	d510      	bpl.n	800271e <_svfiprintf_r+0x36>
 80026fc:	690b      	ldr	r3, [r1, #16]
 80026fe:	b973      	cbnz	r3, 800271e <_svfiprintf_r+0x36>
 8002700:	2140      	movs	r1, #64	@ 0x40
 8002702:	f7ff ff09 	bl	8002518 <_malloc_r>
 8002706:	6028      	str	r0, [r5, #0]
 8002708:	6128      	str	r0, [r5, #16]
 800270a:	b930      	cbnz	r0, 800271a <_svfiprintf_r+0x32>
 800270c:	230c      	movs	r3, #12
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	f04f 30ff 	mov.w	r0, #4294967295
 8002714:	b01d      	add	sp, #116	@ 0x74
 8002716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800271a:	2340      	movs	r3, #64	@ 0x40
 800271c:	616b      	str	r3, [r5, #20]
 800271e:	2300      	movs	r3, #0
 8002720:	9309      	str	r3, [sp, #36]	@ 0x24
 8002722:	2320      	movs	r3, #32
 8002724:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002728:	f8cd 800c 	str.w	r8, [sp, #12]
 800272c:	2330      	movs	r3, #48	@ 0x30
 800272e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80028cc <_svfiprintf_r+0x1e4>
 8002732:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002736:	f04f 0901 	mov.w	r9, #1
 800273a:	4623      	mov	r3, r4
 800273c:	469a      	mov	sl, r3
 800273e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002742:	b10a      	cbz	r2, 8002748 <_svfiprintf_r+0x60>
 8002744:	2a25      	cmp	r2, #37	@ 0x25
 8002746:	d1f9      	bne.n	800273c <_svfiprintf_r+0x54>
 8002748:	ebba 0b04 	subs.w	fp, sl, r4
 800274c:	d00b      	beq.n	8002766 <_svfiprintf_r+0x7e>
 800274e:	465b      	mov	r3, fp
 8002750:	4622      	mov	r2, r4
 8002752:	4629      	mov	r1, r5
 8002754:	4638      	mov	r0, r7
 8002756:	f7ff ff6b 	bl	8002630 <__ssputs_r>
 800275a:	3001      	adds	r0, #1
 800275c:	f000 80a7 	beq.w	80028ae <_svfiprintf_r+0x1c6>
 8002760:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002762:	445a      	add	r2, fp
 8002764:	9209      	str	r2, [sp, #36]	@ 0x24
 8002766:	f89a 3000 	ldrb.w	r3, [sl]
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 809f 	beq.w	80028ae <_svfiprintf_r+0x1c6>
 8002770:	2300      	movs	r3, #0
 8002772:	f04f 32ff 	mov.w	r2, #4294967295
 8002776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800277a:	f10a 0a01 	add.w	sl, sl, #1
 800277e:	9304      	str	r3, [sp, #16]
 8002780:	9307      	str	r3, [sp, #28]
 8002782:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002786:	931a      	str	r3, [sp, #104]	@ 0x68
 8002788:	4654      	mov	r4, sl
 800278a:	2205      	movs	r2, #5
 800278c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002790:	484e      	ldr	r0, [pc, #312]	@ (80028cc <_svfiprintf_r+0x1e4>)
 8002792:	f7fd fd25 	bl	80001e0 <memchr>
 8002796:	9a04      	ldr	r2, [sp, #16]
 8002798:	b9d8      	cbnz	r0, 80027d2 <_svfiprintf_r+0xea>
 800279a:	06d0      	lsls	r0, r2, #27
 800279c:	bf44      	itt	mi
 800279e:	2320      	movmi	r3, #32
 80027a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80027a4:	0711      	lsls	r1, r2, #28
 80027a6:	bf44      	itt	mi
 80027a8:	232b      	movmi	r3, #43	@ 0x2b
 80027aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80027ae:	f89a 3000 	ldrb.w	r3, [sl]
 80027b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80027b4:	d015      	beq.n	80027e2 <_svfiprintf_r+0xfa>
 80027b6:	9a07      	ldr	r2, [sp, #28]
 80027b8:	4654      	mov	r4, sl
 80027ba:	2000      	movs	r0, #0
 80027bc:	f04f 0c0a 	mov.w	ip, #10
 80027c0:	4621      	mov	r1, r4
 80027c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80027c6:	3b30      	subs	r3, #48	@ 0x30
 80027c8:	2b09      	cmp	r3, #9
 80027ca:	d94b      	bls.n	8002864 <_svfiprintf_r+0x17c>
 80027cc:	b1b0      	cbz	r0, 80027fc <_svfiprintf_r+0x114>
 80027ce:	9207      	str	r2, [sp, #28]
 80027d0:	e014      	b.n	80027fc <_svfiprintf_r+0x114>
 80027d2:	eba0 0308 	sub.w	r3, r0, r8
 80027d6:	fa09 f303 	lsl.w	r3, r9, r3
 80027da:	4313      	orrs	r3, r2
 80027dc:	9304      	str	r3, [sp, #16]
 80027de:	46a2      	mov	sl, r4
 80027e0:	e7d2      	b.n	8002788 <_svfiprintf_r+0xa0>
 80027e2:	9b03      	ldr	r3, [sp, #12]
 80027e4:	1d19      	adds	r1, r3, #4
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	9103      	str	r1, [sp, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	bfbb      	ittet	lt
 80027ee:	425b      	neglt	r3, r3
 80027f0:	f042 0202 	orrlt.w	r2, r2, #2
 80027f4:	9307      	strge	r3, [sp, #28]
 80027f6:	9307      	strlt	r3, [sp, #28]
 80027f8:	bfb8      	it	lt
 80027fa:	9204      	strlt	r2, [sp, #16]
 80027fc:	7823      	ldrb	r3, [r4, #0]
 80027fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8002800:	d10a      	bne.n	8002818 <_svfiprintf_r+0x130>
 8002802:	7863      	ldrb	r3, [r4, #1]
 8002804:	2b2a      	cmp	r3, #42	@ 0x2a
 8002806:	d132      	bne.n	800286e <_svfiprintf_r+0x186>
 8002808:	9b03      	ldr	r3, [sp, #12]
 800280a:	1d1a      	adds	r2, r3, #4
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	9203      	str	r2, [sp, #12]
 8002810:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002814:	3402      	adds	r4, #2
 8002816:	9305      	str	r3, [sp, #20]
 8002818:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80028dc <_svfiprintf_r+0x1f4>
 800281c:	7821      	ldrb	r1, [r4, #0]
 800281e:	2203      	movs	r2, #3
 8002820:	4650      	mov	r0, sl
 8002822:	f7fd fcdd 	bl	80001e0 <memchr>
 8002826:	b138      	cbz	r0, 8002838 <_svfiprintf_r+0x150>
 8002828:	9b04      	ldr	r3, [sp, #16]
 800282a:	eba0 000a 	sub.w	r0, r0, sl
 800282e:	2240      	movs	r2, #64	@ 0x40
 8002830:	4082      	lsls	r2, r0
 8002832:	4313      	orrs	r3, r2
 8002834:	3401      	adds	r4, #1
 8002836:	9304      	str	r3, [sp, #16]
 8002838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800283c:	4824      	ldr	r0, [pc, #144]	@ (80028d0 <_svfiprintf_r+0x1e8>)
 800283e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002842:	2206      	movs	r2, #6
 8002844:	f7fd fccc 	bl	80001e0 <memchr>
 8002848:	2800      	cmp	r0, #0
 800284a:	d036      	beq.n	80028ba <_svfiprintf_r+0x1d2>
 800284c:	4b21      	ldr	r3, [pc, #132]	@ (80028d4 <_svfiprintf_r+0x1ec>)
 800284e:	bb1b      	cbnz	r3, 8002898 <_svfiprintf_r+0x1b0>
 8002850:	9b03      	ldr	r3, [sp, #12]
 8002852:	3307      	adds	r3, #7
 8002854:	f023 0307 	bic.w	r3, r3, #7
 8002858:	3308      	adds	r3, #8
 800285a:	9303      	str	r3, [sp, #12]
 800285c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800285e:	4433      	add	r3, r6
 8002860:	9309      	str	r3, [sp, #36]	@ 0x24
 8002862:	e76a      	b.n	800273a <_svfiprintf_r+0x52>
 8002864:	fb0c 3202 	mla	r2, ip, r2, r3
 8002868:	460c      	mov	r4, r1
 800286a:	2001      	movs	r0, #1
 800286c:	e7a8      	b.n	80027c0 <_svfiprintf_r+0xd8>
 800286e:	2300      	movs	r3, #0
 8002870:	3401      	adds	r4, #1
 8002872:	9305      	str	r3, [sp, #20]
 8002874:	4619      	mov	r1, r3
 8002876:	f04f 0c0a 	mov.w	ip, #10
 800287a:	4620      	mov	r0, r4
 800287c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002880:	3a30      	subs	r2, #48	@ 0x30
 8002882:	2a09      	cmp	r2, #9
 8002884:	d903      	bls.n	800288e <_svfiprintf_r+0x1a6>
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0c6      	beq.n	8002818 <_svfiprintf_r+0x130>
 800288a:	9105      	str	r1, [sp, #20]
 800288c:	e7c4      	b.n	8002818 <_svfiprintf_r+0x130>
 800288e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002892:	4604      	mov	r4, r0
 8002894:	2301      	movs	r3, #1
 8002896:	e7f0      	b.n	800287a <_svfiprintf_r+0x192>
 8002898:	ab03      	add	r3, sp, #12
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	462a      	mov	r2, r5
 800289e:	4b0e      	ldr	r3, [pc, #56]	@ (80028d8 <_svfiprintf_r+0x1f0>)
 80028a0:	a904      	add	r1, sp, #16
 80028a2:	4638      	mov	r0, r7
 80028a4:	f3af 8000 	nop.w
 80028a8:	1c42      	adds	r2, r0, #1
 80028aa:	4606      	mov	r6, r0
 80028ac:	d1d6      	bne.n	800285c <_svfiprintf_r+0x174>
 80028ae:	89ab      	ldrh	r3, [r5, #12]
 80028b0:	065b      	lsls	r3, r3, #25
 80028b2:	f53f af2d 	bmi.w	8002710 <_svfiprintf_r+0x28>
 80028b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80028b8:	e72c      	b.n	8002714 <_svfiprintf_r+0x2c>
 80028ba:	ab03      	add	r3, sp, #12
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	462a      	mov	r2, r5
 80028c0:	4b05      	ldr	r3, [pc, #20]	@ (80028d8 <_svfiprintf_r+0x1f0>)
 80028c2:	a904      	add	r1, sp, #16
 80028c4:	4638      	mov	r0, r7
 80028c6:	f000 f879 	bl	80029bc <_printf_i>
 80028ca:	e7ed      	b.n	80028a8 <_svfiprintf_r+0x1c0>
 80028cc:	08003793 	.word	0x08003793
 80028d0:	0800379d 	.word	0x0800379d
 80028d4:	00000000 	.word	0x00000000
 80028d8:	08002631 	.word	0x08002631
 80028dc:	08003799 	.word	0x08003799

080028e0 <_printf_common>:
 80028e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028e4:	4616      	mov	r6, r2
 80028e6:	4698      	mov	r8, r3
 80028e8:	688a      	ldr	r2, [r1, #8]
 80028ea:	690b      	ldr	r3, [r1, #16]
 80028ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80028f0:	4293      	cmp	r3, r2
 80028f2:	bfb8      	it	lt
 80028f4:	4613      	movlt	r3, r2
 80028f6:	6033      	str	r3, [r6, #0]
 80028f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80028fc:	4607      	mov	r7, r0
 80028fe:	460c      	mov	r4, r1
 8002900:	b10a      	cbz	r2, 8002906 <_printf_common+0x26>
 8002902:	3301      	adds	r3, #1
 8002904:	6033      	str	r3, [r6, #0]
 8002906:	6823      	ldr	r3, [r4, #0]
 8002908:	0699      	lsls	r1, r3, #26
 800290a:	bf42      	ittt	mi
 800290c:	6833      	ldrmi	r3, [r6, #0]
 800290e:	3302      	addmi	r3, #2
 8002910:	6033      	strmi	r3, [r6, #0]
 8002912:	6825      	ldr	r5, [r4, #0]
 8002914:	f015 0506 	ands.w	r5, r5, #6
 8002918:	d106      	bne.n	8002928 <_printf_common+0x48>
 800291a:	f104 0a19 	add.w	sl, r4, #25
 800291e:	68e3      	ldr	r3, [r4, #12]
 8002920:	6832      	ldr	r2, [r6, #0]
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	42ab      	cmp	r3, r5
 8002926:	dc26      	bgt.n	8002976 <_printf_common+0x96>
 8002928:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800292c:	6822      	ldr	r2, [r4, #0]
 800292e:	3b00      	subs	r3, #0
 8002930:	bf18      	it	ne
 8002932:	2301      	movne	r3, #1
 8002934:	0692      	lsls	r2, r2, #26
 8002936:	d42b      	bmi.n	8002990 <_printf_common+0xb0>
 8002938:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800293c:	4641      	mov	r1, r8
 800293e:	4638      	mov	r0, r7
 8002940:	47c8      	blx	r9
 8002942:	3001      	adds	r0, #1
 8002944:	d01e      	beq.n	8002984 <_printf_common+0xa4>
 8002946:	6823      	ldr	r3, [r4, #0]
 8002948:	6922      	ldr	r2, [r4, #16]
 800294a:	f003 0306 	and.w	r3, r3, #6
 800294e:	2b04      	cmp	r3, #4
 8002950:	bf02      	ittt	eq
 8002952:	68e5      	ldreq	r5, [r4, #12]
 8002954:	6833      	ldreq	r3, [r6, #0]
 8002956:	1aed      	subeq	r5, r5, r3
 8002958:	68a3      	ldr	r3, [r4, #8]
 800295a:	bf0c      	ite	eq
 800295c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002960:	2500      	movne	r5, #0
 8002962:	4293      	cmp	r3, r2
 8002964:	bfc4      	itt	gt
 8002966:	1a9b      	subgt	r3, r3, r2
 8002968:	18ed      	addgt	r5, r5, r3
 800296a:	2600      	movs	r6, #0
 800296c:	341a      	adds	r4, #26
 800296e:	42b5      	cmp	r5, r6
 8002970:	d11a      	bne.n	80029a8 <_printf_common+0xc8>
 8002972:	2000      	movs	r0, #0
 8002974:	e008      	b.n	8002988 <_printf_common+0xa8>
 8002976:	2301      	movs	r3, #1
 8002978:	4652      	mov	r2, sl
 800297a:	4641      	mov	r1, r8
 800297c:	4638      	mov	r0, r7
 800297e:	47c8      	blx	r9
 8002980:	3001      	adds	r0, #1
 8002982:	d103      	bne.n	800298c <_printf_common+0xac>
 8002984:	f04f 30ff 	mov.w	r0, #4294967295
 8002988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800298c:	3501      	adds	r5, #1
 800298e:	e7c6      	b.n	800291e <_printf_common+0x3e>
 8002990:	18e1      	adds	r1, r4, r3
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	2030      	movs	r0, #48	@ 0x30
 8002996:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800299a:	4422      	add	r2, r4
 800299c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80029a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80029a4:	3302      	adds	r3, #2
 80029a6:	e7c7      	b.n	8002938 <_printf_common+0x58>
 80029a8:	2301      	movs	r3, #1
 80029aa:	4622      	mov	r2, r4
 80029ac:	4641      	mov	r1, r8
 80029ae:	4638      	mov	r0, r7
 80029b0:	47c8      	blx	r9
 80029b2:	3001      	adds	r0, #1
 80029b4:	d0e6      	beq.n	8002984 <_printf_common+0xa4>
 80029b6:	3601      	adds	r6, #1
 80029b8:	e7d9      	b.n	800296e <_printf_common+0x8e>
	...

080029bc <_printf_i>:
 80029bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80029c0:	7e0f      	ldrb	r7, [r1, #24]
 80029c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80029c4:	2f78      	cmp	r7, #120	@ 0x78
 80029c6:	4691      	mov	r9, r2
 80029c8:	4680      	mov	r8, r0
 80029ca:	460c      	mov	r4, r1
 80029cc:	469a      	mov	sl, r3
 80029ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80029d2:	d807      	bhi.n	80029e4 <_printf_i+0x28>
 80029d4:	2f62      	cmp	r7, #98	@ 0x62
 80029d6:	d80a      	bhi.n	80029ee <_printf_i+0x32>
 80029d8:	2f00      	cmp	r7, #0
 80029da:	f000 80d1 	beq.w	8002b80 <_printf_i+0x1c4>
 80029de:	2f58      	cmp	r7, #88	@ 0x58
 80029e0:	f000 80b8 	beq.w	8002b54 <_printf_i+0x198>
 80029e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80029e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80029ec:	e03a      	b.n	8002a64 <_printf_i+0xa8>
 80029ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80029f2:	2b15      	cmp	r3, #21
 80029f4:	d8f6      	bhi.n	80029e4 <_printf_i+0x28>
 80029f6:	a101      	add	r1, pc, #4	@ (adr r1, 80029fc <_printf_i+0x40>)
 80029f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80029fc:	08002a55 	.word	0x08002a55
 8002a00:	08002a69 	.word	0x08002a69
 8002a04:	080029e5 	.word	0x080029e5
 8002a08:	080029e5 	.word	0x080029e5
 8002a0c:	080029e5 	.word	0x080029e5
 8002a10:	080029e5 	.word	0x080029e5
 8002a14:	08002a69 	.word	0x08002a69
 8002a18:	080029e5 	.word	0x080029e5
 8002a1c:	080029e5 	.word	0x080029e5
 8002a20:	080029e5 	.word	0x080029e5
 8002a24:	080029e5 	.word	0x080029e5
 8002a28:	08002b67 	.word	0x08002b67
 8002a2c:	08002a93 	.word	0x08002a93
 8002a30:	08002b21 	.word	0x08002b21
 8002a34:	080029e5 	.word	0x080029e5
 8002a38:	080029e5 	.word	0x080029e5
 8002a3c:	08002b89 	.word	0x08002b89
 8002a40:	080029e5 	.word	0x080029e5
 8002a44:	08002a93 	.word	0x08002a93
 8002a48:	080029e5 	.word	0x080029e5
 8002a4c:	080029e5 	.word	0x080029e5
 8002a50:	08002b29 	.word	0x08002b29
 8002a54:	6833      	ldr	r3, [r6, #0]
 8002a56:	1d1a      	adds	r2, r3, #4
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6032      	str	r2, [r6, #0]
 8002a5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002a60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002a64:	2301      	movs	r3, #1
 8002a66:	e09c      	b.n	8002ba2 <_printf_i+0x1e6>
 8002a68:	6833      	ldr	r3, [r6, #0]
 8002a6a:	6820      	ldr	r0, [r4, #0]
 8002a6c:	1d19      	adds	r1, r3, #4
 8002a6e:	6031      	str	r1, [r6, #0]
 8002a70:	0606      	lsls	r6, r0, #24
 8002a72:	d501      	bpl.n	8002a78 <_printf_i+0xbc>
 8002a74:	681d      	ldr	r5, [r3, #0]
 8002a76:	e003      	b.n	8002a80 <_printf_i+0xc4>
 8002a78:	0645      	lsls	r5, r0, #25
 8002a7a:	d5fb      	bpl.n	8002a74 <_printf_i+0xb8>
 8002a7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002a80:	2d00      	cmp	r5, #0
 8002a82:	da03      	bge.n	8002a8c <_printf_i+0xd0>
 8002a84:	232d      	movs	r3, #45	@ 0x2d
 8002a86:	426d      	negs	r5, r5
 8002a88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a8c:	4858      	ldr	r0, [pc, #352]	@ (8002bf0 <_printf_i+0x234>)
 8002a8e:	230a      	movs	r3, #10
 8002a90:	e011      	b.n	8002ab6 <_printf_i+0xfa>
 8002a92:	6821      	ldr	r1, [r4, #0]
 8002a94:	6833      	ldr	r3, [r6, #0]
 8002a96:	0608      	lsls	r0, r1, #24
 8002a98:	f853 5b04 	ldr.w	r5, [r3], #4
 8002a9c:	d402      	bmi.n	8002aa4 <_printf_i+0xe8>
 8002a9e:	0649      	lsls	r1, r1, #25
 8002aa0:	bf48      	it	mi
 8002aa2:	b2ad      	uxthmi	r5, r5
 8002aa4:	2f6f      	cmp	r7, #111	@ 0x6f
 8002aa6:	4852      	ldr	r0, [pc, #328]	@ (8002bf0 <_printf_i+0x234>)
 8002aa8:	6033      	str	r3, [r6, #0]
 8002aaa:	bf14      	ite	ne
 8002aac:	230a      	movne	r3, #10
 8002aae:	2308      	moveq	r3, #8
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002ab6:	6866      	ldr	r6, [r4, #4]
 8002ab8:	60a6      	str	r6, [r4, #8]
 8002aba:	2e00      	cmp	r6, #0
 8002abc:	db05      	blt.n	8002aca <_printf_i+0x10e>
 8002abe:	6821      	ldr	r1, [r4, #0]
 8002ac0:	432e      	orrs	r6, r5
 8002ac2:	f021 0104 	bic.w	r1, r1, #4
 8002ac6:	6021      	str	r1, [r4, #0]
 8002ac8:	d04b      	beq.n	8002b62 <_printf_i+0x1a6>
 8002aca:	4616      	mov	r6, r2
 8002acc:	fbb5 f1f3 	udiv	r1, r5, r3
 8002ad0:	fb03 5711 	mls	r7, r3, r1, r5
 8002ad4:	5dc7      	ldrb	r7, [r0, r7]
 8002ad6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002ada:	462f      	mov	r7, r5
 8002adc:	42bb      	cmp	r3, r7
 8002ade:	460d      	mov	r5, r1
 8002ae0:	d9f4      	bls.n	8002acc <_printf_i+0x110>
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d10b      	bne.n	8002afe <_printf_i+0x142>
 8002ae6:	6823      	ldr	r3, [r4, #0]
 8002ae8:	07df      	lsls	r7, r3, #31
 8002aea:	d508      	bpl.n	8002afe <_printf_i+0x142>
 8002aec:	6923      	ldr	r3, [r4, #16]
 8002aee:	6861      	ldr	r1, [r4, #4]
 8002af0:	4299      	cmp	r1, r3
 8002af2:	bfde      	ittt	le
 8002af4:	2330      	movle	r3, #48	@ 0x30
 8002af6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002afa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002afe:	1b92      	subs	r2, r2, r6
 8002b00:	6122      	str	r2, [r4, #16]
 8002b02:	f8cd a000 	str.w	sl, [sp]
 8002b06:	464b      	mov	r3, r9
 8002b08:	aa03      	add	r2, sp, #12
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	4640      	mov	r0, r8
 8002b0e:	f7ff fee7 	bl	80028e0 <_printf_common>
 8002b12:	3001      	adds	r0, #1
 8002b14:	d14a      	bne.n	8002bac <_printf_i+0x1f0>
 8002b16:	f04f 30ff 	mov.w	r0, #4294967295
 8002b1a:	b004      	add	sp, #16
 8002b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b20:	6823      	ldr	r3, [r4, #0]
 8002b22:	f043 0320 	orr.w	r3, r3, #32
 8002b26:	6023      	str	r3, [r4, #0]
 8002b28:	4832      	ldr	r0, [pc, #200]	@ (8002bf4 <_printf_i+0x238>)
 8002b2a:	2778      	movs	r7, #120	@ 0x78
 8002b2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002b30:	6823      	ldr	r3, [r4, #0]
 8002b32:	6831      	ldr	r1, [r6, #0]
 8002b34:	061f      	lsls	r7, r3, #24
 8002b36:	f851 5b04 	ldr.w	r5, [r1], #4
 8002b3a:	d402      	bmi.n	8002b42 <_printf_i+0x186>
 8002b3c:	065f      	lsls	r7, r3, #25
 8002b3e:	bf48      	it	mi
 8002b40:	b2ad      	uxthmi	r5, r5
 8002b42:	6031      	str	r1, [r6, #0]
 8002b44:	07d9      	lsls	r1, r3, #31
 8002b46:	bf44      	itt	mi
 8002b48:	f043 0320 	orrmi.w	r3, r3, #32
 8002b4c:	6023      	strmi	r3, [r4, #0]
 8002b4e:	b11d      	cbz	r5, 8002b58 <_printf_i+0x19c>
 8002b50:	2310      	movs	r3, #16
 8002b52:	e7ad      	b.n	8002ab0 <_printf_i+0xf4>
 8002b54:	4826      	ldr	r0, [pc, #152]	@ (8002bf0 <_printf_i+0x234>)
 8002b56:	e7e9      	b.n	8002b2c <_printf_i+0x170>
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	f023 0320 	bic.w	r3, r3, #32
 8002b5e:	6023      	str	r3, [r4, #0]
 8002b60:	e7f6      	b.n	8002b50 <_printf_i+0x194>
 8002b62:	4616      	mov	r6, r2
 8002b64:	e7bd      	b.n	8002ae2 <_printf_i+0x126>
 8002b66:	6833      	ldr	r3, [r6, #0]
 8002b68:	6825      	ldr	r5, [r4, #0]
 8002b6a:	6961      	ldr	r1, [r4, #20]
 8002b6c:	1d18      	adds	r0, r3, #4
 8002b6e:	6030      	str	r0, [r6, #0]
 8002b70:	062e      	lsls	r6, r5, #24
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	d501      	bpl.n	8002b7a <_printf_i+0x1be>
 8002b76:	6019      	str	r1, [r3, #0]
 8002b78:	e002      	b.n	8002b80 <_printf_i+0x1c4>
 8002b7a:	0668      	lsls	r0, r5, #25
 8002b7c:	d5fb      	bpl.n	8002b76 <_printf_i+0x1ba>
 8002b7e:	8019      	strh	r1, [r3, #0]
 8002b80:	2300      	movs	r3, #0
 8002b82:	6123      	str	r3, [r4, #16]
 8002b84:	4616      	mov	r6, r2
 8002b86:	e7bc      	b.n	8002b02 <_printf_i+0x146>
 8002b88:	6833      	ldr	r3, [r6, #0]
 8002b8a:	1d1a      	adds	r2, r3, #4
 8002b8c:	6032      	str	r2, [r6, #0]
 8002b8e:	681e      	ldr	r6, [r3, #0]
 8002b90:	6862      	ldr	r2, [r4, #4]
 8002b92:	2100      	movs	r1, #0
 8002b94:	4630      	mov	r0, r6
 8002b96:	f7fd fb23 	bl	80001e0 <memchr>
 8002b9a:	b108      	cbz	r0, 8002ba0 <_printf_i+0x1e4>
 8002b9c:	1b80      	subs	r0, r0, r6
 8002b9e:	6060      	str	r0, [r4, #4]
 8002ba0:	6863      	ldr	r3, [r4, #4]
 8002ba2:	6123      	str	r3, [r4, #16]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002baa:	e7aa      	b.n	8002b02 <_printf_i+0x146>
 8002bac:	6923      	ldr	r3, [r4, #16]
 8002bae:	4632      	mov	r2, r6
 8002bb0:	4649      	mov	r1, r9
 8002bb2:	4640      	mov	r0, r8
 8002bb4:	47d0      	blx	sl
 8002bb6:	3001      	adds	r0, #1
 8002bb8:	d0ad      	beq.n	8002b16 <_printf_i+0x15a>
 8002bba:	6823      	ldr	r3, [r4, #0]
 8002bbc:	079b      	lsls	r3, r3, #30
 8002bbe:	d413      	bmi.n	8002be8 <_printf_i+0x22c>
 8002bc0:	68e0      	ldr	r0, [r4, #12]
 8002bc2:	9b03      	ldr	r3, [sp, #12]
 8002bc4:	4298      	cmp	r0, r3
 8002bc6:	bfb8      	it	lt
 8002bc8:	4618      	movlt	r0, r3
 8002bca:	e7a6      	b.n	8002b1a <_printf_i+0x15e>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	4632      	mov	r2, r6
 8002bd0:	4649      	mov	r1, r9
 8002bd2:	4640      	mov	r0, r8
 8002bd4:	47d0      	blx	sl
 8002bd6:	3001      	adds	r0, #1
 8002bd8:	d09d      	beq.n	8002b16 <_printf_i+0x15a>
 8002bda:	3501      	adds	r5, #1
 8002bdc:	68e3      	ldr	r3, [r4, #12]
 8002bde:	9903      	ldr	r1, [sp, #12]
 8002be0:	1a5b      	subs	r3, r3, r1
 8002be2:	42ab      	cmp	r3, r5
 8002be4:	dcf2      	bgt.n	8002bcc <_printf_i+0x210>
 8002be6:	e7eb      	b.n	8002bc0 <_printf_i+0x204>
 8002be8:	2500      	movs	r5, #0
 8002bea:	f104 0619 	add.w	r6, r4, #25
 8002bee:	e7f5      	b.n	8002bdc <_printf_i+0x220>
 8002bf0:	080037a4 	.word	0x080037a4
 8002bf4:	080037b5 	.word	0x080037b5

08002bf8 <__sflush_r>:
 8002bf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c00:	0716      	lsls	r6, r2, #28
 8002c02:	4605      	mov	r5, r0
 8002c04:	460c      	mov	r4, r1
 8002c06:	d454      	bmi.n	8002cb2 <__sflush_r+0xba>
 8002c08:	684b      	ldr	r3, [r1, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	dc02      	bgt.n	8002c14 <__sflush_r+0x1c>
 8002c0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	dd48      	ble.n	8002ca6 <__sflush_r+0xae>
 8002c14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002c16:	2e00      	cmp	r6, #0
 8002c18:	d045      	beq.n	8002ca6 <__sflush_r+0xae>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002c20:	682f      	ldr	r7, [r5, #0]
 8002c22:	6a21      	ldr	r1, [r4, #32]
 8002c24:	602b      	str	r3, [r5, #0]
 8002c26:	d030      	beq.n	8002c8a <__sflush_r+0x92>
 8002c28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002c2a:	89a3      	ldrh	r3, [r4, #12]
 8002c2c:	0759      	lsls	r1, r3, #29
 8002c2e:	d505      	bpl.n	8002c3c <__sflush_r+0x44>
 8002c30:	6863      	ldr	r3, [r4, #4]
 8002c32:	1ad2      	subs	r2, r2, r3
 8002c34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002c36:	b10b      	cbz	r3, 8002c3c <__sflush_r+0x44>
 8002c38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002c3a:	1ad2      	subs	r2, r2, r3
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002c40:	6a21      	ldr	r1, [r4, #32]
 8002c42:	4628      	mov	r0, r5
 8002c44:	47b0      	blx	r6
 8002c46:	1c43      	adds	r3, r0, #1
 8002c48:	89a3      	ldrh	r3, [r4, #12]
 8002c4a:	d106      	bne.n	8002c5a <__sflush_r+0x62>
 8002c4c:	6829      	ldr	r1, [r5, #0]
 8002c4e:	291d      	cmp	r1, #29
 8002c50:	d82b      	bhi.n	8002caa <__sflush_r+0xb2>
 8002c52:	4a2a      	ldr	r2, [pc, #168]	@ (8002cfc <__sflush_r+0x104>)
 8002c54:	40ca      	lsrs	r2, r1
 8002c56:	07d6      	lsls	r6, r2, #31
 8002c58:	d527      	bpl.n	8002caa <__sflush_r+0xb2>
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	6062      	str	r2, [r4, #4]
 8002c5e:	04d9      	lsls	r1, r3, #19
 8002c60:	6922      	ldr	r2, [r4, #16]
 8002c62:	6022      	str	r2, [r4, #0]
 8002c64:	d504      	bpl.n	8002c70 <__sflush_r+0x78>
 8002c66:	1c42      	adds	r2, r0, #1
 8002c68:	d101      	bne.n	8002c6e <__sflush_r+0x76>
 8002c6a:	682b      	ldr	r3, [r5, #0]
 8002c6c:	b903      	cbnz	r3, 8002c70 <__sflush_r+0x78>
 8002c6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8002c70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002c72:	602f      	str	r7, [r5, #0]
 8002c74:	b1b9      	cbz	r1, 8002ca6 <__sflush_r+0xae>
 8002c76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002c7a:	4299      	cmp	r1, r3
 8002c7c:	d002      	beq.n	8002c84 <__sflush_r+0x8c>
 8002c7e:	4628      	mov	r0, r5
 8002c80:	f7ff fbd6 	bl	8002430 <_free_r>
 8002c84:	2300      	movs	r3, #0
 8002c86:	6363      	str	r3, [r4, #52]	@ 0x34
 8002c88:	e00d      	b.n	8002ca6 <__sflush_r+0xae>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	4628      	mov	r0, r5
 8002c8e:	47b0      	blx	r6
 8002c90:	4602      	mov	r2, r0
 8002c92:	1c50      	adds	r0, r2, #1
 8002c94:	d1c9      	bne.n	8002c2a <__sflush_r+0x32>
 8002c96:	682b      	ldr	r3, [r5, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0c6      	beq.n	8002c2a <__sflush_r+0x32>
 8002c9c:	2b1d      	cmp	r3, #29
 8002c9e:	d001      	beq.n	8002ca4 <__sflush_r+0xac>
 8002ca0:	2b16      	cmp	r3, #22
 8002ca2:	d11e      	bne.n	8002ce2 <__sflush_r+0xea>
 8002ca4:	602f      	str	r7, [r5, #0]
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	e022      	b.n	8002cf0 <__sflush_r+0xf8>
 8002caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cae:	b21b      	sxth	r3, r3
 8002cb0:	e01b      	b.n	8002cea <__sflush_r+0xf2>
 8002cb2:	690f      	ldr	r7, [r1, #16]
 8002cb4:	2f00      	cmp	r7, #0
 8002cb6:	d0f6      	beq.n	8002ca6 <__sflush_r+0xae>
 8002cb8:	0793      	lsls	r3, r2, #30
 8002cba:	680e      	ldr	r6, [r1, #0]
 8002cbc:	bf08      	it	eq
 8002cbe:	694b      	ldreq	r3, [r1, #20]
 8002cc0:	600f      	str	r7, [r1, #0]
 8002cc2:	bf18      	it	ne
 8002cc4:	2300      	movne	r3, #0
 8002cc6:	eba6 0807 	sub.w	r8, r6, r7
 8002cca:	608b      	str	r3, [r1, #8]
 8002ccc:	f1b8 0f00 	cmp.w	r8, #0
 8002cd0:	dde9      	ble.n	8002ca6 <__sflush_r+0xae>
 8002cd2:	6a21      	ldr	r1, [r4, #32]
 8002cd4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002cd6:	4643      	mov	r3, r8
 8002cd8:	463a      	mov	r2, r7
 8002cda:	4628      	mov	r0, r5
 8002cdc:	47b0      	blx	r6
 8002cde:	2800      	cmp	r0, #0
 8002ce0:	dc08      	bgt.n	8002cf4 <__sflush_r+0xfc>
 8002ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ce6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cea:	81a3      	strh	r3, [r4, #12]
 8002cec:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cf4:	4407      	add	r7, r0
 8002cf6:	eba8 0800 	sub.w	r8, r8, r0
 8002cfa:	e7e7      	b.n	8002ccc <__sflush_r+0xd4>
 8002cfc:	20400001 	.word	0x20400001

08002d00 <_fflush_r>:
 8002d00:	b538      	push	{r3, r4, r5, lr}
 8002d02:	690b      	ldr	r3, [r1, #16]
 8002d04:	4605      	mov	r5, r0
 8002d06:	460c      	mov	r4, r1
 8002d08:	b913      	cbnz	r3, 8002d10 <_fflush_r+0x10>
 8002d0a:	2500      	movs	r5, #0
 8002d0c:	4628      	mov	r0, r5
 8002d0e:	bd38      	pop	{r3, r4, r5, pc}
 8002d10:	b118      	cbz	r0, 8002d1a <_fflush_r+0x1a>
 8002d12:	6a03      	ldr	r3, [r0, #32]
 8002d14:	b90b      	cbnz	r3, 8002d1a <_fflush_r+0x1a>
 8002d16:	f7ff fa3b 	bl	8002190 <__sinit>
 8002d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f3      	beq.n	8002d0a <_fflush_r+0xa>
 8002d22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002d24:	07d0      	lsls	r0, r2, #31
 8002d26:	d404      	bmi.n	8002d32 <_fflush_r+0x32>
 8002d28:	0599      	lsls	r1, r3, #22
 8002d2a:	d402      	bmi.n	8002d32 <_fflush_r+0x32>
 8002d2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d2e:	f7ff fb5e 	bl	80023ee <__retarget_lock_acquire_recursive>
 8002d32:	4628      	mov	r0, r5
 8002d34:	4621      	mov	r1, r4
 8002d36:	f7ff ff5f 	bl	8002bf8 <__sflush_r>
 8002d3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d3c:	07da      	lsls	r2, r3, #31
 8002d3e:	4605      	mov	r5, r0
 8002d40:	d4e4      	bmi.n	8002d0c <_fflush_r+0xc>
 8002d42:	89a3      	ldrh	r3, [r4, #12]
 8002d44:	059b      	lsls	r3, r3, #22
 8002d46:	d4e1      	bmi.n	8002d0c <_fflush_r+0xc>
 8002d48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d4a:	f7ff fb51 	bl	80023f0 <__retarget_lock_release_recursive>
 8002d4e:	e7dd      	b.n	8002d0c <_fflush_r+0xc>

08002d50 <fiprintf>:
 8002d50:	b40e      	push	{r1, r2, r3}
 8002d52:	b503      	push	{r0, r1, lr}
 8002d54:	4601      	mov	r1, r0
 8002d56:	ab03      	add	r3, sp, #12
 8002d58:	4805      	ldr	r0, [pc, #20]	@ (8002d70 <fiprintf+0x20>)
 8002d5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d5e:	6800      	ldr	r0, [r0, #0]
 8002d60:	9301      	str	r3, [sp, #4]
 8002d62:	f000 f89d 	bl	8002ea0 <_vfiprintf_r>
 8002d66:	b002      	add	sp, #8
 8002d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d6c:	b003      	add	sp, #12
 8002d6e:	4770      	bx	lr
 8002d70:	20000018 	.word	0x20000018

08002d74 <memmove>:
 8002d74:	4288      	cmp	r0, r1
 8002d76:	b510      	push	{r4, lr}
 8002d78:	eb01 0402 	add.w	r4, r1, r2
 8002d7c:	d902      	bls.n	8002d84 <memmove+0x10>
 8002d7e:	4284      	cmp	r4, r0
 8002d80:	4623      	mov	r3, r4
 8002d82:	d807      	bhi.n	8002d94 <memmove+0x20>
 8002d84:	1e43      	subs	r3, r0, #1
 8002d86:	42a1      	cmp	r1, r4
 8002d88:	d008      	beq.n	8002d9c <memmove+0x28>
 8002d8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d92:	e7f8      	b.n	8002d86 <memmove+0x12>
 8002d94:	4402      	add	r2, r0
 8002d96:	4601      	mov	r1, r0
 8002d98:	428a      	cmp	r2, r1
 8002d9a:	d100      	bne.n	8002d9e <memmove+0x2a>
 8002d9c:	bd10      	pop	{r4, pc}
 8002d9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002da2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002da6:	e7f7      	b.n	8002d98 <memmove+0x24>

08002da8 <_sbrk_r>:
 8002da8:	b538      	push	{r3, r4, r5, lr}
 8002daa:	4d06      	ldr	r5, [pc, #24]	@ (8002dc4 <_sbrk_r+0x1c>)
 8002dac:	2300      	movs	r3, #0
 8002dae:	4604      	mov	r4, r0
 8002db0:	4608      	mov	r0, r1
 8002db2:	602b      	str	r3, [r5, #0]
 8002db4:	f7ff f822 	bl	8001dfc <_sbrk>
 8002db8:	1c43      	adds	r3, r0, #1
 8002dba:	d102      	bne.n	8002dc2 <_sbrk_r+0x1a>
 8002dbc:	682b      	ldr	r3, [r5, #0]
 8002dbe:	b103      	cbz	r3, 8002dc2 <_sbrk_r+0x1a>
 8002dc0:	6023      	str	r3, [r4, #0]
 8002dc2:	bd38      	pop	{r3, r4, r5, pc}
 8002dc4:	200002b4 	.word	0x200002b4

08002dc8 <memcpy>:
 8002dc8:	440a      	add	r2, r1
 8002dca:	4291      	cmp	r1, r2
 8002dcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002dd0:	d100      	bne.n	8002dd4 <memcpy+0xc>
 8002dd2:	4770      	bx	lr
 8002dd4:	b510      	push	{r4, lr}
 8002dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002dde:	4291      	cmp	r1, r2
 8002de0:	d1f9      	bne.n	8002dd6 <memcpy+0xe>
 8002de2:	bd10      	pop	{r4, pc}

08002de4 <abort>:
 8002de4:	b508      	push	{r3, lr}
 8002de6:	2006      	movs	r0, #6
 8002de8:	f000 fa2e 	bl	8003248 <raise>
 8002dec:	2001      	movs	r0, #1
 8002dee:	f7fe ff8d 	bl	8001d0c <_exit>

08002df2 <_realloc_r>:
 8002df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002df6:	4607      	mov	r7, r0
 8002df8:	4614      	mov	r4, r2
 8002dfa:	460d      	mov	r5, r1
 8002dfc:	b921      	cbnz	r1, 8002e08 <_realloc_r+0x16>
 8002dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e02:	4611      	mov	r1, r2
 8002e04:	f7ff bb88 	b.w	8002518 <_malloc_r>
 8002e08:	b92a      	cbnz	r2, 8002e16 <_realloc_r+0x24>
 8002e0a:	f7ff fb11 	bl	8002430 <_free_r>
 8002e0e:	4625      	mov	r5, r4
 8002e10:	4628      	mov	r0, r5
 8002e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e16:	f000 fa33 	bl	8003280 <_malloc_usable_size_r>
 8002e1a:	4284      	cmp	r4, r0
 8002e1c:	4606      	mov	r6, r0
 8002e1e:	d802      	bhi.n	8002e26 <_realloc_r+0x34>
 8002e20:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002e24:	d8f4      	bhi.n	8002e10 <_realloc_r+0x1e>
 8002e26:	4621      	mov	r1, r4
 8002e28:	4638      	mov	r0, r7
 8002e2a:	f7ff fb75 	bl	8002518 <_malloc_r>
 8002e2e:	4680      	mov	r8, r0
 8002e30:	b908      	cbnz	r0, 8002e36 <_realloc_r+0x44>
 8002e32:	4645      	mov	r5, r8
 8002e34:	e7ec      	b.n	8002e10 <_realloc_r+0x1e>
 8002e36:	42b4      	cmp	r4, r6
 8002e38:	4622      	mov	r2, r4
 8002e3a:	4629      	mov	r1, r5
 8002e3c:	bf28      	it	cs
 8002e3e:	4632      	movcs	r2, r6
 8002e40:	f7ff ffc2 	bl	8002dc8 <memcpy>
 8002e44:	4629      	mov	r1, r5
 8002e46:	4638      	mov	r0, r7
 8002e48:	f7ff faf2 	bl	8002430 <_free_r>
 8002e4c:	e7f1      	b.n	8002e32 <_realloc_r+0x40>

08002e4e <__sfputc_r>:
 8002e4e:	6893      	ldr	r3, [r2, #8]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	b410      	push	{r4}
 8002e56:	6093      	str	r3, [r2, #8]
 8002e58:	da08      	bge.n	8002e6c <__sfputc_r+0x1e>
 8002e5a:	6994      	ldr	r4, [r2, #24]
 8002e5c:	42a3      	cmp	r3, r4
 8002e5e:	db01      	blt.n	8002e64 <__sfputc_r+0x16>
 8002e60:	290a      	cmp	r1, #10
 8002e62:	d103      	bne.n	8002e6c <__sfputc_r+0x1e>
 8002e64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e68:	f000 b932 	b.w	80030d0 <__swbuf_r>
 8002e6c:	6813      	ldr	r3, [r2, #0]
 8002e6e:	1c58      	adds	r0, r3, #1
 8002e70:	6010      	str	r0, [r2, #0]
 8002e72:	7019      	strb	r1, [r3, #0]
 8002e74:	4608      	mov	r0, r1
 8002e76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <__sfputs_r>:
 8002e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7e:	4606      	mov	r6, r0
 8002e80:	460f      	mov	r7, r1
 8002e82:	4614      	mov	r4, r2
 8002e84:	18d5      	adds	r5, r2, r3
 8002e86:	42ac      	cmp	r4, r5
 8002e88:	d101      	bne.n	8002e8e <__sfputs_r+0x12>
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	e007      	b.n	8002e9e <__sfputs_r+0x22>
 8002e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e92:	463a      	mov	r2, r7
 8002e94:	4630      	mov	r0, r6
 8002e96:	f7ff ffda 	bl	8002e4e <__sfputc_r>
 8002e9a:	1c43      	adds	r3, r0, #1
 8002e9c:	d1f3      	bne.n	8002e86 <__sfputs_r+0xa>
 8002e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002ea0 <_vfiprintf_r>:
 8002ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea4:	460d      	mov	r5, r1
 8002ea6:	b09d      	sub	sp, #116	@ 0x74
 8002ea8:	4614      	mov	r4, r2
 8002eaa:	4698      	mov	r8, r3
 8002eac:	4606      	mov	r6, r0
 8002eae:	b118      	cbz	r0, 8002eb8 <_vfiprintf_r+0x18>
 8002eb0:	6a03      	ldr	r3, [r0, #32]
 8002eb2:	b90b      	cbnz	r3, 8002eb8 <_vfiprintf_r+0x18>
 8002eb4:	f7ff f96c 	bl	8002190 <__sinit>
 8002eb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002eba:	07d9      	lsls	r1, r3, #31
 8002ebc:	d405      	bmi.n	8002eca <_vfiprintf_r+0x2a>
 8002ebe:	89ab      	ldrh	r3, [r5, #12]
 8002ec0:	059a      	lsls	r2, r3, #22
 8002ec2:	d402      	bmi.n	8002eca <_vfiprintf_r+0x2a>
 8002ec4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002ec6:	f7ff fa92 	bl	80023ee <__retarget_lock_acquire_recursive>
 8002eca:	89ab      	ldrh	r3, [r5, #12]
 8002ecc:	071b      	lsls	r3, r3, #28
 8002ece:	d501      	bpl.n	8002ed4 <_vfiprintf_r+0x34>
 8002ed0:	692b      	ldr	r3, [r5, #16]
 8002ed2:	b99b      	cbnz	r3, 8002efc <_vfiprintf_r+0x5c>
 8002ed4:	4629      	mov	r1, r5
 8002ed6:	4630      	mov	r0, r6
 8002ed8:	f000 f938 	bl	800314c <__swsetup_r>
 8002edc:	b170      	cbz	r0, 8002efc <_vfiprintf_r+0x5c>
 8002ede:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002ee0:	07dc      	lsls	r4, r3, #31
 8002ee2:	d504      	bpl.n	8002eee <_vfiprintf_r+0x4e>
 8002ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee8:	b01d      	add	sp, #116	@ 0x74
 8002eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eee:	89ab      	ldrh	r3, [r5, #12]
 8002ef0:	0598      	lsls	r0, r3, #22
 8002ef2:	d4f7      	bmi.n	8002ee4 <_vfiprintf_r+0x44>
 8002ef4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002ef6:	f7ff fa7b 	bl	80023f0 <__retarget_lock_release_recursive>
 8002efa:	e7f3      	b.n	8002ee4 <_vfiprintf_r+0x44>
 8002efc:	2300      	movs	r3, #0
 8002efe:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f00:	2320      	movs	r3, #32
 8002f02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002f06:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f0a:	2330      	movs	r3, #48	@ 0x30
 8002f0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80030bc <_vfiprintf_r+0x21c>
 8002f10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002f14:	f04f 0901 	mov.w	r9, #1
 8002f18:	4623      	mov	r3, r4
 8002f1a:	469a      	mov	sl, r3
 8002f1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f20:	b10a      	cbz	r2, 8002f26 <_vfiprintf_r+0x86>
 8002f22:	2a25      	cmp	r2, #37	@ 0x25
 8002f24:	d1f9      	bne.n	8002f1a <_vfiprintf_r+0x7a>
 8002f26:	ebba 0b04 	subs.w	fp, sl, r4
 8002f2a:	d00b      	beq.n	8002f44 <_vfiprintf_r+0xa4>
 8002f2c:	465b      	mov	r3, fp
 8002f2e:	4622      	mov	r2, r4
 8002f30:	4629      	mov	r1, r5
 8002f32:	4630      	mov	r0, r6
 8002f34:	f7ff ffa2 	bl	8002e7c <__sfputs_r>
 8002f38:	3001      	adds	r0, #1
 8002f3a:	f000 80a7 	beq.w	800308c <_vfiprintf_r+0x1ec>
 8002f3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002f40:	445a      	add	r2, fp
 8002f42:	9209      	str	r2, [sp, #36]	@ 0x24
 8002f44:	f89a 3000 	ldrb.w	r3, [sl]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 809f 	beq.w	800308c <_vfiprintf_r+0x1ec>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f04f 32ff 	mov.w	r2, #4294967295
 8002f54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f58:	f10a 0a01 	add.w	sl, sl, #1
 8002f5c:	9304      	str	r3, [sp, #16]
 8002f5e:	9307      	str	r3, [sp, #28]
 8002f60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f64:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f66:	4654      	mov	r4, sl
 8002f68:	2205      	movs	r2, #5
 8002f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f6e:	4853      	ldr	r0, [pc, #332]	@ (80030bc <_vfiprintf_r+0x21c>)
 8002f70:	f7fd f936 	bl	80001e0 <memchr>
 8002f74:	9a04      	ldr	r2, [sp, #16]
 8002f76:	b9d8      	cbnz	r0, 8002fb0 <_vfiprintf_r+0x110>
 8002f78:	06d1      	lsls	r1, r2, #27
 8002f7a:	bf44      	itt	mi
 8002f7c:	2320      	movmi	r3, #32
 8002f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f82:	0713      	lsls	r3, r2, #28
 8002f84:	bf44      	itt	mi
 8002f86:	232b      	movmi	r3, #43	@ 0x2b
 8002f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8002f90:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f92:	d015      	beq.n	8002fc0 <_vfiprintf_r+0x120>
 8002f94:	9a07      	ldr	r2, [sp, #28]
 8002f96:	4654      	mov	r4, sl
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f04f 0c0a 	mov.w	ip, #10
 8002f9e:	4621      	mov	r1, r4
 8002fa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fa4:	3b30      	subs	r3, #48	@ 0x30
 8002fa6:	2b09      	cmp	r3, #9
 8002fa8:	d94b      	bls.n	8003042 <_vfiprintf_r+0x1a2>
 8002faa:	b1b0      	cbz	r0, 8002fda <_vfiprintf_r+0x13a>
 8002fac:	9207      	str	r2, [sp, #28]
 8002fae:	e014      	b.n	8002fda <_vfiprintf_r+0x13a>
 8002fb0:	eba0 0308 	sub.w	r3, r0, r8
 8002fb4:	fa09 f303 	lsl.w	r3, r9, r3
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	9304      	str	r3, [sp, #16]
 8002fbc:	46a2      	mov	sl, r4
 8002fbe:	e7d2      	b.n	8002f66 <_vfiprintf_r+0xc6>
 8002fc0:	9b03      	ldr	r3, [sp, #12]
 8002fc2:	1d19      	adds	r1, r3, #4
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	9103      	str	r1, [sp, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bfbb      	ittet	lt
 8002fcc:	425b      	neglt	r3, r3
 8002fce:	f042 0202 	orrlt.w	r2, r2, #2
 8002fd2:	9307      	strge	r3, [sp, #28]
 8002fd4:	9307      	strlt	r3, [sp, #28]
 8002fd6:	bfb8      	it	lt
 8002fd8:	9204      	strlt	r2, [sp, #16]
 8002fda:	7823      	ldrb	r3, [r4, #0]
 8002fdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fde:	d10a      	bne.n	8002ff6 <_vfiprintf_r+0x156>
 8002fe0:	7863      	ldrb	r3, [r4, #1]
 8002fe2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fe4:	d132      	bne.n	800304c <_vfiprintf_r+0x1ac>
 8002fe6:	9b03      	ldr	r3, [sp, #12]
 8002fe8:	1d1a      	adds	r2, r3, #4
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	9203      	str	r2, [sp, #12]
 8002fee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002ff2:	3402      	adds	r4, #2
 8002ff4:	9305      	str	r3, [sp, #20]
 8002ff6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80030cc <_vfiprintf_r+0x22c>
 8002ffa:	7821      	ldrb	r1, [r4, #0]
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	4650      	mov	r0, sl
 8003000:	f7fd f8ee 	bl	80001e0 <memchr>
 8003004:	b138      	cbz	r0, 8003016 <_vfiprintf_r+0x176>
 8003006:	9b04      	ldr	r3, [sp, #16]
 8003008:	eba0 000a 	sub.w	r0, r0, sl
 800300c:	2240      	movs	r2, #64	@ 0x40
 800300e:	4082      	lsls	r2, r0
 8003010:	4313      	orrs	r3, r2
 8003012:	3401      	adds	r4, #1
 8003014:	9304      	str	r3, [sp, #16]
 8003016:	f814 1b01 	ldrb.w	r1, [r4], #1
 800301a:	4829      	ldr	r0, [pc, #164]	@ (80030c0 <_vfiprintf_r+0x220>)
 800301c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003020:	2206      	movs	r2, #6
 8003022:	f7fd f8dd 	bl	80001e0 <memchr>
 8003026:	2800      	cmp	r0, #0
 8003028:	d03f      	beq.n	80030aa <_vfiprintf_r+0x20a>
 800302a:	4b26      	ldr	r3, [pc, #152]	@ (80030c4 <_vfiprintf_r+0x224>)
 800302c:	bb1b      	cbnz	r3, 8003076 <_vfiprintf_r+0x1d6>
 800302e:	9b03      	ldr	r3, [sp, #12]
 8003030:	3307      	adds	r3, #7
 8003032:	f023 0307 	bic.w	r3, r3, #7
 8003036:	3308      	adds	r3, #8
 8003038:	9303      	str	r3, [sp, #12]
 800303a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800303c:	443b      	add	r3, r7
 800303e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003040:	e76a      	b.n	8002f18 <_vfiprintf_r+0x78>
 8003042:	fb0c 3202 	mla	r2, ip, r2, r3
 8003046:	460c      	mov	r4, r1
 8003048:	2001      	movs	r0, #1
 800304a:	e7a8      	b.n	8002f9e <_vfiprintf_r+0xfe>
 800304c:	2300      	movs	r3, #0
 800304e:	3401      	adds	r4, #1
 8003050:	9305      	str	r3, [sp, #20]
 8003052:	4619      	mov	r1, r3
 8003054:	f04f 0c0a 	mov.w	ip, #10
 8003058:	4620      	mov	r0, r4
 800305a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800305e:	3a30      	subs	r2, #48	@ 0x30
 8003060:	2a09      	cmp	r2, #9
 8003062:	d903      	bls.n	800306c <_vfiprintf_r+0x1cc>
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0c6      	beq.n	8002ff6 <_vfiprintf_r+0x156>
 8003068:	9105      	str	r1, [sp, #20]
 800306a:	e7c4      	b.n	8002ff6 <_vfiprintf_r+0x156>
 800306c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003070:	4604      	mov	r4, r0
 8003072:	2301      	movs	r3, #1
 8003074:	e7f0      	b.n	8003058 <_vfiprintf_r+0x1b8>
 8003076:	ab03      	add	r3, sp, #12
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	462a      	mov	r2, r5
 800307c:	4b12      	ldr	r3, [pc, #72]	@ (80030c8 <_vfiprintf_r+0x228>)
 800307e:	a904      	add	r1, sp, #16
 8003080:	4630      	mov	r0, r6
 8003082:	f3af 8000 	nop.w
 8003086:	4607      	mov	r7, r0
 8003088:	1c78      	adds	r0, r7, #1
 800308a:	d1d6      	bne.n	800303a <_vfiprintf_r+0x19a>
 800308c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800308e:	07d9      	lsls	r1, r3, #31
 8003090:	d405      	bmi.n	800309e <_vfiprintf_r+0x1fe>
 8003092:	89ab      	ldrh	r3, [r5, #12]
 8003094:	059a      	lsls	r2, r3, #22
 8003096:	d402      	bmi.n	800309e <_vfiprintf_r+0x1fe>
 8003098:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800309a:	f7ff f9a9 	bl	80023f0 <__retarget_lock_release_recursive>
 800309e:	89ab      	ldrh	r3, [r5, #12]
 80030a0:	065b      	lsls	r3, r3, #25
 80030a2:	f53f af1f 	bmi.w	8002ee4 <_vfiprintf_r+0x44>
 80030a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80030a8:	e71e      	b.n	8002ee8 <_vfiprintf_r+0x48>
 80030aa:	ab03      	add	r3, sp, #12
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	462a      	mov	r2, r5
 80030b0:	4b05      	ldr	r3, [pc, #20]	@ (80030c8 <_vfiprintf_r+0x228>)
 80030b2:	a904      	add	r1, sp, #16
 80030b4:	4630      	mov	r0, r6
 80030b6:	f7ff fc81 	bl	80029bc <_printf_i>
 80030ba:	e7e4      	b.n	8003086 <_vfiprintf_r+0x1e6>
 80030bc:	08003793 	.word	0x08003793
 80030c0:	0800379d 	.word	0x0800379d
 80030c4:	00000000 	.word	0x00000000
 80030c8:	08002e7d 	.word	0x08002e7d
 80030cc:	08003799 	.word	0x08003799

080030d0 <__swbuf_r>:
 80030d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d2:	460e      	mov	r6, r1
 80030d4:	4614      	mov	r4, r2
 80030d6:	4605      	mov	r5, r0
 80030d8:	b118      	cbz	r0, 80030e2 <__swbuf_r+0x12>
 80030da:	6a03      	ldr	r3, [r0, #32]
 80030dc:	b90b      	cbnz	r3, 80030e2 <__swbuf_r+0x12>
 80030de:	f7ff f857 	bl	8002190 <__sinit>
 80030e2:	69a3      	ldr	r3, [r4, #24]
 80030e4:	60a3      	str	r3, [r4, #8]
 80030e6:	89a3      	ldrh	r3, [r4, #12]
 80030e8:	071a      	lsls	r2, r3, #28
 80030ea:	d501      	bpl.n	80030f0 <__swbuf_r+0x20>
 80030ec:	6923      	ldr	r3, [r4, #16]
 80030ee:	b943      	cbnz	r3, 8003102 <__swbuf_r+0x32>
 80030f0:	4621      	mov	r1, r4
 80030f2:	4628      	mov	r0, r5
 80030f4:	f000 f82a 	bl	800314c <__swsetup_r>
 80030f8:	b118      	cbz	r0, 8003102 <__swbuf_r+0x32>
 80030fa:	f04f 37ff 	mov.w	r7, #4294967295
 80030fe:	4638      	mov	r0, r7
 8003100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003102:	6823      	ldr	r3, [r4, #0]
 8003104:	6922      	ldr	r2, [r4, #16]
 8003106:	1a98      	subs	r0, r3, r2
 8003108:	6963      	ldr	r3, [r4, #20]
 800310a:	b2f6      	uxtb	r6, r6
 800310c:	4283      	cmp	r3, r0
 800310e:	4637      	mov	r7, r6
 8003110:	dc05      	bgt.n	800311e <__swbuf_r+0x4e>
 8003112:	4621      	mov	r1, r4
 8003114:	4628      	mov	r0, r5
 8003116:	f7ff fdf3 	bl	8002d00 <_fflush_r>
 800311a:	2800      	cmp	r0, #0
 800311c:	d1ed      	bne.n	80030fa <__swbuf_r+0x2a>
 800311e:	68a3      	ldr	r3, [r4, #8]
 8003120:	3b01      	subs	r3, #1
 8003122:	60a3      	str	r3, [r4, #8]
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	6022      	str	r2, [r4, #0]
 800312a:	701e      	strb	r6, [r3, #0]
 800312c:	6962      	ldr	r2, [r4, #20]
 800312e:	1c43      	adds	r3, r0, #1
 8003130:	429a      	cmp	r2, r3
 8003132:	d004      	beq.n	800313e <__swbuf_r+0x6e>
 8003134:	89a3      	ldrh	r3, [r4, #12]
 8003136:	07db      	lsls	r3, r3, #31
 8003138:	d5e1      	bpl.n	80030fe <__swbuf_r+0x2e>
 800313a:	2e0a      	cmp	r6, #10
 800313c:	d1df      	bne.n	80030fe <__swbuf_r+0x2e>
 800313e:	4621      	mov	r1, r4
 8003140:	4628      	mov	r0, r5
 8003142:	f7ff fddd 	bl	8002d00 <_fflush_r>
 8003146:	2800      	cmp	r0, #0
 8003148:	d0d9      	beq.n	80030fe <__swbuf_r+0x2e>
 800314a:	e7d6      	b.n	80030fa <__swbuf_r+0x2a>

0800314c <__swsetup_r>:
 800314c:	b538      	push	{r3, r4, r5, lr}
 800314e:	4b29      	ldr	r3, [pc, #164]	@ (80031f4 <__swsetup_r+0xa8>)
 8003150:	4605      	mov	r5, r0
 8003152:	6818      	ldr	r0, [r3, #0]
 8003154:	460c      	mov	r4, r1
 8003156:	b118      	cbz	r0, 8003160 <__swsetup_r+0x14>
 8003158:	6a03      	ldr	r3, [r0, #32]
 800315a:	b90b      	cbnz	r3, 8003160 <__swsetup_r+0x14>
 800315c:	f7ff f818 	bl	8002190 <__sinit>
 8003160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003164:	0719      	lsls	r1, r3, #28
 8003166:	d422      	bmi.n	80031ae <__swsetup_r+0x62>
 8003168:	06da      	lsls	r2, r3, #27
 800316a:	d407      	bmi.n	800317c <__swsetup_r+0x30>
 800316c:	2209      	movs	r2, #9
 800316e:	602a      	str	r2, [r5, #0]
 8003170:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003174:	81a3      	strh	r3, [r4, #12]
 8003176:	f04f 30ff 	mov.w	r0, #4294967295
 800317a:	e033      	b.n	80031e4 <__swsetup_r+0x98>
 800317c:	0758      	lsls	r0, r3, #29
 800317e:	d512      	bpl.n	80031a6 <__swsetup_r+0x5a>
 8003180:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003182:	b141      	cbz	r1, 8003196 <__swsetup_r+0x4a>
 8003184:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003188:	4299      	cmp	r1, r3
 800318a:	d002      	beq.n	8003192 <__swsetup_r+0x46>
 800318c:	4628      	mov	r0, r5
 800318e:	f7ff f94f 	bl	8002430 <_free_r>
 8003192:	2300      	movs	r3, #0
 8003194:	6363      	str	r3, [r4, #52]	@ 0x34
 8003196:	89a3      	ldrh	r3, [r4, #12]
 8003198:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800319c:	81a3      	strh	r3, [r4, #12]
 800319e:	2300      	movs	r3, #0
 80031a0:	6063      	str	r3, [r4, #4]
 80031a2:	6923      	ldr	r3, [r4, #16]
 80031a4:	6023      	str	r3, [r4, #0]
 80031a6:	89a3      	ldrh	r3, [r4, #12]
 80031a8:	f043 0308 	orr.w	r3, r3, #8
 80031ac:	81a3      	strh	r3, [r4, #12]
 80031ae:	6923      	ldr	r3, [r4, #16]
 80031b0:	b94b      	cbnz	r3, 80031c6 <__swsetup_r+0x7a>
 80031b2:	89a3      	ldrh	r3, [r4, #12]
 80031b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80031b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031bc:	d003      	beq.n	80031c6 <__swsetup_r+0x7a>
 80031be:	4621      	mov	r1, r4
 80031c0:	4628      	mov	r0, r5
 80031c2:	f000 f88b 	bl	80032dc <__smakebuf_r>
 80031c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031ca:	f013 0201 	ands.w	r2, r3, #1
 80031ce:	d00a      	beq.n	80031e6 <__swsetup_r+0x9a>
 80031d0:	2200      	movs	r2, #0
 80031d2:	60a2      	str	r2, [r4, #8]
 80031d4:	6962      	ldr	r2, [r4, #20]
 80031d6:	4252      	negs	r2, r2
 80031d8:	61a2      	str	r2, [r4, #24]
 80031da:	6922      	ldr	r2, [r4, #16]
 80031dc:	b942      	cbnz	r2, 80031f0 <__swsetup_r+0xa4>
 80031de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80031e2:	d1c5      	bne.n	8003170 <__swsetup_r+0x24>
 80031e4:	bd38      	pop	{r3, r4, r5, pc}
 80031e6:	0799      	lsls	r1, r3, #30
 80031e8:	bf58      	it	pl
 80031ea:	6962      	ldrpl	r2, [r4, #20]
 80031ec:	60a2      	str	r2, [r4, #8]
 80031ee:	e7f4      	b.n	80031da <__swsetup_r+0x8e>
 80031f0:	2000      	movs	r0, #0
 80031f2:	e7f7      	b.n	80031e4 <__swsetup_r+0x98>
 80031f4:	20000018 	.word	0x20000018

080031f8 <_raise_r>:
 80031f8:	291f      	cmp	r1, #31
 80031fa:	b538      	push	{r3, r4, r5, lr}
 80031fc:	4605      	mov	r5, r0
 80031fe:	460c      	mov	r4, r1
 8003200:	d904      	bls.n	800320c <_raise_r+0x14>
 8003202:	2316      	movs	r3, #22
 8003204:	6003      	str	r3, [r0, #0]
 8003206:	f04f 30ff 	mov.w	r0, #4294967295
 800320a:	bd38      	pop	{r3, r4, r5, pc}
 800320c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800320e:	b112      	cbz	r2, 8003216 <_raise_r+0x1e>
 8003210:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003214:	b94b      	cbnz	r3, 800322a <_raise_r+0x32>
 8003216:	4628      	mov	r0, r5
 8003218:	f000 f830 	bl	800327c <_getpid_r>
 800321c:	4622      	mov	r2, r4
 800321e:	4601      	mov	r1, r0
 8003220:	4628      	mov	r0, r5
 8003222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003226:	f000 b817 	b.w	8003258 <_kill_r>
 800322a:	2b01      	cmp	r3, #1
 800322c:	d00a      	beq.n	8003244 <_raise_r+0x4c>
 800322e:	1c59      	adds	r1, r3, #1
 8003230:	d103      	bne.n	800323a <_raise_r+0x42>
 8003232:	2316      	movs	r3, #22
 8003234:	6003      	str	r3, [r0, #0]
 8003236:	2001      	movs	r0, #1
 8003238:	e7e7      	b.n	800320a <_raise_r+0x12>
 800323a:	2100      	movs	r1, #0
 800323c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003240:	4620      	mov	r0, r4
 8003242:	4798      	blx	r3
 8003244:	2000      	movs	r0, #0
 8003246:	e7e0      	b.n	800320a <_raise_r+0x12>

08003248 <raise>:
 8003248:	4b02      	ldr	r3, [pc, #8]	@ (8003254 <raise+0xc>)
 800324a:	4601      	mov	r1, r0
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	f7ff bfd3 	b.w	80031f8 <_raise_r>
 8003252:	bf00      	nop
 8003254:	20000018 	.word	0x20000018

08003258 <_kill_r>:
 8003258:	b538      	push	{r3, r4, r5, lr}
 800325a:	4d07      	ldr	r5, [pc, #28]	@ (8003278 <_kill_r+0x20>)
 800325c:	2300      	movs	r3, #0
 800325e:	4604      	mov	r4, r0
 8003260:	4608      	mov	r0, r1
 8003262:	4611      	mov	r1, r2
 8003264:	602b      	str	r3, [r5, #0]
 8003266:	f7fe fd41 	bl	8001cec <_kill>
 800326a:	1c43      	adds	r3, r0, #1
 800326c:	d102      	bne.n	8003274 <_kill_r+0x1c>
 800326e:	682b      	ldr	r3, [r5, #0]
 8003270:	b103      	cbz	r3, 8003274 <_kill_r+0x1c>
 8003272:	6023      	str	r3, [r4, #0]
 8003274:	bd38      	pop	{r3, r4, r5, pc}
 8003276:	bf00      	nop
 8003278:	200002b4 	.word	0x200002b4

0800327c <_getpid_r>:
 800327c:	f7fe bd2e 	b.w	8001cdc <_getpid>

08003280 <_malloc_usable_size_r>:
 8003280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003284:	1f18      	subs	r0, r3, #4
 8003286:	2b00      	cmp	r3, #0
 8003288:	bfbc      	itt	lt
 800328a:	580b      	ldrlt	r3, [r1, r0]
 800328c:	18c0      	addlt	r0, r0, r3
 800328e:	4770      	bx	lr

08003290 <__swhatbuf_r>:
 8003290:	b570      	push	{r4, r5, r6, lr}
 8003292:	460c      	mov	r4, r1
 8003294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003298:	2900      	cmp	r1, #0
 800329a:	b096      	sub	sp, #88	@ 0x58
 800329c:	4615      	mov	r5, r2
 800329e:	461e      	mov	r6, r3
 80032a0:	da0d      	bge.n	80032be <__swhatbuf_r+0x2e>
 80032a2:	89a3      	ldrh	r3, [r4, #12]
 80032a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80032a8:	f04f 0100 	mov.w	r1, #0
 80032ac:	bf14      	ite	ne
 80032ae:	2340      	movne	r3, #64	@ 0x40
 80032b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80032b4:	2000      	movs	r0, #0
 80032b6:	6031      	str	r1, [r6, #0]
 80032b8:	602b      	str	r3, [r5, #0]
 80032ba:	b016      	add	sp, #88	@ 0x58
 80032bc:	bd70      	pop	{r4, r5, r6, pc}
 80032be:	466a      	mov	r2, sp
 80032c0:	f000 f848 	bl	8003354 <_fstat_r>
 80032c4:	2800      	cmp	r0, #0
 80032c6:	dbec      	blt.n	80032a2 <__swhatbuf_r+0x12>
 80032c8:	9901      	ldr	r1, [sp, #4]
 80032ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80032ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80032d2:	4259      	negs	r1, r3
 80032d4:	4159      	adcs	r1, r3
 80032d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032da:	e7eb      	b.n	80032b4 <__swhatbuf_r+0x24>

080032dc <__smakebuf_r>:
 80032dc:	898b      	ldrh	r3, [r1, #12]
 80032de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032e0:	079d      	lsls	r5, r3, #30
 80032e2:	4606      	mov	r6, r0
 80032e4:	460c      	mov	r4, r1
 80032e6:	d507      	bpl.n	80032f8 <__smakebuf_r+0x1c>
 80032e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80032ec:	6023      	str	r3, [r4, #0]
 80032ee:	6123      	str	r3, [r4, #16]
 80032f0:	2301      	movs	r3, #1
 80032f2:	6163      	str	r3, [r4, #20]
 80032f4:	b003      	add	sp, #12
 80032f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032f8:	ab01      	add	r3, sp, #4
 80032fa:	466a      	mov	r2, sp
 80032fc:	f7ff ffc8 	bl	8003290 <__swhatbuf_r>
 8003300:	9f00      	ldr	r7, [sp, #0]
 8003302:	4605      	mov	r5, r0
 8003304:	4639      	mov	r1, r7
 8003306:	4630      	mov	r0, r6
 8003308:	f7ff f906 	bl	8002518 <_malloc_r>
 800330c:	b948      	cbnz	r0, 8003322 <__smakebuf_r+0x46>
 800330e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003312:	059a      	lsls	r2, r3, #22
 8003314:	d4ee      	bmi.n	80032f4 <__smakebuf_r+0x18>
 8003316:	f023 0303 	bic.w	r3, r3, #3
 800331a:	f043 0302 	orr.w	r3, r3, #2
 800331e:	81a3      	strh	r3, [r4, #12]
 8003320:	e7e2      	b.n	80032e8 <__smakebuf_r+0xc>
 8003322:	89a3      	ldrh	r3, [r4, #12]
 8003324:	6020      	str	r0, [r4, #0]
 8003326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800332a:	81a3      	strh	r3, [r4, #12]
 800332c:	9b01      	ldr	r3, [sp, #4]
 800332e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003332:	b15b      	cbz	r3, 800334c <__smakebuf_r+0x70>
 8003334:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003338:	4630      	mov	r0, r6
 800333a:	f000 f81d 	bl	8003378 <_isatty_r>
 800333e:	b128      	cbz	r0, 800334c <__smakebuf_r+0x70>
 8003340:	89a3      	ldrh	r3, [r4, #12]
 8003342:	f023 0303 	bic.w	r3, r3, #3
 8003346:	f043 0301 	orr.w	r3, r3, #1
 800334a:	81a3      	strh	r3, [r4, #12]
 800334c:	89a3      	ldrh	r3, [r4, #12]
 800334e:	431d      	orrs	r5, r3
 8003350:	81a5      	strh	r5, [r4, #12]
 8003352:	e7cf      	b.n	80032f4 <__smakebuf_r+0x18>

08003354 <_fstat_r>:
 8003354:	b538      	push	{r3, r4, r5, lr}
 8003356:	4d07      	ldr	r5, [pc, #28]	@ (8003374 <_fstat_r+0x20>)
 8003358:	2300      	movs	r3, #0
 800335a:	4604      	mov	r4, r0
 800335c:	4608      	mov	r0, r1
 800335e:	4611      	mov	r1, r2
 8003360:	602b      	str	r3, [r5, #0]
 8003362:	f7fe fd23 	bl	8001dac <_fstat>
 8003366:	1c43      	adds	r3, r0, #1
 8003368:	d102      	bne.n	8003370 <_fstat_r+0x1c>
 800336a:	682b      	ldr	r3, [r5, #0]
 800336c:	b103      	cbz	r3, 8003370 <_fstat_r+0x1c>
 800336e:	6023      	str	r3, [r4, #0]
 8003370:	bd38      	pop	{r3, r4, r5, pc}
 8003372:	bf00      	nop
 8003374:	200002b4 	.word	0x200002b4

08003378 <_isatty_r>:
 8003378:	b538      	push	{r3, r4, r5, lr}
 800337a:	4d06      	ldr	r5, [pc, #24]	@ (8003394 <_isatty_r+0x1c>)
 800337c:	2300      	movs	r3, #0
 800337e:	4604      	mov	r4, r0
 8003380:	4608      	mov	r0, r1
 8003382:	602b      	str	r3, [r5, #0]
 8003384:	f7fe fd22 	bl	8001dcc <_isatty>
 8003388:	1c43      	adds	r3, r0, #1
 800338a:	d102      	bne.n	8003392 <_isatty_r+0x1a>
 800338c:	682b      	ldr	r3, [r5, #0]
 800338e:	b103      	cbz	r3, 8003392 <_isatty_r+0x1a>
 8003390:	6023      	str	r3, [r4, #0]
 8003392:	bd38      	pop	{r3, r4, r5, pc}
 8003394:	200002b4 	.word	0x200002b4

08003398 <_init>:
 8003398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339a:	bf00      	nop
 800339c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800339e:	bc08      	pop	{r3}
 80033a0:	469e      	mov	lr, r3
 80033a2:	4770      	bx	lr

080033a4 <_fini>:
 80033a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a6:	bf00      	nop
 80033a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033aa:	bc08      	pop	{r3}
 80033ac:	469e      	mov	lr, r3
 80033ae:	4770      	bx	lr
