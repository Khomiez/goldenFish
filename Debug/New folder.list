
New folder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ae8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000890  08003c88  08003c88  00004c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004518  08004518  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004518  08004518  00005518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004520  08004520  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004520  08004520  00005520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004524  08004524  00005524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004528  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000068  08004590  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08004590  000062dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000037ba  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e09  00000000  00000000  00009852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000390  00000000  00000000  0000a660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002bd  00000000  00000000  0000a9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000106a8  00000000  00000000  0000acad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004191  00000000  00000000  0001b355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057a15  00000000  00000000  0001f4e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00076efb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001804  00000000  00000000  00076f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00078744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003c70 	.word	0x08003c70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003c70 	.word	0x08003c70

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <pattern_begin>:
typedef enum { PD_LED_ON, PD_LED_OFF } PatternPhase_t;
static PatternPhase_t s_phase = PD_LED_ON;
static uint32_t s_next_deadline = 0;


static void pattern_begin(void){
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
    g_pattern_index = 0;
 8000284:	4b06      	ldr	r3, [pc, #24]	@ (80002a0 <pattern_begin+0x20>)
 8000286:	2200      	movs	r2, #0
 8000288:	701a      	strb	r2, [r3, #0]
    s_phase = PD_LED_ON;
 800028a:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <pattern_begin+0x24>)
 800028c:	2200      	movs	r2, #0
 800028e:	701a      	strb	r2, [r3, #0]
    s_next_deadline = 0; // trigger ทันที
 8000290:	4b05      	ldr	r3, [pc, #20]	@ (80002a8 <pattern_begin+0x28>)
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
}
 8000296:	bf00      	nop
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr
 80002a0:	200000b9 	.word	0x200000b9
 80002a4:	200000bb 	.word	0x200000bb
 80002a8:	200000bc 	.word	0x200000bc

080002ac <clamp_u8>:

/* ============================================================================
 * Difficulty Timing Functions
 * ============================================================================ */
uint8_t clamp_u8(uint8_t v, uint8_t lo, uint8_t hi) {
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	71fb      	strb	r3, [r7, #7]
 80002b6:	460b      	mov	r3, r1
 80002b8:	71bb      	strb	r3, [r7, #6]
 80002ba:	4613      	mov	r3, r2
 80002bc:	717b      	strb	r3, [r7, #5]
    return v < lo ? lo : (v > hi ? hi : v);
 80002be:	79fa      	ldrb	r2, [r7, #7]
 80002c0:	79bb      	ldrb	r3, [r7, #6]
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d306      	bcc.n	80002d4 <clamp_u8+0x28>
 80002c6:	79fa      	ldrb	r2, [r7, #7]
 80002c8:	797b      	ldrb	r3, [r7, #5]
 80002ca:	4293      	cmp	r3, r2
 80002cc:	bf28      	it	cs
 80002ce:	4613      	movcs	r3, r2
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	e000      	b.n	80002d6 <clamp_u8+0x2a>
 80002d4:	79bb      	ldrb	r3, [r7, #6]
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
	...

080002e4 <diff_on_ms>:

uint16_t diff_on_ms(uint8_t diff) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	71fb      	strb	r3, [r7, #7]
    static const uint16_t T[5] = {500, 400, 300, 220, 150}; // DIFF 1..5
    diff = clamp_u8(diff, 1, 5);
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	2205      	movs	r2, #5
 80002f2:	2101      	movs	r1, #1
 80002f4:	4618      	mov	r0, r3
 80002f6:	f7ff ffd9 	bl	80002ac <clamp_u8>
 80002fa:	4603      	mov	r3, r0
 80002fc:	71fb      	strb	r3, [r7, #7]
    return T[diff-1];
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	3b01      	subs	r3, #1
 8000302:	4a03      	ldr	r2, [pc, #12]	@ (8000310 <diff_on_ms+0x2c>)
 8000304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8000308:	4618      	mov	r0, r3
 800030a:	3708      	adds	r7, #8
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	08004320 	.word	0x08004320

08000314 <diff_off_ms>:

uint16_t diff_off_ms(uint8_t diff) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	71fb      	strb	r3, [r7, #7]
    static const uint16_t T[5] = {250, 200, 150, 110, 80};  // DIFF 1..5
    diff = clamp_u8(diff, 1, 5);
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	2205      	movs	r2, #5
 8000322:	2101      	movs	r1, #1
 8000324:	4618      	mov	r0, r3
 8000326:	f7ff ffc1 	bl	80002ac <clamp_u8>
 800032a:	4603      	mov	r3, r0
 800032c:	71fb      	strb	r3, [r7, #7]
    return T[diff-1];
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	3b01      	subs	r3, #1
 8000332:	4a03      	ldr	r2, [pc, #12]	@ (8000340 <diff_off_ms+0x2c>)
 8000334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8000338:	4618      	mov	r0, r3
 800033a:	3708      	adds	r7, #8
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	0800432c 	.word	0x0800432c

08000344 <leds_clear>:

/* ============================================================================
 * Internal Helper Functions
 * ============================================================================ */
static void leds_clear(void) {
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
    LED_SetPattern(0);
 8000348:	2000      	movs	r0, #0
 800034a:	f000 ffbb 	bl	80012c4 <LED_SetPattern>
    Buzzer_Stop();
 800034e:	f001 f925 	bl	800159c <Buzzer_Stop>
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
	...

08000358 <set_game_state>:

static void set_game_state(GameState_t new_state) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
    leds_clear();
 8000362:	f7ff ffef 	bl	8000344 <leds_clear>
    g_game_state = new_state;
 8000366:	4a06      	ldr	r2, [pc, #24]	@ (8000380 <set_game_state+0x28>)
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	7013      	strb	r3, [r2, #0]
    g_state_entry_time = GetTick();
 800036c:	f002 f882 	bl	8002474 <GetTick>
 8000370:	4603      	mov	r3, r0
 8000372:	4a04      	ldr	r2, [pc, #16]	@ (8000384 <set_game_state+0x2c>)
 8000374:	6013      	str	r3, [r2, #0]
}
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	20000084 	.word	0x20000084
 8000384:	20000090 	.word	0x20000090

08000388 <generate_pattern>:

static void generate_pattern(uint8_t length) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < length; i++)
 8000392:	2300      	movs	r3, #0
 8000394:	73fb      	strb	r3, [r7, #15]
 8000396:	e010      	b.n	80003ba <generate_pattern+0x32>
        g_pattern[i] = rand() % 4;
 8000398:	f002 fa9c 	bl	80028d4 <rand>
 800039c:	4603      	mov	r3, r0
 800039e:	425a      	negs	r2, r3
 80003a0:	f003 0303 	and.w	r3, r3, #3
 80003a4:	f002 0203 	and.w	r2, r2, #3
 80003a8:	bf58      	it	pl
 80003aa:	4253      	negpl	r3, r2
 80003ac:	7bfa      	ldrb	r2, [r7, #15]
 80003ae:	b2d9      	uxtb	r1, r3
 80003b0:	4b07      	ldr	r3, [pc, #28]	@ (80003d0 <generate_pattern+0x48>)
 80003b2:	5499      	strb	r1, [r3, r2]
    for (uint8_t i = 0; i < length; i++)
 80003b4:	7bfb      	ldrb	r3, [r7, #15]
 80003b6:	3301      	adds	r3, #1
 80003b8:	73fb      	strb	r3, [r7, #15]
 80003ba:	7bfa      	ldrb	r2, [r7, #15]
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	429a      	cmp	r2, r3
 80003c0:	d3ea      	bcc.n	8000398 <generate_pattern+0x10>
    g_pattern_length = length;
 80003c2:	4a04      	ldr	r2, [pc, #16]	@ (80003d4 <generate_pattern+0x4c>)
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	7013      	strb	r3, [r2, #0]
}
 80003c8:	bf00      	nop
 80003ca:	3710      	adds	r7, #16
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20000098 	.word	0x20000098
 80003d4:	200000b8 	.word	0x200000b8

080003d8 <leds_show>:

static void leds_show(uint8_t idx) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	71fb      	strb	r3, [r7, #7]
    uint8_t led = button_to_led_map[idx];
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000414 <leds_show+0x3c>)
 80003e6:	5cd3      	ldrb	r3, [r2, r3]
 80003e8:	73fb      	strb	r3, [r7, #15]
    LED_SetPattern(1 << led);
 80003ea:	7bfb      	ldrb	r3, [r7, #15]
 80003ec:	2201      	movs	r2, #1
 80003ee:	fa02 f303 	lsl.w	r3, r2, r3
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 ff65 	bl	80012c4 <LED_SetPattern>
    Buzzer_Play(tone_by_led[led], 40);
 80003fa:	7bfb      	ldrb	r3, [r7, #15]
 80003fc:	4a06      	ldr	r2, [pc, #24]	@ (8000418 <leds_show+0x40>)
 80003fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000402:	2128      	movs	r1, #40	@ 0x28
 8000404:	4618      	mov	r0, r3
 8000406:	f001 f893 	bl	8001530 <Buzzer_Play>
}
 800040a:	bf00      	nop
 800040c:	3710      	adds	r7, #16
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	08004314 	.word	0x08004314
 8000418:	08004318 	.word	0x08004318

0800041c <handle_boot>:


/* ============================================================================
 * State Handler Functions
 * ============================================================================ */
static void handle_boot(void) {
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
    g_level = 1;
 8000420:	4b0b      	ldr	r3, [pc, #44]	@ (8000450 <handle_boot+0x34>)
 8000422:	2201      	movs	r2, #1
 8000424:	701a      	strb	r2, [r3, #0]
    g_score = 0;
 8000426:	4b0b      	ldr	r3, [pc, #44]	@ (8000454 <handle_boot+0x38>)
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
    g_lives = INITIAL_LIVES;
 800042c:	4b0a      	ldr	r3, [pc, #40]	@ (8000458 <handle_boot+0x3c>)
 800042e:	2204      	movs	r2, #4
 8000430:	701a      	strb	r2, [r3, #0]
    set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 8000432:	2001      	movs	r0, #1
 8000434:	f7ff ff90 	bl	8000358 <set_game_state>
    Buzzer_Play(800, 50);
 8000438:	2132      	movs	r1, #50	@ 0x32
 800043a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800043e:	f001 f877 	bl	8001530 <Buzzer_Play>
    Delay_ms(100);
 8000442:	2064      	movs	r0, #100	@ 0x64
 8000444:	f002 f800 	bl	8002448 <Delay_ms>
    Buzzer_Stop();
 8000448:	f001 f8a8 	bl	800159c <Buzzer_Stop>
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000086 	.word	0x20000086
 8000454:	20000088 	.word	0x20000088
 8000458:	2000008c 	.word	0x2000008c

0800045c <map_pot_to_speed>:

static uint16_t pot_avg = 0;

static uint8_t map_pot_to_speed(uint16_t v10bit) {
 800045c:	b480      	push	{r7}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	80fb      	strh	r3, [r7, #6]
    // smooth: avg = avg*7/8 + new/8
    pot_avg = (pot_avg * 7 + v10bit) / 8;
 8000466:	4b25      	ldr	r3, [pc, #148]	@ (80004fc <map_pot_to_speed+0xa0>)
 8000468:	881b      	ldrh	r3, [r3, #0]
 800046a:	461a      	mov	r2, r3
 800046c:	4613      	mov	r3, r2
 800046e:	00db      	lsls	r3, r3, #3
 8000470:	1a9a      	subs	r2, r3, r2
 8000472:	88fb      	ldrh	r3, [r7, #6]
 8000474:	4413      	add	r3, r2
 8000476:	2b00      	cmp	r3, #0
 8000478:	da00      	bge.n	800047c <map_pot_to_speed+0x20>
 800047a:	3307      	adds	r3, #7
 800047c:	10db      	asrs	r3, r3, #3
 800047e:	b29a      	uxth	r2, r3
 8000480:	4b1e      	ldr	r3, [pc, #120]	@ (80004fc <map_pot_to_speed+0xa0>)
 8000482:	801a      	strh	r2, [r3, #0]

    // map 0..1023 -> 1..5
    uint8_t s = (uint32_t)(pot_avg * 5) / 1024 + 1;
 8000484:	4b1d      	ldr	r3, [pc, #116]	@ (80004fc <map_pot_to_speed+0xa0>)
 8000486:	881b      	ldrh	r3, [r3, #0]
 8000488:	461a      	mov	r2, r3
 800048a:	4613      	mov	r3, r2
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	4413      	add	r3, r2
 8000490:	0a9b      	lsrs	r3, r3, #10
 8000492:	b2db      	uxtb	r3, r3
 8000494:	3301      	adds	r3, #1
 8000496:	73fb      	strb	r3, [r7, #15]

    // hysteresis: ถ้าต่างจาก g_difficulty น้อย ให้รอก่อน
    if (s > g_difficulty && (pot_avg % 205) < 20) return g_difficulty; // ขยับขึ้นเมื่อผ่านช่วง
 8000498:	4b19      	ldr	r3, [pc, #100]	@ (8000500 <map_pot_to_speed+0xa4>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	7bfa      	ldrb	r2, [r7, #15]
 800049e:	429a      	cmp	r2, r3
 80004a0:	d90f      	bls.n	80004c2 <map_pot_to_speed+0x66>
 80004a2:	4b16      	ldr	r3, [pc, #88]	@ (80004fc <map_pot_to_speed+0xa0>)
 80004a4:	881b      	ldrh	r3, [r3, #0]
 80004a6:	4a17      	ldr	r2, [pc, #92]	@ (8000504 <map_pot_to_speed+0xa8>)
 80004a8:	fba2 1203 	umull	r1, r2, r2, r3
 80004ac:	0992      	lsrs	r2, r2, #6
 80004ae:	21cd      	movs	r1, #205	@ 0xcd
 80004b0:	fb01 f202 	mul.w	r2, r1, r2
 80004b4:	1a9b      	subs	r3, r3, r2
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	2b13      	cmp	r3, #19
 80004ba:	d802      	bhi.n	80004c2 <map_pot_to_speed+0x66>
 80004bc:	4b10      	ldr	r3, [pc, #64]	@ (8000500 <map_pot_to_speed+0xa4>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	e015      	b.n	80004ee <map_pot_to_speed+0x92>
    if (s < g_difficulty && (pot_avg % 205) > 185) return g_difficulty; // ขยับลงเมื่อผ่านช่วง
 80004c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000500 <map_pot_to_speed+0xa4>)
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	7bfa      	ldrb	r2, [r7, #15]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	d20f      	bcs.n	80004ec <map_pot_to_speed+0x90>
 80004cc:	4b0b      	ldr	r3, [pc, #44]	@ (80004fc <map_pot_to_speed+0xa0>)
 80004ce:	881b      	ldrh	r3, [r3, #0]
 80004d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000504 <map_pot_to_speed+0xa8>)
 80004d2:	fba2 1203 	umull	r1, r2, r2, r3
 80004d6:	0992      	lsrs	r2, r2, #6
 80004d8:	21cd      	movs	r1, #205	@ 0xcd
 80004da:	fb01 f202 	mul.w	r2, r1, r2
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	b29b      	uxth	r3, r3
 80004e2:	2bb9      	cmp	r3, #185	@ 0xb9
 80004e4:	d902      	bls.n	80004ec <map_pot_to_speed+0x90>
 80004e6:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <map_pot_to_speed+0xa4>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	e000      	b.n	80004ee <map_pot_to_speed+0x92>
    return s;
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	200000c0 	.word	0x200000c0
 8000500:	20000085 	.word	0x20000085
 8000504:	4fec04ff 	.word	0x4fec04ff

08000508 <handle_difficulty_select>:

static void handle_difficulty_select(void) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
    uint32_t current_time = GetTick();
 800050e:	f001 ffb1 	bl	8002474 <GetTick>
 8000512:	6078      	str	r0, [r7, #4]
    static uint32_t last_log_time = 0;
    static uint8_t last = 0;

    if (!g_difficulty_locked) {
 8000514:	4b51      	ldr	r3, [pc, #324]	@ (800065c <handle_difficulty_select+0x154>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d16e      	bne.n	80005fa <handle_difficulty_select+0xf2>
        uint16_t pot_value = g_adc_values[0];
 800051c:	4b50      	ldr	r3, [pc, #320]	@ (8000660 <handle_difficulty_select+0x158>)
 800051e:	881b      	ldrh	r3, [r3, #0]
 8000520:	807b      	strh	r3, [r7, #2]
        g_difficulty = map_pot_to_speed(pot_value);
 8000522:	887b      	ldrh	r3, [r7, #2]
 8000524:	4618      	mov	r0, r3
 8000526:	f7ff ff99 	bl	800045c <map_pot_to_speed>
 800052a:	4603      	mov	r3, r0
 800052c:	461a      	mov	r2, r3
 800052e:	4b4d      	ldr	r3, [pc, #308]	@ (8000664 <handle_difficulty_select+0x15c>)
 8000530:	701a      	strb	r2, [r3, #0]
        SevenSeg_Display(g_difficulty);
 8000532:	4b4c      	ldr	r3, [pc, #304]	@ (8000664 <handle_difficulty_select+0x15c>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	4618      	mov	r0, r3
 8000538:	f000 ff08 	bl	800134c <SevenSeg_Display>

        if (g_difficulty != last || (current_time - last_log_time) > 200) {
 800053c:	4b49      	ldr	r3, [pc, #292]	@ (8000664 <handle_difficulty_select+0x15c>)
 800053e:	781a      	ldrb	r2, [r3, #0]
 8000540:	4b49      	ldr	r3, [pc, #292]	@ (8000668 <handle_difficulty_select+0x160>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	429a      	cmp	r2, r3
 8000546:	d105      	bne.n	8000554 <handle_difficulty_select+0x4c>
 8000548:	4b48      	ldr	r3, [pc, #288]	@ (800066c <handle_difficulty_select+0x164>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	1ad3      	subs	r3, r2, r3
 8000550:	2bc8      	cmp	r3, #200	@ 0xc8
 8000552:	d908      	bls.n	8000566 <handle_difficulty_select+0x5e>
            last_log_time = current_time;
 8000554:	4a45      	ldr	r2, [pc, #276]	@ (800066c <handle_difficulty_select+0x164>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6013      	str	r3, [r2, #0]
            last = g_difficulty;
 800055a:	4b42      	ldr	r3, [pc, #264]	@ (8000664 <handle_difficulty_select+0x15c>)
 800055c:	781a      	ldrb	r2, [r3, #0]
 800055e:	4b42      	ldr	r3, [pc, #264]	@ (8000668 <handle_difficulty_select+0x160>)
 8000560:	701a      	strb	r2, [r3, #0]
            OLED_ShowStatus(); // อัปเดตจอน้อยลง
 8000562:	f001 fea1 	bl	80022a8 <OLED_ShowStatus>
        }

        // long-press -> lock difficulty only
        for (int i = 0; i < 4; i++) {
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	e042      	b.n	80005f2 <handle_difficulty_select+0xea>
            if (g_buttons[i].current_state == 1 &&
 800056c:	4940      	ldr	r1, [pc, #256]	@ (8000670 <handle_difficulty_select+0x168>)
 800056e:	68fa      	ldr	r2, [r7, #12]
 8000570:	4613      	mov	r3, r2
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	4413      	add	r3, r2
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	440b      	add	r3, r1
 800057a:	3301      	adds	r3, #1
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d134      	bne.n	80005ec <handle_difficulty_select+0xe4>
               (current_time - g_buttons[i].last_change_time) >= LONG_PRESS_DURATION_MS) {
 8000582:	493b      	ldr	r1, [pc, #236]	@ (8000670 <handle_difficulty_select+0x168>)
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	4613      	mov	r3, r2
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	4413      	add	r3, r2
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	440b      	add	r3, r1
 8000590:	3304      	adds	r3, #4
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	1ad3      	subs	r3, r2, r3
            if (g_buttons[i].current_state == 1 &&
 8000598:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800059c:	d326      	bcc.n	80005ec <handle_difficulty_select+0xe4>
                g_difficulty_locked = 1;
 800059e:	4b2f      	ldr	r3, [pc, #188]	@ (800065c <handle_difficulty_select+0x154>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	701a      	strb	r2, [r3, #0]
                Log_Print("[DIFFICULTY] Locked at level %u. Press any button to start.\r\n", g_difficulty);
 80005a4:	4b2f      	ldr	r3, [pc, #188]	@ (8000664 <handle_difficulty_select+0x15c>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	4619      	mov	r1, r3
 80005aa:	4832      	ldr	r0, [pc, #200]	@ (8000674 <handle_difficulty_select+0x16c>)
 80005ac:	f001 ff6e 	bl	800248c <Log_Print>
                Buzzer_Play(1000, 40);
 80005b0:	2128      	movs	r1, #40	@ 0x28
 80005b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005b6:	f000 ffbb 	bl	8001530 <Buzzer_Play>
                Delay_ms(100);
 80005ba:	2064      	movs	r0, #100	@ 0x64
 80005bc:	f001 ff44 	bl	8002448 <Delay_ms>
                Buzzer_Stop();
 80005c0:	f000 ffec 	bl	800159c <Buzzer_Stop>
                OLED_ShowStatus();
 80005c4:	f001 fe70 	bl	80022a8 <OLED_ShowStatus>

                // Wait for button release
                while (g_buttons[i].current_state == 1) {
 80005c8:	e004      	b.n	80005d4 <handle_difficulty_select+0xcc>
                    Monitor_Buttons();
 80005ca:	f000 fddd 	bl	8001188 <Monitor_Buttons>
                    Delay_ms(10);
 80005ce:	200a      	movs	r0, #10
 80005d0:	f001 ff3a 	bl	8002448 <Delay_ms>
                while (g_buttons[i].current_state == 1) {
 80005d4:	4926      	ldr	r1, [pc, #152]	@ (8000670 <handle_difficulty_select+0x168>)
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	4613      	mov	r3, r2
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	4413      	add	r3, r2
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	440b      	add	r3, r1
 80005e2:	3301      	adds	r3, #1
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d0ef      	beq.n	80005ca <handle_difficulty_select+0xc2>
                }
                return;
 80005ea:	e033      	b.n	8000654 <handle_difficulty_select+0x14c>
        for (int i = 0; i < 4; i++) {
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	3301      	adds	r3, #1
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	ddb9      	ble.n	800056c <handle_difficulty_select+0x64>
 80005f8:	e02c      	b.n	8000654 <handle_difficulty_select+0x14c>
            }
        }
    } else {
        // Difficulty is locked, wait for short press to start game
        SevenSeg_Display(g_difficulty);
 80005fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000664 <handle_difficulty_select+0x15c>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fea4 	bl	800134c <SevenSeg_Display>

        for (int i = 0; i < 4; i++) {
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	e021      	b.n	800064e <handle_difficulty_select+0x146>
            if (g_buttons[i].current_state == 1 && g_buttons[i].previous_state == 0) {
 800060a:	4919      	ldr	r1, [pc, #100]	@ (8000670 <handle_difficulty_select+0x168>)
 800060c:	68ba      	ldr	r2, [r7, #8]
 800060e:	4613      	mov	r3, r2
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	4413      	add	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	440b      	add	r3, r1
 8000618:	3301      	adds	r3, #1
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d113      	bne.n	8000648 <handle_difficulty_select+0x140>
 8000620:	4913      	ldr	r1, [pc, #76]	@ (8000670 <handle_difficulty_select+0x168>)
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	4613      	mov	r3, r2
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	4413      	add	r3, r2
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	440b      	add	r3, r1
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d109      	bne.n	8000648 <handle_difficulty_select+0x140>
                Log_Print("[GAME] Starting game with difficulty %u\r\n", g_difficulty);
 8000634:	4b0b      	ldr	r3, [pc, #44]	@ (8000664 <handle_difficulty_select+0x15c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	480f      	ldr	r0, [pc, #60]	@ (8000678 <handle_difficulty_select+0x170>)
 800063c:	f001 ff26 	bl	800248c <Log_Print>
                set_game_state(GAME_STATE_LEVEL_INTRO);
 8000640:	2002      	movs	r0, #2
 8000642:	f7ff fe89 	bl	8000358 <set_game_state>
                return;
 8000646:	e005      	b.n	8000654 <handle_difficulty_select+0x14c>
        for (int i = 0; i < 4; i++) {
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	3301      	adds	r3, #1
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	2b03      	cmp	r3, #3
 8000652:	ddda      	ble.n	800060a <handle_difficulty_select+0x102>
            }
        }
    }
}
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000094 	.word	0x20000094
 8000660:	200000fc 	.word	0x200000fc
 8000664:	20000085 	.word	0x20000085
 8000668:	200000c2 	.word	0x200000c2
 800066c:	200000c4 	.word	0x200000c4
 8000670:	200000cc 	.word	0x200000cc
 8000674:	08003c88 	.word	0x08003c88
 8000678:	08003cc8 	.word	0x08003cc8

0800067c <handle_level_intro>:


static void handle_level_intro(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
    Log_Print("Level %u. Lives: %u. Score: %lu\r\n", g_level, g_lives, g_score);
 8000682:	4b27      	ldr	r3, [pc, #156]	@ (8000720 <handle_level_intro+0xa4>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	4619      	mov	r1, r3
 8000688:	4b26      	ldr	r3, [pc, #152]	@ (8000724 <handle_level_intro+0xa8>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	4b26      	ldr	r3, [pc, #152]	@ (8000728 <handle_level_intro+0xac>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4826      	ldr	r0, [pc, #152]	@ (800072c <handle_level_intro+0xb0>)
 8000694:	f001 fefa 	bl	800248c <Log_Print>
    Debug_PrintGameState();
 8000698:	f001 ff3a 	bl	8002510 <Debug_PrintGameState>
    OLED_ShowStatus();
 800069c:	f001 fe04 	bl	80022a8 <OLED_ShowStatus>
    Delay_ms(800);
 80006a0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80006a4:	f001 fed0 	bl	8002448 <Delay_ms>

    // Back-and-forth LED animation only for first level
    if (g_level == 1) {
 80006a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000720 <handle_level_intro+0xa4>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d126      	bne.n	80006fe <handle_level_intro+0x82>
        // Forward: LED0 -> LED1 -> LED2 -> LED3
        for (int i = 0; i < 4; i++) {
 80006b0:	2300      	movs	r3, #0
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	e00a      	b.n	80006cc <handle_level_intro+0x50>
            leds_show(i);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fe8c 	bl	80003d8 <leds_show>
            Delay_ms(150);
 80006c0:	2096      	movs	r0, #150	@ 0x96
 80006c2:	f001 fec1 	bl	8002448 <Delay_ms>
        for (int i = 0; i < 4; i++) {
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	3301      	adds	r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b03      	cmp	r3, #3
 80006d0:	ddf1      	ble.n	80006b6 <handle_level_intro+0x3a>
        }
        // Backward: LED3 -> LED2 -> LED1 -> LED0
        for (int i = 2; i >= 0; i--) {
 80006d2:	2302      	movs	r3, #2
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	e00a      	b.n	80006ee <handle_level_intro+0x72>
            leds_show(i);
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff fe7b 	bl	80003d8 <leds_show>
            Delay_ms(150);
 80006e2:	2096      	movs	r0, #150	@ 0x96
 80006e4:	f001 feb0 	bl	8002448 <Delay_ms>
        for (int i = 2; i >= 0; i--) {
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	3b01      	subs	r3, #1
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	daf1      	bge.n	80006d8 <handle_level_intro+0x5c>
        }
        leds_clear();
 80006f4:	f7ff fe26 	bl	8000344 <leds_clear>
        Delay_ms(200);
 80006f8:	20c8      	movs	r0, #200	@ 0xc8
 80006fa:	f001 fea5 	bl	8002448 <Delay_ms>
    }

    generate_pattern(g_level);
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <handle_level_intro+0xa4>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fe40 	bl	8000388 <generate_pattern>
    g_pattern_index = 0;
 8000708:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <handle_level_intro+0xb4>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
    pattern_begin();  
 800070e:	f7ff fdb7 	bl	8000280 <pattern_begin>
    set_game_state(GAME_STATE_PATTERN_DISPLAY);
 8000712:	2003      	movs	r0, #3
 8000714:	f7ff fe20 	bl	8000358 <set_game_state>
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000086 	.word	0x20000086
 8000724:	2000008c 	.word	0x2000008c
 8000728:	20000088 	.word	0x20000088
 800072c:	08003cf4 	.word	0x08003cf4
 8000730:	200000b9 	.word	0x200000b9

08000734 <handle_pattern_display>:

static void handle_pattern_display(void) {
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b089      	sub	sp, #36	@ 0x24
 8000738:	af00      	add	r7, sp, #0
    static uint8_t pattern_logged = 0;
    uint32_t now = GetTick();
 800073a:	f001 fe9b 	bl	8002474 <GetTick>
 800073e:	61b8      	str	r0, [r7, #24]
    uint16_t t_on  = diff_on_ms(g_difficulty);
 8000740:	4b42      	ldr	r3, [pc, #264]	@ (800084c <handle_pattern_display+0x118>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fdcd 	bl	80002e4 <diff_on_ms>
 800074a:	4603      	mov	r3, r0
 800074c:	82fb      	strh	r3, [r7, #22]
    uint16_t t_off = diff_off_ms(g_difficulty);
 800074e:	4b3f      	ldr	r3, [pc, #252]	@ (800084c <handle_pattern_display+0x118>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fdde 	bl	8000314 <diff_off_ms>
 8000758:	4603      	mov	r3, r0
 800075a:	82bb      	strh	r3, [r7, #20]

    // Log pattern once when starting display
    if (!pattern_logged) {
 800075c:	4b3c      	ldr	r3, [pc, #240]	@ (8000850 <handle_pattern_display+0x11c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d12d      	bne.n	80007c0 <handle_pattern_display+0x8c>
        Log_Print("[PATTERN] Displaying pattern: ");
 8000764:	483b      	ldr	r0, [pc, #236]	@ (8000854 <handle_pattern_display+0x120>)
 8000766:	f001 fe91 	bl	800248c <Log_Print>
        for (uint8_t i = 0; i < g_pattern_length; i++) {
 800076a:	2300      	movs	r3, #0
 800076c:	77fb      	strb	r3, [r7, #31]
 800076e:	e01c      	b.n	80007aa <handle_pattern_display+0x76>
            const char* led_names[4] = {"BLUE", "RED", "YELLOW", "GREEN"};
 8000770:	4b39      	ldr	r3, [pc, #228]	@ (8000858 <handle_pattern_display+0x124>)
 8000772:	1d3c      	adds	r4, r7, #4
 8000774:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000776:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            Log_Print("%s", led_names[g_pattern[i]]);
 800077a:	7ffb      	ldrb	r3, [r7, #31]
 800077c:	4a37      	ldr	r2, [pc, #220]	@ (800085c <handle_pattern_display+0x128>)
 800077e:	5cd3      	ldrb	r3, [r2, r3]
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	3320      	adds	r3, #32
 8000784:	443b      	add	r3, r7
 8000786:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800078a:	4619      	mov	r1, r3
 800078c:	4834      	ldr	r0, [pc, #208]	@ (8000860 <handle_pattern_display+0x12c>)
 800078e:	f001 fe7d 	bl	800248c <Log_Print>
            if (i < g_pattern_length - 1) Log_Print(", ");
 8000792:	7ffa      	ldrb	r2, [r7, #31]
 8000794:	4b33      	ldr	r3, [pc, #204]	@ (8000864 <handle_pattern_display+0x130>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	3b01      	subs	r3, #1
 800079a:	429a      	cmp	r2, r3
 800079c:	da02      	bge.n	80007a4 <handle_pattern_display+0x70>
 800079e:	4832      	ldr	r0, [pc, #200]	@ (8000868 <handle_pattern_display+0x134>)
 80007a0:	f001 fe74 	bl	800248c <Log_Print>
        for (uint8_t i = 0; i < g_pattern_length; i++) {
 80007a4:	7ffb      	ldrb	r3, [r7, #31]
 80007a6:	3301      	adds	r3, #1
 80007a8:	77fb      	strb	r3, [r7, #31]
 80007aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000864 <handle_pattern_display+0x130>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	7ffa      	ldrb	r2, [r7, #31]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d3dd      	bcc.n	8000770 <handle_pattern_display+0x3c>
        }
        Log_Print("\r\n");
 80007b4:	482d      	ldr	r0, [pc, #180]	@ (800086c <handle_pattern_display+0x138>)
 80007b6:	f001 fe69 	bl	800248c <Log_Print>
        pattern_logged = 1;
 80007ba:	4b25      	ldr	r3, [pc, #148]	@ (8000850 <handle_pattern_display+0x11c>)
 80007bc:	2201      	movs	r2, #1
 80007be:	701a      	strb	r2, [r3, #0]
    }

    if (g_pattern_index >= g_pattern_length) {
 80007c0:	4b2b      	ldr	r3, [pc, #172]	@ (8000870 <handle_pattern_display+0x13c>)
 80007c2:	781a      	ldrb	r2, [r3, #0]
 80007c4:	4b27      	ldr	r3, [pc, #156]	@ (8000864 <handle_pattern_display+0x130>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d312      	bcc.n	80007f2 <handle_pattern_display+0xbe>
        // จบ pattern → ไป input
        g_pattern_index = 0;
 80007cc:	4b28      	ldr	r3, [pc, #160]	@ (8000870 <handle_pattern_display+0x13c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]
        g_input_index = 0;
 80007d2:	4b28      	ldr	r3, [pc, #160]	@ (8000874 <handle_pattern_display+0x140>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
        g_input_correct = 1;
 80007d8:	4b27      	ldr	r3, [pc, #156]	@ (8000878 <handle_pattern_display+0x144>)
 80007da:	2201      	movs	r2, #1
 80007dc:	701a      	strb	r2, [r3, #0]
        pattern_logged = 0; // reset for next level
 80007de:	4b1c      	ldr	r3, [pc, #112]	@ (8000850 <handle_pattern_display+0x11c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
        Log_Print("[PATTERN] Display complete. Waiting for input...\r\n");
 80007e4:	4825      	ldr	r0, [pc, #148]	@ (800087c <handle_pattern_display+0x148>)
 80007e6:	f001 fe51 	bl	800248c <Log_Print>
        set_game_state(GAME_STATE_INPUT_WAIT);
 80007ea:	2004      	movs	r0, #4
 80007ec:	f7ff fdb4 	bl	8000358 <set_game_state>
        return;
 80007f0:	e029      	b.n	8000846 <handle_pattern_display+0x112>
    }

    if (now >= s_next_deadline) {
 80007f2:	4b23      	ldr	r3, [pc, #140]	@ (8000880 <handle_pattern_display+0x14c>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	69ba      	ldr	r2, [r7, #24]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d324      	bcc.n	8000846 <handle_pattern_display+0x112>
        if (s_phase == PD_LED_ON) {
 80007fc:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <handle_pattern_display+0x150>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d110      	bne.n	8000826 <handle_pattern_display+0xf2>
            leds_show(g_pattern[g_pattern_index]);     // จะเล่นเสียง/เปิดไฟ
 8000804:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <handle_pattern_display+0x13c>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	461a      	mov	r2, r3
 800080a:	4b14      	ldr	r3, [pc, #80]	@ (800085c <handle_pattern_display+0x128>)
 800080c:	5c9b      	ldrb	r3, [r3, r2]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff fde2 	bl	80003d8 <leds_show>
            s_next_deadline = now + t_on;
 8000814:	8afa      	ldrh	r2, [r7, #22]
 8000816:	69bb      	ldr	r3, [r7, #24]
 8000818:	4413      	add	r3, r2
 800081a:	4a19      	ldr	r2, [pc, #100]	@ (8000880 <handle_pattern_display+0x14c>)
 800081c:	6013      	str	r3, [r2, #0]
            s_phase = PD_LED_OFF;
 800081e:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <handle_pattern_display+0x150>)
 8000820:	2201      	movs	r2, #1
 8000822:	701a      	strb	r2, [r3, #0]
 8000824:	e00f      	b.n	8000846 <handle_pattern_display+0x112>
        } else { // PD_LED_OFF
            leds_clear();                            // จะหยุดเสียง/ดับไฟ
 8000826:	f7ff fd8d 	bl	8000344 <leds_clear>
            s_next_deadline = now + t_off;
 800082a:	8aba      	ldrh	r2, [r7, #20]
 800082c:	69bb      	ldr	r3, [r7, #24]
 800082e:	4413      	add	r3, r2
 8000830:	4a13      	ldr	r2, [pc, #76]	@ (8000880 <handle_pattern_display+0x14c>)
 8000832:	6013      	str	r3, [r2, #0]
            s_phase = PD_LED_ON;
 8000834:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <handle_pattern_display+0x150>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
            g_pattern_index++;
 800083a:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <handle_pattern_display+0x13c>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	3301      	adds	r3, #1
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <handle_pattern_display+0x13c>)
 8000844:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8000846:	3724      	adds	r7, #36	@ 0x24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd90      	pop	{r4, r7, pc}
 800084c:	20000085 	.word	0x20000085
 8000850:	200000c8 	.word	0x200000c8
 8000854:	08003d18 	.word	0x08003d18
 8000858:	08003d94 	.word	0x08003d94
 800085c:	20000098 	.word	0x20000098
 8000860:	08003d38 	.word	0x08003d38
 8000864:	200000b8 	.word	0x200000b8
 8000868:	08003d3c 	.word	0x08003d3c
 800086c:	08003d40 	.word	0x08003d40
 8000870:	200000b9 	.word	0x200000b9
 8000874:	200000ba 	.word	0x200000ba
 8000878:	20000000 	.word	0x20000000
 800087c:	08003d44 	.word	0x08003d44
 8000880:	200000bc 	.word	0x200000bc
 8000884:	200000bb 	.word	0x200000bb

08000888 <handle_input_wait>:

static void handle_input_wait(void) {
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b089      	sub	sp, #36	@ 0x24
 800088c:	af02      	add	r7, sp, #8
    if (g_input_index < g_pattern_length) {
 800088e:	4b44      	ldr	r3, [pc, #272]	@ (80009a0 <handle_input_wait+0x118>)
 8000890:	781a      	ldrb	r2, [r3, #0]
 8000892:	4b44      	ldr	r3, [pc, #272]	@ (80009a4 <handle_input_wait+0x11c>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	429a      	cmp	r2, r3
 8000898:	d27b      	bcs.n	8000992 <handle_input_wait+0x10a>
        for (int i = 0; i < 4; i++) {
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
 800089e:	e074      	b.n	800098a <handle_input_wait+0x102>
            if (g_buttons[i].current_state == 1 && g_buttons[i].previous_state == 0) {
 80008a0:	4941      	ldr	r1, [pc, #260]	@ (80009a8 <handle_input_wait+0x120>)
 80008a2:	697a      	ldr	r2, [r7, #20]
 80008a4:	4613      	mov	r3, r2
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	4413      	add	r3, r2
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	440b      	add	r3, r1
 80008ae:	3301      	adds	r3, #1
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d166      	bne.n	8000984 <handle_input_wait+0xfc>
 80008b6:	493c      	ldr	r1, [pc, #240]	@ (80009a8 <handle_input_wait+0x120>)
 80008b8:	697a      	ldr	r2, [r7, #20]
 80008ba:	4613      	mov	r3, r2
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	4413      	add	r3, r2
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	440b      	add	r3, r1
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d15c      	bne.n	8000984 <handle_input_wait+0xfc>
                const char* btn_names[4] = {"BLUE", "RED", "YELLOW", "GREEN"};
 80008ca:	4b38      	ldr	r3, [pc, #224]	@ (80009ac <handle_input_wait+0x124>)
 80008cc:	1d3c      	adds	r4, r7, #4
 80008ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                Log_Print("[INPUT] Button %s pressed. Index: %u, Expected: %u, Correct: %s\r\n",
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	3318      	adds	r3, #24
 80008da:	443b      	add	r3, r7
 80008dc:	f853 1c14 	ldr.w	r1, [r3, #-20]
 80008e0:	4b2f      	ldr	r3, [pc, #188]	@ (80009a0 <handle_input_wait+0x118>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4618      	mov	r0, r3
                          btn_names[i], g_input_index, g_pattern[g_input_index],
 80008e6:	4b2e      	ldr	r3, [pc, #184]	@ (80009a0 <handle_input_wait+0x118>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	461a      	mov	r2, r3
 80008ec:	4b30      	ldr	r3, [pc, #192]	@ (80009b0 <handle_input_wait+0x128>)
 80008ee:	5c9b      	ldrb	r3, [r3, r2]
                Log_Print("[INPUT] Button %s pressed. Index: %u, Expected: %u, Correct: %s\r\n",
 80008f0:	461c      	mov	r4, r3
                          (i == g_pattern[g_input_index]) ? "YES" : "NO");
 80008f2:	4b2b      	ldr	r3, [pc, #172]	@ (80009a0 <handle_input_wait+0x118>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	4b2d      	ldr	r3, [pc, #180]	@ (80009b0 <handle_input_wait+0x128>)
 80008fa:	5c9b      	ldrb	r3, [r3, r2]
 80008fc:	461a      	mov	r2, r3
                Log_Print("[INPUT] Button %s pressed. Index: %u, Expected: %u, Correct: %s\r\n",
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	4293      	cmp	r3, r2
 8000902:	d101      	bne.n	8000908 <handle_input_wait+0x80>
 8000904:	4b2b      	ldr	r3, [pc, #172]	@ (80009b4 <handle_input_wait+0x12c>)
 8000906:	e000      	b.n	800090a <handle_input_wait+0x82>
 8000908:	4b2b      	ldr	r3, [pc, #172]	@ (80009b8 <handle_input_wait+0x130>)
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	4623      	mov	r3, r4
 800090e:	4602      	mov	r2, r0
 8000910:	482a      	ldr	r0, [pc, #168]	@ (80009bc <handle_input_wait+0x134>)
 8000912:	f001 fdbb 	bl	800248c <Log_Print>
                leds_show(i);
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fd5c 	bl	80003d8 <leds_show>
                Delay_ms(diff_on_ms(g_difficulty) / 2);
 8000920:	4b27      	ldr	r3, [pc, #156]	@ (80009c0 <handle_input_wait+0x138>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fcdd 	bl	80002e4 <diff_on_ms>
 800092a:	4603      	mov	r3, r0
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	b29b      	uxth	r3, r3
 8000930:	4618      	mov	r0, r3
 8000932:	f001 fd89 	bl	8002448 <Delay_ms>
                leds_clear();
 8000936:	f7ff fd05 	bl	8000344 <leds_clear>

                // Wait for button release to prevent multiple counts
                while (g_buttons[i].current_state == 1) {
 800093a:	e004      	b.n	8000946 <handle_input_wait+0xbe>
                    Monitor_Buttons();
 800093c:	f000 fc24 	bl	8001188 <Monitor_Buttons>
                    Delay_ms(10);
 8000940:	200a      	movs	r0, #10
 8000942:	f001 fd81 	bl	8002448 <Delay_ms>
                while (g_buttons[i].current_state == 1) {
 8000946:	4918      	ldr	r1, [pc, #96]	@ (80009a8 <handle_input_wait+0x120>)
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	4613      	mov	r3, r2
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	4413      	add	r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	440b      	add	r3, r1
 8000954:	3301      	adds	r3, #1
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d0ef      	beq.n	800093c <handle_input_wait+0xb4>
                }

                if (i != g_pattern[g_input_index]) {
 800095c:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <handle_input_wait+0x118>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4b13      	ldr	r3, [pc, #76]	@ (80009b0 <handle_input_wait+0x128>)
 8000964:	5c9b      	ldrb	r3, [r3, r2]
 8000966:	461a      	mov	r2, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	4293      	cmp	r3, r2
 800096c:	d002      	beq.n	8000974 <handle_input_wait+0xec>
                    g_input_correct = 0;
 800096e:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <handle_input_wait+0x13c>)
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
                }
                g_input_index++;
 8000974:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <handle_input_wait+0x118>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	3301      	adds	r3, #1
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <handle_input_wait+0x118>)
 800097e:	701a      	strb	r2, [r3, #0]
                break;
 8000980:	bf00      	nop
            }
        }
    } else {
        set_game_state(GAME_STATE_RESULT_PROCESS);
    }
}
 8000982:	e009      	b.n	8000998 <handle_input_wait+0x110>
        for (int i = 0; i < 4; i++) {
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	3301      	adds	r3, #1
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	2b03      	cmp	r3, #3
 800098e:	dd87      	ble.n	80008a0 <handle_input_wait+0x18>
}
 8000990:	e002      	b.n	8000998 <handle_input_wait+0x110>
        set_game_state(GAME_STATE_RESULT_PROCESS);
 8000992:	2005      	movs	r0, #5
 8000994:	f7ff fce0 	bl	8000358 <set_game_state>
}
 8000998:	bf00      	nop
 800099a:	371c      	adds	r7, #28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd90      	pop	{r4, r7, pc}
 80009a0:	200000ba 	.word	0x200000ba
 80009a4:	200000b8 	.word	0x200000b8
 80009a8:	200000cc 	.word	0x200000cc
 80009ac:	08003d94 	.word	0x08003d94
 80009b0:	20000098 	.word	0x20000098
 80009b4:	08003da4 	.word	0x08003da4
 80009b8:	08003da8 	.word	0x08003da8
 80009bc:	08003dac 	.word	0x08003dac
 80009c0:	20000085 	.word	0x20000085
 80009c4:	20000000 	.word	0x20000000

080009c8 <handle_result_process>:

static void handle_result_process(void) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
    if (g_input_correct) {
 80009cc:	4b39      	ldr	r3, [pc, #228]	@ (8000ab4 <handle_result_process+0xec>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d03e      	beq.n	8000a52 <handle_result_process+0x8a>
        Log_Print("[RESULT] SUCCESS! Level %u completed.\r\n", g_level);
 80009d4:	4b38      	ldr	r3, [pc, #224]	@ (8000ab8 <handle_result_process+0xf0>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	4619      	mov	r1, r3
 80009da:	4838      	ldr	r0, [pc, #224]	@ (8000abc <handle_result_process+0xf4>)
 80009dc:	f001 fd56 	bl	800248c <Log_Print>
        Buzzer_Play(1200, 40);
 80009e0:	2128      	movs	r1, #40	@ 0x28
 80009e2:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 80009e6:	f000 fda3 	bl	8001530 <Buzzer_Play>
        Delay_ms(80);
 80009ea:	2050      	movs	r0, #80	@ 0x50
 80009ec:	f001 fd2c 	bl	8002448 <Delay_ms>
        Buzzer_Stop();
 80009f0:	f000 fdd4 	bl	800159c <Buzzer_Stop>
        g_score += 10 * g_level * g_difficulty;
 80009f4:	4b30      	ldr	r3, [pc, #192]	@ (8000ab8 <handle_result_process+0xf0>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b31      	ldr	r3, [pc, #196]	@ (8000ac0 <handle_result_process+0xf8>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	fb03 f202 	mul.w	r2, r3, r2
 8000a02:	4613      	mov	r3, r2
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	4413      	add	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac4 <handle_result_process+0xfc>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4413      	add	r3, r2
 8000a12:	4a2c      	ldr	r2, [pc, #176]	@ (8000ac4 <handle_result_process+0xfc>)
 8000a14:	6013      	str	r3, [r2, #0]
        g_level++;
 8000a16:	4b28      	ldr	r3, [pc, #160]	@ (8000ab8 <handle_result_process+0xf0>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4b26      	ldr	r3, [pc, #152]	@ (8000ab8 <handle_result_process+0xf0>)
 8000a20:	701a      	strb	r2, [r3, #0]
        Log_Print("[RESULT] Score: %lu, Next Level: %u\r\n", g_score, g_level);
 8000a22:	4b28      	ldr	r3, [pc, #160]	@ (8000ac4 <handle_result_process+0xfc>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a24      	ldr	r2, [pc, #144]	@ (8000ab8 <handle_result_process+0xf0>)
 8000a28:	7812      	ldrb	r2, [r2, #0]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4826      	ldr	r0, [pc, #152]	@ (8000ac8 <handle_result_process+0x100>)
 8000a2e:	f001 fd2d 	bl	800248c <Log_Print>
        Debug_PrintGameState();
 8000a32:	f001 fd6d 	bl	8002510 <Debug_PrintGameState>
        OLED_ShowStatus();
 8000a36:	f001 fc37 	bl	80022a8 <OLED_ShowStatus>
        if (g_level > 9)
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab8 <handle_result_process+0xf0>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b09      	cmp	r3, #9
 8000a40:	d903      	bls.n	8000a4a <handle_result_process+0x82>
            set_game_state(GAME_STATE_VICTORY);
 8000a42:	2006      	movs	r0, #6
 8000a44:	f7ff fc88 	bl	8000358 <set_game_state>
        else {
            Log_Print("Try again!\r\n");
            set_game_state(GAME_STATE_LEVEL_INTRO);
        }
    }
}
 8000a48:	e032      	b.n	8000ab0 <handle_result_process+0xe8>
            set_game_state(GAME_STATE_LEVEL_INTRO);
 8000a4a:	2002      	movs	r0, #2
 8000a4c:	f7ff fc84 	bl	8000358 <set_game_state>
}
 8000a50:	e02e      	b.n	8000ab0 <handle_result_process+0xe8>
        Log_Print("[RESULT] FAIL! Lost a life.\r\n");
 8000a52:	481e      	ldr	r0, [pc, #120]	@ (8000acc <handle_result_process+0x104>)
 8000a54:	f001 fd1a 	bl	800248c <Log_Print>
        Buzzer_Play(300, 40);
 8000a58:	2128      	movs	r1, #40	@ 0x28
 8000a5a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000a5e:	f000 fd67 	bl	8001530 <Buzzer_Play>
        Delay_ms(150);
 8000a62:	2096      	movs	r0, #150	@ 0x96
 8000a64:	f001 fcf0 	bl	8002448 <Delay_ms>
        Buzzer_Stop();
 8000a68:	f000 fd98 	bl	800159c <Buzzer_Stop>
        if (g_lives > 0) g_lives--;
 8000a6c:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <handle_result_process+0x108>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d005      	beq.n	8000a80 <handle_result_process+0xb8>
 8000a74:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <handle_result_process+0x108>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <handle_result_process+0x108>)
 8000a7e:	701a      	strb	r2, [r3, #0]
        Log_Print("[RESULT] Lives remaining: %u\r\n", g_lives);
 8000a80:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <handle_result_process+0x108>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4619      	mov	r1, r3
 8000a86:	4813      	ldr	r0, [pc, #76]	@ (8000ad4 <handle_result_process+0x10c>)
 8000a88:	f001 fd00 	bl	800248c <Log_Print>
        Debug_PrintGameState();
 8000a8c:	f001 fd40 	bl	8002510 <Debug_PrintGameState>
        OLED_ShowStatus();
 8000a90:	f001 fc0a 	bl	80022a8 <OLED_ShowStatus>
        if (g_lives == 0)
 8000a94:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <handle_result_process+0x108>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d103      	bne.n	8000aa4 <handle_result_process+0xdc>
            set_game_state(GAME_STATE_GAME_DEATH);
 8000a9c:	2007      	movs	r0, #7
 8000a9e:	f7ff fc5b 	bl	8000358 <set_game_state>
}
 8000aa2:	e005      	b.n	8000ab0 <handle_result_process+0xe8>
            Log_Print("Try again!\r\n");
 8000aa4:	480c      	ldr	r0, [pc, #48]	@ (8000ad8 <handle_result_process+0x110>)
 8000aa6:	f001 fcf1 	bl	800248c <Log_Print>
            set_game_state(GAME_STATE_LEVEL_INTRO);
 8000aaa:	2002      	movs	r0, #2
 8000aac:	f7ff fc54 	bl	8000358 <set_game_state>
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	20000086 	.word	0x20000086
 8000abc:	08003df0 	.word	0x08003df0
 8000ac0:	20000085 	.word	0x20000085
 8000ac4:	20000088 	.word	0x20000088
 8000ac8:	08003e18 	.word	0x08003e18
 8000acc:	08003e40 	.word	0x08003e40
 8000ad0:	2000008c 	.word	0x2000008c
 8000ad4:	08003e60 	.word	0x08003e60
 8000ad8:	08003e80 	.word	0x08003e80

08000adc <handle_victory>:

static void handle_victory(void) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
    static uint8_t played = 0;
    Log_Print("Congratulations! Final Score: %lu\r\n", g_score);
 8000ae2:	4b33      	ldr	r3, [pc, #204]	@ (8000bb0 <handle_victory+0xd4>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4832      	ldr	r0, [pc, #200]	@ (8000bb4 <handle_victory+0xd8>)
 8000aea:	f001 fccf 	bl	800248c <Log_Print>
    OLED_ShowStatus();
 8000aee:	f001 fbdb 	bl	80022a8 <OLED_ShowStatus>

    if (!played) {                      // <— เล่นครั้งเดียว
 8000af2:	4b31      	ldr	r3, [pc, #196]	@ (8000bb8 <handle_victory+0xdc>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d124      	bne.n	8000b44 <handle_victory+0x68>
        Debug_PrintGameState();
 8000afa:	f001 fd09 	bl	8002510 <Debug_PrintGameState>
        uint32_t melody[] = {523, 659, 784}; // C5, E5, G5
 8000afe:	4a2f      	ldr	r2, [pc, #188]	@ (8000bbc <handle_victory+0xe0>)
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        for (int i = 0; i < 3; i++) {
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	e014      	b.n	8000b38 <handle_victory+0x5c>
            Buzzer_Play(melody[i], 40);
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	3318      	adds	r3, #24
 8000b14:	443b      	add	r3, r7
 8000b16:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8000b1a:	2128      	movs	r1, #40	@ 0x28
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 fd07 	bl	8001530 <Buzzer_Play>
            Delay_ms(150);
 8000b22:	2096      	movs	r0, #150	@ 0x96
 8000b24:	f001 fc90 	bl	8002448 <Delay_ms>
            Buzzer_Stop();
 8000b28:	f000 fd38 	bl	800159c <Buzzer_Stop>
            Delay_ms(50);
 8000b2c:	2032      	movs	r0, #50	@ 0x32
 8000b2e:	f001 fc8b 	bl	8002448 <Delay_ms>
        for (int i = 0; i < 3; i++) {
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	3301      	adds	r3, #1
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	dde7      	ble.n	8000b0e <handle_victory+0x32>
        }
        played = 1;
 8000b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb8 <handle_victory+0xdc>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]
    }

    // รอกดปุ่มเพื่อรีสตาร์ท
    for (int i = 0; i < 4; i++) {
 8000b44:	2300      	movs	r3, #0
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	e02a      	b.n	8000ba0 <handle_victory+0xc4>
        if (g_buttons[i].current_state == 1 && g_buttons[i].previous_state == 0) {
 8000b4a:	491d      	ldr	r1, [pc, #116]	@ (8000bc0 <handle_victory+0xe4>)
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	4413      	add	r3, r2
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	440b      	add	r3, r1
 8000b58:	3301      	adds	r3, #1
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d11c      	bne.n	8000b9a <handle_victory+0xbe>
 8000b60:	4917      	ldr	r1, [pc, #92]	@ (8000bc0 <handle_victory+0xe4>)
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4613      	mov	r3, r2
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	4413      	add	r3, r2
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d112      	bne.n	8000b9a <handle_victory+0xbe>
            g_level = 1;
 8000b74:	4b13      	ldr	r3, [pc, #76]	@ (8000bc4 <handle_victory+0xe8>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	701a      	strb	r2, [r3, #0]
            g_score = 0;
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb0 <handle_victory+0xd4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
            g_lives = INITIAL_LIVES;
 8000b80:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <handle_victory+0xec>)
 8000b82:	2204      	movs	r2, #4
 8000b84:	701a      	strb	r2, [r3, #0]
            g_difficulty_locked = 0;
 8000b86:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <handle_victory+0xf0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
            played = 0;                 // <— รีเซ็ตสำหรับรอบถัดไป
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <handle_victory+0xdc>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
            set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 8000b92:	2001      	movs	r0, #1
 8000b94:	f7ff fbe0 	bl	8000358 <set_game_state>
            break;
 8000b98:	e006      	b.n	8000ba8 <handle_victory+0xcc>
    for (int i = 0; i < 4; i++) {
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	ddd1      	ble.n	8000b4a <handle_victory+0x6e>
        }
    }
}
 8000ba6:	bf00      	nop
 8000ba8:	bf00      	nop
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000088 	.word	0x20000088
 8000bb4:	08003e90 	.word	0x08003e90
 8000bb8:	200000c9 	.word	0x200000c9
 8000bbc:	08003eb4 	.word	0x08003eb4
 8000bc0:	200000cc 	.word	0x200000cc
 8000bc4:	20000086 	.word	0x20000086
 8000bc8:	2000008c 	.word	0x2000008c
 8000bcc:	20000094 	.word	0x20000094

08000bd0 <handle_game_death>:

static void handle_game_death(void) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
    static uint8_t animation_played = 0;

    // Play game over animation once upon entering this state
    if (!animation_played) {
 8000bd6:	4b40      	ldr	r3, [pc, #256]	@ (8000cd8 <handle_game_death+0x108>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d146      	bne.n	8000c6c <handle_game_death+0x9c>
        Log_Print("Game Over! Final Score: %lu\r\n", g_score);
 8000bde:	4b3f      	ldr	r3, [pc, #252]	@ (8000cdc <handle_game_death+0x10c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4619      	mov	r1, r3
 8000be4:	483e      	ldr	r0, [pc, #248]	@ (8000ce0 <handle_game_death+0x110>)
 8000be6:	f001 fc51 	bl	800248c <Log_Print>
        Debug_PrintGameState();
 8000bea:	f001 fc91 	bl	8002510 <Debug_PrintGameState>

        // Rapid blink: 3 cycles
        for (int cycle = 0; cycle < 3; cycle++) {
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	e00e      	b.n	8000c12 <handle_game_death+0x42>
            LED_SetPattern(0x0F);  // All LEDs on
 8000bf4:	200f      	movs	r0, #15
 8000bf6:	f000 fb65 	bl	80012c4 <LED_SetPattern>
            Delay_ms(150);
 8000bfa:	2096      	movs	r0, #150	@ 0x96
 8000bfc:	f001 fc24 	bl	8002448 <Delay_ms>
            LED_SetPattern(0x00);  // All LEDs off
 8000c00:	2000      	movs	r0, #0
 8000c02:	f000 fb5f 	bl	80012c4 <LED_SetPattern>
            Delay_ms(150);
 8000c06:	2096      	movs	r0, #150	@ 0x96
 8000c08:	f001 fc1e 	bl	8002448 <Delay_ms>
        for (int cycle = 0; cycle < 3; cycle++) {
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	dded      	ble.n	8000bf4 <handle_game_death+0x24>
        }

        // Gradual fade out simulation
        for (int brightness = 10; brightness > 0; brightness--) {
 8000c18:	230a      	movs	r3, #10
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	e01b      	b.n	8000c56 <handle_game_death+0x86>
            for (int pulse = 0; pulse < 20; pulse++) {
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	e012      	b.n	8000c4a <handle_game_death+0x7a>
                LED_SetPattern(0x0F);
 8000c24:	200f      	movs	r0, #15
 8000c26:	f000 fb4d 	bl	80012c4 <LED_SetPattern>
                Delay_ms(brightness);
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f001 fc0b 	bl	8002448 <Delay_ms>
                LED_SetPattern(0x00);
 8000c32:	2000      	movs	r0, #0
 8000c34:	f000 fb46 	bl	80012c4 <LED_SetPattern>
                Delay_ms(11 - brightness);
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	f1c3 030b 	rsb	r3, r3, #11
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f001 fc02 	bl	8002448 <Delay_ms>
            for (int pulse = 0; pulse < 20; pulse++) {
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3301      	adds	r3, #1
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b13      	cmp	r3, #19
 8000c4e:	dde9      	ble.n	8000c24 <handle_game_death+0x54>
        for (int brightness = 10; brightness > 0; brightness--) {
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	dce0      	bgt.n	8000c1e <handle_game_death+0x4e>
            }
        }

        LED_SetPattern(0x00);  // Ensure all off
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f000 fb31 	bl	80012c4 <LED_SetPattern>
        OLED_ShowStatus();
 8000c62:	f001 fb21 	bl	80022a8 <OLED_ShowStatus>
        animation_played = 1;
 8000c66:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd8 <handle_game_death+0x108>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	701a      	strb	r2, [r3, #0]
    }

    // Wait for button press to restart
    for (int i = 0; i < 4; i++) {
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	e02a      	b.n	8000cc8 <handle_game_death+0xf8>
        if (g_buttons[i].current_state == 1 && g_buttons[i].previous_state == 0) {
 8000c72:	491c      	ldr	r1, [pc, #112]	@ (8000ce4 <handle_game_death+0x114>)
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	4613      	mov	r3, r2
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	4413      	add	r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	440b      	add	r3, r1
 8000c80:	3301      	adds	r3, #1
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d11c      	bne.n	8000cc2 <handle_game_death+0xf2>
 8000c88:	4916      	ldr	r1, [pc, #88]	@ (8000ce4 <handle_game_death+0x114>)
 8000c8a:	683a      	ldr	r2, [r7, #0]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	4413      	add	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	440b      	add	r3, r1
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d112      	bne.n	8000cc2 <handle_game_death+0xf2>
            g_level = 1;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <handle_game_death+0x118>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	701a      	strb	r2, [r3, #0]
            g_score = 0;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <handle_game_death+0x10c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
            g_lives = INITIAL_LIVES;
 8000ca8:	4b10      	ldr	r3, [pc, #64]	@ (8000cec <handle_game_death+0x11c>)
 8000caa:	2204      	movs	r2, #4
 8000cac:	701a      	strb	r2, [r3, #0]
            g_difficulty_locked = 0;
 8000cae:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <handle_game_death+0x120>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
            animation_played = 0;  // Reset for next game over
 8000cb4:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <handle_game_death+0x108>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
            set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f7ff fb4c 	bl	8000358 <set_game_state>
            break;
 8000cc0:	e006      	b.n	8000cd0 <handle_game_death+0x100>
    for (int i = 0; i < 4; i++) {
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	2b03      	cmp	r3, #3
 8000ccc:	ddd1      	ble.n	8000c72 <handle_game_death+0xa2>
        }
    }
}
 8000cce:	bf00      	nop
 8000cd0:	bf00      	nop
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	200000ca 	.word	0x200000ca
 8000cdc:	20000088 	.word	0x20000088
 8000ce0:	08003ec0 	.word	0x08003ec0
 8000ce4:	200000cc 	.word	0x200000cc
 8000ce8:	20000086 	.word	0x20000086
 8000cec:	2000008c 	.word	0x2000008c
 8000cf0:	20000094 	.word	0x20000094

08000cf4 <Game_Init>:

/* ============================================================================
 * Public Functions
 * ============================================================================ */
void Game_Init(void) {
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
    Log_Print("\r\n[GAME] Initializing Simon Game...\r\n");
 8000cfa:	480f      	ldr	r0, [pc, #60]	@ (8000d38 <Game_Init+0x44>)
 8000cfc:	f001 fbc6 	bl	800248c <Log_Print>
    uint32_t seed = g_adc_values[1] + g_adc_values[2] + GetTick();
 8000d00:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <Game_Init+0x48>)
 8000d02:	885b      	ldrh	r3, [r3, #2]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	461a      	mov	r2, r3
 8000d08:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <Game_Init+0x48>)
 8000d0a:	889b      	ldrh	r3, [r3, #4]
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	4413      	add	r3, r2
 8000d10:	461c      	mov	r4, r3
 8000d12:	f001 fbaf 	bl	8002474 <GetTick>
 8000d16:	4603      	mov	r3, r0
 8000d18:	4423      	add	r3, r4
 8000d1a:	607b      	str	r3, [r7, #4]
    srand(seed);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f001 fdab 	bl	8002878 <srand>
    Log_Print("[GAME] Random seed set to: %lu\r\n", seed);
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	4806      	ldr	r0, [pc, #24]	@ (8000d40 <Game_Init+0x4c>)
 8000d26:	f001 fbb1 	bl	800248c <Log_Print>
    set_game_state(GAME_STATE_BOOT);
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f7ff fb14 	bl	8000358 <set_game_state>
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd90      	pop	{r4, r7, pc}
 8000d38:	08003ee0 	.word	0x08003ee0
 8000d3c:	200000fc 	.word	0x200000fc
 8000d40:	08003f08 	.word	0x08003f08

08000d44 <Game_Run>:

void Game_Run(void) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
    // Log state transitions
    if (g_last_state_logged != g_game_state) {
 8000d48:	4b3e      	ldr	r3, [pc, #248]	@ (8000e44 <Game_Run+0x100>)
 8000d4a:	781a      	ldrb	r2, [r3, #0]
 8000d4c:	4b3e      	ldr	r3, [pc, #248]	@ (8000e48 <Game_Run+0x104>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d03d      	beq.n	8000dd0 <Game_Run+0x8c>
        switch(g_game_state) {
 8000d54:	4b3c      	ldr	r3, [pc, #240]	@ (8000e48 <Game_Run+0x104>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b07      	cmp	r3, #7
 8000d5a:	d833      	bhi.n	8000dc4 <Game_Run+0x80>
 8000d5c:	a201      	add	r2, pc, #4	@ (adr r2, 8000d64 <Game_Run+0x20>)
 8000d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d62:	bf00      	nop
 8000d64:	08000d85 	.word	0x08000d85
 8000d68:	08000d8d 	.word	0x08000d8d
 8000d6c:	08000d95 	.word	0x08000d95
 8000d70:	08000d9d 	.word	0x08000d9d
 8000d74:	08000da5 	.word	0x08000da5
 8000d78:	08000dad 	.word	0x08000dad
 8000d7c:	08000db5 	.word	0x08000db5
 8000d80:	08000dbd 	.word	0x08000dbd
            case GAME_STATE_BOOT:
                Log_Print("[STATE] -> BOOT\r\n");
 8000d84:	4831      	ldr	r0, [pc, #196]	@ (8000e4c <Game_Run+0x108>)
 8000d86:	f001 fb81 	bl	800248c <Log_Print>
                break;
 8000d8a:	e01b      	b.n	8000dc4 <Game_Run+0x80>
            case GAME_STATE_DIFFICULTY_SELECT:
                Log_Print("[STATE] -> DIFFICULTY_SELECT\r\n");
 8000d8c:	4830      	ldr	r0, [pc, #192]	@ (8000e50 <Game_Run+0x10c>)
 8000d8e:	f001 fb7d 	bl	800248c <Log_Print>
                break;
 8000d92:	e017      	b.n	8000dc4 <Game_Run+0x80>
            case GAME_STATE_LEVEL_INTRO:
                Log_Print("[STATE] -> LEVEL_INTRO\r\n");
 8000d94:	482f      	ldr	r0, [pc, #188]	@ (8000e54 <Game_Run+0x110>)
 8000d96:	f001 fb79 	bl	800248c <Log_Print>
                break;
 8000d9a:	e013      	b.n	8000dc4 <Game_Run+0x80>
            case GAME_STATE_PATTERN_DISPLAY:
                Log_Print("[STATE] -> PATTERN_DISPLAY\r\n");
 8000d9c:	482e      	ldr	r0, [pc, #184]	@ (8000e58 <Game_Run+0x114>)
 8000d9e:	f001 fb75 	bl	800248c <Log_Print>
                break;
 8000da2:	e00f      	b.n	8000dc4 <Game_Run+0x80>
            case GAME_STATE_INPUT_WAIT:
                Log_Print("[STATE] -> INPUT_WAIT\r\n");
 8000da4:	482d      	ldr	r0, [pc, #180]	@ (8000e5c <Game_Run+0x118>)
 8000da6:	f001 fb71 	bl	800248c <Log_Print>
                break;
 8000daa:	e00b      	b.n	8000dc4 <Game_Run+0x80>
            case GAME_STATE_RESULT_PROCESS:
                Log_Print("[STATE] -> RESULT_PROCESS\r\n");
 8000dac:	482c      	ldr	r0, [pc, #176]	@ (8000e60 <Game_Run+0x11c>)
 8000dae:	f001 fb6d 	bl	800248c <Log_Print>
                break;
 8000db2:	e007      	b.n	8000dc4 <Game_Run+0x80>
            case GAME_STATE_VICTORY:
                Log_Print("[STATE] -> VICTORY\r\n");
 8000db4:	482b      	ldr	r0, [pc, #172]	@ (8000e64 <Game_Run+0x120>)
 8000db6:	f001 fb69 	bl	800248c <Log_Print>
                break;
 8000dba:	e003      	b.n	8000dc4 <Game_Run+0x80>
            case GAME_STATE_GAME_DEATH:
                Log_Print("[STATE] -> GAME_DEATH\r\n");
 8000dbc:	482a      	ldr	r0, [pc, #168]	@ (8000e68 <Game_Run+0x124>)
 8000dbe:	f001 fb65 	bl	800248c <Log_Print>
                break;
 8000dc2:	bf00      	nop
        }
        g_last_state_logged = g_game_state;
 8000dc4:	4b20      	ldr	r3, [pc, #128]	@ (8000e48 <Game_Run+0x104>)
 8000dc6:	781a      	ldrb	r2, [r3, #0]
 8000dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e44 <Game_Run+0x100>)
 8000dca:	701a      	strb	r2, [r3, #0]
        OLED_ShowStatus();
 8000dcc:	f001 fa6c 	bl	80022a8 <OLED_ShowStatus>
    }

    // Execute current state handler
    switch(g_game_state) {
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e48 <Game_Run+0x104>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b07      	cmp	r3, #7
 8000dd6:	d82b      	bhi.n	8000e30 <Game_Run+0xec>
 8000dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8000de0 <Game_Run+0x9c>)
 8000dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dde:	bf00      	nop
 8000de0:	08000e01 	.word	0x08000e01
 8000de4:	08000e07 	.word	0x08000e07
 8000de8:	08000e0d 	.word	0x08000e0d
 8000dec:	08000e13 	.word	0x08000e13
 8000df0:	08000e19 	.word	0x08000e19
 8000df4:	08000e1f 	.word	0x08000e1f
 8000df8:	08000e25 	.word	0x08000e25
 8000dfc:	08000e2b 	.word	0x08000e2b
        case GAME_STATE_BOOT:
            handle_boot();
 8000e00:	f7ff fb0c 	bl	800041c <handle_boot>
            break;
 8000e04:	e01c      	b.n	8000e40 <Game_Run+0xfc>
        case GAME_STATE_DIFFICULTY_SELECT:
            handle_difficulty_select();
 8000e06:	f7ff fb7f 	bl	8000508 <handle_difficulty_select>
            break;
 8000e0a:	e019      	b.n	8000e40 <Game_Run+0xfc>
        case GAME_STATE_LEVEL_INTRO:
            handle_level_intro();
 8000e0c:	f7ff fc36 	bl	800067c <handle_level_intro>
            break;
 8000e10:	e016      	b.n	8000e40 <Game_Run+0xfc>
        case GAME_STATE_PATTERN_DISPLAY:
            handle_pattern_display();
 8000e12:	f7ff fc8f 	bl	8000734 <handle_pattern_display>
            break;
 8000e16:	e013      	b.n	8000e40 <Game_Run+0xfc>
        case GAME_STATE_INPUT_WAIT:
            handle_input_wait();
 8000e18:	f7ff fd36 	bl	8000888 <handle_input_wait>
            break;
 8000e1c:	e010      	b.n	8000e40 <Game_Run+0xfc>
        case GAME_STATE_RESULT_PROCESS:
            handle_result_process();
 8000e1e:	f7ff fdd3 	bl	80009c8 <handle_result_process>
            break;
 8000e22:	e00d      	b.n	8000e40 <Game_Run+0xfc>
        case GAME_STATE_VICTORY:
            handle_victory();
 8000e24:	f7ff fe5a 	bl	8000adc <handle_victory>
            break;
 8000e28:	e00a      	b.n	8000e40 <Game_Run+0xfc>
        case GAME_STATE_GAME_DEATH:
            handle_game_death();
 8000e2a:	f7ff fed1 	bl	8000bd0 <handle_game_death>
            break;
 8000e2e:	e007      	b.n	8000e40 <Game_Run+0xfc>
        default:
            set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f7ff fa91 	bl	8000358 <set_game_state>
            Delay_ms(1000);
 8000e36:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e3a:	f001 fb05 	bl	8002448 <Delay_ms>
            break;
 8000e3e:	bf00      	nop
    }
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000001 	.word	0x20000001
 8000e48:	20000084 	.word	0x20000084
 8000e4c:	08003f2c 	.word	0x08003f2c
 8000e50:	08003f40 	.word	0x08003f40
 8000e54:	08003f60 	.word	0x08003f60
 8000e58:	08003f7c 	.word	0x08003f7c
 8000e5c:	08003f9c 	.word	0x08003f9c
 8000e60:	08003fb4 	.word	0x08003fb4
 8000e64:	08003fd0 	.word	0x08003fd0
 8000e68:	08003fe8 	.word	0x08003fe8

08000e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	db0b      	blt.n	8000e96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	f003 021f 	and.w	r2, r3, #31
 8000e84:	4907      	ldr	r1, [pc, #28]	@ (8000ea4 <__NVIC_EnableIRQ+0x38>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	095b      	lsrs	r3, r3, #5
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000e100 	.word	0xe000e100

08000ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	db0a      	blt.n	8000ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	490c      	ldr	r1, [pc, #48]	@ (8000ef4 <__NVIC_SetPriority+0x4c>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	0112      	lsls	r2, r2, #4
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	440b      	add	r3, r1
 8000ecc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed0:	e00a      	b.n	8000ee8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4908      	ldr	r1, [pc, #32]	@ (8000ef8 <__NVIC_SetPriority+0x50>)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	3b04      	subs	r3, #4
 8000ee0:	0112      	lsls	r2, r2, #4
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	761a      	strb	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <SystemClock_Config>:
volatile uint8_t  g_current_adc_channel = 0;

/* ============================================================================
 * System Initialization
 * ============================================================================ */
void SystemClock_Config(void) {
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
    RCC->CR |= RCC_CR_HSION;
 8000f00:	4b1d      	ldr	r3, [pc, #116]	@ (8000f78 <SystemClock_Config+0x7c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a1c      	ldr	r2, [pc, #112]	@ (8000f78 <SystemClock_Config+0x7c>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_HSIRDY));
 8000f0c:	bf00      	nop
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f78 <SystemClock_Config+0x7c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0f9      	beq.n	8000f0e <SystemClock_Config+0x12>

    RCC->PLLCFGR = (RCC_PLLCFGR_PLLSRC_HSI) |
 8000f1a:	4b17      	ldr	r3, [pc, #92]	@ (8000f78 <SystemClock_Config+0x7c>)
 8000f1c:	f642 2210 	movw	r2, #10768	@ 0x2a10
 8000f20:	605a      	str	r2, [r3, #4]
                   (16 << RCC_PLLCFGR_PLLM_Pos) |
                   (168 << RCC_PLLCFGR_PLLN_Pos) |
                   (0 << RCC_PLLCFGR_PLLP_Pos);

    RCC->CR |= RCC_CR_PLLON;
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <SystemClock_Config+0x7c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a14      	ldr	r2, [pc, #80]	@ (8000f78 <SystemClock_Config+0x7c>)
 8000f28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f2c:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_PLLRDY));
 8000f2e:	bf00      	nop
 8000f30:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <SystemClock_Config+0x7c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d0f9      	beq.n	8000f30 <SystemClock_Config+0x34>

    FLASH->ACR = FLASH_ACR_LATENCY_2WS;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <SystemClock_Config+0x80>)
 8000f3e:	2202      	movs	r2, #2
 8000f40:	601a      	str	r2, [r3, #0]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV2 | RCC_CFGR_PPRE2_DIV1;
 8000f42:	4b0d      	ldr	r3, [pc, #52]	@ (8000f78 <SystemClock_Config+0x7c>)
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	4a0c      	ldr	r2, [pc, #48]	@ (8000f78 <SystemClock_Config+0x7c>)
 8000f48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f4c:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <SystemClock_Config+0x7c>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	4a09      	ldr	r2, [pc, #36]	@ (8000f78 <SystemClock_Config+0x7c>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	6093      	str	r3, [r2, #8]
    while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000f5a:	bf00      	nop
 8000f5c:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <SystemClock_Config+0x7c>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f003 030c 	and.w	r3, r3, #12
 8000f64:	2b08      	cmp	r3, #8
 8000f66:	d1f9      	bne.n	8000f5c <SystemClock_Config+0x60>

    SystemCoreClock = 84000000;
 8000f68:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <SystemClock_Config+0x84>)
 8000f6a:	4a06      	ldr	r2, [pc, #24]	@ (8000f84 <SystemClock_Config+0x88>)
 8000f6c:	601a      	str	r2, [r3, #0]
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40023c00 	.word	0x40023c00
 8000f80:	20000004 	.word	0x20000004
 8000f84:	0501bd00 	.word	0x0501bd00

08000f88 <GPIO_Init>:

void GPIO_Init(void) {
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
    // --- Init button state memory (สำหรับ debounce แบบใหม่) ---
    for (int i = 0; i < 4; i++) {
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	e029      	b.n	8000fe8 <GPIO_Init+0x60>
        g_buttons[i].previous_state   = 0;
 8000f94:	493e      	ldr	r1, [pc, #248]	@ (8001090 <GPIO_Init+0x108>)
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	4413      	add	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
        g_buttons[i].current_state    = 0;
 8000fa6:	493a      	ldr	r1, [pc, #232]	@ (8001090 <GPIO_Init+0x108>)
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4413      	add	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
        g_buttons[i].stable_reading   = 0;   // ต้องมีฟิลด์นี้ใน struct
 8000fba:	4935      	ldr	r1, [pc, #212]	@ (8001090 <GPIO_Init+0x108>)
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	3308      	adds	r3, #8
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
        g_buttons[i].last_change_time = 0;
 8000fce:	4930      	ldr	r1, [pc, #192]	@ (8001090 <GPIO_Init+0x108>)
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	440b      	add	r3, r1
 8000fdc:	3304      	adds	r3, #4
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	ddd2      	ble.n	8000f94 <GPIO_Init+0xc>
    }

    // --- Enable GPIO clocks ---
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;
 8000fee:	4b29      	ldr	r3, [pc, #164]	@ (8001094 <GPIO_Init+0x10c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	4a28      	ldr	r2, [pc, #160]	@ (8001094 <GPIO_Init+0x10c>)
 8000ff4:	f043 0307 	orr.w	r3, r3, #7
 8000ff8:	6313      	str	r3, [r2, #48]	@ 0x30

    // --- LEDs as outputs ---
    GPIOA->MODER |= (1 << (LED1_PIN*2)) | (1 << (LED2_PIN*2)) | (1 << (LED3_PIN*2));
 8000ffa:	4b27      	ldr	r3, [pc, #156]	@ (8001098 <GPIO_Init+0x110>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a26      	ldr	r2, [pc, #152]	@ (8001098 <GPIO_Init+0x110>)
 8001000:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 8001004:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (1 << (LED4_PIN*2));
 8001006:	4b25      	ldr	r3, [pc, #148]	@ (800109c <GPIO_Init+0x114>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a24      	ldr	r2, [pc, #144]	@ (800109c <GPIO_Init+0x114>)
 800100c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001010:	6013      	str	r3, [r2, #0]

    // --- Buttons as inputs with pull-ups (active-low) ---
    // (ขา input เป็นค่า default อยู่แล้ว จึงตั้งแค่ PUPDR ก็พอ)
    GPIOA->PUPDR |= (1 << (BTN0_PIN*2));
 8001012:	4b21      	ldr	r3, [pc, #132]	@ (8001098 <GPIO_Init+0x110>)
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	4a20      	ldr	r2, [pc, #128]	@ (8001098 <GPIO_Init+0x110>)
 8001018:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800101c:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (1 << (BTN1_PIN*2)) | (1 << (BTN2_PIN*2)) | (1 << (BTN3_PIN*2));
 800101e:	4b1f      	ldr	r3, [pc, #124]	@ (800109c <GPIO_Init+0x114>)
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	4a1e      	ldr	r2, [pc, #120]	@ (800109c <GPIO_Init+0x114>)
 8001024:	f443 63a8 	orr.w	r3, r3, #1344	@ 0x540
 8001028:	60d3      	str	r3, [r2, #12]

    // --- ADC pins as analog ---
    GPIOA->MODER |= (3 << (POT_PIN*2)) | (3 << (TEMP_PIN*2)) | (3 << (LIGHT_PIN*2));
 800102a:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <GPIO_Init+0x110>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a1a      	ldr	r2, [pc, #104]	@ (8001098 <GPIO_Init+0x110>)
 8001030:	f443 7343 	orr.w	r3, r3, #780	@ 0x30c
 8001034:	f043 0303 	orr.w	r3, r3, #3
 8001038:	6013      	str	r3, [r2, #0]

    // --- UART2: PA2, PA3 as AF7 ---
    GPIOA->MODER |= (2 << (2*2)) | (2 << (3*2));
 800103a:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <GPIO_Init+0x110>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a16      	ldr	r2, [pc, #88]	@ (8001098 <GPIO_Init+0x110>)
 8001040:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001044:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (7 << (2*4)) | (7 << (3*4));
 8001046:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <GPIO_Init+0x110>)
 8001048:	6a1b      	ldr	r3, [r3, #32]
 800104a:	4a13      	ldr	r2, [pc, #76]	@ (8001098 <GPIO_Init+0x110>)
 800104c:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8001050:	6213      	str	r3, [r2, #32]

    // --- 7-Segment BCD outputs ---
    GPIOC->MODER = (GPIOC->MODER & ~(3U << (BCD_2_0_PIN*2))) | (1U << (BCD_2_0_PIN*2));
 8001052:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <GPIO_Init+0x118>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800105a:	4a11      	ldr	r2, [pc, #68]	@ (80010a0 <GPIO_Init+0x118>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001060:	6013      	str	r3, [r2, #0]
    GPIOA->MODER = (GPIOA->MODER & ~((3U << (BCD_2_1_PIN*2)) | (3U << (BCD_2_3_PIN*2)))) |
 8001062:	4b0d      	ldr	r3, [pc, #52]	@ (8001098 <GPIO_Init+0x110>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800106a:	4a0b      	ldr	r2, [pc, #44]	@ (8001098 <GPIO_Init+0x110>)
                   (1U << (BCD_2_1_PIN*2)) | (1U << (BCD_2_3_PIN*2));
 800106c:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
    GPIOA->MODER = (GPIOA->MODER & ~((3U << (BCD_2_1_PIN*2)) | (3U << (BCD_2_3_PIN*2)))) |
 8001070:	6013      	str	r3, [r2, #0]
    GPIOB->MODER = (GPIOB->MODER & ~(3U << (BCD_2_2_PIN*2))) | (1U << (BCD_2_2_PIN*2));
 8001072:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <GPIO_Init+0x114>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800107a:	4a08      	ldr	r2, [pc, #32]	@ (800109c <GPIO_Init+0x114>)
 800107c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001080:	6013      	str	r3, [r2, #0]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	200000cc 	.word	0x200000cc
 8001094:	40023800 	.word	0x40023800
 8001098:	40020000 	.word	0x40020000
 800109c:	40020400 	.word	0x40020400
 80010a0:	40020800 	.word	0x40020800

080010a4 <ADC_Init>:


void ADC_Init(void) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80010a8:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <ADC_Init+0x50>)
 80010aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ac:	4a11      	ldr	r2, [pc, #68]	@ (80010f4 <ADC_Init+0x50>)
 80010ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b2:	6453      	str	r3, [r2, #68]	@ 0x44
    ADC1->CR2 |= ADC_CR2_ADON;
 80010b4:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <ADC_Init+0x54>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	4a0f      	ldr	r2, [pc, #60]	@ (80010f8 <ADC_Init+0x54>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6093      	str	r3, [r2, #8]
    ADC1->CR1 |= ADC_CR1_EOCIE;
 80010c0:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <ADC_Init+0x54>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	4a0c      	ldr	r2, [pc, #48]	@ (80010f8 <ADC_Init+0x54>)
 80010c6:	f043 0320 	orr.w	r3, r3, #32
 80010ca:	6053      	str	r3, [r2, #4]
    ADC1->CR1 |= (1 << ADC_CR1_RES_Pos); // 10-bit resolution
 80010cc:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <ADC_Init+0x54>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	4a09      	ldr	r2, [pc, #36]	@ (80010f8 <ADC_Init+0x54>)
 80010d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010d6:	6053      	str	r3, [r2, #4]
    ADC1->SMPR2 |= (7 << ADC_SMPR2_SMP0_Pos) |
 80010d8:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <ADC_Init+0x54>)
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	4a06      	ldr	r2, [pc, #24]	@ (80010f8 <ADC_Init+0x54>)
 80010de:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80010e2:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 80010e6:	6113      	str	r3, [r2, #16]
                   (7 << ADC_SMPR2_SMP1_Pos) |
                   (7 << ADC_SMPR2_SMP4_Pos);
    Delay_ms(2);
 80010e8:	2002      	movs	r0, #2
 80010ea:	f001 f9ad 	bl	8002448 <Delay_ms>
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40012000 	.word	0x40012000

080010fc <USART2_Init>:

void USART2_Init(void) {
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001100:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <USART2_Init+0x34>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001104:	4a0a      	ldr	r2, [pc, #40]	@ (8001130 <USART2_Init+0x34>)
 8001106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800110a:	6413      	str	r3, [r2, #64]	@ 0x40
    USART2->BRR = 0x16C; // 115200 @ 42MHz
 800110c:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <USART2_Init+0x38>)
 800110e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8001112:	609a      	str	r2, [r3, #8]
    USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8001114:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <USART2_Init+0x38>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	4a06      	ldr	r2, [pc, #24]	@ (8001134 <USART2_Init+0x38>)
 800111a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800111e:	f043 030c 	orr.w	r3, r3, #12
 8001122:	60d3      	str	r3, [r2, #12]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40004400 	.word	0x40004400

08001138 <NVIC_Init>:

void NVIC_Init(void) {
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(ADC_IRQn);
 800113c:	2012      	movs	r0, #18
 800113e:	f7ff fe95 	bl	8000e6c <__NVIC_EnableIRQ>
    NVIC_SetPriority(ADC_IRQn, 1);
 8001142:	2101      	movs	r1, #1
 8001144:	2012      	movs	r0, #18
 8001146:	f7ff feaf 	bl	8000ea8 <__NVIC_SetPriority>
    NVIC_SetPriority(SysTick_IRQn, 0);
 800114a:	2100      	movs	r1, #0
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f7ff feaa 	bl	8000ea8 <__NVIC_SetPriority>
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}

08001158 <ADC_StartConversion>:

void ADC_StartConversion(void) {
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
    ADC1->SQR3 = (ADC1->SQR3 & ~ADC_SQR3_SQ1) | POT_PIN;
 800115c:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <ADC_StartConversion+0x2c>)
 800115e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001160:	f023 031f 	bic.w	r3, r3, #31
 8001164:	4a07      	ldr	r2, [pc, #28]	@ (8001184 <ADC_StartConversion+0x2c>)
 8001166:	f043 0304 	orr.w	r3, r3, #4
 800116a:	6353      	str	r3, [r2, #52]	@ 0x34
    ADC1->CR2 |= ADC_CR2_SWSTART;
 800116c:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <ADC_StartConversion+0x2c>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	4a04      	ldr	r2, [pc, #16]	@ (8001184 <ADC_StartConversion+0x2c>)
 8001172:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001176:	6093      	str	r3, [r2, #8]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40012000 	.word	0x40012000

08001188 <Monitor_Buttons>:

/* ============================================================================
 * Hardware Monitoring
 * ============================================================================ */
void Monitor_Buttons(void) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
    uint32_t now = GetTick();
 800118e:	f001 f971 	bl	8002474 <GetTick>
 8001192:	60b8      	str	r0, [r7, #8]
    uint8_t raw[4] = {
        !(BTN0_PORT->IDR & (1 << BTN0_PIN)),
 8001194:	4b44      	ldr	r3, [pc, #272]	@ (80012a8 <Monitor_Buttons+0x120>)
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800119c:	2b00      	cmp	r3, #0
 800119e:	bf0c      	ite	eq
 80011a0:	2301      	moveq	r3, #1
 80011a2:	2300      	movne	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
    uint8_t raw[4] = {
 80011a6:	713b      	strb	r3, [r7, #4]
        !(BTN1_PORT->IDR & (1 << BTN1_PIN)),
 80011a8:	4b40      	ldr	r3, [pc, #256]	@ (80012ac <Monitor_Buttons+0x124>)
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	f003 0308 	and.w	r3, r3, #8
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	bf0c      	ite	eq
 80011b4:	2301      	moveq	r3, #1
 80011b6:	2300      	movne	r3, #0
 80011b8:	b2db      	uxtb	r3, r3
    uint8_t raw[4] = {
 80011ba:	717b      	strb	r3, [r7, #5]
        !(BTN2_PORT->IDR & (1 << BTN2_PIN)),
 80011bc:	4b3b      	ldr	r3, [pc, #236]	@ (80012ac <Monitor_Buttons+0x124>)
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	f003 0320 	and.w	r3, r3, #32
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	bf0c      	ite	eq
 80011c8:	2301      	moveq	r3, #1
 80011ca:	2300      	movne	r3, #0
 80011cc:	b2db      	uxtb	r3, r3
    uint8_t raw[4] = {
 80011ce:	71bb      	strb	r3, [r7, #6]
        !(BTN3_PORT->IDR & (1 << BTN3_PIN))
 80011d0:	4b36      	ldr	r3, [pc, #216]	@ (80012ac <Monitor_Buttons+0x124>)
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	f003 0310 	and.w	r3, r3, #16
 80011d8:	2b00      	cmp	r3, #0
 80011da:	bf0c      	ite	eq
 80011dc:	2301      	moveq	r3, #1
 80011de:	2300      	movne	r3, #0
 80011e0:	b2db      	uxtb	r3, r3
    uint8_t raw[4] = {
 80011e2:	71fb      	strb	r3, [r7, #7]
    };

    for (int i = 0; i < 4; i++) {
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	e056      	b.n	8001298 <Monitor_Buttons+0x110>
        // ใช้ previous_state/current_state เดิม แต่ต้องนิ่งครบเวลา
        if (raw[i] != g_buttons[i].stable_reading) {
 80011ea:	1d3a      	adds	r2, r7, #4
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4413      	add	r3, r2
 80011f0:	7819      	ldrb	r1, [r3, #0]
 80011f2:	482f      	ldr	r0, [pc, #188]	@ (80012b0 <Monitor_Buttons+0x128>)
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	4613      	mov	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4403      	add	r3, r0
 8001200:	3308      	adds	r3, #8
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4299      	cmp	r1, r3
 8001206:	d044      	beq.n	8001292 <Monitor_Buttons+0x10a>
            // มีการเปลี่ยน -> เริ่มจับเวลา
            if ((now - g_buttons[i].last_change_time) >= BUTTON_DEBOUNCE_MS) {
 8001208:	4929      	ldr	r1, [pc, #164]	@ (80012b0 <Monitor_Buttons+0x128>)
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	4613      	mov	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	440b      	add	r3, r1
 8001216:	3304      	adds	r3, #4
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b31      	cmp	r3, #49	@ 0x31
 8001220:	d937      	bls.n	8001292 <Monitor_Buttons+0x10a>
                g_buttons[i].stable_reading = raw[i];
 8001222:	1d3a      	adds	r2, r7, #4
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4413      	add	r3, r2
 8001228:	7818      	ldrb	r0, [r3, #0]
 800122a:	4921      	ldr	r1, [pc, #132]	@ (80012b0 <Monitor_Buttons+0x128>)
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	440b      	add	r3, r1
 8001238:	3308      	adds	r3, #8
 800123a:	4602      	mov	r2, r0
 800123c:	701a      	strb	r2, [r3, #0]
                g_buttons[i].previous_state = g_buttons[i].current_state;
 800123e:	491c      	ldr	r1, [pc, #112]	@ (80012b0 <Monitor_Buttons+0x128>)
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	4613      	mov	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	4413      	add	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	440b      	add	r3, r1
 800124c:	3301      	adds	r3, #1
 800124e:	7818      	ldrb	r0, [r3, #0]
 8001250:	4917      	ldr	r1, [pc, #92]	@ (80012b0 <Monitor_Buttons+0x128>)
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	4602      	mov	r2, r0
 8001260:	701a      	strb	r2, [r3, #0]
                g_buttons[i].current_state  = raw[i];
 8001262:	1d3a      	adds	r2, r7, #4
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	7818      	ldrb	r0, [r3, #0]
 800126a:	4911      	ldr	r1, [pc, #68]	@ (80012b0 <Monitor_Buttons+0x128>)
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	440b      	add	r3, r1
 8001278:	3301      	adds	r3, #1
 800127a:	4602      	mov	r2, r0
 800127c:	701a      	strb	r2, [r3, #0]
                g_buttons[i].last_change_time = now;
 800127e:	490c      	ldr	r1, [pc, #48]	@ (80012b0 <Monitor_Buttons+0x128>)
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	440b      	add	r3, r1
 800128c:	3304      	adds	r3, #4
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	3301      	adds	r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2b03      	cmp	r3, #3
 800129c:	dda5      	ble.n	80011ea <Monitor_Buttons+0x62>
            }
        }
        // Don't reset last_change_time when stable - needed for long press detection
    }
}
 800129e:	bf00      	nop
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40020000 	.word	0x40020000
 80012ac:	40020400 	.word	0x40020400
 80012b0:	200000cc 	.word	0x200000cc

080012b4 <Monitor_ADC>:


void Monitor_ADC(void) {
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
    /* ADC handled via interrupt */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <LED_SetPattern>:

/* ============================================================================
 * Hardware Control
 * ============================================================================ */
void LED_SetPattern(uint8_t pattern) {
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
    (pattern & 0x01) ? (LED1_PORT->BSRR = (1 << LED1_PIN)) :
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <LED_SetPattern+0x1c>
 80012d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001344 <LED_SetPattern+0x80>)
 80012da:	2220      	movs	r2, #32
 80012dc:	619a      	str	r2, [r3, #24]
 80012de:	e003      	b.n	80012e8 <LED_SetPattern+0x24>
                       (LED1_PORT->BSRR = (1 << (LED1_PIN + 16)));
 80012e0:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <LED_SetPattern+0x80>)
 80012e2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80012e6:	619a      	str	r2, [r3, #24]
    (pattern & 0x02) ? (LED2_PORT->BSRR = (1 << LED2_PIN)) :
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <LED_SetPattern+0x36>
 80012f2:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <LED_SetPattern+0x80>)
 80012f4:	2240      	movs	r2, #64	@ 0x40
 80012f6:	619a      	str	r2, [r3, #24]
 80012f8:	e003      	b.n	8001302 <LED_SetPattern+0x3e>
                       (LED2_PORT->BSRR = (1 << (LED2_PIN + 16)));
 80012fa:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <LED_SetPattern+0x80>)
 80012fc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001300:	619a      	str	r2, [r3, #24]
    (pattern & 0x04) ? (LED3_PORT->BSRR = (1 << LED3_PIN)) :
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <LED_SetPattern+0x50>
 800130c:	4b0d      	ldr	r3, [pc, #52]	@ (8001344 <LED_SetPattern+0x80>)
 800130e:	2280      	movs	r2, #128	@ 0x80
 8001310:	619a      	str	r2, [r3, #24]
 8001312:	e003      	b.n	800131c <LED_SetPattern+0x58>
                       (LED3_PORT->BSRR = (1 << (LED3_PIN + 16)));
 8001314:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <LED_SetPattern+0x80>)
 8001316:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800131a:	619a      	str	r2, [r3, #24]
    (pattern & 0x08) ? (LED4_PORT->BSRR = (1 << LED4_PIN)) :
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <LED_SetPattern+0x6a>
 8001326:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <LED_SetPattern+0x84>)
 8001328:	2240      	movs	r2, #64	@ 0x40
 800132a:	619a      	str	r2, [r3, #24]
                       (LED4_PORT->BSRR = (1 << (LED4_PIN + 16)));
}
 800132c:	e003      	b.n	8001336 <LED_SetPattern+0x72>
                       (LED4_PORT->BSRR = (1 << (LED4_PIN + 16)));
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <LED_SetPattern+0x84>)
 8001330:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001334:	619a      	str	r2, [r3, #24]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40020000 	.word	0x40020000
 8001348:	40020400 	.word	0x40020400

0800134c <SevenSeg_Display>:

void SevenSeg_Display(uint8_t digit) {
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
    if(digit > 9) return;
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	2b09      	cmp	r3, #9
 800135a:	d837      	bhi.n	80013cc <SevenSeg_Display+0x80>
    (digit & 0x01) ? (BCD_2_0_PORT->BSRR = (1 << BCD_2_0_PIN)) :
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <SevenSeg_Display+0x22>
 8001366:	4b1c      	ldr	r3, [pc, #112]	@ (80013d8 <SevenSeg_Display+0x8c>)
 8001368:	2280      	movs	r2, #128	@ 0x80
 800136a:	619a      	str	r2, [r3, #24]
 800136c:	e003      	b.n	8001376 <SevenSeg_Display+0x2a>
                     (BCD_2_0_PORT->BSRR = (1 << (BCD_2_0_PIN + 16)));
 800136e:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <SevenSeg_Display+0x8c>)
 8001370:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001374:	619a      	str	r2, [r3, #24]
    (digit & 0x02) ? (BCD_2_1_PORT->BSRR = (1 << BCD_2_1_PIN)) :
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d004      	beq.n	800138a <SevenSeg_Display+0x3e>
 8001380:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <SevenSeg_Display+0x90>)
 8001382:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001386:	619a      	str	r2, [r3, #24]
 8001388:	e003      	b.n	8001392 <SevenSeg_Display+0x46>
                     (BCD_2_1_PORT->BSRR = (1 << (BCD_2_1_PIN + 16)));
 800138a:	4b14      	ldr	r3, [pc, #80]	@ (80013dc <SevenSeg_Display+0x90>)
 800138c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001390:	619a      	str	r2, [r3, #24]
    (digit & 0x04) ? (BCD_2_2_PORT->BSRR = (1 << BCD_2_2_PIN)) :
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	d004      	beq.n	80013a6 <SevenSeg_Display+0x5a>
 800139c:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <SevenSeg_Display+0x94>)
 800139e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013a2:	619a      	str	r2, [r3, #24]
 80013a4:	e003      	b.n	80013ae <SevenSeg_Display+0x62>
                     (BCD_2_2_PORT->BSRR = (1 << (BCD_2_2_PIN + 16)));
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <SevenSeg_Display+0x94>)
 80013a8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013ac:	619a      	str	r2, [r3, #24]
    (digit & 0x08) ? (BCD_2_3_PORT->BSRR = (1 << BCD_2_3_PIN)) :
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d004      	beq.n	80013c2 <SevenSeg_Display+0x76>
 80013b8:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <SevenSeg_Display+0x90>)
 80013ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013be:	619a      	str	r2, [r3, #24]
 80013c0:	e005      	b.n	80013ce <SevenSeg_Display+0x82>
                     (BCD_2_3_PORT->BSRR = (1 << (BCD_2_3_PIN + 16)));
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <SevenSeg_Display+0x90>)
 80013c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80013c8:	619a      	str	r2, [r3, #24]
 80013ca:	e000      	b.n	80013ce <SevenSeg_Display+0x82>
    if(digit > 9) return;
 80013cc:	bf00      	nop
}
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	40020800 	.word	0x40020800
 80013dc:	40020000 	.word	0x40020000
 80013e0:	40020400 	.word	0x40020400

080013e4 <ADC_IRQHandler>:

/* ============================================================================
 * Interrupt Handler
 * ============================================================================ */
void ADC_IRQHandler(void) {
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
    if(ADC1->SR & ADC_SR_EOC) {
 80013e8:	4b20      	ldr	r3, [pc, #128]	@ (800146c <ADC_IRQHandler+0x88>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d035      	beq.n	8001460 <ADC_IRQHandler+0x7c>
        g_adc_values[g_current_adc_channel] = ADC1->DR;
 80013f4:	4b1d      	ldr	r3, [pc, #116]	@ (800146c <ADC_IRQHandler+0x88>)
 80013f6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80013f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001470 <ADC_IRQHandler+0x8c>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	461a      	mov	r2, r3
 8001400:	b289      	uxth	r1, r1
 8001402:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <ADC_IRQHandler+0x90>)
 8001404:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        g_current_adc_channel = (g_current_adc_channel + 1) % 3;
 8001408:	4b19      	ldr	r3, [pc, #100]	@ (8001470 <ADC_IRQHandler+0x8c>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <ADC_IRQHandler+0x94>)
 8001412:	fb83 3102 	smull	r3, r1, r3, r2
 8001416:	17d3      	asrs	r3, r2, #31
 8001418:	1ac9      	subs	r1, r1, r3
 800141a:	460b      	mov	r3, r1
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	440b      	add	r3, r1
 8001420:	1ad1      	subs	r1, r2, r3
 8001422:	b2ca      	uxtb	r2, r1
 8001424:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <ADC_IRQHandler+0x8c>)
 8001426:	701a      	strb	r2, [r3, #0]
        ADC1->SQR3 = (ADC1->SQR3 & ~ADC_SQR3_SQ1) |
 8001428:	4b10      	ldr	r3, [pc, #64]	@ (800146c <ADC_IRQHandler+0x88>)
 800142a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800142c:	f023 021f 	bic.w	r2, r3, #31
                     (g_current_adc_channel == 0 ? POT_PIN :
 8001430:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <ADC_IRQHandler+0x8c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d008      	beq.n	800144c <ADC_IRQHandler+0x68>
                     (g_current_adc_channel == 1 ? TEMP_PIN : LIGHT_PIN));
 800143a:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <ADC_IRQHandler+0x8c>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b2db      	uxtb	r3, r3
                     (g_current_adc_channel == 0 ? POT_PIN :
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <ADC_IRQHandler+0x64>
 8001444:	2301      	movs	r3, #1
 8001446:	e002      	b.n	800144e <ADC_IRQHandler+0x6a>
 8001448:	2300      	movs	r3, #0
 800144a:	e000      	b.n	800144e <ADC_IRQHandler+0x6a>
 800144c:	2304      	movs	r3, #4
        ADC1->SQR3 = (ADC1->SQR3 & ~ADC_SQR3_SQ1) |
 800144e:	4907      	ldr	r1, [pc, #28]	@ (800146c <ADC_IRQHandler+0x88>)
 8001450:	4313      	orrs	r3, r2
 8001452:	634b      	str	r3, [r1, #52]	@ 0x34
        ADC1->CR2 |= ADC_CR2_SWSTART;
 8001454:	4b05      	ldr	r3, [pc, #20]	@ (800146c <ADC_IRQHandler+0x88>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	4a04      	ldr	r2, [pc, #16]	@ (800146c <ADC_IRQHandler+0x88>)
 800145a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800145e:	6093      	str	r3, [r2, #8]
    }
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40012000 	.word	0x40012000
 8001470:	20000102 	.word	0x20000102
 8001474:	200000fc 	.word	0x200000fc
 8001478:	55555556 	.word	0x55555556

0800147c <Buzzer_Init>:

void Buzzer_Init(void) {
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;  // เปิด clock ของพอร์ต C
 8001480:	4b28      	ldr	r3, [pc, #160]	@ (8001524 <Buzzer_Init+0xa8>)
 8001482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001484:	4a27      	ldr	r2, [pc, #156]	@ (8001524 <Buzzer_Init+0xa8>)
 8001486:	f043 0304 	orr.w	r3, r3, #4
 800148a:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;   // ใช้ TIM3 เหมือนเดิม
 800148c:	4b25      	ldr	r3, [pc, #148]	@ (8001524 <Buzzer_Init+0xa8>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	4a24      	ldr	r2, [pc, #144]	@ (8001524 <Buzzer_Init+0xa8>)
 8001492:	f043 0302 	orr.w	r3, r3, #2
 8001496:	6413      	str	r3, [r2, #64]	@ 0x40

    // PC9 -> AF2 (TIM3_CH4)
    GPIOC->MODER &= ~(3u << (BUZZER_PIN * 2));
 8001498:	4b23      	ldr	r3, [pc, #140]	@ (8001528 <Buzzer_Init+0xac>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a22      	ldr	r2, [pc, #136]	@ (8001528 <Buzzer_Init+0xac>)
 800149e:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80014a2:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |=  (2u << (BUZZER_PIN * 2));    // Alternate function
 80014a4:	4b20      	ldr	r3, [pc, #128]	@ (8001528 <Buzzer_Init+0xac>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001528 <Buzzer_Init+0xac>)
 80014aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80014ae:	6013      	str	r3, [r2, #0]
    GPIOC->AFR[1] &= ~(0xFu << ((BUZZER_PIN - 8) * 4));
 80014b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001528 <Buzzer_Init+0xac>)
 80014b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001528 <Buzzer_Init+0xac>)
 80014b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80014ba:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOC->AFR[1] |=  (2u   << ((BUZZER_PIN - 8) * 4)); // AF2 = TIM3
 80014bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001528 <Buzzer_Init+0xac>)
 80014be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c0:	4a19      	ldr	r2, [pc, #100]	@ (8001528 <Buzzer_Init+0xac>)
 80014c2:	f043 0320 	orr.w	r3, r3, #32
 80014c6:	6253      	str	r3, [r2, #36]	@ 0x24

    // ตั้งค่า Timer3 channel 4 เป็น PWM
    TIM3->PSC  = 83;        // 1 MHz tick (84MHz / 84)
 80014c8:	4b18      	ldr	r3, [pc, #96]	@ (800152c <Buzzer_Init+0xb0>)
 80014ca:	2253      	movs	r2, #83	@ 0x53
 80014cc:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR  = 1000;      // ค่าเริ่มต้น ~1kHz
 80014ce:	4b17      	ldr	r3, [pc, #92]	@ (800152c <Buzzer_Init+0xb0>)
 80014d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM3->CCR4 = 0;         // duty 0% (เงียบ)
 80014d6:	4b15      	ldr	r3, [pc, #84]	@ (800152c <Buzzer_Init+0xb0>)
 80014d8:	2200      	movs	r2, #0
 80014da:	641a      	str	r2, [r3, #64]	@ 0x40

    TIM3->CCMR2 &= ~(7u << 12);          // เคลียร์ OC4M
 80014dc:	4b13      	ldr	r3, [pc, #76]	@ (800152c <Buzzer_Init+0xb0>)
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	4a12      	ldr	r2, [pc, #72]	@ (800152c <Buzzer_Init+0xb0>)
 80014e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80014e6:	61d3      	str	r3, [r2, #28]
    TIM3->CCMR2 |=  (6u << 12);          // PWM mode 1
 80014e8:	4b10      	ldr	r3, [pc, #64]	@ (800152c <Buzzer_Init+0xb0>)
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	4a0f      	ldr	r2, [pc, #60]	@ (800152c <Buzzer_Init+0xb0>)
 80014ee:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80014f2:	61d3      	str	r3, [r2, #28]
    TIM3->CCMR2 |=  TIM_CCMR2_OC4PE;     // preload enable
 80014f4:	4b0d      	ldr	r3, [pc, #52]	@ (800152c <Buzzer_Init+0xb0>)
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	4a0c      	ldr	r2, [pc, #48]	@ (800152c <Buzzer_Init+0xb0>)
 80014fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014fe:	61d3      	str	r3, [r2, #28]

    TIM3->CCER  |=  TIM_CCER_CC4E;       // เปิด channel 4 output
 8001500:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <Buzzer_Init+0xb0>)
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	4a09      	ldr	r2, [pc, #36]	@ (800152c <Buzzer_Init+0xb0>)
 8001506:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800150a:	6213      	str	r3, [r2, #32]
    TIM3->CR1   |=  TIM_CR1_ARPE | TIM_CR1_CEN;
 800150c:	4b07      	ldr	r3, [pc, #28]	@ (800152c <Buzzer_Init+0xb0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a06      	ldr	r2, [pc, #24]	@ (800152c <Buzzer_Init+0xb0>)
 8001512:	f043 0381 	orr.w	r3, r3, #129	@ 0x81
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40020800 	.word	0x40020800
 800152c:	40000400 	.word	0x40000400

08001530 <Buzzer_Play>:


void Buzzer_Play(uint32_t freq_hz, uint8_t duty_percent) {
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	70fb      	strb	r3, [r7, #3]
    if (freq_hz == 0 || duty_percent == 0) { TIM3->CCR4 = 0; return; }
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <Buzzer_Play+0x18>
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d103      	bne.n	8001550 <Buzzer_Play+0x20>
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <Buzzer_Play+0x60>)
 800154a:	2200      	movs	r2, #0
 800154c:	641a      	str	r2, [r3, #64]	@ 0x40
 800154e:	e01a      	b.n	8001586 <Buzzer_Play+0x56>
    uint32_t arr = (1000000 / freq_hz) - 1;     // 1 MHz base
 8001550:	4a10      	ldr	r2, [pc, #64]	@ (8001594 <Buzzer_Play+0x64>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	fbb2 f3f3 	udiv	r3, r2, r3
 8001558:	3b01      	subs	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
    if (arr > 65535) arr = 65535;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001562:	d302      	bcc.n	800156a <Buzzer_Play+0x3a>
 8001564:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001568:	60fb      	str	r3, [r7, #12]
    TIM3->ARR  = arr;
 800156a:	4a09      	ldr	r2, [pc, #36]	@ (8001590 <Buzzer_Play+0x60>)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM3->CCR4 = (arr + 1) * duty_percent / 100;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	3301      	adds	r3, #1
 8001574:	78fa      	ldrb	r2, [r7, #3]
 8001576:	fb02 f303 	mul.w	r3, r2, r3
 800157a:	4a05      	ldr	r2, [pc, #20]	@ (8001590 <Buzzer_Play+0x60>)
 800157c:	4906      	ldr	r1, [pc, #24]	@ (8001598 <Buzzer_Play+0x68>)
 800157e:	fba1 1303 	umull	r1, r3, r1, r3
 8001582:	095b      	lsrs	r3, r3, #5
 8001584:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	40000400 	.word	0x40000400
 8001594:	000f4240 	.word	0x000f4240
 8001598:	51eb851f 	.word	0x51eb851f

0800159c <Buzzer_Stop>:

void Buzzer_Stop(void) {
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
    TIM3->CCR4 = 0;
 80015a0:	4b03      	ldr	r3, [pc, #12]	@ (80015b0 <Buzzer_Stop+0x14>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	40000400 	.word	0x40000400

080015b4 <__NVIC_SetPriority>:
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	6039      	str	r1, [r7, #0]
 80015be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	db0a      	blt.n	80015de <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	490c      	ldr	r1, [pc, #48]	@ (8001600 <__NVIC_SetPriority+0x4c>)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	0112      	lsls	r2, r2, #4
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	440b      	add	r3, r1
 80015d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80015dc:	e00a      	b.n	80015f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4908      	ldr	r1, [pc, #32]	@ (8001604 <__NVIC_SetPriority+0x50>)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	3b04      	subs	r3, #4
 80015ec:	0112      	lsls	r2, r2, #4
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	440b      	add	r3, r1
 80015f2:	761a      	strb	r2, [r3, #24]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000e100 	.word	0xe000e100
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001618:	d301      	bcc.n	800161e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161a:	2301      	movs	r3, #1
 800161c:	e00f      	b.n	800163e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161e:	4a0a      	ldr	r2, [pc, #40]	@ (8001648 <SysTick_Config+0x40>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001626:	210f      	movs	r1, #15
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	f7ff ffc2 	bl	80015b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001630:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <SysTick_Config+0x40>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001636:	4b04      	ldr	r3, [pc, #16]	@ (8001648 <SysTick_Config+0x40>)
 8001638:	2207      	movs	r2, #7
 800163a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	e000e010 	.word	0xe000e010

0800164c <main>:
#include "utils.h"

/* ============================================================================
 * Main Function
 * ============================================================================ */
int main(void) {
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
    // Initialize hardware
    SystemClock_Config();
 8001650:	f7ff fc54 	bl	8000efc <SystemClock_Config>
    GPIO_Init();
 8001654:	f7ff fc98 	bl	8000f88 <GPIO_Init>
    USART2_Init();
 8001658:	f7ff fd50 	bl	80010fc <USART2_Init>
    SysTick_Config(SystemCoreClock / 1000); // 1ms ticks
 800165c:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <main+0x60>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a13      	ldr	r2, [pc, #76]	@ (80016b0 <main+0x64>)
 8001662:	fba2 2303 	umull	r2, r3, r2, r3
 8001666:	099b      	lsrs	r3, r3, #6
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ffcd 	bl	8001608 <SysTick_Config>
    NVIC_Init();
 800166e:	f7ff fd63 	bl	8001138 <NVIC_Init>
    ADC_Init();
 8001672:	f7ff fd17 	bl	80010a4 <ADC_Init>
    Buzzer_Init();
 8001676:	f7ff ff01 	bl	800147c <Buzzer_Init>

    // Initialize OLED display
    oled_init();
 800167a:	f000 fc65 	bl	8001f48 <oled_init>
    oled_clear();
 800167e:	f000 fc3d 	bl	8001efc <oled_clear>

    // Mark system as initialized
    g_system_initialized = 1;
 8001682:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <main+0x68>)
 8001684:	2201      	movs	r2, #1
 8001686:	701a      	strb	r2, [r3, #0]

    // Start ADC conversions
    ADC_StartConversion();
 8001688:	f7ff fd66 	bl	8001158 <ADC_StartConversion>
    Delay_ms(10);
 800168c:	200a      	movs	r0, #10
 800168e:	f000 fedb 	bl	8002448 <Delay_ms>

    // Initialize game
    Game_Init();
 8001692:	f7ff fb2f 	bl	8000cf4 <Game_Init>

    // Main loop
    while(1) {
        Monitor_Buttons();
 8001696:	f7ff fd77 	bl	8001188 <Monitor_Buttons>
        Monitor_ADC();
 800169a:	f7ff fe0b 	bl	80012b4 <Monitor_ADC>
        Game_Run();
 800169e:	f7ff fb51 	bl	8000d44 <Game_Run>
        Delay_ms(1);
 80016a2:	2001      	movs	r0, #1
 80016a4:	f000 fed0 	bl	8002448 <Delay_ms>
        Monitor_Buttons();
 80016a8:	bf00      	nop
 80016aa:	e7f4      	b.n	8001696 <main+0x4a>
 80016ac:	20000004 	.word	0x20000004
 80016b0:	10624dd3 	.word	0x10624dd3
 80016b4:	2000018c 	.word	0x2000018c

080016b8 <I2C1_Init_OLED>:

/* ============================================================================
 * I2C Low-Level Functions
 * ============================================================================
 */
static void I2C1_Init_OLED(void) {
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80016bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001774 <I2C1_Init_OLED+0xbc>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c0:	4a2c      	ldr	r2, [pc, #176]	@ (8001774 <I2C1_Init_OLED+0xbc>)
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	6313      	str	r3, [r2, #48]	@ 0x30

  // PB8, PB9 AF4, Open-Drain, Pull-Up, High speed
  GPIOB->MODER &= ~((3u << (8 * 2)) | (3u << (9 * 2)));
 80016c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001778 <I2C1_Init_OLED+0xc0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a2a      	ldr	r2, [pc, #168]	@ (8001778 <I2C1_Init_OLED+0xc0>)
 80016ce:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80016d2:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= ((2u << (8 * 2)) | (2u << (9 * 2)));
 80016d4:	4b28      	ldr	r3, [pc, #160]	@ (8001778 <I2C1_Init_OLED+0xc0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a27      	ldr	r2, [pc, #156]	@ (8001778 <I2C1_Init_OLED+0xc0>)
 80016da:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 80016de:	6013      	str	r3, [r2, #0]
  GPIOB->OTYPER |= (1u << 8) | (1u << 9);
 80016e0:	4b25      	ldr	r3, [pc, #148]	@ (8001778 <I2C1_Init_OLED+0xc0>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	4a24      	ldr	r2, [pc, #144]	@ (8001778 <I2C1_Init_OLED+0xc0>)
 80016e6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80016ea:	6053      	str	r3, [r2, #4]
  GPIOB->OSPEEDR |= (3u << (8 * 2)) | (3u << (9 * 2));
 80016ec:	4b22      	ldr	r3, [pc, #136]	@ (8001778 <I2C1_Init_OLED+0xc0>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	4a21      	ldr	r2, [pc, #132]	@ (8001778 <I2C1_Init_OLED+0xc0>)
 80016f2:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 80016f6:	6093      	str	r3, [r2, #8]
  GPIOB->PUPDR &= ~((3u << (8 * 2)) | (3u << (9 * 2)));
 80016f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001778 <I2C1_Init_OLED+0xc0>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001778 <I2C1_Init_OLED+0xc0>)
 80016fe:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8001702:	60d3      	str	r3, [r2, #12]
  GPIOB->PUPDR |= ((1u << (8 * 2)) | (1u << (9 * 2)));
 8001704:	4b1c      	ldr	r3, [pc, #112]	@ (8001778 <I2C1_Init_OLED+0xc0>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	4a1b      	ldr	r2, [pc, #108]	@ (8001778 <I2C1_Init_OLED+0xc0>)
 800170a:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 800170e:	60d3      	str	r3, [r2, #12]
  GPIOB->AFR[1] &= ~((0xFu << 0) | (0xFu << 4));
 8001710:	4b19      	ldr	r3, [pc, #100]	@ (8001778 <I2C1_Init_OLED+0xc0>)
 8001712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001714:	4a18      	ldr	r2, [pc, #96]	@ (8001778 <I2C1_Init_OLED+0xc0>)
 8001716:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800171a:	6253      	str	r3, [r2, #36]	@ 0x24
  GPIOB->AFR[1] |= ((4u << 0) | (4u << 4));
 800171c:	4b16      	ldr	r3, [pc, #88]	@ (8001778 <I2C1_Init_OLED+0xc0>)
 800171e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001720:	4a15      	ldr	r2, [pc, #84]	@ (8001778 <I2C1_Init_OLED+0xc0>)
 8001722:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8001726:	6253      	str	r3, [r2, #36]	@ 0x24

  RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <I2C1_Init_OLED+0xbc>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172c:	4a11      	ldr	r2, [pc, #68]	@ (8001774 <I2C1_Init_OLED+0xbc>)
 800172e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001732:	6413      	str	r3, [r2, #64]	@ 0x40
  RCC->APB1RSTR |= RCC_APB1RSTR_I2C1RST;
 8001734:	4b0f      	ldr	r3, [pc, #60]	@ (8001774 <I2C1_Init_OLED+0xbc>)
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	4a0e      	ldr	r2, [pc, #56]	@ (8001774 <I2C1_Init_OLED+0xbc>)
 800173a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800173e:	6213      	str	r3, [r2, #32]
  RCC->APB1RSTR &= ~RCC_APB1RSTR_I2C1RST;
 8001740:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <I2C1_Init_OLED+0xbc>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	4a0b      	ldr	r2, [pc, #44]	@ (8001774 <I2C1_Init_OLED+0xbc>)
 8001746:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800174a:	6213      	str	r3, [r2, #32]

  I2C1->CR1 = 0;
 800174c:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <I2C1_Init_OLED+0xc4>)
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
  I2C1->CR2 = 42;  // APB1 = 42 MHz
 8001752:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <I2C1_Init_OLED+0xc4>)
 8001754:	222a      	movs	r2, #42	@ 0x2a
 8001756:	605a      	str	r2, [r3, #4]
  I2C1->CCR = 210; // 100 kHz
 8001758:	4b08      	ldr	r3, [pc, #32]	@ (800177c <I2C1_Init_OLED+0xc4>)
 800175a:	22d2      	movs	r2, #210	@ 0xd2
 800175c:	61da      	str	r2, [r3, #28]
  I2C1->TRISE = 43;
 800175e:	4b07      	ldr	r3, [pc, #28]	@ (800177c <I2C1_Init_OLED+0xc4>)
 8001760:	222b      	movs	r2, #43	@ 0x2b
 8001762:	621a      	str	r2, [r3, #32]
  I2C1->CR1 = I2C_CR1_PE;
 8001764:	4b05      	ldr	r3, [pc, #20]	@ (800177c <I2C1_Init_OLED+0xc4>)
 8001766:	2201      	movs	r2, #1
 8001768:	601a      	str	r2, [r3, #0]
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	40023800 	.word	0x40023800
 8001778:	40020400 	.word	0x40020400
 800177c:	40005400 	.word	0x40005400

08001780 <i2c_start>:

static void i2c_start(uint8_t addr) {
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
  I2C1->CR1 |= I2C_CR1_START;
 800178a:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <i2c_start+0x54>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a11      	ldr	r2, [pc, #68]	@ (80017d4 <i2c_start+0x54>)
 8001790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001794:	6013      	str	r3, [r2, #0]
  while (!(I2C1->SR1 & I2C_SR1_SB)) {
 8001796:	bf00      	nop
 8001798:	4b0e      	ldr	r3, [pc, #56]	@ (80017d4 <i2c_start+0x54>)
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0f9      	beq.n	8001798 <i2c_start+0x18>
  }
  (void)I2C1->SR1;
 80017a4:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <i2c_start+0x54>)
 80017a6:	695b      	ldr	r3, [r3, #20]
  I2C1->DR = (uint8_t)(addr << 1);
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <i2c_start+0x54>)
 80017b0:	611a      	str	r2, [r3, #16]
  while (!(I2C1->SR1 & I2C_SR1_ADDR)) {
 80017b2:	bf00      	nop
 80017b4:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <i2c_start+0x54>)
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0f9      	beq.n	80017b4 <i2c_start+0x34>
  }
  (void)I2C1->SR1;
 80017c0:	4b04      	ldr	r3, [pc, #16]	@ (80017d4 <i2c_start+0x54>)
 80017c2:	695b      	ldr	r3, [r3, #20]
  (void)I2C1->SR2;
 80017c4:	4b03      	ldr	r3, [pc, #12]	@ (80017d4 <i2c_start+0x54>)
 80017c6:	699b      	ldr	r3, [r3, #24]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	40005400 	.word	0x40005400

080017d8 <i2c_w>:

static void i2c_w(uint8_t b) {
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
  while (!(I2C1->SR1 & I2C_SR1_TXE)) {
 80017e2:	bf00      	nop
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <i2c_w+0x3c>)
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f9      	beq.n	80017e4 <i2c_w+0xc>
  }
  I2C1->DR = b;
 80017f0:	4a08      	ldr	r2, [pc, #32]	@ (8001814 <i2c_w+0x3c>)
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	6113      	str	r3, [r2, #16]
  while (!(I2C1->SR1 & I2C_SR1_BTF)) {
 80017f6:	bf00      	nop
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <i2c_w+0x3c>)
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f9      	beq.n	80017f8 <i2c_w+0x20>
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40005400 	.word	0x40005400

08001818 <i2c_stop>:

static void i2c_stop(void) { I2C1->CR1 |= I2C_CR1_STOP; }
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
 800181c:	4b05      	ldr	r3, [pc, #20]	@ (8001834 <i2c_stop+0x1c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a04      	ldr	r2, [pc, #16]	@ (8001834 <i2c_stop+0x1c>)
 8001822:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40005400 	.word	0x40005400

08001838 <oled_cmd>:

/* ============================================================================
 * OLED Command/Data Functions
 * ============================================================================
 */
static void oled_cmd(uint8_t c) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  i2c_start(OLED_ADDR);
 8001842:	203c      	movs	r0, #60	@ 0x3c
 8001844:	f7ff ff9c 	bl	8001780 <i2c_start>
  i2c_w(0x00);
 8001848:	2000      	movs	r0, #0
 800184a:	f7ff ffc5 	bl	80017d8 <i2c_w>
  i2c_w(c);
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ffc1 	bl	80017d8 <i2c_w>
  i2c_stop();
 8001856:	f7ff ffdf 	bl	8001818 <i2c_stop>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <oled_data>:

static void oled_data(const uint8_t *p, uint16_t n) {
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	460b      	mov	r3, r1
 800186c:	807b      	strh	r3, [r7, #2]
  i2c_start(OLED_ADDR);
 800186e:	203c      	movs	r0, #60	@ 0x3c
 8001870:	f7ff ff86 	bl	8001780 <i2c_start>
  i2c_w(0x40);
 8001874:	2040      	movs	r0, #64	@ 0x40
 8001876:	f7ff ffaf 	bl	80017d8 <i2c_w>
  while (n--)
 800187a:	e006      	b.n	800188a <oled_data+0x28>
    i2c_w(*p++);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ffa7 	bl	80017d8 <i2c_w>
  while (n--)
 800188a:	887b      	ldrh	r3, [r7, #2]
 800188c:	1e5a      	subs	r2, r3, #1
 800188e:	807a      	strh	r2, [r7, #2]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f3      	bne.n	800187c <oled_data+0x1a>
  i2c_stop();
 8001894:	f7ff ffc0 	bl	8001818 <i2c_stop>
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <oled_setpos>:

static void oled_setpos(uint8_t page, uint8_t col) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	460a      	mov	r2, r1
 80018aa:	71fb      	strb	r3, [r7, #7]
 80018ac:	4613      	mov	r3, r2
 80018ae:	71bb      	strb	r3, [r7, #6]
  col += OLED_COL_OFFSET;
 80018b0:	79bb      	ldrb	r3, [r7, #6]
 80018b2:	3302      	adds	r3, #2
 80018b4:	71bb      	strb	r3, [r7, #6]
  oled_cmd(0xB0 | (page & 7));
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ffb5 	bl	8001838 <oled_cmd>
  oled_cmd(0x00 | (col & 0x0F));
 80018ce:	79bb      	ldrb	r3, [r7, #6]
 80018d0:	f003 030f 	and.w	r3, r3, #15
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff ffae 	bl	8001838 <oled_cmd>
  oled_cmd(0x10 | (col >> 4));
 80018dc:	79bb      	ldrb	r3, [r7, #6]
 80018de:	091b      	lsrs	r3, r3, #4
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	f043 0310 	orr.w	r3, r3, #16
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ffa5 	bl	8001838 <oled_cmd>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <oled_draw_icon8_hflip>:
  oled_data(icon8, 8);
}

/* Horizontal flip for 8-col icons (fix mirrored hearts) */
static void oled_draw_icon8_hflip(uint8_t x, uint8_t page,
                                  const uint8_t *icon8) {
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	603a      	str	r2, [r7, #0]
 8001900:	71fb      	strb	r3, [r7, #7]
 8001902:	460b      	mov	r3, r1
 8001904:	71bb      	strb	r3, [r7, #6]
  uint8_t buf[8];
  for (int i = 0; i < 8; ++i)
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	e00f      	b.n	800192c <oled_draw_icon8_hflip+0x36>
    buf[i] = icon8[7 - i];
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f1c3 0307 	rsb	r3, r3, #7
 8001912:	461a      	mov	r2, r3
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	4413      	add	r3, r2
 8001918:	7819      	ldrb	r1, [r3, #0]
 800191a:	f107 020c 	add.w	r2, r7, #12
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	4413      	add	r3, r2
 8001922:	460a      	mov	r2, r1
 8001924:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 8; ++i)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	3301      	adds	r3, #1
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	2b07      	cmp	r3, #7
 8001930:	ddec      	ble.n	800190c <oled_draw_icon8_hflip+0x16>
  oled_setpos(page, x);
 8001932:	79fa      	ldrb	r2, [r7, #7]
 8001934:	79bb      	ldrb	r3, [r7, #6]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ffb1 	bl	80018a0 <oled_setpos>
  oled_data(buf, 8);
 800193e:	f107 030c 	add.w	r3, r7, #12
 8001942:	2108      	movs	r1, #8
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff8c 	bl	8001862 <oled_data>
}
 800194a:	bf00      	nop
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <oled_draw_bordered_progress>:

/* Bordered proportional progress (1 page tall) */
static void oled_draw_bordered_progress(uint8_t x, uint8_t page,
                                        uint8_t width_cols, uint8_t value,
                                        uint8_t max) {
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	4604      	mov	r4, r0
 800195c:	4608      	mov	r0, r1
 800195e:	4611      	mov	r1, r2
 8001960:	461a      	mov	r2, r3
 8001962:	4623      	mov	r3, r4
 8001964:	71fb      	strb	r3, [r7, #7]
 8001966:	4603      	mov	r3, r0
 8001968:	71bb      	strb	r3, [r7, #6]
 800196a:	460b      	mov	r3, r1
 800196c:	717b      	strb	r3, [r7, #5]
 800196e:	4613      	mov	r3, r2
 8001970:	713b      	strb	r3, [r7, #4]
  if (width_cols < 4)
 8001972:	797b      	ldrb	r3, [r7, #5]
 8001974:	2b03      	cmp	r3, #3
 8001976:	d94b      	bls.n	8001a10 <oled_draw_bordered_progress+0xbc>
    return;
  if (max == 0)
 8001978:	f897 3020 	ldrb.w	r3, [r7, #32]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d102      	bne.n	8001986 <oled_draw_bordered_progress+0x32>
    max = 1;
 8001980:	2301      	movs	r3, #1
 8001982:	f887 3020 	strb.w	r3, [r7, #32]
  if (value > max)
 8001986:	793a      	ldrb	r2, [r7, #4]
 8001988:	f897 3020 	ldrb.w	r3, [r7, #32]
 800198c:	429a      	cmp	r2, r3
 800198e:	d902      	bls.n	8001996 <oled_draw_bordered_progress+0x42>
    value = max;
 8001990:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001994:	713b      	strb	r3, [r7, #4]

  static uint8_t colbuf[128];
  uint8_t w = width_cols;
 8001996:	797b      	ldrb	r3, [r7, #5]
 8001998:	73fb      	strb	r3, [r7, #15]
  if (w > sizeof(colbuf))
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	2b80      	cmp	r3, #128	@ 0x80
 800199e:	d901      	bls.n	80019a4 <oled_draw_bordered_progress+0x50>
    w = sizeof(colbuf);
 80019a0:	2380      	movs	r3, #128	@ 0x80
 80019a2:	73fb      	strb	r3, [r7, #15]

  uint8_t interior = (uint8_t)(w - 2);
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	3b02      	subs	r3, #2
 80019a8:	737b      	strb	r3, [r7, #13]
  uint8_t fill_cols = (uint8_t)((uint16_t)interior * value / max);
 80019aa:	7b7b      	ldrb	r3, [r7, #13]
 80019ac:	793a      	ldrb	r2, [r7, #4]
 80019ae:	fb03 f202 	mul.w	r2, r3, r2
 80019b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80019ba:	733b      	strb	r3, [r7, #12]

  colbuf[0] = 0x7F; // left border
 80019bc:	4b16      	ldr	r3, [pc, #88]	@ (8001a18 <oled_draw_bordered_progress+0xc4>)
 80019be:	227f      	movs	r2, #127	@ 0x7f
 80019c0:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < interior; i++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	73bb      	strb	r3, [r7, #14]
 80019c6:	e00d      	b.n	80019e4 <oled_draw_bordered_progress+0x90>
    colbuf[1 + i] = (i < fill_cols) ? 0x7E : 0x41; // filled vs empty
 80019c8:	7bba      	ldrb	r2, [r7, #14]
 80019ca:	7b3b      	ldrb	r3, [r7, #12]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d201      	bcs.n	80019d4 <oled_draw_bordered_progress+0x80>
 80019d0:	217e      	movs	r1, #126	@ 0x7e
 80019d2:	e000      	b.n	80019d6 <oled_draw_bordered_progress+0x82>
 80019d4:	2141      	movs	r1, #65	@ 0x41
 80019d6:	7bbb      	ldrb	r3, [r7, #14]
 80019d8:	3301      	adds	r3, #1
 80019da:	4a0f      	ldr	r2, [pc, #60]	@ (8001a18 <oled_draw_bordered_progress+0xc4>)
 80019dc:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < interior; i++)
 80019de:	7bbb      	ldrb	r3, [r7, #14]
 80019e0:	3301      	adds	r3, #1
 80019e2:	73bb      	strb	r3, [r7, #14]
 80019e4:	7bba      	ldrb	r2, [r7, #14]
 80019e6:	7b7b      	ldrb	r3, [r7, #13]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d3ed      	bcc.n	80019c8 <oled_draw_bordered_progress+0x74>
  colbuf[w - 1] = 0x7F;                            // right border
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	4a09      	ldr	r2, [pc, #36]	@ (8001a18 <oled_draw_bordered_progress+0xc4>)
 80019f2:	217f      	movs	r1, #127	@ 0x7f
 80019f4:	54d1      	strb	r1, [r2, r3]

  oled_setpos(page, x);
 80019f6:	79fa      	ldrb	r2, [r7, #7]
 80019f8:	79bb      	ldrb	r3, [r7, #6]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff4f 	bl	80018a0 <oled_setpos>
  oled_data(colbuf, w);
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	4619      	mov	r1, r3
 8001a08:	4803      	ldr	r0, [pc, #12]	@ (8001a18 <oled_draw_bordered_progress+0xc4>)
 8001a0a:	f7ff ff2a 	bl	8001862 <oled_data>
 8001a0e:	e000      	b.n	8001a12 <oled_draw_bordered_progress+0xbe>
    return;
 8001a10:	bf00      	nop
}
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd90      	pop	{r4, r7, pc}
 8001a18:	20000104 	.word	0x20000104

08001a1c <oled_clear_region>:

/* Clear a specific region (one page: [col_start, col_end) ) */
static void oled_clear_region(uint8_t page, uint8_t col_start,
                              uint8_t col_end) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b0a4      	sub	sp, #144	@ 0x90
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
 8001a26:	460b      	mov	r3, r1
 8001a28:	71bb      	strb	r3, [r7, #6]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	717b      	strb	r3, [r7, #5]
  if (col_end <= col_start)
 8001a2e:	797a      	ldrb	r2, [r7, #5]
 8001a30:	79bb      	ldrb	r3, [r7, #6]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d923      	bls.n	8001a7e <oled_clear_region+0x62>
    return;
  uint8_t w = (uint8_t)(col_end - col_start);
 8001a36:	797a      	ldrb	r2, [r7, #5]
 8001a38:	79bb      	ldrb	r3, [r7, #6]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (w > 128)
 8001a40:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001a44:	2b80      	cmp	r3, #128	@ 0x80
 8001a46:	d902      	bls.n	8001a4e <oled_clear_region+0x32>
    w = 128;
 8001a48:	2380      	movs	r3, #128	@ 0x80
 8001a4a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint8_t z[128];
  memset(z, 0, w);
 8001a4e:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8001a52:	f107 030c 	add.w	r3, r7, #12
 8001a56:	2100      	movs	r1, #0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f001 f8bb 	bl	8002bd4 <memset>
  oled_setpos(page, col_start);
 8001a5e:	79ba      	ldrb	r2, [r7, #6]
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	4611      	mov	r1, r2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff1b 	bl	80018a0 <oled_setpos>
  oled_data(z, w);
 8001a6a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fef3 	bl	8001862 <oled_data>
 8001a7c:	e000      	b.n	8001a80 <oled_clear_region+0x64>
    return;
 8001a7e:	bf00      	nop
}
 8001a80:	3790      	adds	r7, #144	@ 0x90
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <oled_print_text>:

/* Print ASCII (5x7) starting at (x,page) */
static void oled_print_text(uint8_t x, uint8_t page, const char *s) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	603a      	str	r2, [r7, #0]
 8001a92:	71fb      	strb	r3, [r7, #7]
 8001a94:	460b      	mov	r3, r1
 8001a96:	71bb      	strb	r3, [r7, #6]
  uint8_t cx = x;
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	73fb      	strb	r3, [r7, #15]
  while (*s) {
 8001a9c:	e072      	b.n	8001b84 <oled_print_text+0xfc>
    char c = *s++;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	603a      	str	r2, [r7, #0]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	73bb      	strb	r3, [r7, #14]
    if (c == ' ') {
 8001aa8:	7bbb      	ldrb	r3, [r7, #14]
 8001aaa:	2b20      	cmp	r3, #32
 8001aac:	d10d      	bne.n	8001aca <oled_print_text+0x42>
      oled_setpos(page, cx);
 8001aae:	7bfa      	ldrb	r2, [r7, #15]
 8001ab0:	79bb      	ldrb	r3, [r7, #6]
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fef3 	bl	80018a0 <oled_setpos>
      oled_data(FONT5x7_SPACE, 6);
 8001aba:	2106      	movs	r1, #6
 8001abc:	4836      	ldr	r0, [pc, #216]	@ (8001b98 <oled_print_text+0x110>)
 8001abe:	f7ff fed0 	bl	8001862 <oled_data>
      cx += 6;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
 8001ac4:	3306      	adds	r3, #6
 8001ac6:	73fb      	strb	r3, [r7, #15]
      continue;
 8001ac8:	e05c      	b.n	8001b84 <oled_print_text+0xfc>
    }
    if (c >= 'A' && c <= 'Z') {
 8001aca:	7bbb      	ldrb	r3, [r7, #14]
 8001acc:	2b40      	cmp	r3, #64	@ 0x40
 8001ace:	d916      	bls.n	8001afe <oled_print_text+0x76>
 8001ad0:	7bbb      	ldrb	r3, [r7, #14]
 8001ad2:	2b5a      	cmp	r3, #90	@ 0x5a
 8001ad4:	d813      	bhi.n	8001afe <oled_print_text+0x76>
      oled_setpos(page, cx);
 8001ad6:	7bfa      	ldrb	r2, [r7, #15]
 8001ad8:	79bb      	ldrb	r3, [r7, #6]
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fedf 	bl	80018a0 <oled_setpos>
      oled_data(FONT5x7_LET[c - 'A'], 6);
 8001ae2:	7bbb      	ldrb	r3, [r7, #14]
 8001ae4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8001ae8:	4613      	mov	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4a2a      	ldr	r2, [pc, #168]	@ (8001b9c <oled_print_text+0x114>)
 8001af2:	4413      	add	r3, r2
 8001af4:	2106      	movs	r1, #6
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff feb3 	bl	8001862 <oled_data>
 8001afc:	e03f      	b.n	8001b7e <oled_print_text+0xf6>
    } else if (c >= '0' && c <= '9') {
 8001afe:	7bbb      	ldrb	r3, [r7, #14]
 8001b00:	2b2f      	cmp	r3, #47	@ 0x2f
 8001b02:	d916      	bls.n	8001b32 <oled_print_text+0xaa>
 8001b04:	7bbb      	ldrb	r3, [r7, #14]
 8001b06:	2b39      	cmp	r3, #57	@ 0x39
 8001b08:	d813      	bhi.n	8001b32 <oled_print_text+0xaa>
      oled_setpos(page, cx);
 8001b0a:	7bfa      	ldrb	r2, [r7, #15]
 8001b0c:	79bb      	ldrb	r3, [r7, #6]
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fec5 	bl	80018a0 <oled_setpos>
      oled_data(FONT5x7_DIGIT[c - '0'], 6);
 8001b16:	7bbb      	ldrb	r3, [r7, #14]
 8001b18:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4413      	add	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4a1e      	ldr	r2, [pc, #120]	@ (8001ba0 <oled_print_text+0x118>)
 8001b26:	4413      	add	r3, r2
 8001b28:	2106      	movs	r1, #6
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fe99 	bl	8001862 <oled_data>
 8001b30:	e025      	b.n	8001b7e <oled_print_text+0xf6>
    } else if (c == '-') {
 8001b32:	7bbb      	ldrb	r3, [r7, #14]
 8001b34:	2b2d      	cmp	r3, #45	@ 0x2d
 8001b36:	d10a      	bne.n	8001b4e <oled_print_text+0xc6>
      oled_setpos(page, cx);
 8001b38:	7bfa      	ldrb	r2, [r7, #15]
 8001b3a:	79bb      	ldrb	r3, [r7, #6]
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff feae 	bl	80018a0 <oled_setpos>
      oled_data(FONT5x7_MINUS, 6);
 8001b44:	2106      	movs	r1, #6
 8001b46:	4817      	ldr	r0, [pc, #92]	@ (8001ba4 <oled_print_text+0x11c>)
 8001b48:	f7ff fe8b 	bl	8001862 <oled_data>
 8001b4c:	e017      	b.n	8001b7e <oled_print_text+0xf6>
    } else if (c == ':') {
 8001b4e:	7bbb      	ldrb	r3, [r7, #14]
 8001b50:	2b3a      	cmp	r3, #58	@ 0x3a
 8001b52:	d10a      	bne.n	8001b6a <oled_print_text+0xe2>
      oled_setpos(page, cx);
 8001b54:	7bfa      	ldrb	r2, [r7, #15]
 8001b56:	79bb      	ldrb	r3, [r7, #6]
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fea0 	bl	80018a0 <oled_setpos>
      oled_data(FONT5x7_COLON, 6);
 8001b60:	2106      	movs	r1, #6
 8001b62:	4811      	ldr	r0, [pc, #68]	@ (8001ba8 <oled_print_text+0x120>)
 8001b64:	f7ff fe7d 	bl	8001862 <oled_data>
 8001b68:	e009      	b.n	8001b7e <oled_print_text+0xf6>
    } else {
      oled_setpos(page, cx);
 8001b6a:	7bfa      	ldrb	r2, [r7, #15]
 8001b6c:	79bb      	ldrb	r3, [r7, #6]
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fe95 	bl	80018a0 <oled_setpos>
      oled_data(FONT5x7_SPACE, 6);
 8001b76:	2106      	movs	r1, #6
 8001b78:	4807      	ldr	r0, [pc, #28]	@ (8001b98 <oled_print_text+0x110>)
 8001b7a:	f7ff fe72 	bl	8001862 <oled_data>
    }
    cx += 6;
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	3306      	adds	r3, #6
 8001b82:	73fb      	strb	r3, [r7, #15]
  while (*s) {
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d188      	bne.n	8001a9e <oled_print_text+0x16>
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	08004410 	.word	0x08004410
 8001b9c:	08004374 	.word	0x08004374
 8001ba0:	08004338 	.word	0x08004338
 8001ba4:	08004418 	.word	0x08004418
 8001ba8:	08004420 	.word	0x08004420

08001bac <oled_print_uint>:

/* Print unsigned integer with 5x7 digits */
static void oled_print_uint(uint8_t x, uint8_t page, uint32_t v) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	603a      	str	r2, [r7, #0]
 8001bb6:	71fb      	strb	r3, [r7, #7]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	71bb      	strb	r3, [r7, #6]
  char buf[12]; // enough for 32-bit
  int idx = 11;
 8001bbc:	230b      	movs	r3, #11
 8001bbe:	617b      	str	r3, [r7, #20]
  buf[idx] = 0;
 8001bc0:	f107 0208 	add.w	r2, r7, #8
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
  idx--;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	617b      	str	r3, [r7, #20]
  if (v == 0) {
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d125      	bne.n	8001c24 <oled_print_uint+0x78>
    buf[idx] = '0';
 8001bd8:	f107 0208 	add.w	r2, r7, #8
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	4413      	add	r3, r2
 8001be0:	2230      	movs	r2, #48	@ 0x30
 8001be2:	701a      	strb	r2, [r3, #0]
    idx--;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	617b      	str	r3, [r7, #20]
  }
  while (v > 0 && idx >= 0) {
 8001bea:	e01b      	b.n	8001c24 <oled_print_uint+0x78>
    buf[idx] = (char)('0' + (v % 10));
 8001bec:	6839      	ldr	r1, [r7, #0]
 8001bee:	4b17      	ldr	r3, [pc, #92]	@ (8001c4c <oled_print_uint+0xa0>)
 8001bf0:	fba3 2301 	umull	r2, r3, r3, r1
 8001bf4:	08da      	lsrs	r2, r3, #3
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	1aca      	subs	r2, r1, r3
 8001c00:	b2d3      	uxtb	r3, r2
 8001c02:	3330      	adds	r3, #48	@ 0x30
 8001c04:	b2d9      	uxtb	r1, r3
 8001c06:	f107 0208 	add.w	r2, r7, #8
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	460a      	mov	r2, r1
 8001c10:	701a      	strb	r2, [r3, #0]
    v /= 10;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	4a0d      	ldr	r2, [pc, #52]	@ (8001c4c <oled_print_uint+0xa0>)
 8001c16:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1a:	08db      	lsrs	r3, r3, #3
 8001c1c:	603b      	str	r3, [r7, #0]
    idx--;
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
  while (v > 0 && idx >= 0) {
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <oled_print_uint+0x84>
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	dadd      	bge.n	8001bec <oled_print_uint+0x40>
  }
  oled_print_text(x, page, &buf[idx + 1]);
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	3301      	adds	r3, #1
 8001c34:	f107 0208 	add.w	r2, r7, #8
 8001c38:	441a      	add	r2, r3
 8001c3a:	79b9      	ldrb	r1, [r7, #6]
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff ff22 	bl	8001a88 <oled_print_text>
}
 8001c44:	bf00      	nop
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	cccccccd 	.word	0xcccccccd

08001c50 <text_width_5x7>:

/* -------- Centering helpers (within a column range) -------- */
static uint8_t text_width_5x7(const char *s) {
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint16_t n = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	81fb      	strh	r3, [r7, #14]
  while (*s++)
 8001c5c:	e002      	b.n	8001c64 <text_width_5x7+0x14>
    n++;
 8001c5e:	89fb      	ldrh	r3, [r7, #14]
 8001c60:	3301      	adds	r3, #1
 8001c62:	81fb      	strh	r3, [r7, #14]
  while (*s++)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1f6      	bne.n	8001c5e <text_width_5x7+0xe>
  return (uint8_t)(n * 6);
 8001c70:	89fb      	ldrh	r3, [r7, #14]
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	461a      	mov	r2, r3
 8001c76:	0052      	lsls	r2, r2, #1
 8001c78:	4413      	add	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	b2db      	uxtb	r3, r3
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <oled_print_centered>:

static void oled_print_centered(uint8_t page, uint8_t col_l, uint8_t col_r,
                                const char *s) {
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b084      	sub	sp, #16
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	603b      	str	r3, [r7, #0]
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
 8001c96:	460b      	mov	r3, r1
 8001c98:	71bb      	strb	r3, [r7, #6]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	717b      	strb	r3, [r7, #5]
  uint8_t W = (uint8_t)(col_r - col_l);
 8001c9e:	797a      	ldrb	r2, [r7, #5]
 8001ca0:	79bb      	ldrb	r3, [r7, #6]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	73fb      	strb	r3, [r7, #15]
  uint8_t tw = text_width_5x7(s);
 8001ca6:	6838      	ldr	r0, [r7, #0]
 8001ca8:	f7ff ffd2 	bl	8001c50 <text_width_5x7>
 8001cac:	4603      	mov	r3, r0
 8001cae:	73bb      	strb	r3, [r7, #14]
  uint8_t x = col_l + (uint8_t)((W > tw) ? ((W - tw) / 2) : 0);
 8001cb0:	7bfa      	ldrb	r2, [r7, #15]
 8001cb2:	7bbb      	ldrb	r3, [r7, #14]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d907      	bls.n	8001cc8 <oled_print_centered+0x3e>
 8001cb8:	7bfa      	ldrb	r2, [r7, #15]
 8001cba:	7bbb      	ldrb	r3, [r7, #14]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	0fda      	lsrs	r2, r3, #31
 8001cc0:	4413      	add	r3, r2
 8001cc2:	105b      	asrs	r3, r3, #1
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	e000      	b.n	8001cca <oled_print_centered+0x40>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	79ba      	ldrb	r2, [r7, #6]
 8001ccc:	4413      	add	r3, r2
 8001cce:	737b      	strb	r3, [r7, #13]
  oled_print_text(x, page, s);
 8001cd0:	79f9      	ldrb	r1, [r7, #7]
 8001cd2:	7b7b      	ldrb	r3, [r7, #13]
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fed6 	bl	8001a88 <oled_print_text>
}
 8001cdc:	bf00      	nop
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <oled_draw_big_digit2x>:
/* ----------------- 2x scaled big digit (from 5x7) -----------------
 * Renders one digit as ~10x14 pixels (2 pages tall)
 * Each original column is duplicated horizontally; each row is doubled
 * vertically. Drawn across pages (page_top) and (page_top+1).
 */
static void oled_draw_big_digit2x(uint8_t x, uint8_t page_top, int d) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08e      	sub	sp, #56	@ 0x38
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	603a      	str	r2, [r7, #0]
 8001cee:	71fb      	strb	r3, [r7, #7]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	71bb      	strb	r3, [r7, #6]
  if (d < 0 || d > 9)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f2c0 80f9 	blt.w	8001eee <oled_draw_big_digit2x+0x20a>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	2b09      	cmp	r3, #9
 8001d00:	f300 80f5 	bgt.w	8001eee <oled_draw_big_digit2x+0x20a>
    return;
  const uint8_t *src = FONT5x7_DIGIT[d];
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	4613      	mov	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	4413      	add	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4a7a      	ldr	r2, [pc, #488]	@ (8001ef8 <oled_draw_big_digit2x+0x214>)
 8001d10:	4413      	add	r3, r2
 8001d12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // Build two page buffers of width 10 (5 cols doubled) + optional 2-col
  // spacing
  uint8_t w = 10;
 8001d14:	230a      	movs	r3, #10
 8001d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t top[12];    // <=12 safety
  uint8_t bottom[12]; // <=12 safety
  memset(top, 0, sizeof(top));
 8001d1a:	f107 0318 	add.w	r3, r7, #24
 8001d1e:	220c      	movs	r2, #12
 8001d20:	2100      	movs	r1, #0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 ff56 	bl	8002bd4 <memset>
  memset(bottom, 0, sizeof(bottom));
 8001d28:	f107 030c 	add.w	r3, r7, #12
 8001d2c:	220c      	movs	r2, #12
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 ff4f 	bl	8002bd4 <memset>

  uint8_t outc = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  for (uint8_t c = 0; c < 6; c++) {
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001d42:	e0ac      	b.n	8001e9e <oled_draw_big_digit2x+0x1ba>
    if (c == 5)
 8001d44:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001d48:	2b05      	cmp	r3, #5
 8001d4a:	f000 80ae 	beq.w	8001eaa <oled_draw_big_digit2x+0x1c6>
      break;            // last column in font is blank spacing
    uint8_t b = src[c]; // bit0..bit6 used
 8001d4e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001d52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d54:	4413      	add	r3, r2
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    // Build doubled vertical mapping into two pages:
    // rows 0..3 (doubled -> 0..7) go to top page
    // rows 4..6 (doubled -> 8..13) go to bottom page positions 0..5
    uint8_t top_byte = 0, bot_byte = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001d62:	2300      	movs	r3, #0
 8001d64:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    for (uint8_t row = 0; row < 7; row++) {
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001d6e:	e05b      	b.n	8001e28 <oled_draw_big_digit2x+0x144>
      if (b & (1u << row)) {
 8001d70:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8001d74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d04c      	beq.n	8001e1e <oled_draw_big_digit2x+0x13a>
        uint8_t y0 = (uint8_t)(2 * row);
 8001d84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
        uint8_t y1 = (uint8_t)(y0 + 1);
 8001d8e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001d92:	3301      	adds	r3, #1
 8001d94:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        if (y1 <= 7) {
 8001d98:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001d9c:	2b07      	cmp	r3, #7
 8001d9e:	d816      	bhi.n	8001dce <oled_draw_big_digit2x+0xea>
          // stays on top page
          top_byte |= (uint8_t)(1u << y0);
 8001da0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001da4:	2201      	movs	r2, #1
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001db0:	4313      	orrs	r3, r2
 8001db2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
          top_byte |= (uint8_t)(1u << y1);
 8001db6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001dba:	2201      	movs	r2, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001dcc:	e027      	b.n	8001e1e <oled_draw_big_digit2x+0x13a>
        } else {
          // goes to bottom page (shifted by -8)
          uint8_t yb0 = (uint8_t)(y0 - 8);
 8001dce:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001dd2:	3b08      	subs	r3, #8
 8001dd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          uint8_t yb1 = (uint8_t)(y1 - 8);
 8001dd8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001ddc:	3b08      	subs	r3, #8
 8001dde:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          if (yb0 < 8)
 8001de2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001de6:	2b07      	cmp	r3, #7
 8001de8:	d80a      	bhi.n	8001e00 <oled_draw_big_digit2x+0x11c>
            bot_byte |= (uint8_t)(1u << yb0);
 8001dea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001dee:	2201      	movs	r2, #1
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
          if (yb1 < 8)
 8001e00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001e04:	2b07      	cmp	r3, #7
 8001e06:	d80a      	bhi.n	8001e1e <oled_draw_big_digit2x+0x13a>
            bot_byte |= (uint8_t)(1u << yb1);
 8001e08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    for (uint8_t row = 0; row < 7; row++) {
 8001e1e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e22:	3301      	adds	r3, #1
 8001e24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001e28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e2c:	2b06      	cmp	r3, #6
 8001e2e:	d99f      	bls.n	8001d70 <oled_draw_big_digit2x+0x8c>
        }
      }
    }

    // duplicate horizontally
    if (outc < sizeof(top)) {
 8001e30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001e34:	2b0b      	cmp	r3, #11
 8001e36:	d814      	bhi.n	8001e62 <oled_draw_big_digit2x+0x17e>
      top[outc] = top_byte;
 8001e38:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001e3c:	3338      	adds	r3, #56	@ 0x38
 8001e3e:	443b      	add	r3, r7
 8001e40:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8001e44:	f803 2c20 	strb.w	r2, [r3, #-32]
      bottom[outc] = bot_byte;
 8001e48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001e4c:	3338      	adds	r3, #56	@ 0x38
 8001e4e:	443b      	add	r3, r7
 8001e50:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8001e54:	f803 2c2c 	strb.w	r2, [r3, #-44]
      outc++;
 8001e58:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }
    if (outc < sizeof(top)) {
 8001e62:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001e66:	2b0b      	cmp	r3, #11
 8001e68:	d814      	bhi.n	8001e94 <oled_draw_big_digit2x+0x1b0>
      top[outc] = top_byte;
 8001e6a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001e6e:	3338      	adds	r3, #56	@ 0x38
 8001e70:	443b      	add	r3, r7
 8001e72:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8001e76:	f803 2c20 	strb.w	r2, [r3, #-32]
      bottom[outc] = bot_byte;
 8001e7a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001e7e:	3338      	adds	r3, #56	@ 0x38
 8001e80:	443b      	add	r3, r7
 8001e82:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8001e86:	f803 2c2c 	strb.w	r2, [r3, #-44]
      outc++;
 8001e8a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  for (uint8_t c = 0; c < 6; c++) {
 8001e94:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001e98:	3301      	adds	r3, #1
 8001e9a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8001e9e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001ea2:	2b05      	cmp	r3, #5
 8001ea4:	f67f af4e 	bls.w	8001d44 <oled_draw_big_digit2x+0x60>
 8001ea8:	e000      	b.n	8001eac <oled_draw_big_digit2x+0x1c8>
      break;            // last column in font is blank spacing
 8001eaa:	bf00      	nop
    }
  }

  // Write to OLED: top page then bottom page
  oled_setpos(page_top, x);
 8001eac:	79fa      	ldrb	r2, [r7, #7]
 8001eae:	79bb      	ldrb	r3, [r7, #6]
 8001eb0:	4611      	mov	r1, r2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fcf4 	bl	80018a0 <oled_setpos>
  oled_data(top, outc);
 8001eb8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	f107 0318 	add.w	r3, r7, #24
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fccc 	bl	8001862 <oled_data>
  oled_setpos((uint8_t)(page_top + 1), x);
 8001eca:	79bb      	ldrb	r3, [r7, #6]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	79fa      	ldrb	r2, [r7, #7]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fce3 	bl	80018a0 <oled_setpos>
  oled_data(bottom, outc);
 8001eda:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fcbb 	bl	8001862 <oled_data>
 8001eec:	e000      	b.n	8001ef0 <oled_draw_big_digit2x+0x20c>
    return;
 8001eee:	bf00      	nop
}
 8001ef0:	3738      	adds	r7, #56	@ 0x38
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	08004338 	.word	0x08004338

08001efc <oled_clear>:

/* ============================================================================
 * Public Functions
 * ============================================================================
 */
void oled_clear(void) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b0a2      	sub	sp, #136	@ 0x88
 8001f00:	af00      	add	r7, sp, #0
  uint8_t z[128] = {0};
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	2280      	movs	r2, #128	@ 0x80
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 fe63 	bl	8002bd4 <memset>
  for (uint8_t p = 0; p < 8; p++) {
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001f14:	e00f      	b.n	8001f36 <oled_clear+0x3a>
    oled_setpos(p, 0);
 8001f16:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fcbf 	bl	80018a0 <oled_setpos>
    oled_data(z, 128);
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	2180      	movs	r1, #128	@ 0x80
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fc9b 	bl	8001862 <oled_data>
  for (uint8_t p = 0; p < 8; p++) {
 8001f2c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001f30:	3301      	adds	r3, #1
 8001f32:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001f36:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001f3a:	2b07      	cmp	r3, #7
 8001f3c:	d9eb      	bls.n	8001f16 <oled_clear+0x1a>
  }
}
 8001f3e:	bf00      	nop
 8001f40:	bf00      	nop
 8001f42:	3788      	adds	r7, #136	@ 0x88
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <oled_init>:

void oled_init(void) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  I2C1_Init_OLED();
 8001f4c:	f7ff fbb4 	bl	80016b8 <I2C1_Init_OLED>

  // Initialization sequence
  oled_cmd(0xAE);
 8001f50:	20ae      	movs	r0, #174	@ 0xae
 8001f52:	f7ff fc71 	bl	8001838 <oled_cmd>
  oled_cmd(0xD5);
 8001f56:	20d5      	movs	r0, #213	@ 0xd5
 8001f58:	f7ff fc6e 	bl	8001838 <oled_cmd>
  oled_cmd(0x80);
 8001f5c:	2080      	movs	r0, #128	@ 0x80
 8001f5e:	f7ff fc6b 	bl	8001838 <oled_cmd>
  oled_cmd(0xA8);
 8001f62:	20a8      	movs	r0, #168	@ 0xa8
 8001f64:	f7ff fc68 	bl	8001838 <oled_cmd>
  oled_cmd(0x3F);
 8001f68:	203f      	movs	r0, #63	@ 0x3f
 8001f6a:	f7ff fc65 	bl	8001838 <oled_cmd>
  oled_cmd(0xD3);
 8001f6e:	20d3      	movs	r0, #211	@ 0xd3
 8001f70:	f7ff fc62 	bl	8001838 <oled_cmd>
  oled_cmd(0x00);
 8001f74:	2000      	movs	r0, #0
 8001f76:	f7ff fc5f 	bl	8001838 <oled_cmd>
  oled_cmd(0x40);
 8001f7a:	2040      	movs	r0, #64	@ 0x40
 8001f7c:	f7ff fc5c 	bl	8001838 <oled_cmd>
  oled_cmd(0x8D);
 8001f80:	208d      	movs	r0, #141	@ 0x8d
 8001f82:	f7ff fc59 	bl	8001838 <oled_cmd>
  oled_cmd(0x14);
 8001f86:	2014      	movs	r0, #20
 8001f88:	f7ff fc56 	bl	8001838 <oled_cmd>
  oled_cmd(0x20);
 8001f8c:	2020      	movs	r0, #32
 8001f8e:	f7ff fc53 	bl	8001838 <oled_cmd>
  oled_cmd(0x00);
 8001f92:	2000      	movs	r0, #0
 8001f94:	f7ff fc50 	bl	8001838 <oled_cmd>
  oled_cmd(0xA1); // segment remap
 8001f98:	20a1      	movs	r0, #161	@ 0xa1
 8001f9a:	f7ff fc4d 	bl	8001838 <oled_cmd>
  oled_cmd(0xC8); // COM scan dir
 8001f9e:	20c8      	movs	r0, #200	@ 0xc8
 8001fa0:	f7ff fc4a 	bl	8001838 <oled_cmd>
  oled_cmd(0xDA);
 8001fa4:	20da      	movs	r0, #218	@ 0xda
 8001fa6:	f7ff fc47 	bl	8001838 <oled_cmd>
  oled_cmd(0x12);
 8001faa:	2012      	movs	r0, #18
 8001fac:	f7ff fc44 	bl	8001838 <oled_cmd>
  oled_cmd(0x81);
 8001fb0:	2081      	movs	r0, #129	@ 0x81
 8001fb2:	f7ff fc41 	bl	8001838 <oled_cmd>
  oled_cmd(0x7F);
 8001fb6:	207f      	movs	r0, #127	@ 0x7f
 8001fb8:	f7ff fc3e 	bl	8001838 <oled_cmd>
  oled_cmd(0xD9);
 8001fbc:	20d9      	movs	r0, #217	@ 0xd9
 8001fbe:	f7ff fc3b 	bl	8001838 <oled_cmd>
  oled_cmd(0xF1);
 8001fc2:	20f1      	movs	r0, #241	@ 0xf1
 8001fc4:	f7ff fc38 	bl	8001838 <oled_cmd>
  oled_cmd(0xDB);
 8001fc8:	20db      	movs	r0, #219	@ 0xdb
 8001fca:	f7ff fc35 	bl	8001838 <oled_cmd>
  oled_cmd(0x40);
 8001fce:	2040      	movs	r0, #64	@ 0x40
 8001fd0:	f7ff fc32 	bl	8001838 <oled_cmd>
  oled_cmd(0xA4);
 8001fd4:	20a4      	movs	r0, #164	@ 0xa4
 8001fd6:	f7ff fc2f 	bl	8001838 <oled_cmd>
  oled_cmd(0xA6);
 8001fda:	20a6      	movs	r0, #166	@ 0xa6
 8001fdc:	f7ff fc2c 	bl	8001838 <oled_cmd>
  oled_cmd(0xAF);
 8001fe0:	20af      	movs	r0, #175	@ 0xaf
 8001fe2:	f7ff fc29 	bl	8001838 <oled_cmd>

  oled_clear();
 8001fe6:	f7ff ff89 	bl	8001efc <oled_clear>
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <draw_section1>:

// Speed bar width (inside section1)
#define W_SPD_BAR 54

/* ----------------------------- Rendering ---------------------------------- */
static void draw_section1(void) {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af02      	add	r7, sp, #8
  // Clear region pages we use
  oled_clear_region(S1_PAGE_LABEL, S1_COL_L, S1_COL_R);
 8001ff6:	2240      	movs	r2, #64	@ 0x40
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f7ff fd0e 	bl	8001a1c <oled_clear_region>
  oled_clear_region(S1_PAGE_SPEED, S1_COL_L, S1_COL_R);
 8002000:	2240      	movs	r2, #64	@ 0x40
 8002002:	2100      	movs	r1, #0
 8002004:	2002      	movs	r0, #2
 8002006:	f7ff fd09 	bl	8001a1c <oled_clear_region>
  oled_clear_region((uint8_t)(S1_PAGE_SPEED + 1), S1_COL_L, S1_COL_R); // safety
 800200a:	2240      	movs	r2, #64	@ 0x40
 800200c:	2100      	movs	r1, #0
 800200e:	2003      	movs	r0, #3
 8002010:	f7ff fd04 	bl	8001a1c <oled_clear_region>

  // LEVEL label + number (left)
  oled_print_text(S1_COL_L + 0, S1_PAGE_LABEL, "LEVEL");
 8002014:	4a30      	ldr	r2, [pc, #192]	@ (80020d8 <draw_section1+0xe8>)
 8002016:	2100      	movs	r1, #0
 8002018:	2000      	movs	r0, #0
 800201a:	f7ff fd35 	bl	8001a88 <oled_print_text>
  oled_print_uint((uint8_t)(S1_COL_L + 6 * 6), S1_PAGE_LABEL, g_level);
 800201e:	4b2f      	ldr	r3, [pc, #188]	@ (80020dc <draw_section1+0xec>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	2100      	movs	r1, #0
 8002026:	2024      	movs	r0, #36	@ 0x24
 8002028:	f7ff fdc0 	bl	8001bac <oled_print_uint>

  // LIVES (hearts) right-aligned within section1
  {
    // each heart drawn with 8 columns + 1 spacing
    uint8_t total_w = (uint8_t)(INITIAL_LIVES * 9);
 800202c:	2324      	movs	r3, #36	@ 0x24
 800202e:	713b      	strb	r3, [r7, #4]
    uint8_t start_x =
        (uint8_t)((S1_COL_R - S1_COL_L > total_w) ? (S1_COL_R - total_w - 2)
 8002030:	793b      	ldrb	r3, [r7, #4]
 8002032:	2b3f      	cmp	r3, #63	@ 0x3f
 8002034:	d804      	bhi.n	8002040 <draw_section1+0x50>
 8002036:	793b      	ldrb	r3, [r7, #4]
 8002038:	f1c3 033e 	rsb	r3, r3, #62	@ 0x3e
 800203c:	b2db      	uxtb	r3, r3
 800203e:	e000      	b.n	8002042 <draw_section1+0x52>
 8002040:	2302      	movs	r3, #2
    uint8_t start_x =
 8002042:	70fb      	strb	r3, [r7, #3]
                                                  : (S1_COL_L + 2));
    for (uint8_t i = 0; i < INITIAL_LIVES; i++) {
 8002044:	2300      	movs	r3, #0
 8002046:	71fb      	strb	r3, [r7, #7]
 8002048:	e01c      	b.n	8002084 <draw_section1+0x94>
      uint8_t x = (uint8_t)(start_x + i * 9);
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	461a      	mov	r2, r3
 800204e:	00d2      	lsls	r2, r2, #3
 8002050:	4413      	add	r3, r2
 8002052:	b2da      	uxtb	r2, r3
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	4413      	add	r3, r2
 8002058:	70bb      	strb	r3, [r7, #2]
      if (i < g_lives)
 800205a:	4b21      	ldr	r3, [pc, #132]	@ (80020e0 <draw_section1+0xf0>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	79fa      	ldrb	r2, [r7, #7]
 8002060:	429a      	cmp	r2, r3
 8002062:	d206      	bcs.n	8002072 <draw_section1+0x82>
        oled_draw_icon8_hflip(x, S1_PAGE_LABEL, ICON_HEART_ROT90);
 8002064:	78bb      	ldrb	r3, [r7, #2]
 8002066:	4a1f      	ldr	r2, [pc, #124]	@ (80020e4 <draw_section1+0xf4>)
 8002068:	2100      	movs	r1, #0
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fc43 	bl	80018f6 <oled_draw_icon8_hflip>
 8002070:	e005      	b.n	800207e <draw_section1+0x8e>
      else
        oled_draw_icon8_hflip(x, S1_PAGE_LABEL, ICON_HEART_EMPTY_ROT90);
 8002072:	78bb      	ldrb	r3, [r7, #2]
 8002074:	4a1c      	ldr	r2, [pc, #112]	@ (80020e8 <draw_section1+0xf8>)
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fc3c 	bl	80018f6 <oled_draw_icon8_hflip>
    for (uint8_t i = 0; i < INITIAL_LIVES; i++) {
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	3301      	adds	r3, #1
 8002082:	71fb      	strb	r3, [r7, #7]
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	2b03      	cmp	r3, #3
 8002088:	d9df      	bls.n	800204a <draw_section1+0x5a>
    }
  }

  // SPEED line
  oled_print_text(S1_COL_L + 0, S1_PAGE_SPEED, "SPD");
 800208a:	4a18      	ldr	r2, [pc, #96]	@ (80020ec <draw_section1+0xfc>)
 800208c:	2102      	movs	r1, #2
 800208e:	2000      	movs	r0, #0
 8002090:	f7ff fcfa 	bl	8001a88 <oled_print_text>
  // numeric value
  oled_print_uint((uint8_t)(S1_COL_L + 6 * 4), S1_PAGE_SPEED, g_difficulty);
 8002094:	4b16      	ldr	r3, [pc, #88]	@ (80020f0 <draw_section1+0x100>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	461a      	mov	r2, r3
 800209a:	2102      	movs	r1, #2
 800209c:	2018      	movs	r0, #24
 800209e:	f7ff fd85 	bl	8001bac <oled_print_uint>

  // draw speed bar within section1 width
  {
    uint8_t bar_x = (uint8_t)(S1_COL_R - W_SPD_BAR - 2);
 80020a2:	2308      	movs	r3, #8
 80020a4:	71bb      	strb	r3, [r7, #6]
    if (bar_x < (S1_COL_L + 6 * 8))
 80020a6:	79bb      	ldrb	r3, [r7, #6]
 80020a8:	2b2f      	cmp	r3, #47	@ 0x2f
 80020aa:	d801      	bhi.n	80020b0 <draw_section1+0xc0>
      bar_x = (uint8_t)(S1_COL_L + 6 * 8); // keep some gap from number
 80020ac:	2330      	movs	r3, #48	@ 0x30
 80020ae:	71bb      	strb	r3, [r7, #6]
    uint8_t spd = g_difficulty;
 80020b0:	4b0f      	ldr	r3, [pc, #60]	@ (80020f0 <draw_section1+0x100>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	717b      	strb	r3, [r7, #5]
    if (spd > 5)
 80020b6:	797b      	ldrb	r3, [r7, #5]
 80020b8:	2b05      	cmp	r3, #5
 80020ba:	d901      	bls.n	80020c0 <draw_section1+0xd0>
      spd = 5;
 80020bc:	2305      	movs	r3, #5
 80020be:	717b      	strb	r3, [r7, #5]
    oled_draw_bordered_progress(bar_x, S1_PAGE_SPEED, W_SPD_BAR, spd, 5);
 80020c0:	797b      	ldrb	r3, [r7, #5]
 80020c2:	79b8      	ldrb	r0, [r7, #6]
 80020c4:	2205      	movs	r2, #5
 80020c6:	9200      	str	r2, [sp, #0]
 80020c8:	2236      	movs	r2, #54	@ 0x36
 80020ca:	2102      	movs	r1, #2
 80020cc:	f7ff fc42 	bl	8001954 <oled_draw_bordered_progress>
  }
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	08004000 	.word	0x08004000
 80020dc:	20000086 	.word	0x20000086
 80020e0:	2000008c 	.word	0x2000008c
 80020e4:	08004428 	.word	0x08004428
 80020e8:	08004430 	.word	0x08004430
 80020ec:	08004008 	.word	0x08004008
 80020f0:	20000085 	.word	0x20000085

080020f4 <draw_section2>:

static void draw_section2(void) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
  // Title "TIME" centered on S2
  oled_clear_region(S2_PAGE_TITLE, S2_COL_L, S2_COL_R);
 80020fa:	2280      	movs	r2, #128	@ 0x80
 80020fc:	2140      	movs	r1, #64	@ 0x40
 80020fe:	2000      	movs	r0, #0
 8002100:	f7ff fc8c 	bl	8001a1c <oled_clear_region>
  oled_print_centered(S2_PAGE_TITLE, S2_COL_L, S2_COL_R, "TIME");
 8002104:	4b3c      	ldr	r3, [pc, #240]	@ (80021f8 <draw_section2+0x104>)
 8002106:	2280      	movs	r2, #128	@ 0x80
 8002108:	2140      	movs	r1, #64	@ 0x40
 800210a:	2000      	movs	r0, #0
 800210c:	f7ff fdbd 	bl	8001c8a <oled_print_centered>

  // Big countdown number centered (uses pages 2 and 3)
  oled_clear_region(S2_PAGE_BIG_TOP, S2_COL_L, S2_COL_R);
 8002110:	2280      	movs	r2, #128	@ 0x80
 8002112:	2140      	movs	r1, #64	@ 0x40
 8002114:	2002      	movs	r0, #2
 8002116:	f7ff fc81 	bl	8001a1c <oled_clear_region>
  oled_clear_region((uint8_t)(S2_PAGE_BIG_TOP + 1), S2_COL_L, S2_COL_R);
 800211a:	2280      	movs	r2, #128	@ 0x80
 800211c:	2140      	movs	r1, #64	@ 0x40
 800211e:	2003      	movs	r0, #3
 8002120:	f7ff fc7c 	bl	8001a1c <oled_clear_region>

  // Determine digits to display (10 -> "10", else '0'..'9')
  char buf[3] = {0};
 8002124:	463b      	mov	r3, r7
 8002126:	2100      	movs	r1, #0
 8002128:	460a      	mov	r2, r1
 800212a:	801a      	strh	r2, [r3, #0]
 800212c:	460a      	mov	r2, r1
 800212e:	709a      	strb	r2, [r3, #2]
  if (g_countdown == 10) {
 8002130:	4b32      	ldr	r3, [pc, #200]	@ (80021fc <draw_section2+0x108>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b0a      	cmp	r3, #10
 8002138:	d104      	bne.n	8002144 <draw_section2+0x50>
    buf[0] = '1';
 800213a:	2331      	movs	r3, #49	@ 0x31
 800213c:	703b      	strb	r3, [r7, #0]
    buf[1] = '0';
 800213e:	2330      	movs	r3, #48	@ 0x30
 8002140:	707b      	strb	r3, [r7, #1]
 8002142:	e011      	b.n	8002168 <draw_section2+0x74>
  } else {
    buf[0] = (char)('0' + (g_countdown % 10));
 8002144:	4b2d      	ldr	r3, [pc, #180]	@ (80021fc <draw_section2+0x108>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4b2d      	ldr	r3, [pc, #180]	@ (8002200 <draw_section2+0x10c>)
 800214c:	fba3 1302 	umull	r1, r3, r3, r2
 8002150:	08d9      	lsrs	r1, r3, #3
 8002152:	460b      	mov	r3, r1
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	b2db      	uxtb	r3, r3
 800215e:	3330      	adds	r3, #48	@ 0x30
 8002160:	b2db      	uxtb	r3, r3
 8002162:	703b      	strb	r3, [r7, #0]
    buf[1] = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	707b      	strb	r3, [r7, #1]
  }

  // Big digit width ≈ 10 columns each, plus 2 cols spacing between
  uint8_t digits = (uint8_t)((buf[1] == 0) ? 1 : 2);
 8002168:	787b      	ldrb	r3, [r7, #1]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <draw_section2+0x7e>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <draw_section2+0x80>
 8002172:	2302      	movs	r3, #2
 8002174:	737b      	strb	r3, [r7, #13]
  uint8_t total_w = (uint8_t)(digits * 10 + ((digits > 1) ? 2 : 0));
 8002176:	7b7b      	ldrb	r3, [r7, #13]
 8002178:	461a      	mov	r2, r3
 800217a:	0092      	lsls	r2, r2, #2
 800217c:	4413      	add	r3, r2
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	b2db      	uxtb	r3, r3
 8002182:	7b7a      	ldrb	r2, [r7, #13]
 8002184:	2a01      	cmp	r2, #1
 8002186:	d901      	bls.n	800218c <draw_section2+0x98>
 8002188:	2202      	movs	r2, #2
 800218a:	e000      	b.n	800218e <draw_section2+0x9a>
 800218c:	2200      	movs	r2, #0
 800218e:	4413      	add	r3, r2
 8002190:	733b      	strb	r3, [r7, #12]

  // Center horizontally within section2
  uint8_t s2w = (uint8_t)(S2_COL_R - S2_COL_L);
 8002192:	2340      	movs	r3, #64	@ 0x40
 8002194:	72fb      	strb	r3, [r7, #11]
  uint8_t x0 =
      (uint8_t)(S2_COL_L + ((s2w > total_w) ? ((s2w - total_w) / 2) : 0));
 8002196:	7afa      	ldrb	r2, [r7, #11]
 8002198:	7b3b      	ldrb	r3, [r7, #12]
 800219a:	429a      	cmp	r2, r3
 800219c:	d909      	bls.n	80021b2 <draw_section2+0xbe>
 800219e:	7afa      	ldrb	r2, [r7, #11]
 80021a0:	7b3b      	ldrb	r3, [r7, #12]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	0fda      	lsrs	r2, r3, #31
 80021a6:	4413      	add	r3, r2
 80021a8:	105b      	asrs	r3, r3, #1
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	3340      	adds	r3, #64	@ 0x40
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	e000      	b.n	80021b4 <draw_section2+0xc0>
 80021b2:	2340      	movs	r3, #64	@ 0x40
  uint8_t x0 =
 80021b4:	72bb      	strb	r3, [r7, #10]

  // Draw
  uint8_t x = x0;
 80021b6:	7abb      	ldrb	r3, [r7, #10]
 80021b8:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < digits; i++) {
 80021ba:	2300      	movs	r3, #0
 80021bc:	73bb      	strb	r3, [r7, #14]
 80021be:	e012      	b.n	80021e6 <draw_section2+0xf2>
    int d = buf[i] - '0';
 80021c0:	7bbb      	ldrb	r3, [r7, #14]
 80021c2:	3310      	adds	r3, #16
 80021c4:	443b      	add	r3, r7
 80021c6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80021ca:	3b30      	subs	r3, #48	@ 0x30
 80021cc:	607b      	str	r3, [r7, #4]
    oled_draw_big_digit2x(x, S2_PAGE_BIG_TOP, d);
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	2102      	movs	r1, #2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fd85 	bl	8001ce4 <oled_draw_big_digit2x>
    x = (uint8_t)(x + 10 + 2); // 2 col spacing
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	330c      	adds	r3, #12
 80021de:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < digits; i++) {
 80021e0:	7bbb      	ldrb	r3, [r7, #14]
 80021e2:	3301      	adds	r3, #1
 80021e4:	73bb      	strb	r3, [r7, #14]
 80021e6:	7bba      	ldrb	r2, [r7, #14]
 80021e8:	7b7b      	ldrb	r3, [r7, #13]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d3e8      	bcc.n	80021c0 <draw_section2+0xcc>
  }
}
 80021ee:	bf00      	nop
 80021f0:	bf00      	nop
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	0800400c 	.word	0x0800400c
 80021fc:	20000008 	.word	0x20000008
 8002200:	cccccccd 	.word	0xcccccccd

08002204 <state_text>:

static const char *state_text(GameState_t s) {
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  switch (s) {
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	3b01      	subs	r3, #1
 8002212:	2b06      	cmp	r3, #6
 8002214:	d81c      	bhi.n	8002250 <state_text+0x4c>
 8002216:	a201      	add	r2, pc, #4	@ (adr r2, 800221c <state_text+0x18>)
 8002218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221c:	08002249 	.word	0x08002249
 8002220:	0800224d 	.word	0x0800224d
 8002224:	08002241 	.word	0x08002241
 8002228:	08002245 	.word	0x08002245
 800222c:	08002251 	.word	0x08002251
 8002230:	08002239 	.word	0x08002239
 8002234:	0800223d 	.word	0x0800223d
  case GAME_STATE_VICTORY:
    return "VICTORY";
 8002238:	4b09      	ldr	r3, [pc, #36]	@ (8002260 <state_text+0x5c>)
 800223a:	e00a      	b.n	8002252 <state_text+0x4e>
  case GAME_STATE_GAME_DEATH:
    return "GAME OVER";
 800223c:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <state_text+0x60>)
 800223e:	e008      	b.n	8002252 <state_text+0x4e>
  case GAME_STATE_PATTERN_DISPLAY:
    return "WATCH";
 8002240:	4b09      	ldr	r3, [pc, #36]	@ (8002268 <state_text+0x64>)
 8002242:	e006      	b.n	8002252 <state_text+0x4e>
  case GAME_STATE_INPUT_WAIT:
    return "YOUR TURN";
 8002244:	4b09      	ldr	r3, [pc, #36]	@ (800226c <state_text+0x68>)
 8002246:	e004      	b.n	8002252 <state_text+0x4e>
  case GAME_STATE_DIFFICULTY_SELECT:
    return "SELECT SPEED";
 8002248:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <state_text+0x6c>)
 800224a:	e002      	b.n	8002252 <state_text+0x4e>
  case GAME_STATE_LEVEL_INTRO:
    return "GET READY";
 800224c:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <state_text+0x70>)
 800224e:	e000      	b.n	8002252 <state_text+0x4e>
  default:
    return "READY";
 8002250:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <state_text+0x74>)
  }
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	08004014 	.word	0x08004014
 8002264:	0800401c 	.word	0x0800401c
 8002268:	08004028 	.word	0x08004028
 800226c:	08004030 	.word	0x08004030
 8002270:	0800403c 	.word	0x0800403c
 8002274:	0800404c 	.word	0x0800404c
 8002278:	08004058 	.word	0x08004058

0800227c <draw_footer>:

static void draw_footer(void) {
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  oled_clear_region(FOOTER_PAGE, 0, 128);
 8002280:	2280      	movs	r2, #128	@ 0x80
 8002282:	2100      	movs	r1, #0
 8002284:	2007      	movs	r0, #7
 8002286:	f7ff fbc9 	bl	8001a1c <oled_clear_region>
  oled_print_centered(FOOTER_PAGE, 0, 128, state_text(g_game_state));
 800228a:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <draw_footer+0x28>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff ffb8 	bl	8002204 <state_text>
 8002294:	4603      	mov	r3, r0
 8002296:	2280      	movs	r2, #128	@ 0x80
 8002298:	2100      	movs	r1, #0
 800229a:	2007      	movs	r0, #7
 800229c:	f7ff fcf5 	bl	8001c8a <oled_print_centered>
}
 80022a0:	bf00      	nop
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000084 	.word	0x20000084

080022a8 <OLED_ShowStatus>:

/* ============================================================================
 * Single entry to render the whole screen with the new layout
 * ============================================================================
 */
void OLED_ShowStatus(void) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  // You can keep selective updates with prev_* if you like; for clarity we
  // redraw the three zones.
  draw_section1();
 80022ac:	f7ff fea0 	bl	8001ff0 <draw_section1>
  draw_section2();
 80022b0:	f7ff ff20 	bl	80020f4 <draw_section2>
  draw_footer();
 80022b4:	f7ff ffe2 	bl	800227c <draw_footer>
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}

080022bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return 1;
 80022c0:	2301      	movs	r3, #1
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <_kill>:

int _kill(int pid, int sig)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022d6:	f000 fccb 	bl	8002c70 <__errno>
 80022da:	4603      	mov	r3, r0
 80022dc:	2216      	movs	r2, #22
 80022de:	601a      	str	r2, [r3, #0]
  return -1;
 80022e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <_exit>:

void _exit (int status)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022f4:	f04f 31ff 	mov.w	r1, #4294967295
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff ffe7 	bl	80022cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80022fe:	bf00      	nop
 8002300:	e7fd      	b.n	80022fe <_exit+0x12>

08002302 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b086      	sub	sp, #24
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	e00a      	b.n	800232a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002314:	f3af 8000 	nop.w
 8002318:	4601      	mov	r1, r0
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	60ba      	str	r2, [r7, #8]
 8002320:	b2ca      	uxtb	r2, r1
 8002322:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	3301      	adds	r3, #1
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	429a      	cmp	r2, r3
 8002330:	dbf0      	blt.n	8002314 <_read+0x12>
  }

  return len;
 8002332:	687b      	ldr	r3, [r7, #4]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	e009      	b.n	8002362 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	60ba      	str	r2, [r7, #8]
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	3301      	adds	r3, #1
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	429a      	cmp	r2, r3
 8002368:	dbf1      	blt.n	800234e <_write+0x12>
  }
  return len;
 800236a:	687b      	ldr	r3, [r7, #4]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <_close>:

int _close(int file)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800237c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800239c:	605a      	str	r2, [r3, #4]
  return 0;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_isatty>:

int _isatty(int file)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023b4:	2301      	movs	r3, #1
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b085      	sub	sp, #20
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e4:	4a14      	ldr	r2, [pc, #80]	@ (8002438 <_sbrk+0x5c>)
 80023e6:	4b15      	ldr	r3, [pc, #84]	@ (800243c <_sbrk+0x60>)
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f0:	4b13      	ldr	r3, [pc, #76]	@ (8002440 <_sbrk+0x64>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023f8:	4b11      	ldr	r3, [pc, #68]	@ (8002440 <_sbrk+0x64>)
 80023fa:	4a12      	ldr	r2, [pc, #72]	@ (8002444 <_sbrk+0x68>)
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023fe:	4b10      	ldr	r3, [pc, #64]	@ (8002440 <_sbrk+0x64>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	429a      	cmp	r2, r3
 800240a:	d207      	bcs.n	800241c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800240c:	f000 fc30 	bl	8002c70 <__errno>
 8002410:	4603      	mov	r3, r0
 8002412:	220c      	movs	r2, #12
 8002414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002416:	f04f 33ff 	mov.w	r3, #4294967295
 800241a:	e009      	b.n	8002430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800241c:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <_sbrk+0x64>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002422:	4b07      	ldr	r3, [pc, #28]	@ (8002440 <_sbrk+0x64>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	4a05      	ldr	r2, [pc, #20]	@ (8002440 <_sbrk+0x64>)
 800242c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800242e:	68fb      	ldr	r3, [r7, #12]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20020000 	.word	0x20020000
 800243c:	00000400 	.word	0x00000400
 8002440:	20000184 	.word	0x20000184
 8002444:	200002e0 	.word	0x200002e0

08002448 <Delay_ms>:
uint8_t g_system_initialized = 0;

/* ============================================================================
 * Timing Functions
 * ============================================================================ */
void Delay_ms(uint32_t ms) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
    uint32_t start = GetTick();
 8002450:	f000 f810 	bl	8002474 <GetTick>
 8002454:	60f8      	str	r0, [r7, #12]
    while((GetTick() - start) < ms);
 8002456:	bf00      	nop
 8002458:	f000 f80c 	bl	8002474 <GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	429a      	cmp	r2, r3
 8002466:	d8f7      	bhi.n	8002458 <Delay_ms+0x10>
}
 8002468:	bf00      	nop
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <GetTick>:

uint32_t GetTick(void) {
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
    return g_tick_counter;
 8002478:	4b03      	ldr	r3, [pc, #12]	@ (8002488 <GetTick+0x14>)
 800247a:	681b      	ldr	r3, [r3, #0]
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	20000188 	.word	0x20000188

0800248c <Log_Print>:

/* ============================================================================
 * Logging Functions
 * ============================================================================ */
void Log_Print(const char* format, ...) {
 800248c:	b40f      	push	{r0, r1, r2, r3}
 800248e:	b580      	push	{r7, lr}
 8002490:	b0c2      	sub	sp, #264	@ 0x108
 8002492:	af00      	add	r7, sp, #0
    if(!g_system_initialized) return;
 8002494:	4b1c      	ldr	r3, [pc, #112]	@ (8002508 <Log_Print+0x7c>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d02d      	beq.n	80024f8 <Log_Print+0x6c>
    char buffer[256];
    va_list args;
    va_start(args, format);
 800249c:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80024a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80024a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80024a8:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80024aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80024ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80024b2:	1d38      	adds	r0, r7, #4
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80024ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024be:	f000 fb7b 	bl	8002bb8 <vsniprintf>
    va_end(args);
    for(char* p = buffer; *p; p++) {
 80024c2:	1d3b      	adds	r3, r7, #4
 80024c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80024c8:	e010      	b.n	80024ec <Log_Print+0x60>
        while(!(USART2->SR & USART_SR_TXE));
 80024ca:	bf00      	nop
 80024cc:	4b0f      	ldr	r3, [pc, #60]	@ (800250c <Log_Print+0x80>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0f9      	beq.n	80024cc <Log_Print+0x40>
        USART2->DR = *p;
 80024d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80024dc:	781a      	ldrb	r2, [r3, #0]
 80024de:	4b0b      	ldr	r3, [pc, #44]	@ (800250c <Log_Print+0x80>)
 80024e0:	605a      	str	r2, [r3, #4]
    for(char* p = buffer; *p; p++) {
 80024e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80024e6:	3301      	adds	r3, #1
 80024e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80024ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1e9      	bne.n	80024ca <Log_Print+0x3e>
 80024f6:	e000      	b.n	80024fa <Log_Print+0x6e>
    if(!g_system_initialized) return;
 80024f8:	bf00      	nop
    }
}
 80024fa:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80024fe:	46bd      	mov	sp, r7
 8002500:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002504:	b004      	add	sp, #16
 8002506:	4770      	bx	lr
 8002508:	2000018c 	.word	0x2000018c
 800250c:	40004400 	.word	0x40004400

08002510 <Debug_PrintGameState>:

/* ============================================================================
 * Debug Functions
 * ============================================================================ */
void Debug_PrintGameState(void) {
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	b089      	sub	sp, #36	@ 0x24
 8002514:	af00      	add	r7, sp, #0
    if(!g_system_initialized) return;
 8002516:	4b8a      	ldr	r3, [pc, #552]	@ (8002740 <Debug_PrintGameState+0x230>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 810c 	beq.w	8002738 <Debug_PrintGameState+0x228>

    Log_Print("\r\n");
 8002520:	4888      	ldr	r0, [pc, #544]	@ (8002744 <Debug_PrintGameState+0x234>)
 8002522:	f7ff ffb3 	bl	800248c <Log_Print>
    Log_Print("========================================\r\n");
 8002526:	4888      	ldr	r0, [pc, #544]	@ (8002748 <Debug_PrintGameState+0x238>)
 8002528:	f7ff ffb0 	bl	800248c <Log_Print>
    Log_Print("        GAME DEBUG INFO\r\n");
 800252c:	4887      	ldr	r0, [pc, #540]	@ (800274c <Debug_PrintGameState+0x23c>)
 800252e:	f7ff ffad 	bl	800248c <Log_Print>
    Log_Print("========================================\r\n");
 8002532:	4885      	ldr	r0, [pc, #532]	@ (8002748 <Debug_PrintGameState+0x238>)
 8002534:	f7ff ffaa 	bl	800248c <Log_Print>
    Log_Print("Time: %lu ms\r\n", GetTick());
 8002538:	f7ff ff9c 	bl	8002474 <GetTick>
 800253c:	4603      	mov	r3, r0
 800253e:	4619      	mov	r1, r3
 8002540:	4883      	ldr	r0, [pc, #524]	@ (8002750 <Debug_PrintGameState+0x240>)
 8002542:	f7ff ffa3 	bl	800248c <Log_Print>
    Log_Print("\r\n");
 8002546:	487f      	ldr	r0, [pc, #508]	@ (8002744 <Debug_PrintGameState+0x234>)
 8002548:	f7ff ffa0 	bl	800248c <Log_Print>

    // Game State
    const char* state_name = "UNKNOWN";
 800254c:	4b81      	ldr	r3, [pc, #516]	@ (8002754 <Debug_PrintGameState+0x244>)
 800254e:	61fb      	str	r3, [r7, #28]
    switch(g_game_state) {
 8002550:	4b81      	ldr	r3, [pc, #516]	@ (8002758 <Debug_PrintGameState+0x248>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b07      	cmp	r3, #7
 8002556:	d82b      	bhi.n	80025b0 <Debug_PrintGameState+0xa0>
 8002558:	a201      	add	r2, pc, #4	@ (adr r2, 8002560 <Debug_PrintGameState+0x50>)
 800255a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255e:	bf00      	nop
 8002560:	08002581 	.word	0x08002581
 8002564:	08002587 	.word	0x08002587
 8002568:	0800258d 	.word	0x0800258d
 800256c:	08002593 	.word	0x08002593
 8002570:	08002599 	.word	0x08002599
 8002574:	0800259f 	.word	0x0800259f
 8002578:	080025a5 	.word	0x080025a5
 800257c:	080025ab 	.word	0x080025ab
        case GAME_STATE_BOOT:              state_name = "BOOT"; break;
 8002580:	4b76      	ldr	r3, [pc, #472]	@ (800275c <Debug_PrintGameState+0x24c>)
 8002582:	61fb      	str	r3, [r7, #28]
 8002584:	e014      	b.n	80025b0 <Debug_PrintGameState+0xa0>
        case GAME_STATE_DIFFICULTY_SELECT: state_name = "DIFFICULTY_SELECT"; break;
 8002586:	4b76      	ldr	r3, [pc, #472]	@ (8002760 <Debug_PrintGameState+0x250>)
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	e011      	b.n	80025b0 <Debug_PrintGameState+0xa0>
        case GAME_STATE_LEVEL_INTRO:       state_name = "LEVEL_INTRO"; break;
 800258c:	4b75      	ldr	r3, [pc, #468]	@ (8002764 <Debug_PrintGameState+0x254>)
 800258e:	61fb      	str	r3, [r7, #28]
 8002590:	e00e      	b.n	80025b0 <Debug_PrintGameState+0xa0>
        case GAME_STATE_PATTERN_DISPLAY:   state_name = "PATTERN_DISPLAY"; break;
 8002592:	4b75      	ldr	r3, [pc, #468]	@ (8002768 <Debug_PrintGameState+0x258>)
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	e00b      	b.n	80025b0 <Debug_PrintGameState+0xa0>
        case GAME_STATE_INPUT_WAIT:        state_name = "INPUT_WAIT"; break;
 8002598:	4b74      	ldr	r3, [pc, #464]	@ (800276c <Debug_PrintGameState+0x25c>)
 800259a:	61fb      	str	r3, [r7, #28]
 800259c:	e008      	b.n	80025b0 <Debug_PrintGameState+0xa0>
        case GAME_STATE_RESULT_PROCESS:    state_name = "RESULT_PROCESS"; break;
 800259e:	4b74      	ldr	r3, [pc, #464]	@ (8002770 <Debug_PrintGameState+0x260>)
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	e005      	b.n	80025b0 <Debug_PrintGameState+0xa0>
        case GAME_STATE_VICTORY:           state_name = "VICTORY"; break;
 80025a4:	4b73      	ldr	r3, [pc, #460]	@ (8002774 <Debug_PrintGameState+0x264>)
 80025a6:	61fb      	str	r3, [r7, #28]
 80025a8:	e002      	b.n	80025b0 <Debug_PrintGameState+0xa0>
        case GAME_STATE_GAME_DEATH:        state_name = "GAME_DEATH"; break;
 80025aa:	4b73      	ldr	r3, [pc, #460]	@ (8002778 <Debug_PrintGameState+0x268>)
 80025ac:	61fb      	str	r3, [r7, #28]
 80025ae:	bf00      	nop
    }
    Log_Print("State: %s\r\n", state_name);
 80025b0:	69f9      	ldr	r1, [r7, #28]
 80025b2:	4872      	ldr	r0, [pc, #456]	@ (800277c <Debug_PrintGameState+0x26c>)
 80025b4:	f7ff ff6a 	bl	800248c <Log_Print>
    Log_Print("\r\n");
 80025b8:	4862      	ldr	r0, [pc, #392]	@ (8002744 <Debug_PrintGameState+0x234>)
 80025ba:	f7ff ff67 	bl	800248c <Log_Print>

    // Game Progress
    Log_Print("--- Game Progress ---\r\n");
 80025be:	4870      	ldr	r0, [pc, #448]	@ (8002780 <Debug_PrintGameState+0x270>)
 80025c0:	f7ff ff64 	bl	800248c <Log_Print>
    Log_Print("Level:      %u / 9\r\n", g_level);
 80025c4:	4b6f      	ldr	r3, [pc, #444]	@ (8002784 <Debug_PrintGameState+0x274>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	4619      	mov	r1, r3
 80025ca:	486f      	ldr	r0, [pc, #444]	@ (8002788 <Debug_PrintGameState+0x278>)
 80025cc:	f7ff ff5e 	bl	800248c <Log_Print>
    Log_Print("Lives:      %u / %u\r\n", g_lives, INITIAL_LIVES);
 80025d0:	4b6e      	ldr	r3, [pc, #440]	@ (800278c <Debug_PrintGameState+0x27c>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2204      	movs	r2, #4
 80025d6:	4619      	mov	r1, r3
 80025d8:	486d      	ldr	r0, [pc, #436]	@ (8002790 <Debug_PrintGameState+0x280>)
 80025da:	f7ff ff57 	bl	800248c <Log_Print>
    Log_Print("Score:      %lu\r\n", g_score);
 80025de:	4b6d      	ldr	r3, [pc, #436]	@ (8002794 <Debug_PrintGameState+0x284>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4619      	mov	r1, r3
 80025e4:	486c      	ldr	r0, [pc, #432]	@ (8002798 <Debug_PrintGameState+0x288>)
 80025e6:	f7ff ff51 	bl	800248c <Log_Print>
    Log_Print("Difficulty: %u (1-5)\r\n", g_difficulty);
 80025ea:	4b6c      	ldr	r3, [pc, #432]	@ (800279c <Debug_PrintGameState+0x28c>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	4619      	mov	r1, r3
 80025f0:	486b      	ldr	r0, [pc, #428]	@ (80027a0 <Debug_PrintGameState+0x290>)
 80025f2:	f7ff ff4b 	bl	800248c <Log_Print>
    Log_Print("\r\n");
 80025f6:	4853      	ldr	r0, [pc, #332]	@ (8002744 <Debug_PrintGameState+0x234>)
 80025f8:	f7ff ff48 	bl	800248c <Log_Print>

    // Pattern Info
    Log_Print("--- Pattern Info ---\r\n");
 80025fc:	4869      	ldr	r0, [pc, #420]	@ (80027a4 <Debug_PrintGameState+0x294>)
 80025fe:	f7ff ff45 	bl	800248c <Log_Print>
    Log_Print("Pattern Length: %u\r\n", g_pattern_length);
 8002602:	4b69      	ldr	r3, [pc, #420]	@ (80027a8 <Debug_PrintGameState+0x298>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	4619      	mov	r1, r3
 8002608:	4868      	ldr	r0, [pc, #416]	@ (80027ac <Debug_PrintGameState+0x29c>)
 800260a:	f7ff ff3f 	bl	800248c <Log_Print>
    Log_Print("Pattern Index:  %u\r\n", g_pattern_index);
 800260e:	4b68      	ldr	r3, [pc, #416]	@ (80027b0 <Debug_PrintGameState+0x2a0>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	4619      	mov	r1, r3
 8002614:	4867      	ldr	r0, [pc, #412]	@ (80027b4 <Debug_PrintGameState+0x2a4>)
 8002616:	f7ff ff39 	bl	800248c <Log_Print>
    Log_Print("Pattern: [");
 800261a:	4867      	ldr	r0, [pc, #412]	@ (80027b8 <Debug_PrintGameState+0x2a8>)
 800261c:	f7ff ff36 	bl	800248c <Log_Print>
    for(uint8_t i = 0; i < g_pattern_length && i < MAX_PATTERN_LENGTH; i++) {
 8002620:	2300      	movs	r3, #0
 8002622:	76fb      	strb	r3, [r7, #27]
 8002624:	e012      	b.n	800264c <Debug_PrintGameState+0x13c>
        Log_Print("%u", g_pattern[i]);
 8002626:	7efb      	ldrb	r3, [r7, #27]
 8002628:	4a64      	ldr	r2, [pc, #400]	@ (80027bc <Debug_PrintGameState+0x2ac>)
 800262a:	5cd3      	ldrb	r3, [r2, r3]
 800262c:	4619      	mov	r1, r3
 800262e:	4864      	ldr	r0, [pc, #400]	@ (80027c0 <Debug_PrintGameState+0x2b0>)
 8002630:	f7ff ff2c 	bl	800248c <Log_Print>
        if(i < g_pattern_length - 1) Log_Print(", ");
 8002634:	7efa      	ldrb	r2, [r7, #27]
 8002636:	4b5c      	ldr	r3, [pc, #368]	@ (80027a8 <Debug_PrintGameState+0x298>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	3b01      	subs	r3, #1
 800263c:	429a      	cmp	r2, r3
 800263e:	da02      	bge.n	8002646 <Debug_PrintGameState+0x136>
 8002640:	4860      	ldr	r0, [pc, #384]	@ (80027c4 <Debug_PrintGameState+0x2b4>)
 8002642:	f7ff ff23 	bl	800248c <Log_Print>
    for(uint8_t i = 0; i < g_pattern_length && i < MAX_PATTERN_LENGTH; i++) {
 8002646:	7efb      	ldrb	r3, [r7, #27]
 8002648:	3301      	adds	r3, #1
 800264a:	76fb      	strb	r3, [r7, #27]
 800264c:	4b56      	ldr	r3, [pc, #344]	@ (80027a8 <Debug_PrintGameState+0x298>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	7efa      	ldrb	r2, [r7, #27]
 8002652:	429a      	cmp	r2, r3
 8002654:	d202      	bcs.n	800265c <Debug_PrintGameState+0x14c>
 8002656:	7efb      	ldrb	r3, [r7, #27]
 8002658:	2b1f      	cmp	r3, #31
 800265a:	d9e4      	bls.n	8002626 <Debug_PrintGameState+0x116>
    }
    Log_Print("]\r\n");
 800265c:	485a      	ldr	r0, [pc, #360]	@ (80027c8 <Debug_PrintGameState+0x2b8>)
 800265e:	f7ff ff15 	bl	800248c <Log_Print>
    Log_Print("Input Index:    %u\r\n", g_input_index);
 8002662:	4b5a      	ldr	r3, [pc, #360]	@ (80027cc <Debug_PrintGameState+0x2bc>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	4619      	mov	r1, r3
 8002668:	4859      	ldr	r0, [pc, #356]	@ (80027d0 <Debug_PrintGameState+0x2c0>)
 800266a:	f7ff ff0f 	bl	800248c <Log_Print>
    Log_Print("\r\n");
 800266e:	4835      	ldr	r0, [pc, #212]	@ (8002744 <Debug_PrintGameState+0x234>)
 8002670:	f7ff ff0c 	bl	800248c <Log_Print>

    // Button States
    Log_Print("--- Button States ---\r\n");
 8002674:	4857      	ldr	r0, [pc, #348]	@ (80027d4 <Debug_PrintGameState+0x2c4>)
 8002676:	f7ff ff09 	bl	800248c <Log_Print>
    const char* btn_names[4] = {"BLUE", "RED", "YELLOW", "GREEN"};
 800267a:	4b57      	ldr	r3, [pc, #348]	@ (80027d8 <Debug_PrintGameState+0x2c8>)
 800267c:	1d3c      	adds	r4, r7, #4
 800267e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002680:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for(int i = 0; i < 4; i++) {
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	e027      	b.n	80026da <Debug_PrintGameState+0x1ca>
        Log_Print("BTN %s: %s (prev: %s)\r\n",
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	3320      	adds	r3, #32
 8002690:	443b      	add	r3, r7
 8002692:	f853 1c1c 	ldr.w	r1, [r3, #-28]
                  btn_names[i],
                  g_buttons[i].current_state ? "PRESSED" : "RELEASED",
 8002696:	4851      	ldr	r0, [pc, #324]	@ (80027dc <Debug_PrintGameState+0x2cc>)
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	4613      	mov	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	4413      	add	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4403      	add	r3, r0
 80026a4:	3301      	adds	r3, #1
 80026a6:	781b      	ldrb	r3, [r3, #0]
        Log_Print("BTN %s: %s (prev: %s)\r\n",
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <Debug_PrintGameState+0x1a0>
 80026ac:	484c      	ldr	r0, [pc, #304]	@ (80027e0 <Debug_PrintGameState+0x2d0>)
 80026ae:	e000      	b.n	80026b2 <Debug_PrintGameState+0x1a2>
 80026b0:	484c      	ldr	r0, [pc, #304]	@ (80027e4 <Debug_PrintGameState+0x2d4>)
                  g_buttons[i].previous_state ? "PRESSED" : "RELEASED");
 80026b2:	4c4a      	ldr	r4, [pc, #296]	@ (80027dc <Debug_PrintGameState+0x2cc>)
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4423      	add	r3, r4
 80026c0:	781b      	ldrb	r3, [r3, #0]
        Log_Print("BTN %s: %s (prev: %s)\r\n",
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <Debug_PrintGameState+0x1ba>
 80026c6:	4b46      	ldr	r3, [pc, #280]	@ (80027e0 <Debug_PrintGameState+0x2d0>)
 80026c8:	e000      	b.n	80026cc <Debug_PrintGameState+0x1bc>
 80026ca:	4b46      	ldr	r3, [pc, #280]	@ (80027e4 <Debug_PrintGameState+0x2d4>)
 80026cc:	4602      	mov	r2, r0
 80026ce:	4846      	ldr	r0, [pc, #280]	@ (80027e8 <Debug_PrintGameState+0x2d8>)
 80026d0:	f7ff fedc 	bl	800248c <Log_Print>
    for(int i = 0; i < 4; i++) {
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	3301      	adds	r3, #1
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2b03      	cmp	r3, #3
 80026de:	ddd4      	ble.n	800268a <Debug_PrintGameState+0x17a>
    }
    Log_Print("\r\n");
 80026e0:	4818      	ldr	r0, [pc, #96]	@ (8002744 <Debug_PrintGameState+0x234>)
 80026e2:	f7ff fed3 	bl	800248c <Log_Print>

    // ADC Values
    Log_Print("--- ADC Values ---\r\n");
 80026e6:	4841      	ldr	r0, [pc, #260]	@ (80027ec <Debug_PrintGameState+0x2dc>)
 80026e8:	f7ff fed0 	bl	800248c <Log_Print>
    Log_Print("POT (Speed):   %u / 1023\r\n", g_adc_values[0]);
 80026ec:	4b40      	ldr	r3, [pc, #256]	@ (80027f0 <Debug_PrintGameState+0x2e0>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	4619      	mov	r1, r3
 80026f4:	483f      	ldr	r0, [pc, #252]	@ (80027f4 <Debug_PrintGameState+0x2e4>)
 80026f6:	f7ff fec9 	bl	800248c <Log_Print>
    Log_Print("ADC Channel 1: %u / 1023\r\n", g_adc_values[1]);
 80026fa:	4b3d      	ldr	r3, [pc, #244]	@ (80027f0 <Debug_PrintGameState+0x2e0>)
 80026fc:	885b      	ldrh	r3, [r3, #2]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	4619      	mov	r1, r3
 8002702:	483d      	ldr	r0, [pc, #244]	@ (80027f8 <Debug_PrintGameState+0x2e8>)
 8002704:	f7ff fec2 	bl	800248c <Log_Print>
    Log_Print("ADC Channel 2: %u / 1023\r\n", g_adc_values[2]);
 8002708:	4b39      	ldr	r3, [pc, #228]	@ (80027f0 <Debug_PrintGameState+0x2e0>)
 800270a:	889b      	ldrh	r3, [r3, #4]
 800270c:	b29b      	uxth	r3, r3
 800270e:	4619      	mov	r1, r3
 8002710:	483a      	ldr	r0, [pc, #232]	@ (80027fc <Debug_PrintGameState+0x2ec>)
 8002712:	f7ff febb 	bl	800248c <Log_Print>
    Log_Print("Current Chan:  %u\r\n", g_current_adc_channel);
 8002716:	4b3a      	ldr	r3, [pc, #232]	@ (8002800 <Debug_PrintGameState+0x2f0>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	b2db      	uxtb	r3, r3
 800271c:	4619      	mov	r1, r3
 800271e:	4839      	ldr	r0, [pc, #228]	@ (8002804 <Debug_PrintGameState+0x2f4>)
 8002720:	f7ff feb4 	bl	800248c <Log_Print>
    Log_Print("\r\n");
 8002724:	4807      	ldr	r0, [pc, #28]	@ (8002744 <Debug_PrintGameState+0x234>)
 8002726:	f7ff feb1 	bl	800248c <Log_Print>

    Log_Print("========================================\r\n");
 800272a:	4807      	ldr	r0, [pc, #28]	@ (8002748 <Debug_PrintGameState+0x238>)
 800272c:	f7ff feae 	bl	800248c <Log_Print>
    Log_Print("\r\n");
 8002730:	4804      	ldr	r0, [pc, #16]	@ (8002744 <Debug_PrintGameState+0x234>)
 8002732:	f7ff feab 	bl	800248c <Log_Print>
 8002736:	e000      	b.n	800273a <Debug_PrintGameState+0x22a>
    if(!g_system_initialized) return;
 8002738:	bf00      	nop
}
 800273a:	3724      	adds	r7, #36	@ 0x24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd90      	pop	{r4, r7, pc}
 8002740:	2000018c 	.word	0x2000018c
 8002744:	08004060 	.word	0x08004060
 8002748:	08004064 	.word	0x08004064
 800274c:	08004090 	.word	0x08004090
 8002750:	080040ac 	.word	0x080040ac
 8002754:	080040bc 	.word	0x080040bc
 8002758:	20000084 	.word	0x20000084
 800275c:	080040c4 	.word	0x080040c4
 8002760:	080040cc 	.word	0x080040cc
 8002764:	080040e0 	.word	0x080040e0
 8002768:	080040ec 	.word	0x080040ec
 800276c:	080040fc 	.word	0x080040fc
 8002770:	08004108 	.word	0x08004108
 8002774:	08004118 	.word	0x08004118
 8002778:	08004120 	.word	0x08004120
 800277c:	0800412c 	.word	0x0800412c
 8002780:	08004138 	.word	0x08004138
 8002784:	20000086 	.word	0x20000086
 8002788:	08004150 	.word	0x08004150
 800278c:	2000008c 	.word	0x2000008c
 8002790:	08004168 	.word	0x08004168
 8002794:	20000088 	.word	0x20000088
 8002798:	08004180 	.word	0x08004180
 800279c:	20000085 	.word	0x20000085
 80027a0:	08004194 	.word	0x08004194
 80027a4:	080041ac 	.word	0x080041ac
 80027a8:	200000b8 	.word	0x200000b8
 80027ac:	080041c4 	.word	0x080041c4
 80027b0:	200000b9 	.word	0x200000b9
 80027b4:	080041dc 	.word	0x080041dc
 80027b8:	080041f4 	.word	0x080041f4
 80027bc:	20000098 	.word	0x20000098
 80027c0:	08004200 	.word	0x08004200
 80027c4:	08004204 	.word	0x08004204
 80027c8:	08004208 	.word	0x08004208
 80027cc:	200000ba 	.word	0x200000ba
 80027d0:	0800420c 	.word	0x0800420c
 80027d4:	08004224 	.word	0x08004224
 80027d8:	08004304 	.word	0x08004304
 80027dc:	200000cc 	.word	0x200000cc
 80027e0:	0800423c 	.word	0x0800423c
 80027e4:	08004244 	.word	0x08004244
 80027e8:	08004250 	.word	0x08004250
 80027ec:	08004268 	.word	0x08004268
 80027f0:	200000fc 	.word	0x200000fc
 80027f4:	08004280 	.word	0x08004280
 80027f8:	0800429c 	.word	0x0800429c
 80027fc:	080042b8 	.word	0x080042b8
 8002800:	20000102 	.word	0x20000102
 8002804:	080042d4 	.word	0x080042d4

08002808 <SysTick_Handler>:

/* ============================================================================
 * Interrupt Handler
 * ============================================================================ */
void SysTick_Handler(void) {
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
    g_tick_counter++;
 800280c:	4b04      	ldr	r3, [pc, #16]	@ (8002820 <SysTick_Handler+0x18>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	3301      	adds	r3, #1
 8002812:	4a03      	ldr	r2, [pc, #12]	@ (8002820 <SysTick_Handler+0x18>)
 8002814:	6013      	str	r3, [r2, #0]
}
 8002816:	bf00      	nop
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	20000188 	.word	0x20000188

08002824 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002824:	480d      	ldr	r0, [pc, #52]	@ (800285c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002826:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002828:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800282c:	480c      	ldr	r0, [pc, #48]	@ (8002860 <LoopForever+0x6>)
  ldr r1, =_edata
 800282e:	490d      	ldr	r1, [pc, #52]	@ (8002864 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002830:	4a0d      	ldr	r2, [pc, #52]	@ (8002868 <LoopForever+0xe>)
  movs r3, #0
 8002832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002834:	e002      	b.n	800283c <LoopCopyDataInit>

08002836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800283a:	3304      	adds	r3, #4

0800283c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800283c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800283e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002840:	d3f9      	bcc.n	8002836 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002842:	4a0a      	ldr	r2, [pc, #40]	@ (800286c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002844:	4c0a      	ldr	r4, [pc, #40]	@ (8002870 <LoopForever+0x16>)
  movs r3, #0
 8002846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002848:	e001      	b.n	800284e <LoopFillZerobss>

0800284a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800284a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800284c:	3204      	adds	r2, #4

0800284e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800284e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002850:	d3fb      	bcc.n	800284a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8002852:	f000 fa13 	bl	8002c7c <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8002856:	f7fe fef9 	bl	800164c <main>

0800285a <LoopForever>:

LoopForever:
  b LoopForever
 800285a:	e7fe      	b.n	800285a <LoopForever>
  ldr   r0, =_estack
 800285c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002864:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002868:	08004528 	.word	0x08004528
  ldr r2, =_sbss
 800286c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002870:	200002dc 	.word	0x200002dc

08002874 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002874:	e7fe      	b.n	8002874 <BusFault_Handler>
	...

08002878 <srand>:
 8002878:	b538      	push	{r3, r4, r5, lr}
 800287a:	4b10      	ldr	r3, [pc, #64]	@ (80028bc <srand+0x44>)
 800287c:	681d      	ldr	r5, [r3, #0]
 800287e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002880:	4604      	mov	r4, r0
 8002882:	b9b3      	cbnz	r3, 80028b2 <srand+0x3a>
 8002884:	2018      	movs	r0, #24
 8002886:	f000 fa89 	bl	8002d9c <malloc>
 800288a:	4602      	mov	r2, r0
 800288c:	6328      	str	r0, [r5, #48]	@ 0x30
 800288e:	b920      	cbnz	r0, 800289a <srand+0x22>
 8002890:	4b0b      	ldr	r3, [pc, #44]	@ (80028c0 <srand+0x48>)
 8002892:	480c      	ldr	r0, [pc, #48]	@ (80028c4 <srand+0x4c>)
 8002894:	2146      	movs	r1, #70	@ 0x46
 8002896:	f000 fa19 	bl	8002ccc <__assert_func>
 800289a:	490b      	ldr	r1, [pc, #44]	@ (80028c8 <srand+0x50>)
 800289c:	4b0b      	ldr	r3, [pc, #44]	@ (80028cc <srand+0x54>)
 800289e:	e9c0 1300 	strd	r1, r3, [r0]
 80028a2:	4b0b      	ldr	r3, [pc, #44]	@ (80028d0 <srand+0x58>)
 80028a4:	6083      	str	r3, [r0, #8]
 80028a6:	230b      	movs	r3, #11
 80028a8:	8183      	strh	r3, [r0, #12]
 80028aa:	2100      	movs	r1, #0
 80028ac:	2001      	movs	r0, #1
 80028ae:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80028b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80028b4:	2200      	movs	r2, #0
 80028b6:	611c      	str	r4, [r3, #16]
 80028b8:	615a      	str	r2, [r3, #20]
 80028ba:	bd38      	pop	{r3, r4, r5, pc}
 80028bc:	20000018 	.word	0x20000018
 80028c0:	08004438 	.word	0x08004438
 80028c4:	0800444f 	.word	0x0800444f
 80028c8:	abcd330e 	.word	0xabcd330e
 80028cc:	e66d1234 	.word	0xe66d1234
 80028d0:	0005deec 	.word	0x0005deec

080028d4 <rand>:
 80028d4:	4b16      	ldr	r3, [pc, #88]	@ (8002930 <rand+0x5c>)
 80028d6:	b510      	push	{r4, lr}
 80028d8:	681c      	ldr	r4, [r3, #0]
 80028da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80028dc:	b9b3      	cbnz	r3, 800290c <rand+0x38>
 80028de:	2018      	movs	r0, #24
 80028e0:	f000 fa5c 	bl	8002d9c <malloc>
 80028e4:	4602      	mov	r2, r0
 80028e6:	6320      	str	r0, [r4, #48]	@ 0x30
 80028e8:	b920      	cbnz	r0, 80028f4 <rand+0x20>
 80028ea:	4b12      	ldr	r3, [pc, #72]	@ (8002934 <rand+0x60>)
 80028ec:	4812      	ldr	r0, [pc, #72]	@ (8002938 <rand+0x64>)
 80028ee:	2152      	movs	r1, #82	@ 0x52
 80028f0:	f000 f9ec 	bl	8002ccc <__assert_func>
 80028f4:	4911      	ldr	r1, [pc, #68]	@ (800293c <rand+0x68>)
 80028f6:	4b12      	ldr	r3, [pc, #72]	@ (8002940 <rand+0x6c>)
 80028f8:	e9c0 1300 	strd	r1, r3, [r0]
 80028fc:	4b11      	ldr	r3, [pc, #68]	@ (8002944 <rand+0x70>)
 80028fe:	6083      	str	r3, [r0, #8]
 8002900:	230b      	movs	r3, #11
 8002902:	8183      	strh	r3, [r0, #12]
 8002904:	2100      	movs	r1, #0
 8002906:	2001      	movs	r0, #1
 8002908:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800290c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800290e:	480e      	ldr	r0, [pc, #56]	@ (8002948 <rand+0x74>)
 8002910:	690b      	ldr	r3, [r1, #16]
 8002912:	694c      	ldr	r4, [r1, #20]
 8002914:	4a0d      	ldr	r2, [pc, #52]	@ (800294c <rand+0x78>)
 8002916:	4358      	muls	r0, r3
 8002918:	fb02 0004 	mla	r0, r2, r4, r0
 800291c:	fba3 3202 	umull	r3, r2, r3, r2
 8002920:	3301      	adds	r3, #1
 8002922:	eb40 0002 	adc.w	r0, r0, r2
 8002926:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800292a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800292e:	bd10      	pop	{r4, pc}
 8002930:	20000018 	.word	0x20000018
 8002934:	08004438 	.word	0x08004438
 8002938:	0800444f 	.word	0x0800444f
 800293c:	abcd330e 	.word	0xabcd330e
 8002940:	e66d1234 	.word	0xe66d1234
 8002944:	0005deec 	.word	0x0005deec
 8002948:	5851f42d 	.word	0x5851f42d
 800294c:	4c957f2d 	.word	0x4c957f2d

08002950 <std>:
 8002950:	2300      	movs	r3, #0
 8002952:	b510      	push	{r4, lr}
 8002954:	4604      	mov	r4, r0
 8002956:	e9c0 3300 	strd	r3, r3, [r0]
 800295a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800295e:	6083      	str	r3, [r0, #8]
 8002960:	8181      	strh	r1, [r0, #12]
 8002962:	6643      	str	r3, [r0, #100]	@ 0x64
 8002964:	81c2      	strh	r2, [r0, #14]
 8002966:	6183      	str	r3, [r0, #24]
 8002968:	4619      	mov	r1, r3
 800296a:	2208      	movs	r2, #8
 800296c:	305c      	adds	r0, #92	@ 0x5c
 800296e:	f000 f931 	bl	8002bd4 <memset>
 8002972:	4b0d      	ldr	r3, [pc, #52]	@ (80029a8 <std+0x58>)
 8002974:	6263      	str	r3, [r4, #36]	@ 0x24
 8002976:	4b0d      	ldr	r3, [pc, #52]	@ (80029ac <std+0x5c>)
 8002978:	62a3      	str	r3, [r4, #40]	@ 0x28
 800297a:	4b0d      	ldr	r3, [pc, #52]	@ (80029b0 <std+0x60>)
 800297c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800297e:	4b0d      	ldr	r3, [pc, #52]	@ (80029b4 <std+0x64>)
 8002980:	6323      	str	r3, [r4, #48]	@ 0x30
 8002982:	4b0d      	ldr	r3, [pc, #52]	@ (80029b8 <std+0x68>)
 8002984:	6224      	str	r4, [r4, #32]
 8002986:	429c      	cmp	r4, r3
 8002988:	d006      	beq.n	8002998 <std+0x48>
 800298a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800298e:	4294      	cmp	r4, r2
 8002990:	d002      	beq.n	8002998 <std+0x48>
 8002992:	33d0      	adds	r3, #208	@ 0xd0
 8002994:	429c      	cmp	r4, r3
 8002996:	d105      	bne.n	80029a4 <std+0x54>
 8002998:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800299c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029a0:	f000 b990 	b.w	8002cc4 <__retarget_lock_init_recursive>
 80029a4:	bd10      	pop	{r4, pc}
 80029a6:	bf00      	nop
 80029a8:	08002ad5 	.word	0x08002ad5
 80029ac:	08002af7 	.word	0x08002af7
 80029b0:	08002b2f 	.word	0x08002b2f
 80029b4:	08002b53 	.word	0x08002b53
 80029b8:	20000190 	.word	0x20000190

080029bc <stdio_exit_handler>:
 80029bc:	4a02      	ldr	r2, [pc, #8]	@ (80029c8 <stdio_exit_handler+0xc>)
 80029be:	4903      	ldr	r1, [pc, #12]	@ (80029cc <stdio_exit_handler+0x10>)
 80029c0:	4803      	ldr	r0, [pc, #12]	@ (80029d0 <stdio_exit_handler+0x14>)
 80029c2:	f000 b869 	b.w	8002a98 <_fwalk_sglue>
 80029c6:	bf00      	nop
 80029c8:	2000000c 	.word	0x2000000c
 80029cc:	080035d9 	.word	0x080035d9
 80029d0:	2000001c 	.word	0x2000001c

080029d4 <cleanup_stdio>:
 80029d4:	6841      	ldr	r1, [r0, #4]
 80029d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002a08 <cleanup_stdio+0x34>)
 80029d8:	4299      	cmp	r1, r3
 80029da:	b510      	push	{r4, lr}
 80029dc:	4604      	mov	r4, r0
 80029de:	d001      	beq.n	80029e4 <cleanup_stdio+0x10>
 80029e0:	f000 fdfa 	bl	80035d8 <_fflush_r>
 80029e4:	68a1      	ldr	r1, [r4, #8]
 80029e6:	4b09      	ldr	r3, [pc, #36]	@ (8002a0c <cleanup_stdio+0x38>)
 80029e8:	4299      	cmp	r1, r3
 80029ea:	d002      	beq.n	80029f2 <cleanup_stdio+0x1e>
 80029ec:	4620      	mov	r0, r4
 80029ee:	f000 fdf3 	bl	80035d8 <_fflush_r>
 80029f2:	68e1      	ldr	r1, [r4, #12]
 80029f4:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <cleanup_stdio+0x3c>)
 80029f6:	4299      	cmp	r1, r3
 80029f8:	d004      	beq.n	8002a04 <cleanup_stdio+0x30>
 80029fa:	4620      	mov	r0, r4
 80029fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a00:	f000 bdea 	b.w	80035d8 <_fflush_r>
 8002a04:	bd10      	pop	{r4, pc}
 8002a06:	bf00      	nop
 8002a08:	20000190 	.word	0x20000190
 8002a0c:	200001f8 	.word	0x200001f8
 8002a10:	20000260 	.word	0x20000260

08002a14 <global_stdio_init.part.0>:
 8002a14:	b510      	push	{r4, lr}
 8002a16:	4b0b      	ldr	r3, [pc, #44]	@ (8002a44 <global_stdio_init.part.0+0x30>)
 8002a18:	4c0b      	ldr	r4, [pc, #44]	@ (8002a48 <global_stdio_init.part.0+0x34>)
 8002a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8002a4c <global_stdio_init.part.0+0x38>)
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	4620      	mov	r0, r4
 8002a20:	2200      	movs	r2, #0
 8002a22:	2104      	movs	r1, #4
 8002a24:	f7ff ff94 	bl	8002950 <std>
 8002a28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	2109      	movs	r1, #9
 8002a30:	f7ff ff8e 	bl	8002950 <std>
 8002a34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002a38:	2202      	movs	r2, #2
 8002a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a3e:	2112      	movs	r1, #18
 8002a40:	f7ff bf86 	b.w	8002950 <std>
 8002a44:	200002c8 	.word	0x200002c8
 8002a48:	20000190 	.word	0x20000190
 8002a4c:	080029bd 	.word	0x080029bd

08002a50 <__sfp_lock_acquire>:
 8002a50:	4801      	ldr	r0, [pc, #4]	@ (8002a58 <__sfp_lock_acquire+0x8>)
 8002a52:	f000 b938 	b.w	8002cc6 <__retarget_lock_acquire_recursive>
 8002a56:	bf00      	nop
 8002a58:	200002d1 	.word	0x200002d1

08002a5c <__sfp_lock_release>:
 8002a5c:	4801      	ldr	r0, [pc, #4]	@ (8002a64 <__sfp_lock_release+0x8>)
 8002a5e:	f000 b933 	b.w	8002cc8 <__retarget_lock_release_recursive>
 8002a62:	bf00      	nop
 8002a64:	200002d1 	.word	0x200002d1

08002a68 <__sinit>:
 8002a68:	b510      	push	{r4, lr}
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	f7ff fff0 	bl	8002a50 <__sfp_lock_acquire>
 8002a70:	6a23      	ldr	r3, [r4, #32]
 8002a72:	b11b      	cbz	r3, 8002a7c <__sinit+0x14>
 8002a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a78:	f7ff bff0 	b.w	8002a5c <__sfp_lock_release>
 8002a7c:	4b04      	ldr	r3, [pc, #16]	@ (8002a90 <__sinit+0x28>)
 8002a7e:	6223      	str	r3, [r4, #32]
 8002a80:	4b04      	ldr	r3, [pc, #16]	@ (8002a94 <__sinit+0x2c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f5      	bne.n	8002a74 <__sinit+0xc>
 8002a88:	f7ff ffc4 	bl	8002a14 <global_stdio_init.part.0>
 8002a8c:	e7f2      	b.n	8002a74 <__sinit+0xc>
 8002a8e:	bf00      	nop
 8002a90:	080029d5 	.word	0x080029d5
 8002a94:	200002c8 	.word	0x200002c8

08002a98 <_fwalk_sglue>:
 8002a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a9c:	4607      	mov	r7, r0
 8002a9e:	4688      	mov	r8, r1
 8002aa0:	4614      	mov	r4, r2
 8002aa2:	2600      	movs	r6, #0
 8002aa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002aa8:	f1b9 0901 	subs.w	r9, r9, #1
 8002aac:	d505      	bpl.n	8002aba <_fwalk_sglue+0x22>
 8002aae:	6824      	ldr	r4, [r4, #0]
 8002ab0:	2c00      	cmp	r4, #0
 8002ab2:	d1f7      	bne.n	8002aa4 <_fwalk_sglue+0xc>
 8002ab4:	4630      	mov	r0, r6
 8002ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002aba:	89ab      	ldrh	r3, [r5, #12]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d907      	bls.n	8002ad0 <_fwalk_sglue+0x38>
 8002ac0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	d003      	beq.n	8002ad0 <_fwalk_sglue+0x38>
 8002ac8:	4629      	mov	r1, r5
 8002aca:	4638      	mov	r0, r7
 8002acc:	47c0      	blx	r8
 8002ace:	4306      	orrs	r6, r0
 8002ad0:	3568      	adds	r5, #104	@ 0x68
 8002ad2:	e7e9      	b.n	8002aa8 <_fwalk_sglue+0x10>

08002ad4 <__sread>:
 8002ad4:	b510      	push	{r4, lr}
 8002ad6:	460c      	mov	r4, r1
 8002ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002adc:	f000 f8a4 	bl	8002c28 <_read_r>
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	bfab      	itete	ge
 8002ae4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002ae6:	89a3      	ldrhlt	r3, [r4, #12]
 8002ae8:	181b      	addge	r3, r3, r0
 8002aea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002aee:	bfac      	ite	ge
 8002af0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002af2:	81a3      	strhlt	r3, [r4, #12]
 8002af4:	bd10      	pop	{r4, pc}

08002af6 <__swrite>:
 8002af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002afa:	461f      	mov	r7, r3
 8002afc:	898b      	ldrh	r3, [r1, #12]
 8002afe:	05db      	lsls	r3, r3, #23
 8002b00:	4605      	mov	r5, r0
 8002b02:	460c      	mov	r4, r1
 8002b04:	4616      	mov	r6, r2
 8002b06:	d505      	bpl.n	8002b14 <__swrite+0x1e>
 8002b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f000 f878 	bl	8002c04 <_lseek_r>
 8002b14:	89a3      	ldrh	r3, [r4, #12]
 8002b16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b1e:	81a3      	strh	r3, [r4, #12]
 8002b20:	4632      	mov	r2, r6
 8002b22:	463b      	mov	r3, r7
 8002b24:	4628      	mov	r0, r5
 8002b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b2a:	f000 b88f 	b.w	8002c4c <_write_r>

08002b2e <__sseek>:
 8002b2e:	b510      	push	{r4, lr}
 8002b30:	460c      	mov	r4, r1
 8002b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b36:	f000 f865 	bl	8002c04 <_lseek_r>
 8002b3a:	1c43      	adds	r3, r0, #1
 8002b3c:	89a3      	ldrh	r3, [r4, #12]
 8002b3e:	bf15      	itete	ne
 8002b40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002b42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002b46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002b4a:	81a3      	strheq	r3, [r4, #12]
 8002b4c:	bf18      	it	ne
 8002b4e:	81a3      	strhne	r3, [r4, #12]
 8002b50:	bd10      	pop	{r4, pc}

08002b52 <__sclose>:
 8002b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b56:	f000 b845 	b.w	8002be4 <_close_r>

08002b5a <_vsniprintf_r>:
 8002b5a:	b530      	push	{r4, r5, lr}
 8002b5c:	4614      	mov	r4, r2
 8002b5e:	2c00      	cmp	r4, #0
 8002b60:	b09b      	sub	sp, #108	@ 0x6c
 8002b62:	4605      	mov	r5, r0
 8002b64:	461a      	mov	r2, r3
 8002b66:	da05      	bge.n	8002b74 <_vsniprintf_r+0x1a>
 8002b68:	238b      	movs	r3, #139	@ 0x8b
 8002b6a:	6003      	str	r3, [r0, #0]
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b70:	b01b      	add	sp, #108	@ 0x6c
 8002b72:	bd30      	pop	{r4, r5, pc}
 8002b74:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002b78:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	9319      	str	r3, [sp, #100]	@ 0x64
 8002b82:	bf14      	ite	ne
 8002b84:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002b88:	4623      	moveq	r3, r4
 8002b8a:	9302      	str	r3, [sp, #8]
 8002b8c:	9305      	str	r3, [sp, #20]
 8002b8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b92:	9100      	str	r1, [sp, #0]
 8002b94:	9104      	str	r1, [sp, #16]
 8002b96:	f8ad 300e 	strh.w	r3, [sp, #14]
 8002b9a:	4669      	mov	r1, sp
 8002b9c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8002b9e:	f000 fa0f 	bl	8002fc0 <_svfiprintf_r>
 8002ba2:	1c43      	adds	r3, r0, #1
 8002ba4:	bfbc      	itt	lt
 8002ba6:	238b      	movlt	r3, #139	@ 0x8b
 8002ba8:	602b      	strlt	r3, [r5, #0]
 8002baa:	2c00      	cmp	r4, #0
 8002bac:	d0e0      	beq.n	8002b70 <_vsniprintf_r+0x16>
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]
 8002bb4:	e7dc      	b.n	8002b70 <_vsniprintf_r+0x16>
	...

08002bb8 <vsniprintf>:
 8002bb8:	b507      	push	{r0, r1, r2, lr}
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	460a      	mov	r2, r1
 8002bc0:	4601      	mov	r1, r0
 8002bc2:	4803      	ldr	r0, [pc, #12]	@ (8002bd0 <vsniprintf+0x18>)
 8002bc4:	6800      	ldr	r0, [r0, #0]
 8002bc6:	f7ff ffc8 	bl	8002b5a <_vsniprintf_r>
 8002bca:	b003      	add	sp, #12
 8002bcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8002bd0:	20000018 	.word	0x20000018

08002bd4 <memset>:
 8002bd4:	4402      	add	r2, r0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d100      	bne.n	8002bde <memset+0xa>
 8002bdc:	4770      	bx	lr
 8002bde:	f803 1b01 	strb.w	r1, [r3], #1
 8002be2:	e7f9      	b.n	8002bd8 <memset+0x4>

08002be4 <_close_r>:
 8002be4:	b538      	push	{r3, r4, r5, lr}
 8002be6:	4d06      	ldr	r5, [pc, #24]	@ (8002c00 <_close_r+0x1c>)
 8002be8:	2300      	movs	r3, #0
 8002bea:	4604      	mov	r4, r0
 8002bec:	4608      	mov	r0, r1
 8002bee:	602b      	str	r3, [r5, #0]
 8002bf0:	f7ff fbc0 	bl	8002374 <_close>
 8002bf4:	1c43      	adds	r3, r0, #1
 8002bf6:	d102      	bne.n	8002bfe <_close_r+0x1a>
 8002bf8:	682b      	ldr	r3, [r5, #0]
 8002bfa:	b103      	cbz	r3, 8002bfe <_close_r+0x1a>
 8002bfc:	6023      	str	r3, [r4, #0]
 8002bfe:	bd38      	pop	{r3, r4, r5, pc}
 8002c00:	200002cc 	.word	0x200002cc

08002c04 <_lseek_r>:
 8002c04:	b538      	push	{r3, r4, r5, lr}
 8002c06:	4d07      	ldr	r5, [pc, #28]	@ (8002c24 <_lseek_r+0x20>)
 8002c08:	4604      	mov	r4, r0
 8002c0a:	4608      	mov	r0, r1
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	2200      	movs	r2, #0
 8002c10:	602a      	str	r2, [r5, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	f7ff fbd5 	bl	80023c2 <_lseek>
 8002c18:	1c43      	adds	r3, r0, #1
 8002c1a:	d102      	bne.n	8002c22 <_lseek_r+0x1e>
 8002c1c:	682b      	ldr	r3, [r5, #0]
 8002c1e:	b103      	cbz	r3, 8002c22 <_lseek_r+0x1e>
 8002c20:	6023      	str	r3, [r4, #0]
 8002c22:	bd38      	pop	{r3, r4, r5, pc}
 8002c24:	200002cc 	.word	0x200002cc

08002c28 <_read_r>:
 8002c28:	b538      	push	{r3, r4, r5, lr}
 8002c2a:	4d07      	ldr	r5, [pc, #28]	@ (8002c48 <_read_r+0x20>)
 8002c2c:	4604      	mov	r4, r0
 8002c2e:	4608      	mov	r0, r1
 8002c30:	4611      	mov	r1, r2
 8002c32:	2200      	movs	r2, #0
 8002c34:	602a      	str	r2, [r5, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	f7ff fb63 	bl	8002302 <_read>
 8002c3c:	1c43      	adds	r3, r0, #1
 8002c3e:	d102      	bne.n	8002c46 <_read_r+0x1e>
 8002c40:	682b      	ldr	r3, [r5, #0]
 8002c42:	b103      	cbz	r3, 8002c46 <_read_r+0x1e>
 8002c44:	6023      	str	r3, [r4, #0]
 8002c46:	bd38      	pop	{r3, r4, r5, pc}
 8002c48:	200002cc 	.word	0x200002cc

08002c4c <_write_r>:
 8002c4c:	b538      	push	{r3, r4, r5, lr}
 8002c4e:	4d07      	ldr	r5, [pc, #28]	@ (8002c6c <_write_r+0x20>)
 8002c50:	4604      	mov	r4, r0
 8002c52:	4608      	mov	r0, r1
 8002c54:	4611      	mov	r1, r2
 8002c56:	2200      	movs	r2, #0
 8002c58:	602a      	str	r2, [r5, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f7ff fb6e 	bl	800233c <_write>
 8002c60:	1c43      	adds	r3, r0, #1
 8002c62:	d102      	bne.n	8002c6a <_write_r+0x1e>
 8002c64:	682b      	ldr	r3, [r5, #0]
 8002c66:	b103      	cbz	r3, 8002c6a <_write_r+0x1e>
 8002c68:	6023      	str	r3, [r4, #0]
 8002c6a:	bd38      	pop	{r3, r4, r5, pc}
 8002c6c:	200002cc 	.word	0x200002cc

08002c70 <__errno>:
 8002c70:	4b01      	ldr	r3, [pc, #4]	@ (8002c78 <__errno+0x8>)
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20000018 	.word	0x20000018

08002c7c <__libc_init_array>:
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	4d0d      	ldr	r5, [pc, #52]	@ (8002cb4 <__libc_init_array+0x38>)
 8002c80:	4c0d      	ldr	r4, [pc, #52]	@ (8002cb8 <__libc_init_array+0x3c>)
 8002c82:	1b64      	subs	r4, r4, r5
 8002c84:	10a4      	asrs	r4, r4, #2
 8002c86:	2600      	movs	r6, #0
 8002c88:	42a6      	cmp	r6, r4
 8002c8a:	d109      	bne.n	8002ca0 <__libc_init_array+0x24>
 8002c8c:	4d0b      	ldr	r5, [pc, #44]	@ (8002cbc <__libc_init_array+0x40>)
 8002c8e:	4c0c      	ldr	r4, [pc, #48]	@ (8002cc0 <__libc_init_array+0x44>)
 8002c90:	f000 ffee 	bl	8003c70 <_init>
 8002c94:	1b64      	subs	r4, r4, r5
 8002c96:	10a4      	asrs	r4, r4, #2
 8002c98:	2600      	movs	r6, #0
 8002c9a:	42a6      	cmp	r6, r4
 8002c9c:	d105      	bne.n	8002caa <__libc_init_array+0x2e>
 8002c9e:	bd70      	pop	{r4, r5, r6, pc}
 8002ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ca4:	4798      	blx	r3
 8002ca6:	3601      	adds	r6, #1
 8002ca8:	e7ee      	b.n	8002c88 <__libc_init_array+0xc>
 8002caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cae:	4798      	blx	r3
 8002cb0:	3601      	adds	r6, #1
 8002cb2:	e7f2      	b.n	8002c9a <__libc_init_array+0x1e>
 8002cb4:	08004520 	.word	0x08004520
 8002cb8:	08004520 	.word	0x08004520
 8002cbc:	08004520 	.word	0x08004520
 8002cc0:	08004524 	.word	0x08004524

08002cc4 <__retarget_lock_init_recursive>:
 8002cc4:	4770      	bx	lr

08002cc6 <__retarget_lock_acquire_recursive>:
 8002cc6:	4770      	bx	lr

08002cc8 <__retarget_lock_release_recursive>:
 8002cc8:	4770      	bx	lr
	...

08002ccc <__assert_func>:
 8002ccc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002cce:	4614      	mov	r4, r2
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b09      	ldr	r3, [pc, #36]	@ (8002cf8 <__assert_func+0x2c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4605      	mov	r5, r0
 8002cd8:	68d8      	ldr	r0, [r3, #12]
 8002cda:	b14c      	cbz	r4, 8002cf0 <__assert_func+0x24>
 8002cdc:	4b07      	ldr	r3, [pc, #28]	@ (8002cfc <__assert_func+0x30>)
 8002cde:	9100      	str	r1, [sp, #0]
 8002ce0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002ce4:	4906      	ldr	r1, [pc, #24]	@ (8002d00 <__assert_func+0x34>)
 8002ce6:	462b      	mov	r3, r5
 8002ce8:	f000 fc9e 	bl	8003628 <fiprintf>
 8002cec:	f000 fce6 	bl	80036bc <abort>
 8002cf0:	4b04      	ldr	r3, [pc, #16]	@ (8002d04 <__assert_func+0x38>)
 8002cf2:	461c      	mov	r4, r3
 8002cf4:	e7f3      	b.n	8002cde <__assert_func+0x12>
 8002cf6:	bf00      	nop
 8002cf8:	20000018 	.word	0x20000018
 8002cfc:	080044a7 	.word	0x080044a7
 8002d00:	080044b4 	.word	0x080044b4
 8002d04:	080044e2 	.word	0x080044e2

08002d08 <_free_r>:
 8002d08:	b538      	push	{r3, r4, r5, lr}
 8002d0a:	4605      	mov	r5, r0
 8002d0c:	2900      	cmp	r1, #0
 8002d0e:	d041      	beq.n	8002d94 <_free_r+0x8c>
 8002d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d14:	1f0c      	subs	r4, r1, #4
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	bfb8      	it	lt
 8002d1a:	18e4      	addlt	r4, r4, r3
 8002d1c:	f000 f8e8 	bl	8002ef0 <__malloc_lock>
 8002d20:	4a1d      	ldr	r2, [pc, #116]	@ (8002d98 <_free_r+0x90>)
 8002d22:	6813      	ldr	r3, [r2, #0]
 8002d24:	b933      	cbnz	r3, 8002d34 <_free_r+0x2c>
 8002d26:	6063      	str	r3, [r4, #4]
 8002d28:	6014      	str	r4, [r2, #0]
 8002d2a:	4628      	mov	r0, r5
 8002d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d30:	f000 b8e4 	b.w	8002efc <__malloc_unlock>
 8002d34:	42a3      	cmp	r3, r4
 8002d36:	d908      	bls.n	8002d4a <_free_r+0x42>
 8002d38:	6820      	ldr	r0, [r4, #0]
 8002d3a:	1821      	adds	r1, r4, r0
 8002d3c:	428b      	cmp	r3, r1
 8002d3e:	bf01      	itttt	eq
 8002d40:	6819      	ldreq	r1, [r3, #0]
 8002d42:	685b      	ldreq	r3, [r3, #4]
 8002d44:	1809      	addeq	r1, r1, r0
 8002d46:	6021      	streq	r1, [r4, #0]
 8002d48:	e7ed      	b.n	8002d26 <_free_r+0x1e>
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	b10b      	cbz	r3, 8002d54 <_free_r+0x4c>
 8002d50:	42a3      	cmp	r3, r4
 8002d52:	d9fa      	bls.n	8002d4a <_free_r+0x42>
 8002d54:	6811      	ldr	r1, [r2, #0]
 8002d56:	1850      	adds	r0, r2, r1
 8002d58:	42a0      	cmp	r0, r4
 8002d5a:	d10b      	bne.n	8002d74 <_free_r+0x6c>
 8002d5c:	6820      	ldr	r0, [r4, #0]
 8002d5e:	4401      	add	r1, r0
 8002d60:	1850      	adds	r0, r2, r1
 8002d62:	4283      	cmp	r3, r0
 8002d64:	6011      	str	r1, [r2, #0]
 8002d66:	d1e0      	bne.n	8002d2a <_free_r+0x22>
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	6053      	str	r3, [r2, #4]
 8002d6e:	4408      	add	r0, r1
 8002d70:	6010      	str	r0, [r2, #0]
 8002d72:	e7da      	b.n	8002d2a <_free_r+0x22>
 8002d74:	d902      	bls.n	8002d7c <_free_r+0x74>
 8002d76:	230c      	movs	r3, #12
 8002d78:	602b      	str	r3, [r5, #0]
 8002d7a:	e7d6      	b.n	8002d2a <_free_r+0x22>
 8002d7c:	6820      	ldr	r0, [r4, #0]
 8002d7e:	1821      	adds	r1, r4, r0
 8002d80:	428b      	cmp	r3, r1
 8002d82:	bf04      	itt	eq
 8002d84:	6819      	ldreq	r1, [r3, #0]
 8002d86:	685b      	ldreq	r3, [r3, #4]
 8002d88:	6063      	str	r3, [r4, #4]
 8002d8a:	bf04      	itt	eq
 8002d8c:	1809      	addeq	r1, r1, r0
 8002d8e:	6021      	streq	r1, [r4, #0]
 8002d90:	6054      	str	r4, [r2, #4]
 8002d92:	e7ca      	b.n	8002d2a <_free_r+0x22>
 8002d94:	bd38      	pop	{r3, r4, r5, pc}
 8002d96:	bf00      	nop
 8002d98:	200002d8 	.word	0x200002d8

08002d9c <malloc>:
 8002d9c:	4b02      	ldr	r3, [pc, #8]	@ (8002da8 <malloc+0xc>)
 8002d9e:	4601      	mov	r1, r0
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	f000 b825 	b.w	8002df0 <_malloc_r>
 8002da6:	bf00      	nop
 8002da8:	20000018 	.word	0x20000018

08002dac <sbrk_aligned>:
 8002dac:	b570      	push	{r4, r5, r6, lr}
 8002dae:	4e0f      	ldr	r6, [pc, #60]	@ (8002dec <sbrk_aligned+0x40>)
 8002db0:	460c      	mov	r4, r1
 8002db2:	6831      	ldr	r1, [r6, #0]
 8002db4:	4605      	mov	r5, r0
 8002db6:	b911      	cbnz	r1, 8002dbe <sbrk_aligned+0x12>
 8002db8:	f000 fc62 	bl	8003680 <_sbrk_r>
 8002dbc:	6030      	str	r0, [r6, #0]
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	f000 fc5d 	bl	8003680 <_sbrk_r>
 8002dc6:	1c43      	adds	r3, r0, #1
 8002dc8:	d103      	bne.n	8002dd2 <sbrk_aligned+0x26>
 8002dca:	f04f 34ff 	mov.w	r4, #4294967295
 8002dce:	4620      	mov	r0, r4
 8002dd0:	bd70      	pop	{r4, r5, r6, pc}
 8002dd2:	1cc4      	adds	r4, r0, #3
 8002dd4:	f024 0403 	bic.w	r4, r4, #3
 8002dd8:	42a0      	cmp	r0, r4
 8002dda:	d0f8      	beq.n	8002dce <sbrk_aligned+0x22>
 8002ddc:	1a21      	subs	r1, r4, r0
 8002dde:	4628      	mov	r0, r5
 8002de0:	f000 fc4e 	bl	8003680 <_sbrk_r>
 8002de4:	3001      	adds	r0, #1
 8002de6:	d1f2      	bne.n	8002dce <sbrk_aligned+0x22>
 8002de8:	e7ef      	b.n	8002dca <sbrk_aligned+0x1e>
 8002dea:	bf00      	nop
 8002dec:	200002d4 	.word	0x200002d4

08002df0 <_malloc_r>:
 8002df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002df4:	1ccd      	adds	r5, r1, #3
 8002df6:	f025 0503 	bic.w	r5, r5, #3
 8002dfa:	3508      	adds	r5, #8
 8002dfc:	2d0c      	cmp	r5, #12
 8002dfe:	bf38      	it	cc
 8002e00:	250c      	movcc	r5, #12
 8002e02:	2d00      	cmp	r5, #0
 8002e04:	4606      	mov	r6, r0
 8002e06:	db01      	blt.n	8002e0c <_malloc_r+0x1c>
 8002e08:	42a9      	cmp	r1, r5
 8002e0a:	d904      	bls.n	8002e16 <_malloc_r+0x26>
 8002e0c:	230c      	movs	r3, #12
 8002e0e:	6033      	str	r3, [r6, #0]
 8002e10:	2000      	movs	r0, #0
 8002e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002eec <_malloc_r+0xfc>
 8002e1a:	f000 f869 	bl	8002ef0 <__malloc_lock>
 8002e1e:	f8d8 3000 	ldr.w	r3, [r8]
 8002e22:	461c      	mov	r4, r3
 8002e24:	bb44      	cbnz	r4, 8002e78 <_malloc_r+0x88>
 8002e26:	4629      	mov	r1, r5
 8002e28:	4630      	mov	r0, r6
 8002e2a:	f7ff ffbf 	bl	8002dac <sbrk_aligned>
 8002e2e:	1c43      	adds	r3, r0, #1
 8002e30:	4604      	mov	r4, r0
 8002e32:	d158      	bne.n	8002ee6 <_malloc_r+0xf6>
 8002e34:	f8d8 4000 	ldr.w	r4, [r8]
 8002e38:	4627      	mov	r7, r4
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d143      	bne.n	8002ec6 <_malloc_r+0xd6>
 8002e3e:	2c00      	cmp	r4, #0
 8002e40:	d04b      	beq.n	8002eda <_malloc_r+0xea>
 8002e42:	6823      	ldr	r3, [r4, #0]
 8002e44:	4639      	mov	r1, r7
 8002e46:	4630      	mov	r0, r6
 8002e48:	eb04 0903 	add.w	r9, r4, r3
 8002e4c:	f000 fc18 	bl	8003680 <_sbrk_r>
 8002e50:	4581      	cmp	r9, r0
 8002e52:	d142      	bne.n	8002eda <_malloc_r+0xea>
 8002e54:	6821      	ldr	r1, [r4, #0]
 8002e56:	1a6d      	subs	r5, r5, r1
 8002e58:	4629      	mov	r1, r5
 8002e5a:	4630      	mov	r0, r6
 8002e5c:	f7ff ffa6 	bl	8002dac <sbrk_aligned>
 8002e60:	3001      	adds	r0, #1
 8002e62:	d03a      	beq.n	8002eda <_malloc_r+0xea>
 8002e64:	6823      	ldr	r3, [r4, #0]
 8002e66:	442b      	add	r3, r5
 8002e68:	6023      	str	r3, [r4, #0]
 8002e6a:	f8d8 3000 	ldr.w	r3, [r8]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	bb62      	cbnz	r2, 8002ecc <_malloc_r+0xdc>
 8002e72:	f8c8 7000 	str.w	r7, [r8]
 8002e76:	e00f      	b.n	8002e98 <_malloc_r+0xa8>
 8002e78:	6822      	ldr	r2, [r4, #0]
 8002e7a:	1b52      	subs	r2, r2, r5
 8002e7c:	d420      	bmi.n	8002ec0 <_malloc_r+0xd0>
 8002e7e:	2a0b      	cmp	r2, #11
 8002e80:	d917      	bls.n	8002eb2 <_malloc_r+0xc2>
 8002e82:	1961      	adds	r1, r4, r5
 8002e84:	42a3      	cmp	r3, r4
 8002e86:	6025      	str	r5, [r4, #0]
 8002e88:	bf18      	it	ne
 8002e8a:	6059      	strne	r1, [r3, #4]
 8002e8c:	6863      	ldr	r3, [r4, #4]
 8002e8e:	bf08      	it	eq
 8002e90:	f8c8 1000 	streq.w	r1, [r8]
 8002e94:	5162      	str	r2, [r4, r5]
 8002e96:	604b      	str	r3, [r1, #4]
 8002e98:	4630      	mov	r0, r6
 8002e9a:	f000 f82f 	bl	8002efc <__malloc_unlock>
 8002e9e:	f104 000b 	add.w	r0, r4, #11
 8002ea2:	1d23      	adds	r3, r4, #4
 8002ea4:	f020 0007 	bic.w	r0, r0, #7
 8002ea8:	1ac2      	subs	r2, r0, r3
 8002eaa:	bf1c      	itt	ne
 8002eac:	1a1b      	subne	r3, r3, r0
 8002eae:	50a3      	strne	r3, [r4, r2]
 8002eb0:	e7af      	b.n	8002e12 <_malloc_r+0x22>
 8002eb2:	6862      	ldr	r2, [r4, #4]
 8002eb4:	42a3      	cmp	r3, r4
 8002eb6:	bf0c      	ite	eq
 8002eb8:	f8c8 2000 	streq.w	r2, [r8]
 8002ebc:	605a      	strne	r2, [r3, #4]
 8002ebe:	e7eb      	b.n	8002e98 <_malloc_r+0xa8>
 8002ec0:	4623      	mov	r3, r4
 8002ec2:	6864      	ldr	r4, [r4, #4]
 8002ec4:	e7ae      	b.n	8002e24 <_malloc_r+0x34>
 8002ec6:	463c      	mov	r4, r7
 8002ec8:	687f      	ldr	r7, [r7, #4]
 8002eca:	e7b6      	b.n	8002e3a <_malloc_r+0x4a>
 8002ecc:	461a      	mov	r2, r3
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	42a3      	cmp	r3, r4
 8002ed2:	d1fb      	bne.n	8002ecc <_malloc_r+0xdc>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	6053      	str	r3, [r2, #4]
 8002ed8:	e7de      	b.n	8002e98 <_malloc_r+0xa8>
 8002eda:	230c      	movs	r3, #12
 8002edc:	6033      	str	r3, [r6, #0]
 8002ede:	4630      	mov	r0, r6
 8002ee0:	f000 f80c 	bl	8002efc <__malloc_unlock>
 8002ee4:	e794      	b.n	8002e10 <_malloc_r+0x20>
 8002ee6:	6005      	str	r5, [r0, #0]
 8002ee8:	e7d6      	b.n	8002e98 <_malloc_r+0xa8>
 8002eea:	bf00      	nop
 8002eec:	200002d8 	.word	0x200002d8

08002ef0 <__malloc_lock>:
 8002ef0:	4801      	ldr	r0, [pc, #4]	@ (8002ef8 <__malloc_lock+0x8>)
 8002ef2:	f7ff bee8 	b.w	8002cc6 <__retarget_lock_acquire_recursive>
 8002ef6:	bf00      	nop
 8002ef8:	200002d0 	.word	0x200002d0

08002efc <__malloc_unlock>:
 8002efc:	4801      	ldr	r0, [pc, #4]	@ (8002f04 <__malloc_unlock+0x8>)
 8002efe:	f7ff bee3 	b.w	8002cc8 <__retarget_lock_release_recursive>
 8002f02:	bf00      	nop
 8002f04:	200002d0 	.word	0x200002d0

08002f08 <__ssputs_r>:
 8002f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f0c:	688e      	ldr	r6, [r1, #8]
 8002f0e:	461f      	mov	r7, r3
 8002f10:	42be      	cmp	r6, r7
 8002f12:	680b      	ldr	r3, [r1, #0]
 8002f14:	4682      	mov	sl, r0
 8002f16:	460c      	mov	r4, r1
 8002f18:	4690      	mov	r8, r2
 8002f1a:	d82d      	bhi.n	8002f78 <__ssputs_r+0x70>
 8002f1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002f20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002f24:	d026      	beq.n	8002f74 <__ssputs_r+0x6c>
 8002f26:	6965      	ldr	r5, [r4, #20]
 8002f28:	6909      	ldr	r1, [r1, #16]
 8002f2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f2e:	eba3 0901 	sub.w	r9, r3, r1
 8002f32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f36:	1c7b      	adds	r3, r7, #1
 8002f38:	444b      	add	r3, r9
 8002f3a:	106d      	asrs	r5, r5, #1
 8002f3c:	429d      	cmp	r5, r3
 8002f3e:	bf38      	it	cc
 8002f40:	461d      	movcc	r5, r3
 8002f42:	0553      	lsls	r3, r2, #21
 8002f44:	d527      	bpl.n	8002f96 <__ssputs_r+0x8e>
 8002f46:	4629      	mov	r1, r5
 8002f48:	f7ff ff52 	bl	8002df0 <_malloc_r>
 8002f4c:	4606      	mov	r6, r0
 8002f4e:	b360      	cbz	r0, 8002faa <__ssputs_r+0xa2>
 8002f50:	6921      	ldr	r1, [r4, #16]
 8002f52:	464a      	mov	r2, r9
 8002f54:	f000 fba4 	bl	80036a0 <memcpy>
 8002f58:	89a3      	ldrh	r3, [r4, #12]
 8002f5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002f5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f62:	81a3      	strh	r3, [r4, #12]
 8002f64:	6126      	str	r6, [r4, #16]
 8002f66:	6165      	str	r5, [r4, #20]
 8002f68:	444e      	add	r6, r9
 8002f6a:	eba5 0509 	sub.w	r5, r5, r9
 8002f6e:	6026      	str	r6, [r4, #0]
 8002f70:	60a5      	str	r5, [r4, #8]
 8002f72:	463e      	mov	r6, r7
 8002f74:	42be      	cmp	r6, r7
 8002f76:	d900      	bls.n	8002f7a <__ssputs_r+0x72>
 8002f78:	463e      	mov	r6, r7
 8002f7a:	6820      	ldr	r0, [r4, #0]
 8002f7c:	4632      	mov	r2, r6
 8002f7e:	4641      	mov	r1, r8
 8002f80:	f000 fb64 	bl	800364c <memmove>
 8002f84:	68a3      	ldr	r3, [r4, #8]
 8002f86:	1b9b      	subs	r3, r3, r6
 8002f88:	60a3      	str	r3, [r4, #8]
 8002f8a:	6823      	ldr	r3, [r4, #0]
 8002f8c:	4433      	add	r3, r6
 8002f8e:	6023      	str	r3, [r4, #0]
 8002f90:	2000      	movs	r0, #0
 8002f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f96:	462a      	mov	r2, r5
 8002f98:	f000 fb97 	bl	80036ca <_realloc_r>
 8002f9c:	4606      	mov	r6, r0
 8002f9e:	2800      	cmp	r0, #0
 8002fa0:	d1e0      	bne.n	8002f64 <__ssputs_r+0x5c>
 8002fa2:	6921      	ldr	r1, [r4, #16]
 8002fa4:	4650      	mov	r0, sl
 8002fa6:	f7ff feaf 	bl	8002d08 <_free_r>
 8002faa:	230c      	movs	r3, #12
 8002fac:	f8ca 3000 	str.w	r3, [sl]
 8002fb0:	89a3      	ldrh	r3, [r4, #12]
 8002fb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fb6:	81a3      	strh	r3, [r4, #12]
 8002fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fbc:	e7e9      	b.n	8002f92 <__ssputs_r+0x8a>
	...

08002fc0 <_svfiprintf_r>:
 8002fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fc4:	4698      	mov	r8, r3
 8002fc6:	898b      	ldrh	r3, [r1, #12]
 8002fc8:	061b      	lsls	r3, r3, #24
 8002fca:	b09d      	sub	sp, #116	@ 0x74
 8002fcc:	4607      	mov	r7, r0
 8002fce:	460d      	mov	r5, r1
 8002fd0:	4614      	mov	r4, r2
 8002fd2:	d510      	bpl.n	8002ff6 <_svfiprintf_r+0x36>
 8002fd4:	690b      	ldr	r3, [r1, #16]
 8002fd6:	b973      	cbnz	r3, 8002ff6 <_svfiprintf_r+0x36>
 8002fd8:	2140      	movs	r1, #64	@ 0x40
 8002fda:	f7ff ff09 	bl	8002df0 <_malloc_r>
 8002fde:	6028      	str	r0, [r5, #0]
 8002fe0:	6128      	str	r0, [r5, #16]
 8002fe2:	b930      	cbnz	r0, 8002ff2 <_svfiprintf_r+0x32>
 8002fe4:	230c      	movs	r3, #12
 8002fe6:	603b      	str	r3, [r7, #0]
 8002fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fec:	b01d      	add	sp, #116	@ 0x74
 8002fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ff2:	2340      	movs	r3, #64	@ 0x40
 8002ff4:	616b      	str	r3, [r5, #20]
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ffa:	2320      	movs	r3, #32
 8002ffc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003000:	f8cd 800c 	str.w	r8, [sp, #12]
 8003004:	2330      	movs	r3, #48	@ 0x30
 8003006:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80031a4 <_svfiprintf_r+0x1e4>
 800300a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800300e:	f04f 0901 	mov.w	r9, #1
 8003012:	4623      	mov	r3, r4
 8003014:	469a      	mov	sl, r3
 8003016:	f813 2b01 	ldrb.w	r2, [r3], #1
 800301a:	b10a      	cbz	r2, 8003020 <_svfiprintf_r+0x60>
 800301c:	2a25      	cmp	r2, #37	@ 0x25
 800301e:	d1f9      	bne.n	8003014 <_svfiprintf_r+0x54>
 8003020:	ebba 0b04 	subs.w	fp, sl, r4
 8003024:	d00b      	beq.n	800303e <_svfiprintf_r+0x7e>
 8003026:	465b      	mov	r3, fp
 8003028:	4622      	mov	r2, r4
 800302a:	4629      	mov	r1, r5
 800302c:	4638      	mov	r0, r7
 800302e:	f7ff ff6b 	bl	8002f08 <__ssputs_r>
 8003032:	3001      	adds	r0, #1
 8003034:	f000 80a7 	beq.w	8003186 <_svfiprintf_r+0x1c6>
 8003038:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800303a:	445a      	add	r2, fp
 800303c:	9209      	str	r2, [sp, #36]	@ 0x24
 800303e:	f89a 3000 	ldrb.w	r3, [sl]
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 809f 	beq.w	8003186 <_svfiprintf_r+0x1c6>
 8003048:	2300      	movs	r3, #0
 800304a:	f04f 32ff 	mov.w	r2, #4294967295
 800304e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003052:	f10a 0a01 	add.w	sl, sl, #1
 8003056:	9304      	str	r3, [sp, #16]
 8003058:	9307      	str	r3, [sp, #28]
 800305a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800305e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003060:	4654      	mov	r4, sl
 8003062:	2205      	movs	r2, #5
 8003064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003068:	484e      	ldr	r0, [pc, #312]	@ (80031a4 <_svfiprintf_r+0x1e4>)
 800306a:	f7fd f8b9 	bl	80001e0 <memchr>
 800306e:	9a04      	ldr	r2, [sp, #16]
 8003070:	b9d8      	cbnz	r0, 80030aa <_svfiprintf_r+0xea>
 8003072:	06d0      	lsls	r0, r2, #27
 8003074:	bf44      	itt	mi
 8003076:	2320      	movmi	r3, #32
 8003078:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800307c:	0711      	lsls	r1, r2, #28
 800307e:	bf44      	itt	mi
 8003080:	232b      	movmi	r3, #43	@ 0x2b
 8003082:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003086:	f89a 3000 	ldrb.w	r3, [sl]
 800308a:	2b2a      	cmp	r3, #42	@ 0x2a
 800308c:	d015      	beq.n	80030ba <_svfiprintf_r+0xfa>
 800308e:	9a07      	ldr	r2, [sp, #28]
 8003090:	4654      	mov	r4, sl
 8003092:	2000      	movs	r0, #0
 8003094:	f04f 0c0a 	mov.w	ip, #10
 8003098:	4621      	mov	r1, r4
 800309a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800309e:	3b30      	subs	r3, #48	@ 0x30
 80030a0:	2b09      	cmp	r3, #9
 80030a2:	d94b      	bls.n	800313c <_svfiprintf_r+0x17c>
 80030a4:	b1b0      	cbz	r0, 80030d4 <_svfiprintf_r+0x114>
 80030a6:	9207      	str	r2, [sp, #28]
 80030a8:	e014      	b.n	80030d4 <_svfiprintf_r+0x114>
 80030aa:	eba0 0308 	sub.w	r3, r0, r8
 80030ae:	fa09 f303 	lsl.w	r3, r9, r3
 80030b2:	4313      	orrs	r3, r2
 80030b4:	9304      	str	r3, [sp, #16]
 80030b6:	46a2      	mov	sl, r4
 80030b8:	e7d2      	b.n	8003060 <_svfiprintf_r+0xa0>
 80030ba:	9b03      	ldr	r3, [sp, #12]
 80030bc:	1d19      	adds	r1, r3, #4
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	9103      	str	r1, [sp, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bfbb      	ittet	lt
 80030c6:	425b      	neglt	r3, r3
 80030c8:	f042 0202 	orrlt.w	r2, r2, #2
 80030cc:	9307      	strge	r3, [sp, #28]
 80030ce:	9307      	strlt	r3, [sp, #28]
 80030d0:	bfb8      	it	lt
 80030d2:	9204      	strlt	r2, [sp, #16]
 80030d4:	7823      	ldrb	r3, [r4, #0]
 80030d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80030d8:	d10a      	bne.n	80030f0 <_svfiprintf_r+0x130>
 80030da:	7863      	ldrb	r3, [r4, #1]
 80030dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80030de:	d132      	bne.n	8003146 <_svfiprintf_r+0x186>
 80030e0:	9b03      	ldr	r3, [sp, #12]
 80030e2:	1d1a      	adds	r2, r3, #4
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	9203      	str	r2, [sp, #12]
 80030e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80030ec:	3402      	adds	r4, #2
 80030ee:	9305      	str	r3, [sp, #20]
 80030f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80031b4 <_svfiprintf_r+0x1f4>
 80030f4:	7821      	ldrb	r1, [r4, #0]
 80030f6:	2203      	movs	r2, #3
 80030f8:	4650      	mov	r0, sl
 80030fa:	f7fd f871 	bl	80001e0 <memchr>
 80030fe:	b138      	cbz	r0, 8003110 <_svfiprintf_r+0x150>
 8003100:	9b04      	ldr	r3, [sp, #16]
 8003102:	eba0 000a 	sub.w	r0, r0, sl
 8003106:	2240      	movs	r2, #64	@ 0x40
 8003108:	4082      	lsls	r2, r0
 800310a:	4313      	orrs	r3, r2
 800310c:	3401      	adds	r4, #1
 800310e:	9304      	str	r3, [sp, #16]
 8003110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003114:	4824      	ldr	r0, [pc, #144]	@ (80031a8 <_svfiprintf_r+0x1e8>)
 8003116:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800311a:	2206      	movs	r2, #6
 800311c:	f7fd f860 	bl	80001e0 <memchr>
 8003120:	2800      	cmp	r0, #0
 8003122:	d036      	beq.n	8003192 <_svfiprintf_r+0x1d2>
 8003124:	4b21      	ldr	r3, [pc, #132]	@ (80031ac <_svfiprintf_r+0x1ec>)
 8003126:	bb1b      	cbnz	r3, 8003170 <_svfiprintf_r+0x1b0>
 8003128:	9b03      	ldr	r3, [sp, #12]
 800312a:	3307      	adds	r3, #7
 800312c:	f023 0307 	bic.w	r3, r3, #7
 8003130:	3308      	adds	r3, #8
 8003132:	9303      	str	r3, [sp, #12]
 8003134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003136:	4433      	add	r3, r6
 8003138:	9309      	str	r3, [sp, #36]	@ 0x24
 800313a:	e76a      	b.n	8003012 <_svfiprintf_r+0x52>
 800313c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003140:	460c      	mov	r4, r1
 8003142:	2001      	movs	r0, #1
 8003144:	e7a8      	b.n	8003098 <_svfiprintf_r+0xd8>
 8003146:	2300      	movs	r3, #0
 8003148:	3401      	adds	r4, #1
 800314a:	9305      	str	r3, [sp, #20]
 800314c:	4619      	mov	r1, r3
 800314e:	f04f 0c0a 	mov.w	ip, #10
 8003152:	4620      	mov	r0, r4
 8003154:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003158:	3a30      	subs	r2, #48	@ 0x30
 800315a:	2a09      	cmp	r2, #9
 800315c:	d903      	bls.n	8003166 <_svfiprintf_r+0x1a6>
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0c6      	beq.n	80030f0 <_svfiprintf_r+0x130>
 8003162:	9105      	str	r1, [sp, #20]
 8003164:	e7c4      	b.n	80030f0 <_svfiprintf_r+0x130>
 8003166:	fb0c 2101 	mla	r1, ip, r1, r2
 800316a:	4604      	mov	r4, r0
 800316c:	2301      	movs	r3, #1
 800316e:	e7f0      	b.n	8003152 <_svfiprintf_r+0x192>
 8003170:	ab03      	add	r3, sp, #12
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	462a      	mov	r2, r5
 8003176:	4b0e      	ldr	r3, [pc, #56]	@ (80031b0 <_svfiprintf_r+0x1f0>)
 8003178:	a904      	add	r1, sp, #16
 800317a:	4638      	mov	r0, r7
 800317c:	f3af 8000 	nop.w
 8003180:	1c42      	adds	r2, r0, #1
 8003182:	4606      	mov	r6, r0
 8003184:	d1d6      	bne.n	8003134 <_svfiprintf_r+0x174>
 8003186:	89ab      	ldrh	r3, [r5, #12]
 8003188:	065b      	lsls	r3, r3, #25
 800318a:	f53f af2d 	bmi.w	8002fe8 <_svfiprintf_r+0x28>
 800318e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003190:	e72c      	b.n	8002fec <_svfiprintf_r+0x2c>
 8003192:	ab03      	add	r3, sp, #12
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	462a      	mov	r2, r5
 8003198:	4b05      	ldr	r3, [pc, #20]	@ (80031b0 <_svfiprintf_r+0x1f0>)
 800319a:	a904      	add	r1, sp, #16
 800319c:	4638      	mov	r0, r7
 800319e:	f000 f879 	bl	8003294 <_printf_i>
 80031a2:	e7ed      	b.n	8003180 <_svfiprintf_r+0x1c0>
 80031a4:	080044e3 	.word	0x080044e3
 80031a8:	080044ed 	.word	0x080044ed
 80031ac:	00000000 	.word	0x00000000
 80031b0:	08002f09 	.word	0x08002f09
 80031b4:	080044e9 	.word	0x080044e9

080031b8 <_printf_common>:
 80031b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031bc:	4616      	mov	r6, r2
 80031be:	4698      	mov	r8, r3
 80031c0:	688a      	ldr	r2, [r1, #8]
 80031c2:	690b      	ldr	r3, [r1, #16]
 80031c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80031c8:	4293      	cmp	r3, r2
 80031ca:	bfb8      	it	lt
 80031cc:	4613      	movlt	r3, r2
 80031ce:	6033      	str	r3, [r6, #0]
 80031d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80031d4:	4607      	mov	r7, r0
 80031d6:	460c      	mov	r4, r1
 80031d8:	b10a      	cbz	r2, 80031de <_printf_common+0x26>
 80031da:	3301      	adds	r3, #1
 80031dc:	6033      	str	r3, [r6, #0]
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	0699      	lsls	r1, r3, #26
 80031e2:	bf42      	ittt	mi
 80031e4:	6833      	ldrmi	r3, [r6, #0]
 80031e6:	3302      	addmi	r3, #2
 80031e8:	6033      	strmi	r3, [r6, #0]
 80031ea:	6825      	ldr	r5, [r4, #0]
 80031ec:	f015 0506 	ands.w	r5, r5, #6
 80031f0:	d106      	bne.n	8003200 <_printf_common+0x48>
 80031f2:	f104 0a19 	add.w	sl, r4, #25
 80031f6:	68e3      	ldr	r3, [r4, #12]
 80031f8:	6832      	ldr	r2, [r6, #0]
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	42ab      	cmp	r3, r5
 80031fe:	dc26      	bgt.n	800324e <_printf_common+0x96>
 8003200:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003204:	6822      	ldr	r2, [r4, #0]
 8003206:	3b00      	subs	r3, #0
 8003208:	bf18      	it	ne
 800320a:	2301      	movne	r3, #1
 800320c:	0692      	lsls	r2, r2, #26
 800320e:	d42b      	bmi.n	8003268 <_printf_common+0xb0>
 8003210:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003214:	4641      	mov	r1, r8
 8003216:	4638      	mov	r0, r7
 8003218:	47c8      	blx	r9
 800321a:	3001      	adds	r0, #1
 800321c:	d01e      	beq.n	800325c <_printf_common+0xa4>
 800321e:	6823      	ldr	r3, [r4, #0]
 8003220:	6922      	ldr	r2, [r4, #16]
 8003222:	f003 0306 	and.w	r3, r3, #6
 8003226:	2b04      	cmp	r3, #4
 8003228:	bf02      	ittt	eq
 800322a:	68e5      	ldreq	r5, [r4, #12]
 800322c:	6833      	ldreq	r3, [r6, #0]
 800322e:	1aed      	subeq	r5, r5, r3
 8003230:	68a3      	ldr	r3, [r4, #8]
 8003232:	bf0c      	ite	eq
 8003234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003238:	2500      	movne	r5, #0
 800323a:	4293      	cmp	r3, r2
 800323c:	bfc4      	itt	gt
 800323e:	1a9b      	subgt	r3, r3, r2
 8003240:	18ed      	addgt	r5, r5, r3
 8003242:	2600      	movs	r6, #0
 8003244:	341a      	adds	r4, #26
 8003246:	42b5      	cmp	r5, r6
 8003248:	d11a      	bne.n	8003280 <_printf_common+0xc8>
 800324a:	2000      	movs	r0, #0
 800324c:	e008      	b.n	8003260 <_printf_common+0xa8>
 800324e:	2301      	movs	r3, #1
 8003250:	4652      	mov	r2, sl
 8003252:	4641      	mov	r1, r8
 8003254:	4638      	mov	r0, r7
 8003256:	47c8      	blx	r9
 8003258:	3001      	adds	r0, #1
 800325a:	d103      	bne.n	8003264 <_printf_common+0xac>
 800325c:	f04f 30ff 	mov.w	r0, #4294967295
 8003260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003264:	3501      	adds	r5, #1
 8003266:	e7c6      	b.n	80031f6 <_printf_common+0x3e>
 8003268:	18e1      	adds	r1, r4, r3
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	2030      	movs	r0, #48	@ 0x30
 800326e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003272:	4422      	add	r2, r4
 8003274:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003278:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800327c:	3302      	adds	r3, #2
 800327e:	e7c7      	b.n	8003210 <_printf_common+0x58>
 8003280:	2301      	movs	r3, #1
 8003282:	4622      	mov	r2, r4
 8003284:	4641      	mov	r1, r8
 8003286:	4638      	mov	r0, r7
 8003288:	47c8      	blx	r9
 800328a:	3001      	adds	r0, #1
 800328c:	d0e6      	beq.n	800325c <_printf_common+0xa4>
 800328e:	3601      	adds	r6, #1
 8003290:	e7d9      	b.n	8003246 <_printf_common+0x8e>
	...

08003294 <_printf_i>:
 8003294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003298:	7e0f      	ldrb	r7, [r1, #24]
 800329a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800329c:	2f78      	cmp	r7, #120	@ 0x78
 800329e:	4691      	mov	r9, r2
 80032a0:	4680      	mov	r8, r0
 80032a2:	460c      	mov	r4, r1
 80032a4:	469a      	mov	sl, r3
 80032a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80032aa:	d807      	bhi.n	80032bc <_printf_i+0x28>
 80032ac:	2f62      	cmp	r7, #98	@ 0x62
 80032ae:	d80a      	bhi.n	80032c6 <_printf_i+0x32>
 80032b0:	2f00      	cmp	r7, #0
 80032b2:	f000 80d1 	beq.w	8003458 <_printf_i+0x1c4>
 80032b6:	2f58      	cmp	r7, #88	@ 0x58
 80032b8:	f000 80b8 	beq.w	800342c <_printf_i+0x198>
 80032bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80032c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80032c4:	e03a      	b.n	800333c <_printf_i+0xa8>
 80032c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80032ca:	2b15      	cmp	r3, #21
 80032cc:	d8f6      	bhi.n	80032bc <_printf_i+0x28>
 80032ce:	a101      	add	r1, pc, #4	@ (adr r1, 80032d4 <_printf_i+0x40>)
 80032d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032d4:	0800332d 	.word	0x0800332d
 80032d8:	08003341 	.word	0x08003341
 80032dc:	080032bd 	.word	0x080032bd
 80032e0:	080032bd 	.word	0x080032bd
 80032e4:	080032bd 	.word	0x080032bd
 80032e8:	080032bd 	.word	0x080032bd
 80032ec:	08003341 	.word	0x08003341
 80032f0:	080032bd 	.word	0x080032bd
 80032f4:	080032bd 	.word	0x080032bd
 80032f8:	080032bd 	.word	0x080032bd
 80032fc:	080032bd 	.word	0x080032bd
 8003300:	0800343f 	.word	0x0800343f
 8003304:	0800336b 	.word	0x0800336b
 8003308:	080033f9 	.word	0x080033f9
 800330c:	080032bd 	.word	0x080032bd
 8003310:	080032bd 	.word	0x080032bd
 8003314:	08003461 	.word	0x08003461
 8003318:	080032bd 	.word	0x080032bd
 800331c:	0800336b 	.word	0x0800336b
 8003320:	080032bd 	.word	0x080032bd
 8003324:	080032bd 	.word	0x080032bd
 8003328:	08003401 	.word	0x08003401
 800332c:	6833      	ldr	r3, [r6, #0]
 800332e:	1d1a      	adds	r2, r3, #4
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6032      	str	r2, [r6, #0]
 8003334:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003338:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800333c:	2301      	movs	r3, #1
 800333e:	e09c      	b.n	800347a <_printf_i+0x1e6>
 8003340:	6833      	ldr	r3, [r6, #0]
 8003342:	6820      	ldr	r0, [r4, #0]
 8003344:	1d19      	adds	r1, r3, #4
 8003346:	6031      	str	r1, [r6, #0]
 8003348:	0606      	lsls	r6, r0, #24
 800334a:	d501      	bpl.n	8003350 <_printf_i+0xbc>
 800334c:	681d      	ldr	r5, [r3, #0]
 800334e:	e003      	b.n	8003358 <_printf_i+0xc4>
 8003350:	0645      	lsls	r5, r0, #25
 8003352:	d5fb      	bpl.n	800334c <_printf_i+0xb8>
 8003354:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003358:	2d00      	cmp	r5, #0
 800335a:	da03      	bge.n	8003364 <_printf_i+0xd0>
 800335c:	232d      	movs	r3, #45	@ 0x2d
 800335e:	426d      	negs	r5, r5
 8003360:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003364:	4858      	ldr	r0, [pc, #352]	@ (80034c8 <_printf_i+0x234>)
 8003366:	230a      	movs	r3, #10
 8003368:	e011      	b.n	800338e <_printf_i+0xfa>
 800336a:	6821      	ldr	r1, [r4, #0]
 800336c:	6833      	ldr	r3, [r6, #0]
 800336e:	0608      	lsls	r0, r1, #24
 8003370:	f853 5b04 	ldr.w	r5, [r3], #4
 8003374:	d402      	bmi.n	800337c <_printf_i+0xe8>
 8003376:	0649      	lsls	r1, r1, #25
 8003378:	bf48      	it	mi
 800337a:	b2ad      	uxthmi	r5, r5
 800337c:	2f6f      	cmp	r7, #111	@ 0x6f
 800337e:	4852      	ldr	r0, [pc, #328]	@ (80034c8 <_printf_i+0x234>)
 8003380:	6033      	str	r3, [r6, #0]
 8003382:	bf14      	ite	ne
 8003384:	230a      	movne	r3, #10
 8003386:	2308      	moveq	r3, #8
 8003388:	2100      	movs	r1, #0
 800338a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800338e:	6866      	ldr	r6, [r4, #4]
 8003390:	60a6      	str	r6, [r4, #8]
 8003392:	2e00      	cmp	r6, #0
 8003394:	db05      	blt.n	80033a2 <_printf_i+0x10e>
 8003396:	6821      	ldr	r1, [r4, #0]
 8003398:	432e      	orrs	r6, r5
 800339a:	f021 0104 	bic.w	r1, r1, #4
 800339e:	6021      	str	r1, [r4, #0]
 80033a0:	d04b      	beq.n	800343a <_printf_i+0x1a6>
 80033a2:	4616      	mov	r6, r2
 80033a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80033a8:	fb03 5711 	mls	r7, r3, r1, r5
 80033ac:	5dc7      	ldrb	r7, [r0, r7]
 80033ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80033b2:	462f      	mov	r7, r5
 80033b4:	42bb      	cmp	r3, r7
 80033b6:	460d      	mov	r5, r1
 80033b8:	d9f4      	bls.n	80033a4 <_printf_i+0x110>
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d10b      	bne.n	80033d6 <_printf_i+0x142>
 80033be:	6823      	ldr	r3, [r4, #0]
 80033c0:	07df      	lsls	r7, r3, #31
 80033c2:	d508      	bpl.n	80033d6 <_printf_i+0x142>
 80033c4:	6923      	ldr	r3, [r4, #16]
 80033c6:	6861      	ldr	r1, [r4, #4]
 80033c8:	4299      	cmp	r1, r3
 80033ca:	bfde      	ittt	le
 80033cc:	2330      	movle	r3, #48	@ 0x30
 80033ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80033d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80033d6:	1b92      	subs	r2, r2, r6
 80033d8:	6122      	str	r2, [r4, #16]
 80033da:	f8cd a000 	str.w	sl, [sp]
 80033de:	464b      	mov	r3, r9
 80033e0:	aa03      	add	r2, sp, #12
 80033e2:	4621      	mov	r1, r4
 80033e4:	4640      	mov	r0, r8
 80033e6:	f7ff fee7 	bl	80031b8 <_printf_common>
 80033ea:	3001      	adds	r0, #1
 80033ec:	d14a      	bne.n	8003484 <_printf_i+0x1f0>
 80033ee:	f04f 30ff 	mov.w	r0, #4294967295
 80033f2:	b004      	add	sp, #16
 80033f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	f043 0320 	orr.w	r3, r3, #32
 80033fe:	6023      	str	r3, [r4, #0]
 8003400:	4832      	ldr	r0, [pc, #200]	@ (80034cc <_printf_i+0x238>)
 8003402:	2778      	movs	r7, #120	@ 0x78
 8003404:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	6831      	ldr	r1, [r6, #0]
 800340c:	061f      	lsls	r7, r3, #24
 800340e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003412:	d402      	bmi.n	800341a <_printf_i+0x186>
 8003414:	065f      	lsls	r7, r3, #25
 8003416:	bf48      	it	mi
 8003418:	b2ad      	uxthmi	r5, r5
 800341a:	6031      	str	r1, [r6, #0]
 800341c:	07d9      	lsls	r1, r3, #31
 800341e:	bf44      	itt	mi
 8003420:	f043 0320 	orrmi.w	r3, r3, #32
 8003424:	6023      	strmi	r3, [r4, #0]
 8003426:	b11d      	cbz	r5, 8003430 <_printf_i+0x19c>
 8003428:	2310      	movs	r3, #16
 800342a:	e7ad      	b.n	8003388 <_printf_i+0xf4>
 800342c:	4826      	ldr	r0, [pc, #152]	@ (80034c8 <_printf_i+0x234>)
 800342e:	e7e9      	b.n	8003404 <_printf_i+0x170>
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	f023 0320 	bic.w	r3, r3, #32
 8003436:	6023      	str	r3, [r4, #0]
 8003438:	e7f6      	b.n	8003428 <_printf_i+0x194>
 800343a:	4616      	mov	r6, r2
 800343c:	e7bd      	b.n	80033ba <_printf_i+0x126>
 800343e:	6833      	ldr	r3, [r6, #0]
 8003440:	6825      	ldr	r5, [r4, #0]
 8003442:	6961      	ldr	r1, [r4, #20]
 8003444:	1d18      	adds	r0, r3, #4
 8003446:	6030      	str	r0, [r6, #0]
 8003448:	062e      	lsls	r6, r5, #24
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	d501      	bpl.n	8003452 <_printf_i+0x1be>
 800344e:	6019      	str	r1, [r3, #0]
 8003450:	e002      	b.n	8003458 <_printf_i+0x1c4>
 8003452:	0668      	lsls	r0, r5, #25
 8003454:	d5fb      	bpl.n	800344e <_printf_i+0x1ba>
 8003456:	8019      	strh	r1, [r3, #0]
 8003458:	2300      	movs	r3, #0
 800345a:	6123      	str	r3, [r4, #16]
 800345c:	4616      	mov	r6, r2
 800345e:	e7bc      	b.n	80033da <_printf_i+0x146>
 8003460:	6833      	ldr	r3, [r6, #0]
 8003462:	1d1a      	adds	r2, r3, #4
 8003464:	6032      	str	r2, [r6, #0]
 8003466:	681e      	ldr	r6, [r3, #0]
 8003468:	6862      	ldr	r2, [r4, #4]
 800346a:	2100      	movs	r1, #0
 800346c:	4630      	mov	r0, r6
 800346e:	f7fc feb7 	bl	80001e0 <memchr>
 8003472:	b108      	cbz	r0, 8003478 <_printf_i+0x1e4>
 8003474:	1b80      	subs	r0, r0, r6
 8003476:	6060      	str	r0, [r4, #4]
 8003478:	6863      	ldr	r3, [r4, #4]
 800347a:	6123      	str	r3, [r4, #16]
 800347c:	2300      	movs	r3, #0
 800347e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003482:	e7aa      	b.n	80033da <_printf_i+0x146>
 8003484:	6923      	ldr	r3, [r4, #16]
 8003486:	4632      	mov	r2, r6
 8003488:	4649      	mov	r1, r9
 800348a:	4640      	mov	r0, r8
 800348c:	47d0      	blx	sl
 800348e:	3001      	adds	r0, #1
 8003490:	d0ad      	beq.n	80033ee <_printf_i+0x15a>
 8003492:	6823      	ldr	r3, [r4, #0]
 8003494:	079b      	lsls	r3, r3, #30
 8003496:	d413      	bmi.n	80034c0 <_printf_i+0x22c>
 8003498:	68e0      	ldr	r0, [r4, #12]
 800349a:	9b03      	ldr	r3, [sp, #12]
 800349c:	4298      	cmp	r0, r3
 800349e:	bfb8      	it	lt
 80034a0:	4618      	movlt	r0, r3
 80034a2:	e7a6      	b.n	80033f2 <_printf_i+0x15e>
 80034a4:	2301      	movs	r3, #1
 80034a6:	4632      	mov	r2, r6
 80034a8:	4649      	mov	r1, r9
 80034aa:	4640      	mov	r0, r8
 80034ac:	47d0      	blx	sl
 80034ae:	3001      	adds	r0, #1
 80034b0:	d09d      	beq.n	80033ee <_printf_i+0x15a>
 80034b2:	3501      	adds	r5, #1
 80034b4:	68e3      	ldr	r3, [r4, #12]
 80034b6:	9903      	ldr	r1, [sp, #12]
 80034b8:	1a5b      	subs	r3, r3, r1
 80034ba:	42ab      	cmp	r3, r5
 80034bc:	dcf2      	bgt.n	80034a4 <_printf_i+0x210>
 80034be:	e7eb      	b.n	8003498 <_printf_i+0x204>
 80034c0:	2500      	movs	r5, #0
 80034c2:	f104 0619 	add.w	r6, r4, #25
 80034c6:	e7f5      	b.n	80034b4 <_printf_i+0x220>
 80034c8:	080044f4 	.word	0x080044f4
 80034cc:	08004505 	.word	0x08004505

080034d0 <__sflush_r>:
 80034d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80034d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034d8:	0716      	lsls	r6, r2, #28
 80034da:	4605      	mov	r5, r0
 80034dc:	460c      	mov	r4, r1
 80034de:	d454      	bmi.n	800358a <__sflush_r+0xba>
 80034e0:	684b      	ldr	r3, [r1, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	dc02      	bgt.n	80034ec <__sflush_r+0x1c>
 80034e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	dd48      	ble.n	800357e <__sflush_r+0xae>
 80034ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80034ee:	2e00      	cmp	r6, #0
 80034f0:	d045      	beq.n	800357e <__sflush_r+0xae>
 80034f2:	2300      	movs	r3, #0
 80034f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80034f8:	682f      	ldr	r7, [r5, #0]
 80034fa:	6a21      	ldr	r1, [r4, #32]
 80034fc:	602b      	str	r3, [r5, #0]
 80034fe:	d030      	beq.n	8003562 <__sflush_r+0x92>
 8003500:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003502:	89a3      	ldrh	r3, [r4, #12]
 8003504:	0759      	lsls	r1, r3, #29
 8003506:	d505      	bpl.n	8003514 <__sflush_r+0x44>
 8003508:	6863      	ldr	r3, [r4, #4]
 800350a:	1ad2      	subs	r2, r2, r3
 800350c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800350e:	b10b      	cbz	r3, 8003514 <__sflush_r+0x44>
 8003510:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003512:	1ad2      	subs	r2, r2, r3
 8003514:	2300      	movs	r3, #0
 8003516:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003518:	6a21      	ldr	r1, [r4, #32]
 800351a:	4628      	mov	r0, r5
 800351c:	47b0      	blx	r6
 800351e:	1c43      	adds	r3, r0, #1
 8003520:	89a3      	ldrh	r3, [r4, #12]
 8003522:	d106      	bne.n	8003532 <__sflush_r+0x62>
 8003524:	6829      	ldr	r1, [r5, #0]
 8003526:	291d      	cmp	r1, #29
 8003528:	d82b      	bhi.n	8003582 <__sflush_r+0xb2>
 800352a:	4a2a      	ldr	r2, [pc, #168]	@ (80035d4 <__sflush_r+0x104>)
 800352c:	40ca      	lsrs	r2, r1
 800352e:	07d6      	lsls	r6, r2, #31
 8003530:	d527      	bpl.n	8003582 <__sflush_r+0xb2>
 8003532:	2200      	movs	r2, #0
 8003534:	6062      	str	r2, [r4, #4]
 8003536:	04d9      	lsls	r1, r3, #19
 8003538:	6922      	ldr	r2, [r4, #16]
 800353a:	6022      	str	r2, [r4, #0]
 800353c:	d504      	bpl.n	8003548 <__sflush_r+0x78>
 800353e:	1c42      	adds	r2, r0, #1
 8003540:	d101      	bne.n	8003546 <__sflush_r+0x76>
 8003542:	682b      	ldr	r3, [r5, #0]
 8003544:	b903      	cbnz	r3, 8003548 <__sflush_r+0x78>
 8003546:	6560      	str	r0, [r4, #84]	@ 0x54
 8003548:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800354a:	602f      	str	r7, [r5, #0]
 800354c:	b1b9      	cbz	r1, 800357e <__sflush_r+0xae>
 800354e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003552:	4299      	cmp	r1, r3
 8003554:	d002      	beq.n	800355c <__sflush_r+0x8c>
 8003556:	4628      	mov	r0, r5
 8003558:	f7ff fbd6 	bl	8002d08 <_free_r>
 800355c:	2300      	movs	r3, #0
 800355e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003560:	e00d      	b.n	800357e <__sflush_r+0xae>
 8003562:	2301      	movs	r3, #1
 8003564:	4628      	mov	r0, r5
 8003566:	47b0      	blx	r6
 8003568:	4602      	mov	r2, r0
 800356a:	1c50      	adds	r0, r2, #1
 800356c:	d1c9      	bne.n	8003502 <__sflush_r+0x32>
 800356e:	682b      	ldr	r3, [r5, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0c6      	beq.n	8003502 <__sflush_r+0x32>
 8003574:	2b1d      	cmp	r3, #29
 8003576:	d001      	beq.n	800357c <__sflush_r+0xac>
 8003578:	2b16      	cmp	r3, #22
 800357a:	d11e      	bne.n	80035ba <__sflush_r+0xea>
 800357c:	602f      	str	r7, [r5, #0]
 800357e:	2000      	movs	r0, #0
 8003580:	e022      	b.n	80035c8 <__sflush_r+0xf8>
 8003582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003586:	b21b      	sxth	r3, r3
 8003588:	e01b      	b.n	80035c2 <__sflush_r+0xf2>
 800358a:	690f      	ldr	r7, [r1, #16]
 800358c:	2f00      	cmp	r7, #0
 800358e:	d0f6      	beq.n	800357e <__sflush_r+0xae>
 8003590:	0793      	lsls	r3, r2, #30
 8003592:	680e      	ldr	r6, [r1, #0]
 8003594:	bf08      	it	eq
 8003596:	694b      	ldreq	r3, [r1, #20]
 8003598:	600f      	str	r7, [r1, #0]
 800359a:	bf18      	it	ne
 800359c:	2300      	movne	r3, #0
 800359e:	eba6 0807 	sub.w	r8, r6, r7
 80035a2:	608b      	str	r3, [r1, #8]
 80035a4:	f1b8 0f00 	cmp.w	r8, #0
 80035a8:	dde9      	ble.n	800357e <__sflush_r+0xae>
 80035aa:	6a21      	ldr	r1, [r4, #32]
 80035ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80035ae:	4643      	mov	r3, r8
 80035b0:	463a      	mov	r2, r7
 80035b2:	4628      	mov	r0, r5
 80035b4:	47b0      	blx	r6
 80035b6:	2800      	cmp	r0, #0
 80035b8:	dc08      	bgt.n	80035cc <__sflush_r+0xfc>
 80035ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035c2:	81a3      	strh	r3, [r4, #12]
 80035c4:	f04f 30ff 	mov.w	r0, #4294967295
 80035c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035cc:	4407      	add	r7, r0
 80035ce:	eba8 0800 	sub.w	r8, r8, r0
 80035d2:	e7e7      	b.n	80035a4 <__sflush_r+0xd4>
 80035d4:	20400001 	.word	0x20400001

080035d8 <_fflush_r>:
 80035d8:	b538      	push	{r3, r4, r5, lr}
 80035da:	690b      	ldr	r3, [r1, #16]
 80035dc:	4605      	mov	r5, r0
 80035de:	460c      	mov	r4, r1
 80035e0:	b913      	cbnz	r3, 80035e8 <_fflush_r+0x10>
 80035e2:	2500      	movs	r5, #0
 80035e4:	4628      	mov	r0, r5
 80035e6:	bd38      	pop	{r3, r4, r5, pc}
 80035e8:	b118      	cbz	r0, 80035f2 <_fflush_r+0x1a>
 80035ea:	6a03      	ldr	r3, [r0, #32]
 80035ec:	b90b      	cbnz	r3, 80035f2 <_fflush_r+0x1a>
 80035ee:	f7ff fa3b 	bl	8002a68 <__sinit>
 80035f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0f3      	beq.n	80035e2 <_fflush_r+0xa>
 80035fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80035fc:	07d0      	lsls	r0, r2, #31
 80035fe:	d404      	bmi.n	800360a <_fflush_r+0x32>
 8003600:	0599      	lsls	r1, r3, #22
 8003602:	d402      	bmi.n	800360a <_fflush_r+0x32>
 8003604:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003606:	f7ff fb5e 	bl	8002cc6 <__retarget_lock_acquire_recursive>
 800360a:	4628      	mov	r0, r5
 800360c:	4621      	mov	r1, r4
 800360e:	f7ff ff5f 	bl	80034d0 <__sflush_r>
 8003612:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003614:	07da      	lsls	r2, r3, #31
 8003616:	4605      	mov	r5, r0
 8003618:	d4e4      	bmi.n	80035e4 <_fflush_r+0xc>
 800361a:	89a3      	ldrh	r3, [r4, #12]
 800361c:	059b      	lsls	r3, r3, #22
 800361e:	d4e1      	bmi.n	80035e4 <_fflush_r+0xc>
 8003620:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003622:	f7ff fb51 	bl	8002cc8 <__retarget_lock_release_recursive>
 8003626:	e7dd      	b.n	80035e4 <_fflush_r+0xc>

08003628 <fiprintf>:
 8003628:	b40e      	push	{r1, r2, r3}
 800362a:	b503      	push	{r0, r1, lr}
 800362c:	4601      	mov	r1, r0
 800362e:	ab03      	add	r3, sp, #12
 8003630:	4805      	ldr	r0, [pc, #20]	@ (8003648 <fiprintf+0x20>)
 8003632:	f853 2b04 	ldr.w	r2, [r3], #4
 8003636:	6800      	ldr	r0, [r0, #0]
 8003638:	9301      	str	r3, [sp, #4]
 800363a:	f000 f89d 	bl	8003778 <_vfiprintf_r>
 800363e:	b002      	add	sp, #8
 8003640:	f85d eb04 	ldr.w	lr, [sp], #4
 8003644:	b003      	add	sp, #12
 8003646:	4770      	bx	lr
 8003648:	20000018 	.word	0x20000018

0800364c <memmove>:
 800364c:	4288      	cmp	r0, r1
 800364e:	b510      	push	{r4, lr}
 8003650:	eb01 0402 	add.w	r4, r1, r2
 8003654:	d902      	bls.n	800365c <memmove+0x10>
 8003656:	4284      	cmp	r4, r0
 8003658:	4623      	mov	r3, r4
 800365a:	d807      	bhi.n	800366c <memmove+0x20>
 800365c:	1e43      	subs	r3, r0, #1
 800365e:	42a1      	cmp	r1, r4
 8003660:	d008      	beq.n	8003674 <memmove+0x28>
 8003662:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003666:	f803 2f01 	strb.w	r2, [r3, #1]!
 800366a:	e7f8      	b.n	800365e <memmove+0x12>
 800366c:	4402      	add	r2, r0
 800366e:	4601      	mov	r1, r0
 8003670:	428a      	cmp	r2, r1
 8003672:	d100      	bne.n	8003676 <memmove+0x2a>
 8003674:	bd10      	pop	{r4, pc}
 8003676:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800367a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800367e:	e7f7      	b.n	8003670 <memmove+0x24>

08003680 <_sbrk_r>:
 8003680:	b538      	push	{r3, r4, r5, lr}
 8003682:	4d06      	ldr	r5, [pc, #24]	@ (800369c <_sbrk_r+0x1c>)
 8003684:	2300      	movs	r3, #0
 8003686:	4604      	mov	r4, r0
 8003688:	4608      	mov	r0, r1
 800368a:	602b      	str	r3, [r5, #0]
 800368c:	f7fe fea6 	bl	80023dc <_sbrk>
 8003690:	1c43      	adds	r3, r0, #1
 8003692:	d102      	bne.n	800369a <_sbrk_r+0x1a>
 8003694:	682b      	ldr	r3, [r5, #0]
 8003696:	b103      	cbz	r3, 800369a <_sbrk_r+0x1a>
 8003698:	6023      	str	r3, [r4, #0]
 800369a:	bd38      	pop	{r3, r4, r5, pc}
 800369c:	200002cc 	.word	0x200002cc

080036a0 <memcpy>:
 80036a0:	440a      	add	r2, r1
 80036a2:	4291      	cmp	r1, r2
 80036a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80036a8:	d100      	bne.n	80036ac <memcpy+0xc>
 80036aa:	4770      	bx	lr
 80036ac:	b510      	push	{r4, lr}
 80036ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036b6:	4291      	cmp	r1, r2
 80036b8:	d1f9      	bne.n	80036ae <memcpy+0xe>
 80036ba:	bd10      	pop	{r4, pc}

080036bc <abort>:
 80036bc:	b508      	push	{r3, lr}
 80036be:	2006      	movs	r0, #6
 80036c0:	f000 fa2e 	bl	8003b20 <raise>
 80036c4:	2001      	movs	r0, #1
 80036c6:	f7fe fe11 	bl	80022ec <_exit>

080036ca <_realloc_r>:
 80036ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ce:	4607      	mov	r7, r0
 80036d0:	4614      	mov	r4, r2
 80036d2:	460d      	mov	r5, r1
 80036d4:	b921      	cbnz	r1, 80036e0 <_realloc_r+0x16>
 80036d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036da:	4611      	mov	r1, r2
 80036dc:	f7ff bb88 	b.w	8002df0 <_malloc_r>
 80036e0:	b92a      	cbnz	r2, 80036ee <_realloc_r+0x24>
 80036e2:	f7ff fb11 	bl	8002d08 <_free_r>
 80036e6:	4625      	mov	r5, r4
 80036e8:	4628      	mov	r0, r5
 80036ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036ee:	f000 fa33 	bl	8003b58 <_malloc_usable_size_r>
 80036f2:	4284      	cmp	r4, r0
 80036f4:	4606      	mov	r6, r0
 80036f6:	d802      	bhi.n	80036fe <_realloc_r+0x34>
 80036f8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80036fc:	d8f4      	bhi.n	80036e8 <_realloc_r+0x1e>
 80036fe:	4621      	mov	r1, r4
 8003700:	4638      	mov	r0, r7
 8003702:	f7ff fb75 	bl	8002df0 <_malloc_r>
 8003706:	4680      	mov	r8, r0
 8003708:	b908      	cbnz	r0, 800370e <_realloc_r+0x44>
 800370a:	4645      	mov	r5, r8
 800370c:	e7ec      	b.n	80036e8 <_realloc_r+0x1e>
 800370e:	42b4      	cmp	r4, r6
 8003710:	4622      	mov	r2, r4
 8003712:	4629      	mov	r1, r5
 8003714:	bf28      	it	cs
 8003716:	4632      	movcs	r2, r6
 8003718:	f7ff ffc2 	bl	80036a0 <memcpy>
 800371c:	4629      	mov	r1, r5
 800371e:	4638      	mov	r0, r7
 8003720:	f7ff faf2 	bl	8002d08 <_free_r>
 8003724:	e7f1      	b.n	800370a <_realloc_r+0x40>

08003726 <__sfputc_r>:
 8003726:	6893      	ldr	r3, [r2, #8]
 8003728:	3b01      	subs	r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	b410      	push	{r4}
 800372e:	6093      	str	r3, [r2, #8]
 8003730:	da08      	bge.n	8003744 <__sfputc_r+0x1e>
 8003732:	6994      	ldr	r4, [r2, #24]
 8003734:	42a3      	cmp	r3, r4
 8003736:	db01      	blt.n	800373c <__sfputc_r+0x16>
 8003738:	290a      	cmp	r1, #10
 800373a:	d103      	bne.n	8003744 <__sfputc_r+0x1e>
 800373c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003740:	f000 b932 	b.w	80039a8 <__swbuf_r>
 8003744:	6813      	ldr	r3, [r2, #0]
 8003746:	1c58      	adds	r0, r3, #1
 8003748:	6010      	str	r0, [r2, #0]
 800374a:	7019      	strb	r1, [r3, #0]
 800374c:	4608      	mov	r0, r1
 800374e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003752:	4770      	bx	lr

08003754 <__sfputs_r>:
 8003754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003756:	4606      	mov	r6, r0
 8003758:	460f      	mov	r7, r1
 800375a:	4614      	mov	r4, r2
 800375c:	18d5      	adds	r5, r2, r3
 800375e:	42ac      	cmp	r4, r5
 8003760:	d101      	bne.n	8003766 <__sfputs_r+0x12>
 8003762:	2000      	movs	r0, #0
 8003764:	e007      	b.n	8003776 <__sfputs_r+0x22>
 8003766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800376a:	463a      	mov	r2, r7
 800376c:	4630      	mov	r0, r6
 800376e:	f7ff ffda 	bl	8003726 <__sfputc_r>
 8003772:	1c43      	adds	r3, r0, #1
 8003774:	d1f3      	bne.n	800375e <__sfputs_r+0xa>
 8003776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003778 <_vfiprintf_r>:
 8003778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800377c:	460d      	mov	r5, r1
 800377e:	b09d      	sub	sp, #116	@ 0x74
 8003780:	4614      	mov	r4, r2
 8003782:	4698      	mov	r8, r3
 8003784:	4606      	mov	r6, r0
 8003786:	b118      	cbz	r0, 8003790 <_vfiprintf_r+0x18>
 8003788:	6a03      	ldr	r3, [r0, #32]
 800378a:	b90b      	cbnz	r3, 8003790 <_vfiprintf_r+0x18>
 800378c:	f7ff f96c 	bl	8002a68 <__sinit>
 8003790:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003792:	07d9      	lsls	r1, r3, #31
 8003794:	d405      	bmi.n	80037a2 <_vfiprintf_r+0x2a>
 8003796:	89ab      	ldrh	r3, [r5, #12]
 8003798:	059a      	lsls	r2, r3, #22
 800379a:	d402      	bmi.n	80037a2 <_vfiprintf_r+0x2a>
 800379c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800379e:	f7ff fa92 	bl	8002cc6 <__retarget_lock_acquire_recursive>
 80037a2:	89ab      	ldrh	r3, [r5, #12]
 80037a4:	071b      	lsls	r3, r3, #28
 80037a6:	d501      	bpl.n	80037ac <_vfiprintf_r+0x34>
 80037a8:	692b      	ldr	r3, [r5, #16]
 80037aa:	b99b      	cbnz	r3, 80037d4 <_vfiprintf_r+0x5c>
 80037ac:	4629      	mov	r1, r5
 80037ae:	4630      	mov	r0, r6
 80037b0:	f000 f938 	bl	8003a24 <__swsetup_r>
 80037b4:	b170      	cbz	r0, 80037d4 <_vfiprintf_r+0x5c>
 80037b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80037b8:	07dc      	lsls	r4, r3, #31
 80037ba:	d504      	bpl.n	80037c6 <_vfiprintf_r+0x4e>
 80037bc:	f04f 30ff 	mov.w	r0, #4294967295
 80037c0:	b01d      	add	sp, #116	@ 0x74
 80037c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037c6:	89ab      	ldrh	r3, [r5, #12]
 80037c8:	0598      	lsls	r0, r3, #22
 80037ca:	d4f7      	bmi.n	80037bc <_vfiprintf_r+0x44>
 80037cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80037ce:	f7ff fa7b 	bl	8002cc8 <__retarget_lock_release_recursive>
 80037d2:	e7f3      	b.n	80037bc <_vfiprintf_r+0x44>
 80037d4:	2300      	movs	r3, #0
 80037d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80037d8:	2320      	movs	r3, #32
 80037da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80037de:	f8cd 800c 	str.w	r8, [sp, #12]
 80037e2:	2330      	movs	r3, #48	@ 0x30
 80037e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003994 <_vfiprintf_r+0x21c>
 80037e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80037ec:	f04f 0901 	mov.w	r9, #1
 80037f0:	4623      	mov	r3, r4
 80037f2:	469a      	mov	sl, r3
 80037f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037f8:	b10a      	cbz	r2, 80037fe <_vfiprintf_r+0x86>
 80037fa:	2a25      	cmp	r2, #37	@ 0x25
 80037fc:	d1f9      	bne.n	80037f2 <_vfiprintf_r+0x7a>
 80037fe:	ebba 0b04 	subs.w	fp, sl, r4
 8003802:	d00b      	beq.n	800381c <_vfiprintf_r+0xa4>
 8003804:	465b      	mov	r3, fp
 8003806:	4622      	mov	r2, r4
 8003808:	4629      	mov	r1, r5
 800380a:	4630      	mov	r0, r6
 800380c:	f7ff ffa2 	bl	8003754 <__sfputs_r>
 8003810:	3001      	adds	r0, #1
 8003812:	f000 80a7 	beq.w	8003964 <_vfiprintf_r+0x1ec>
 8003816:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003818:	445a      	add	r2, fp
 800381a:	9209      	str	r2, [sp, #36]	@ 0x24
 800381c:	f89a 3000 	ldrb.w	r3, [sl]
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 809f 	beq.w	8003964 <_vfiprintf_r+0x1ec>
 8003826:	2300      	movs	r3, #0
 8003828:	f04f 32ff 	mov.w	r2, #4294967295
 800382c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003830:	f10a 0a01 	add.w	sl, sl, #1
 8003834:	9304      	str	r3, [sp, #16]
 8003836:	9307      	str	r3, [sp, #28]
 8003838:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800383c:	931a      	str	r3, [sp, #104]	@ 0x68
 800383e:	4654      	mov	r4, sl
 8003840:	2205      	movs	r2, #5
 8003842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003846:	4853      	ldr	r0, [pc, #332]	@ (8003994 <_vfiprintf_r+0x21c>)
 8003848:	f7fc fcca 	bl	80001e0 <memchr>
 800384c:	9a04      	ldr	r2, [sp, #16]
 800384e:	b9d8      	cbnz	r0, 8003888 <_vfiprintf_r+0x110>
 8003850:	06d1      	lsls	r1, r2, #27
 8003852:	bf44      	itt	mi
 8003854:	2320      	movmi	r3, #32
 8003856:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800385a:	0713      	lsls	r3, r2, #28
 800385c:	bf44      	itt	mi
 800385e:	232b      	movmi	r3, #43	@ 0x2b
 8003860:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003864:	f89a 3000 	ldrb.w	r3, [sl]
 8003868:	2b2a      	cmp	r3, #42	@ 0x2a
 800386a:	d015      	beq.n	8003898 <_vfiprintf_r+0x120>
 800386c:	9a07      	ldr	r2, [sp, #28]
 800386e:	4654      	mov	r4, sl
 8003870:	2000      	movs	r0, #0
 8003872:	f04f 0c0a 	mov.w	ip, #10
 8003876:	4621      	mov	r1, r4
 8003878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800387c:	3b30      	subs	r3, #48	@ 0x30
 800387e:	2b09      	cmp	r3, #9
 8003880:	d94b      	bls.n	800391a <_vfiprintf_r+0x1a2>
 8003882:	b1b0      	cbz	r0, 80038b2 <_vfiprintf_r+0x13a>
 8003884:	9207      	str	r2, [sp, #28]
 8003886:	e014      	b.n	80038b2 <_vfiprintf_r+0x13a>
 8003888:	eba0 0308 	sub.w	r3, r0, r8
 800388c:	fa09 f303 	lsl.w	r3, r9, r3
 8003890:	4313      	orrs	r3, r2
 8003892:	9304      	str	r3, [sp, #16]
 8003894:	46a2      	mov	sl, r4
 8003896:	e7d2      	b.n	800383e <_vfiprintf_r+0xc6>
 8003898:	9b03      	ldr	r3, [sp, #12]
 800389a:	1d19      	adds	r1, r3, #4
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	9103      	str	r1, [sp, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bfbb      	ittet	lt
 80038a4:	425b      	neglt	r3, r3
 80038a6:	f042 0202 	orrlt.w	r2, r2, #2
 80038aa:	9307      	strge	r3, [sp, #28]
 80038ac:	9307      	strlt	r3, [sp, #28]
 80038ae:	bfb8      	it	lt
 80038b0:	9204      	strlt	r2, [sp, #16]
 80038b2:	7823      	ldrb	r3, [r4, #0]
 80038b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80038b6:	d10a      	bne.n	80038ce <_vfiprintf_r+0x156>
 80038b8:	7863      	ldrb	r3, [r4, #1]
 80038ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80038bc:	d132      	bne.n	8003924 <_vfiprintf_r+0x1ac>
 80038be:	9b03      	ldr	r3, [sp, #12]
 80038c0:	1d1a      	adds	r2, r3, #4
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	9203      	str	r2, [sp, #12]
 80038c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80038ca:	3402      	adds	r4, #2
 80038cc:	9305      	str	r3, [sp, #20]
 80038ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80039a4 <_vfiprintf_r+0x22c>
 80038d2:	7821      	ldrb	r1, [r4, #0]
 80038d4:	2203      	movs	r2, #3
 80038d6:	4650      	mov	r0, sl
 80038d8:	f7fc fc82 	bl	80001e0 <memchr>
 80038dc:	b138      	cbz	r0, 80038ee <_vfiprintf_r+0x176>
 80038de:	9b04      	ldr	r3, [sp, #16]
 80038e0:	eba0 000a 	sub.w	r0, r0, sl
 80038e4:	2240      	movs	r2, #64	@ 0x40
 80038e6:	4082      	lsls	r2, r0
 80038e8:	4313      	orrs	r3, r2
 80038ea:	3401      	adds	r4, #1
 80038ec:	9304      	str	r3, [sp, #16]
 80038ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038f2:	4829      	ldr	r0, [pc, #164]	@ (8003998 <_vfiprintf_r+0x220>)
 80038f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80038f8:	2206      	movs	r2, #6
 80038fa:	f7fc fc71 	bl	80001e0 <memchr>
 80038fe:	2800      	cmp	r0, #0
 8003900:	d03f      	beq.n	8003982 <_vfiprintf_r+0x20a>
 8003902:	4b26      	ldr	r3, [pc, #152]	@ (800399c <_vfiprintf_r+0x224>)
 8003904:	bb1b      	cbnz	r3, 800394e <_vfiprintf_r+0x1d6>
 8003906:	9b03      	ldr	r3, [sp, #12]
 8003908:	3307      	adds	r3, #7
 800390a:	f023 0307 	bic.w	r3, r3, #7
 800390e:	3308      	adds	r3, #8
 8003910:	9303      	str	r3, [sp, #12]
 8003912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003914:	443b      	add	r3, r7
 8003916:	9309      	str	r3, [sp, #36]	@ 0x24
 8003918:	e76a      	b.n	80037f0 <_vfiprintf_r+0x78>
 800391a:	fb0c 3202 	mla	r2, ip, r2, r3
 800391e:	460c      	mov	r4, r1
 8003920:	2001      	movs	r0, #1
 8003922:	e7a8      	b.n	8003876 <_vfiprintf_r+0xfe>
 8003924:	2300      	movs	r3, #0
 8003926:	3401      	adds	r4, #1
 8003928:	9305      	str	r3, [sp, #20]
 800392a:	4619      	mov	r1, r3
 800392c:	f04f 0c0a 	mov.w	ip, #10
 8003930:	4620      	mov	r0, r4
 8003932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003936:	3a30      	subs	r2, #48	@ 0x30
 8003938:	2a09      	cmp	r2, #9
 800393a:	d903      	bls.n	8003944 <_vfiprintf_r+0x1cc>
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0c6      	beq.n	80038ce <_vfiprintf_r+0x156>
 8003940:	9105      	str	r1, [sp, #20]
 8003942:	e7c4      	b.n	80038ce <_vfiprintf_r+0x156>
 8003944:	fb0c 2101 	mla	r1, ip, r1, r2
 8003948:	4604      	mov	r4, r0
 800394a:	2301      	movs	r3, #1
 800394c:	e7f0      	b.n	8003930 <_vfiprintf_r+0x1b8>
 800394e:	ab03      	add	r3, sp, #12
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	462a      	mov	r2, r5
 8003954:	4b12      	ldr	r3, [pc, #72]	@ (80039a0 <_vfiprintf_r+0x228>)
 8003956:	a904      	add	r1, sp, #16
 8003958:	4630      	mov	r0, r6
 800395a:	f3af 8000 	nop.w
 800395e:	4607      	mov	r7, r0
 8003960:	1c78      	adds	r0, r7, #1
 8003962:	d1d6      	bne.n	8003912 <_vfiprintf_r+0x19a>
 8003964:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003966:	07d9      	lsls	r1, r3, #31
 8003968:	d405      	bmi.n	8003976 <_vfiprintf_r+0x1fe>
 800396a:	89ab      	ldrh	r3, [r5, #12]
 800396c:	059a      	lsls	r2, r3, #22
 800396e:	d402      	bmi.n	8003976 <_vfiprintf_r+0x1fe>
 8003970:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003972:	f7ff f9a9 	bl	8002cc8 <__retarget_lock_release_recursive>
 8003976:	89ab      	ldrh	r3, [r5, #12]
 8003978:	065b      	lsls	r3, r3, #25
 800397a:	f53f af1f 	bmi.w	80037bc <_vfiprintf_r+0x44>
 800397e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003980:	e71e      	b.n	80037c0 <_vfiprintf_r+0x48>
 8003982:	ab03      	add	r3, sp, #12
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	462a      	mov	r2, r5
 8003988:	4b05      	ldr	r3, [pc, #20]	@ (80039a0 <_vfiprintf_r+0x228>)
 800398a:	a904      	add	r1, sp, #16
 800398c:	4630      	mov	r0, r6
 800398e:	f7ff fc81 	bl	8003294 <_printf_i>
 8003992:	e7e4      	b.n	800395e <_vfiprintf_r+0x1e6>
 8003994:	080044e3 	.word	0x080044e3
 8003998:	080044ed 	.word	0x080044ed
 800399c:	00000000 	.word	0x00000000
 80039a0:	08003755 	.word	0x08003755
 80039a4:	080044e9 	.word	0x080044e9

080039a8 <__swbuf_r>:
 80039a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039aa:	460e      	mov	r6, r1
 80039ac:	4614      	mov	r4, r2
 80039ae:	4605      	mov	r5, r0
 80039b0:	b118      	cbz	r0, 80039ba <__swbuf_r+0x12>
 80039b2:	6a03      	ldr	r3, [r0, #32]
 80039b4:	b90b      	cbnz	r3, 80039ba <__swbuf_r+0x12>
 80039b6:	f7ff f857 	bl	8002a68 <__sinit>
 80039ba:	69a3      	ldr	r3, [r4, #24]
 80039bc:	60a3      	str	r3, [r4, #8]
 80039be:	89a3      	ldrh	r3, [r4, #12]
 80039c0:	071a      	lsls	r2, r3, #28
 80039c2:	d501      	bpl.n	80039c8 <__swbuf_r+0x20>
 80039c4:	6923      	ldr	r3, [r4, #16]
 80039c6:	b943      	cbnz	r3, 80039da <__swbuf_r+0x32>
 80039c8:	4621      	mov	r1, r4
 80039ca:	4628      	mov	r0, r5
 80039cc:	f000 f82a 	bl	8003a24 <__swsetup_r>
 80039d0:	b118      	cbz	r0, 80039da <__swbuf_r+0x32>
 80039d2:	f04f 37ff 	mov.w	r7, #4294967295
 80039d6:	4638      	mov	r0, r7
 80039d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039da:	6823      	ldr	r3, [r4, #0]
 80039dc:	6922      	ldr	r2, [r4, #16]
 80039de:	1a98      	subs	r0, r3, r2
 80039e0:	6963      	ldr	r3, [r4, #20]
 80039e2:	b2f6      	uxtb	r6, r6
 80039e4:	4283      	cmp	r3, r0
 80039e6:	4637      	mov	r7, r6
 80039e8:	dc05      	bgt.n	80039f6 <__swbuf_r+0x4e>
 80039ea:	4621      	mov	r1, r4
 80039ec:	4628      	mov	r0, r5
 80039ee:	f7ff fdf3 	bl	80035d8 <_fflush_r>
 80039f2:	2800      	cmp	r0, #0
 80039f4:	d1ed      	bne.n	80039d2 <__swbuf_r+0x2a>
 80039f6:	68a3      	ldr	r3, [r4, #8]
 80039f8:	3b01      	subs	r3, #1
 80039fa:	60a3      	str	r3, [r4, #8]
 80039fc:	6823      	ldr	r3, [r4, #0]
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	6022      	str	r2, [r4, #0]
 8003a02:	701e      	strb	r6, [r3, #0]
 8003a04:	6962      	ldr	r2, [r4, #20]
 8003a06:	1c43      	adds	r3, r0, #1
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d004      	beq.n	8003a16 <__swbuf_r+0x6e>
 8003a0c:	89a3      	ldrh	r3, [r4, #12]
 8003a0e:	07db      	lsls	r3, r3, #31
 8003a10:	d5e1      	bpl.n	80039d6 <__swbuf_r+0x2e>
 8003a12:	2e0a      	cmp	r6, #10
 8003a14:	d1df      	bne.n	80039d6 <__swbuf_r+0x2e>
 8003a16:	4621      	mov	r1, r4
 8003a18:	4628      	mov	r0, r5
 8003a1a:	f7ff fddd 	bl	80035d8 <_fflush_r>
 8003a1e:	2800      	cmp	r0, #0
 8003a20:	d0d9      	beq.n	80039d6 <__swbuf_r+0x2e>
 8003a22:	e7d6      	b.n	80039d2 <__swbuf_r+0x2a>

08003a24 <__swsetup_r>:
 8003a24:	b538      	push	{r3, r4, r5, lr}
 8003a26:	4b29      	ldr	r3, [pc, #164]	@ (8003acc <__swsetup_r+0xa8>)
 8003a28:	4605      	mov	r5, r0
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	460c      	mov	r4, r1
 8003a2e:	b118      	cbz	r0, 8003a38 <__swsetup_r+0x14>
 8003a30:	6a03      	ldr	r3, [r0, #32]
 8003a32:	b90b      	cbnz	r3, 8003a38 <__swsetup_r+0x14>
 8003a34:	f7ff f818 	bl	8002a68 <__sinit>
 8003a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a3c:	0719      	lsls	r1, r3, #28
 8003a3e:	d422      	bmi.n	8003a86 <__swsetup_r+0x62>
 8003a40:	06da      	lsls	r2, r3, #27
 8003a42:	d407      	bmi.n	8003a54 <__swsetup_r+0x30>
 8003a44:	2209      	movs	r2, #9
 8003a46:	602a      	str	r2, [r5, #0]
 8003a48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a4c:	81a3      	strh	r3, [r4, #12]
 8003a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a52:	e033      	b.n	8003abc <__swsetup_r+0x98>
 8003a54:	0758      	lsls	r0, r3, #29
 8003a56:	d512      	bpl.n	8003a7e <__swsetup_r+0x5a>
 8003a58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a5a:	b141      	cbz	r1, 8003a6e <__swsetup_r+0x4a>
 8003a5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a60:	4299      	cmp	r1, r3
 8003a62:	d002      	beq.n	8003a6a <__swsetup_r+0x46>
 8003a64:	4628      	mov	r0, r5
 8003a66:	f7ff f94f 	bl	8002d08 <_free_r>
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a6e:	89a3      	ldrh	r3, [r4, #12]
 8003a70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003a74:	81a3      	strh	r3, [r4, #12]
 8003a76:	2300      	movs	r3, #0
 8003a78:	6063      	str	r3, [r4, #4]
 8003a7a:	6923      	ldr	r3, [r4, #16]
 8003a7c:	6023      	str	r3, [r4, #0]
 8003a7e:	89a3      	ldrh	r3, [r4, #12]
 8003a80:	f043 0308 	orr.w	r3, r3, #8
 8003a84:	81a3      	strh	r3, [r4, #12]
 8003a86:	6923      	ldr	r3, [r4, #16]
 8003a88:	b94b      	cbnz	r3, 8003a9e <__swsetup_r+0x7a>
 8003a8a:	89a3      	ldrh	r3, [r4, #12]
 8003a8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a94:	d003      	beq.n	8003a9e <__swsetup_r+0x7a>
 8003a96:	4621      	mov	r1, r4
 8003a98:	4628      	mov	r0, r5
 8003a9a:	f000 f88b 	bl	8003bb4 <__smakebuf_r>
 8003a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aa2:	f013 0201 	ands.w	r2, r3, #1
 8003aa6:	d00a      	beq.n	8003abe <__swsetup_r+0x9a>
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	60a2      	str	r2, [r4, #8]
 8003aac:	6962      	ldr	r2, [r4, #20]
 8003aae:	4252      	negs	r2, r2
 8003ab0:	61a2      	str	r2, [r4, #24]
 8003ab2:	6922      	ldr	r2, [r4, #16]
 8003ab4:	b942      	cbnz	r2, 8003ac8 <__swsetup_r+0xa4>
 8003ab6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003aba:	d1c5      	bne.n	8003a48 <__swsetup_r+0x24>
 8003abc:	bd38      	pop	{r3, r4, r5, pc}
 8003abe:	0799      	lsls	r1, r3, #30
 8003ac0:	bf58      	it	pl
 8003ac2:	6962      	ldrpl	r2, [r4, #20]
 8003ac4:	60a2      	str	r2, [r4, #8]
 8003ac6:	e7f4      	b.n	8003ab2 <__swsetup_r+0x8e>
 8003ac8:	2000      	movs	r0, #0
 8003aca:	e7f7      	b.n	8003abc <__swsetup_r+0x98>
 8003acc:	20000018 	.word	0x20000018

08003ad0 <_raise_r>:
 8003ad0:	291f      	cmp	r1, #31
 8003ad2:	b538      	push	{r3, r4, r5, lr}
 8003ad4:	4605      	mov	r5, r0
 8003ad6:	460c      	mov	r4, r1
 8003ad8:	d904      	bls.n	8003ae4 <_raise_r+0x14>
 8003ada:	2316      	movs	r3, #22
 8003adc:	6003      	str	r3, [r0, #0]
 8003ade:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae2:	bd38      	pop	{r3, r4, r5, pc}
 8003ae4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003ae6:	b112      	cbz	r2, 8003aee <_raise_r+0x1e>
 8003ae8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003aec:	b94b      	cbnz	r3, 8003b02 <_raise_r+0x32>
 8003aee:	4628      	mov	r0, r5
 8003af0:	f000 f830 	bl	8003b54 <_getpid_r>
 8003af4:	4622      	mov	r2, r4
 8003af6:	4601      	mov	r1, r0
 8003af8:	4628      	mov	r0, r5
 8003afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003afe:	f000 b817 	b.w	8003b30 <_kill_r>
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d00a      	beq.n	8003b1c <_raise_r+0x4c>
 8003b06:	1c59      	adds	r1, r3, #1
 8003b08:	d103      	bne.n	8003b12 <_raise_r+0x42>
 8003b0a:	2316      	movs	r3, #22
 8003b0c:	6003      	str	r3, [r0, #0]
 8003b0e:	2001      	movs	r0, #1
 8003b10:	e7e7      	b.n	8003ae2 <_raise_r+0x12>
 8003b12:	2100      	movs	r1, #0
 8003b14:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003b18:	4620      	mov	r0, r4
 8003b1a:	4798      	blx	r3
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	e7e0      	b.n	8003ae2 <_raise_r+0x12>

08003b20 <raise>:
 8003b20:	4b02      	ldr	r3, [pc, #8]	@ (8003b2c <raise+0xc>)
 8003b22:	4601      	mov	r1, r0
 8003b24:	6818      	ldr	r0, [r3, #0]
 8003b26:	f7ff bfd3 	b.w	8003ad0 <_raise_r>
 8003b2a:	bf00      	nop
 8003b2c:	20000018 	.word	0x20000018

08003b30 <_kill_r>:
 8003b30:	b538      	push	{r3, r4, r5, lr}
 8003b32:	4d07      	ldr	r5, [pc, #28]	@ (8003b50 <_kill_r+0x20>)
 8003b34:	2300      	movs	r3, #0
 8003b36:	4604      	mov	r4, r0
 8003b38:	4608      	mov	r0, r1
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	602b      	str	r3, [r5, #0]
 8003b3e:	f7fe fbc5 	bl	80022cc <_kill>
 8003b42:	1c43      	adds	r3, r0, #1
 8003b44:	d102      	bne.n	8003b4c <_kill_r+0x1c>
 8003b46:	682b      	ldr	r3, [r5, #0]
 8003b48:	b103      	cbz	r3, 8003b4c <_kill_r+0x1c>
 8003b4a:	6023      	str	r3, [r4, #0]
 8003b4c:	bd38      	pop	{r3, r4, r5, pc}
 8003b4e:	bf00      	nop
 8003b50:	200002cc 	.word	0x200002cc

08003b54 <_getpid_r>:
 8003b54:	f7fe bbb2 	b.w	80022bc <_getpid>

08003b58 <_malloc_usable_size_r>:
 8003b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b5c:	1f18      	subs	r0, r3, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	bfbc      	itt	lt
 8003b62:	580b      	ldrlt	r3, [r1, r0]
 8003b64:	18c0      	addlt	r0, r0, r3
 8003b66:	4770      	bx	lr

08003b68 <__swhatbuf_r>:
 8003b68:	b570      	push	{r4, r5, r6, lr}
 8003b6a:	460c      	mov	r4, r1
 8003b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b70:	2900      	cmp	r1, #0
 8003b72:	b096      	sub	sp, #88	@ 0x58
 8003b74:	4615      	mov	r5, r2
 8003b76:	461e      	mov	r6, r3
 8003b78:	da0d      	bge.n	8003b96 <__swhatbuf_r+0x2e>
 8003b7a:	89a3      	ldrh	r3, [r4, #12]
 8003b7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003b80:	f04f 0100 	mov.w	r1, #0
 8003b84:	bf14      	ite	ne
 8003b86:	2340      	movne	r3, #64	@ 0x40
 8003b88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	6031      	str	r1, [r6, #0]
 8003b90:	602b      	str	r3, [r5, #0]
 8003b92:	b016      	add	sp, #88	@ 0x58
 8003b94:	bd70      	pop	{r4, r5, r6, pc}
 8003b96:	466a      	mov	r2, sp
 8003b98:	f000 f848 	bl	8003c2c <_fstat_r>
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	dbec      	blt.n	8003b7a <__swhatbuf_r+0x12>
 8003ba0:	9901      	ldr	r1, [sp, #4]
 8003ba2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003ba6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003baa:	4259      	negs	r1, r3
 8003bac:	4159      	adcs	r1, r3
 8003bae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bb2:	e7eb      	b.n	8003b8c <__swhatbuf_r+0x24>

08003bb4 <__smakebuf_r>:
 8003bb4:	898b      	ldrh	r3, [r1, #12]
 8003bb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bb8:	079d      	lsls	r5, r3, #30
 8003bba:	4606      	mov	r6, r0
 8003bbc:	460c      	mov	r4, r1
 8003bbe:	d507      	bpl.n	8003bd0 <__smakebuf_r+0x1c>
 8003bc0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003bc4:	6023      	str	r3, [r4, #0]
 8003bc6:	6123      	str	r3, [r4, #16]
 8003bc8:	2301      	movs	r3, #1
 8003bca:	6163      	str	r3, [r4, #20]
 8003bcc:	b003      	add	sp, #12
 8003bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bd0:	ab01      	add	r3, sp, #4
 8003bd2:	466a      	mov	r2, sp
 8003bd4:	f7ff ffc8 	bl	8003b68 <__swhatbuf_r>
 8003bd8:	9f00      	ldr	r7, [sp, #0]
 8003bda:	4605      	mov	r5, r0
 8003bdc:	4639      	mov	r1, r7
 8003bde:	4630      	mov	r0, r6
 8003be0:	f7ff f906 	bl	8002df0 <_malloc_r>
 8003be4:	b948      	cbnz	r0, 8003bfa <__smakebuf_r+0x46>
 8003be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bea:	059a      	lsls	r2, r3, #22
 8003bec:	d4ee      	bmi.n	8003bcc <__smakebuf_r+0x18>
 8003bee:	f023 0303 	bic.w	r3, r3, #3
 8003bf2:	f043 0302 	orr.w	r3, r3, #2
 8003bf6:	81a3      	strh	r3, [r4, #12]
 8003bf8:	e7e2      	b.n	8003bc0 <__smakebuf_r+0xc>
 8003bfa:	89a3      	ldrh	r3, [r4, #12]
 8003bfc:	6020      	str	r0, [r4, #0]
 8003bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c02:	81a3      	strh	r3, [r4, #12]
 8003c04:	9b01      	ldr	r3, [sp, #4]
 8003c06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003c0a:	b15b      	cbz	r3, 8003c24 <__smakebuf_r+0x70>
 8003c0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c10:	4630      	mov	r0, r6
 8003c12:	f000 f81d 	bl	8003c50 <_isatty_r>
 8003c16:	b128      	cbz	r0, 8003c24 <__smakebuf_r+0x70>
 8003c18:	89a3      	ldrh	r3, [r4, #12]
 8003c1a:	f023 0303 	bic.w	r3, r3, #3
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	81a3      	strh	r3, [r4, #12]
 8003c24:	89a3      	ldrh	r3, [r4, #12]
 8003c26:	431d      	orrs	r5, r3
 8003c28:	81a5      	strh	r5, [r4, #12]
 8003c2a:	e7cf      	b.n	8003bcc <__smakebuf_r+0x18>

08003c2c <_fstat_r>:
 8003c2c:	b538      	push	{r3, r4, r5, lr}
 8003c2e:	4d07      	ldr	r5, [pc, #28]	@ (8003c4c <_fstat_r+0x20>)
 8003c30:	2300      	movs	r3, #0
 8003c32:	4604      	mov	r4, r0
 8003c34:	4608      	mov	r0, r1
 8003c36:	4611      	mov	r1, r2
 8003c38:	602b      	str	r3, [r5, #0]
 8003c3a:	f7fe fba7 	bl	800238c <_fstat>
 8003c3e:	1c43      	adds	r3, r0, #1
 8003c40:	d102      	bne.n	8003c48 <_fstat_r+0x1c>
 8003c42:	682b      	ldr	r3, [r5, #0]
 8003c44:	b103      	cbz	r3, 8003c48 <_fstat_r+0x1c>
 8003c46:	6023      	str	r3, [r4, #0]
 8003c48:	bd38      	pop	{r3, r4, r5, pc}
 8003c4a:	bf00      	nop
 8003c4c:	200002cc 	.word	0x200002cc

08003c50 <_isatty_r>:
 8003c50:	b538      	push	{r3, r4, r5, lr}
 8003c52:	4d06      	ldr	r5, [pc, #24]	@ (8003c6c <_isatty_r+0x1c>)
 8003c54:	2300      	movs	r3, #0
 8003c56:	4604      	mov	r4, r0
 8003c58:	4608      	mov	r0, r1
 8003c5a:	602b      	str	r3, [r5, #0]
 8003c5c:	f7fe fba6 	bl	80023ac <_isatty>
 8003c60:	1c43      	adds	r3, r0, #1
 8003c62:	d102      	bne.n	8003c6a <_isatty_r+0x1a>
 8003c64:	682b      	ldr	r3, [r5, #0]
 8003c66:	b103      	cbz	r3, 8003c6a <_isatty_r+0x1a>
 8003c68:	6023      	str	r3, [r4, #0]
 8003c6a:	bd38      	pop	{r3, r4, r5, pc}
 8003c6c:	200002cc 	.word	0x200002cc

08003c70 <_init>:
 8003c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c72:	bf00      	nop
 8003c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c76:	bc08      	pop	{r3}
 8003c78:	469e      	mov	lr, r3
 8003c7a:	4770      	bx	lr

08003c7c <_fini>:
 8003c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7e:	bf00      	nop
 8003c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c82:	bc08      	pop	{r3}
 8003c84:	469e      	mov	lr, r3
 8003c86:	4770      	bx	lr
