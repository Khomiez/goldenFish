
New folder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c38  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08002dd8  08002dd8  00003dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031c8  080031c8  00005064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080031c8  080031c8  000041c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031d0  080031d0  00005064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031d0  080031d0  000041d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031d4  080031d4  000041d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080031d8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000064  0800323c  00005064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  0800323c  00005240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002bcb  00000000  00000000  00005094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c6b  00000000  00000000  00007c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000300  00000000  00000000  000088d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000238  00000000  00000000  00008bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001052f  00000000  00000000  00008e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000392d  00000000  00000000  00019337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000575cf  00000000  00000000  0001cc64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00074233  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001560  00000000  00000000  00074278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000757d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002dc0 	.word	0x08002dc0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08002dc0 	.word	0x08002dc0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <clamp_u8>:
GameState_t g_last_state_logged = (GameState_t)-1;

/* ============================================================================
 * Difficulty Timing Functions
 * ============================================================================ */
uint8_t clamp_u8(uint8_t v, uint8_t lo, uint8_t hi) {
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
 800028a:	460b      	mov	r3, r1
 800028c:	71bb      	strb	r3, [r7, #6]
 800028e:	4613      	mov	r3, r2
 8000290:	717b      	strb	r3, [r7, #5]
    return v < lo ? lo : (v > hi ? hi : v);
 8000292:	79fa      	ldrb	r2, [r7, #7]
 8000294:	79bb      	ldrb	r3, [r7, #6]
 8000296:	429a      	cmp	r2, r3
 8000298:	d306      	bcc.n	80002a8 <clamp_u8+0x28>
 800029a:	79fa      	ldrb	r2, [r7, #7]
 800029c:	797b      	ldrb	r3, [r7, #5]
 800029e:	4293      	cmp	r3, r2
 80002a0:	bf28      	it	cs
 80002a2:	4613      	movcs	r3, r2
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	e000      	b.n	80002aa <clamp_u8+0x2a>
 80002a8:	79bb      	ldrb	r3, [r7, #6]
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
	...

080002b8 <diff_on_ms>:

uint16_t diff_on_ms(uint8_t diff) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
    static const uint16_t T[5] = {500, 400, 300, 220, 150}; // DIFF 1..5
    diff = clamp_u8(diff, 1, 5);
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	2205      	movs	r2, #5
 80002c6:	2101      	movs	r1, #1
 80002c8:	4618      	mov	r0, r3
 80002ca:	f7ff ffd9 	bl	8000280 <clamp_u8>
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]
    return T[diff-1];
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	3b01      	subs	r3, #1
 80002d6:	4a03      	ldr	r2, [pc, #12]	@ (80002e4 <diff_on_ms+0x2c>)
 80002d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	08002fec 	.word	0x08002fec

080002e8 <diff_off_ms>:

uint16_t diff_off_ms(uint8_t diff) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	71fb      	strb	r3, [r7, #7]
    static const uint16_t T[5] = {250, 200, 150, 110, 80};  // DIFF 1..5
    diff = clamp_u8(diff, 1, 5);
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	2205      	movs	r2, #5
 80002f6:	2101      	movs	r1, #1
 80002f8:	4618      	mov	r0, r3
 80002fa:	f7ff ffc1 	bl	8000280 <clamp_u8>
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
    return T[diff-1];
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	3b01      	subs	r3, #1
 8000306:	4a03      	ldr	r2, [pc, #12]	@ (8000314 <diff_off_ms+0x2c>)
 8000308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 800030c:	4618      	mov	r0, r3
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	08002ff8 	.word	0x08002ff8

08000318 <set_game_state>:

/* ============================================================================
 * Internal Helper Functions
 * ============================================================================ */
static void set_game_state(GameState_t new_state) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
    g_game_state = new_state;
 8000322:	4a06      	ldr	r2, [pc, #24]	@ (800033c <set_game_state+0x24>)
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	7013      	strb	r3, [r2, #0]
    g_state_entry_time = GetTick();
 8000328:	f001 fac8 	bl	80018bc <GetTick>
 800032c:	4603      	mov	r3, r0
 800032e:	4a04      	ldr	r2, [pc, #16]	@ (8000340 <set_game_state+0x28>)
 8000330:	6013      	str	r3, [r2, #0]
}
 8000332:	bf00      	nop
 8000334:	3708      	adds	r7, #8
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000080 	.word	0x20000080
 8000340:	2000008c 	.word	0x2000008c

08000344 <generate_pattern>:

static void generate_pattern(uint8_t length) {
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < length; i++)
 800034e:	2300      	movs	r3, #0
 8000350:	73fb      	strb	r3, [r7, #15]
 8000352:	e010      	b.n	8000376 <generate_pattern+0x32>
        g_pattern[i] = rand() % 4;
 8000354:	f001 fb66 	bl	8001a24 <rand>
 8000358:	4603      	mov	r3, r0
 800035a:	425a      	negs	r2, r3
 800035c:	f003 0303 	and.w	r3, r3, #3
 8000360:	f002 0203 	and.w	r2, r2, #3
 8000364:	bf58      	it	pl
 8000366:	4253      	negpl	r3, r2
 8000368:	7bfa      	ldrb	r2, [r7, #15]
 800036a:	b2d9      	uxtb	r1, r3
 800036c:	4b07      	ldr	r3, [pc, #28]	@ (800038c <generate_pattern+0x48>)
 800036e:	5499      	strb	r1, [r3, r2]
    for (uint8_t i = 0; i < length; i++)
 8000370:	7bfb      	ldrb	r3, [r7, #15]
 8000372:	3301      	adds	r3, #1
 8000374:	73fb      	strb	r3, [r7, #15]
 8000376:	7bfa      	ldrb	r2, [r7, #15]
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	429a      	cmp	r2, r3
 800037c:	d3ea      	bcc.n	8000354 <generate_pattern+0x10>
    g_pattern_length = length;
 800037e:	4a04      	ldr	r2, [pc, #16]	@ (8000390 <generate_pattern+0x4c>)
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	7013      	strb	r3, [r2, #0]
}
 8000384:	bf00      	nop
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000094 	.word	0x20000094
 8000390:	200000b4 	.word	0x200000b4

08000394 <show_led>:

static void show_led(uint8_t idx) {
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
    LED_SetPattern(1 << button_to_led_map[idx]);
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	4a06      	ldr	r2, [pc, #24]	@ (80003bc <show_led+0x28>)
 80003a2:	5cd3      	ldrb	r3, [r2, r3]
 80003a4:	461a      	mov	r2, r3
 80003a6:	2301      	movs	r3, #1
 80003a8:	4093      	lsls	r3, r2
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	4618      	mov	r0, r3
 80003ae:	f000 fd3b 	bl	8000e28 <LED_SetPattern>
}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	08002fe8 	.word	0x08002fe8

080003c0 <clear_leds>:

static void clear_leds(void) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
    LED_SetPattern(0);
 80003c4:	2000      	movs	r0, #0
 80003c6:	f000 fd2f 	bl	8000e28 <LED_SetPattern>
}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
	...

080003d0 <handle_boot>:

/* ============================================================================
 * State Handler Functions
 * ============================================================================ */
static void handle_boot(void) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
    g_level = 1;
 80003d4:	4b06      	ldr	r3, [pc, #24]	@ (80003f0 <handle_boot+0x20>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	701a      	strb	r2, [r3, #0]
    g_score = 0;
 80003da:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <handle_boot+0x24>)
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
    g_lives = INITIAL_LIVES;
 80003e0:	4b05      	ldr	r3, [pc, #20]	@ (80003f8 <handle_boot+0x28>)
 80003e2:	2204      	movs	r2, #4
 80003e4:	701a      	strb	r2, [r3, #0]
    set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 80003e6:	2001      	movs	r0, #1
 80003e8:	f7ff ff96 	bl	8000318 <set_game_state>
}
 80003ec:	bf00      	nop
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000082 	.word	0x20000082
 80003f4:	20000084 	.word	0x20000084
 80003f8:	20000088 	.word	0x20000088

080003fc <handle_difficulty_select>:

static void handle_difficulty_select(void) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
    uint32_t current_time = GetTick();
 8000402:	f001 fa5b 	bl	80018bc <GetTick>
 8000406:	60b8      	str	r0, [r7, #8]
    static uint32_t last_log_time = 0;
    static uint8_t last_difficulty = 0;

    if (!g_difficulty_locked) {
 8000408:	4b2d      	ldr	r3, [pc, #180]	@ (80004c0 <handle_difficulty_select+0xc4>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d14f      	bne.n	80004b0 <handle_difficulty_select+0xb4>
        uint16_t pot_value = g_adc_values[0];
 8000410:	4b2c      	ldr	r3, [pc, #176]	@ (80004c4 <handle_difficulty_select+0xc8>)
 8000412:	881b      	ldrh	r3, [r3, #0]
 8000414:	80fb      	strh	r3, [r7, #6]
        g_difficulty = (uint32_t)(pot_value * 5) / 1024 + 1;  // 1..5
 8000416:	88fa      	ldrh	r2, [r7, #6]
 8000418:	4613      	mov	r3, r2
 800041a:	009b      	lsls	r3, r3, #2
 800041c:	4413      	add	r3, r2
 800041e:	0a9b      	lsrs	r3, r3, #10
 8000420:	b2db      	uxtb	r3, r3
 8000422:	3301      	adds	r3, #1
 8000424:	b2da      	uxtb	r2, r3
 8000426:	4b28      	ldr	r3, [pc, #160]	@ (80004c8 <handle_difficulty_select+0xcc>)
 8000428:	701a      	strb	r2, [r3, #0]
        SevenSeg_Display(g_difficulty);
 800042a:	4b27      	ldr	r3, [pc, #156]	@ (80004c8 <handle_difficulty_select+0xcc>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	4618      	mov	r0, r3
 8000430:	f000 fd3e 	bl	8000eb0 <SevenSeg_Display>

        if (g_difficulty != last_difficulty || (current_time - last_log_time) > 1000) {
 8000434:	4b24      	ldr	r3, [pc, #144]	@ (80004c8 <handle_difficulty_select+0xcc>)
 8000436:	781a      	ldrb	r2, [r3, #0]
 8000438:	4b24      	ldr	r3, [pc, #144]	@ (80004cc <handle_difficulty_select+0xd0>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	429a      	cmp	r2, r3
 800043e:	d106      	bne.n	800044e <handle_difficulty_select+0x52>
 8000440:	4b23      	ldr	r3, [pc, #140]	@ (80004d0 <handle_difficulty_select+0xd4>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	68ba      	ldr	r2, [r7, #8]
 8000446:	1ad3      	subs	r3, r2, r3
 8000448:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800044c:	d90f      	bls.n	800046e <handle_difficulty_select+0x72>
            Log_Print("[SPEED] Pot:%u -> Diff:%u\r\n", pot_value, g_difficulty);
 800044e:	88fb      	ldrh	r3, [r7, #6]
 8000450:	4a1d      	ldr	r2, [pc, #116]	@ (80004c8 <handle_difficulty_select+0xcc>)
 8000452:	7812      	ldrb	r2, [r2, #0]
 8000454:	4619      	mov	r1, r3
 8000456:	481f      	ldr	r0, [pc, #124]	@ (80004d4 <handle_difficulty_select+0xd8>)
 8000458:	f001 fa3c 	bl	80018d4 <Log_Print>
            last_log_time = current_time;
 800045c:	4a1c      	ldr	r2, [pc, #112]	@ (80004d0 <handle_difficulty_select+0xd4>)
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	6013      	str	r3, [r2, #0]
            last_difficulty = g_difficulty;
 8000462:	4b19      	ldr	r3, [pc, #100]	@ (80004c8 <handle_difficulty_select+0xcc>)
 8000464:	781a      	ldrb	r2, [r3, #0]
 8000466:	4b19      	ldr	r3, [pc, #100]	@ (80004cc <handle_difficulty_select+0xd0>)
 8000468:	701a      	strb	r2, [r3, #0]
            OLED_ShowStatus();
 800046a:	f001 f8bd 	bl	80015e8 <OLED_ShowStatus>
        }

        for (int i = 0; i < 4; i++) {
 800046e:	2300      	movs	r3, #0
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	e019      	b.n	80004a8 <handle_difficulty_select+0xac>
            if (g_buttons[i].current_state == 1 &&
 8000474:	4a18      	ldr	r2, [pc, #96]	@ (80004d8 <handle_difficulty_select+0xdc>)
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d110      	bne.n	80004a2 <handle_difficulty_select+0xa6>
               (current_time - g_buttons[i].last_change_time) >= LONG_PRESS_DURATION_MS) {
 8000480:	4a15      	ldr	r2, [pc, #84]	@ (80004d8 <handle_difficulty_select+0xdc>)
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	00db      	lsls	r3, r3, #3
 8000486:	4413      	add	r3, r2
 8000488:	685b      	ldr	r3, [r3, #4]
 800048a:	68ba      	ldr	r2, [r7, #8]
 800048c:	1ad3      	subs	r3, r2, r3
            if (g_buttons[i].current_state == 1 &&
 800048e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000492:	d306      	bcc.n	80004a2 <handle_difficulty_select+0xa6>
                g_difficulty_locked = 1;
 8000494:	4b0a      	ldr	r3, [pc, #40]	@ (80004c0 <handle_difficulty_select+0xc4>)
 8000496:	2201      	movs	r2, #1
 8000498:	701a      	strb	r2, [r3, #0]
                set_game_state(GAME_STATE_LEVEL_INTRO);
 800049a:	2002      	movs	r0, #2
 800049c:	f7ff ff3c 	bl	8000318 <set_game_state>
                return;
 80004a0:	e00b      	b.n	80004ba <handle_difficulty_select+0xbe>
        for (int i = 0; i < 4; i++) {
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	3301      	adds	r3, #1
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	2b03      	cmp	r3, #3
 80004ac:	dde2      	ble.n	8000474 <handle_difficulty_select+0x78>
 80004ae:	e004      	b.n	80004ba <handle_difficulty_select+0xbe>
            }
        }
    } else {
        SevenSeg_Display(g_difficulty);
 80004b0:	4b05      	ldr	r3, [pc, #20]	@ (80004c8 <handle_difficulty_select+0xcc>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	4618      	mov	r0, r3
 80004b6:	f000 fcfb 	bl	8000eb0 <SevenSeg_Display>
    }
}
 80004ba:	3710      	adds	r7, #16
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000090 	.word	0x20000090
 80004c4:	200000e0 	.word	0x200000e0
 80004c8:	20000081 	.word	0x20000081
 80004cc:	200000b7 	.word	0x200000b7
 80004d0:	200000b8 	.word	0x200000b8
 80004d4:	08002dd8 	.word	0x08002dd8
 80004d8:	200000c0 	.word	0x200000c0

080004dc <handle_level_intro>:

static void handle_level_intro(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
    Log_Print("Level %u. Lives: %u. Score: %lu\r\n", g_level, g_lives, g_score);
 80004e2:	4b25      	ldr	r3, [pc, #148]	@ (8000578 <handle_level_intro+0x9c>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	4619      	mov	r1, r3
 80004e8:	4b24      	ldr	r3, [pc, #144]	@ (800057c <handle_level_intro+0xa0>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	461a      	mov	r2, r3
 80004ee:	4b24      	ldr	r3, [pc, #144]	@ (8000580 <handle_level_intro+0xa4>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4824      	ldr	r0, [pc, #144]	@ (8000584 <handle_level_intro+0xa8>)
 80004f4:	f001 f9ee 	bl	80018d4 <Log_Print>
    OLED_ShowStatus();
 80004f8:	f001 f876 	bl	80015e8 <OLED_ShowStatus>
    Delay_ms(800);
 80004fc:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000500:	f001 f9c6 	bl	8001890 <Delay_ms>

    // Back-and-forth LED animation only for first level
    if (g_level == 1) {
 8000504:	4b1c      	ldr	r3, [pc, #112]	@ (8000578 <handle_level_intro+0x9c>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d126      	bne.n	800055a <handle_level_intro+0x7e>
        // Forward: LED0 -> LED1 -> LED2 -> LED3
        for (int i = 0; i < 4; i++) {
 800050c:	2300      	movs	r3, #0
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	e00a      	b.n	8000528 <handle_level_intro+0x4c>
            show_led(i);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	b2db      	uxtb	r3, r3
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff ff3c 	bl	8000394 <show_led>
            Delay_ms(150);
 800051c:	2096      	movs	r0, #150	@ 0x96
 800051e:	f001 f9b7 	bl	8001890 <Delay_ms>
        for (int i = 0; i < 4; i++) {
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3301      	adds	r3, #1
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b03      	cmp	r3, #3
 800052c:	ddf1      	ble.n	8000512 <handle_level_intro+0x36>
        }
        // Backward: LED3 -> LED2 -> LED1 -> LED0
        for (int i = 2; i >= 0; i--) {
 800052e:	2302      	movs	r3, #2
 8000530:	603b      	str	r3, [r7, #0]
 8000532:	e00a      	b.n	800054a <handle_level_intro+0x6e>
            show_led(i);
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ff2b 	bl	8000394 <show_led>
            Delay_ms(150);
 800053e:	2096      	movs	r0, #150	@ 0x96
 8000540:	f001 f9a6 	bl	8001890 <Delay_ms>
        for (int i = 2; i >= 0; i--) {
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	3b01      	subs	r3, #1
 8000548:	603b      	str	r3, [r7, #0]
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	daf1      	bge.n	8000534 <handle_level_intro+0x58>
        }
        clear_leds();
 8000550:	f7ff ff36 	bl	80003c0 <clear_leds>
        Delay_ms(200);
 8000554:	20c8      	movs	r0, #200	@ 0xc8
 8000556:	f001 f99b 	bl	8001890 <Delay_ms>
    }

    generate_pattern(g_level);
 800055a:	4b07      	ldr	r3, [pc, #28]	@ (8000578 <handle_level_intro+0x9c>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff fef0 	bl	8000344 <generate_pattern>
    g_pattern_index = 0;
 8000564:	4b08      	ldr	r3, [pc, #32]	@ (8000588 <handle_level_intro+0xac>)
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
    set_game_state(GAME_STATE_PATTERN_DISPLAY);
 800056a:	2003      	movs	r0, #3
 800056c:	f7ff fed4 	bl	8000318 <set_game_state>
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000082 	.word	0x20000082
 800057c:	20000088 	.word	0x20000088
 8000580:	20000084 	.word	0x20000084
 8000584:	08002df4 	.word	0x08002df4
 8000588:	200000b5 	.word	0x200000b5

0800058c <handle_pattern_display>:

static void handle_pattern_display(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
    uint16_t t_on  = diff_on_ms(g_difficulty);
 8000592:	4b1e      	ldr	r3, [pc, #120]	@ (800060c <handle_pattern_display+0x80>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff fe8e 	bl	80002b8 <diff_on_ms>
 800059c:	4603      	mov	r3, r0
 800059e:	80fb      	strh	r3, [r7, #6]
    uint16_t t_off = diff_off_ms(g_difficulty);
 80005a0:	4b1a      	ldr	r3, [pc, #104]	@ (800060c <handle_pattern_display+0x80>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fe9f 	bl	80002e8 <diff_off_ms>
 80005aa:	4603      	mov	r3, r0
 80005ac:	80bb      	strh	r3, [r7, #4]

    if (g_pattern_index < g_pattern_length) {
 80005ae:	4b18      	ldr	r3, [pc, #96]	@ (8000610 <handle_pattern_display+0x84>)
 80005b0:	781a      	ldrb	r2, [r3, #0]
 80005b2:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <handle_pattern_display+0x88>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d218      	bcs.n	80005ec <handle_pattern_display+0x60>
        show_led(g_pattern[g_pattern_index]);
 80005ba:	4b15      	ldr	r3, [pc, #84]	@ (8000610 <handle_pattern_display+0x84>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	461a      	mov	r2, r3
 80005c0:	4b15      	ldr	r3, [pc, #84]	@ (8000618 <handle_pattern_display+0x8c>)
 80005c2:	5c9b      	ldrb	r3, [r3, r2]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff fee5 	bl	8000394 <show_led>
        Delay_ms(t_on);
 80005ca:	88fb      	ldrh	r3, [r7, #6]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 f95f 	bl	8001890 <Delay_ms>
        clear_leds();
 80005d2:	f7ff fef5 	bl	80003c0 <clear_leds>
        Delay_ms(t_off);
 80005d6:	88bb      	ldrh	r3, [r7, #4]
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 f959 	bl	8001890 <Delay_ms>
        g_pattern_index++;
 80005de:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <handle_pattern_display+0x84>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	3301      	adds	r3, #1
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <handle_pattern_display+0x84>)
 80005e8:	701a      	strb	r2, [r3, #0]
        g_pattern_index = 0;
        g_input_index = 0;
        g_input_correct = 1;
        set_game_state(GAME_STATE_INPUT_WAIT);
    }
}
 80005ea:	e00b      	b.n	8000604 <handle_pattern_display+0x78>
        g_pattern_index = 0;
 80005ec:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <handle_pattern_display+0x84>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
        g_input_index = 0;
 80005f2:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <handle_pattern_display+0x90>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
        g_input_correct = 1;
 80005f8:	4b09      	ldr	r3, [pc, #36]	@ (8000620 <handle_pattern_display+0x94>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
        set_game_state(GAME_STATE_INPUT_WAIT);
 80005fe:	2004      	movs	r0, #4
 8000600:	f7ff fe8a 	bl	8000318 <set_game_state>
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000081 	.word	0x20000081
 8000610:	200000b5 	.word	0x200000b5
 8000614:	200000b4 	.word	0x200000b4
 8000618:	20000094 	.word	0x20000094
 800061c:	200000b6 	.word	0x200000b6
 8000620:	20000000 	.word	0x20000000

08000624 <handle_input_wait>:

static void handle_input_wait(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
    if (g_input_index < g_pattern_length) {
 800062a:	4b25      	ldr	r3, [pc, #148]	@ (80006c0 <handle_input_wait+0x9c>)
 800062c:	781a      	ldrb	r2, [r3, #0]
 800062e:	4b25      	ldr	r3, [pc, #148]	@ (80006c4 <handle_input_wait+0xa0>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	429a      	cmp	r2, r3
 8000634:	d23c      	bcs.n	80006b0 <handle_input_wait+0x8c>
        for (int i = 0; i < 4; i++) {
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	e035      	b.n	80006a8 <handle_input_wait+0x84>
            if (g_buttons[i].current_state == 1 && g_buttons[i].previous_state == 0) {
 800063c:	4a22      	ldr	r2, [pc, #136]	@ (80006c8 <handle_input_wait+0xa4>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d12c      	bne.n	80006a2 <handle_input_wait+0x7e>
 8000648:	4a1f      	ldr	r2, [pc, #124]	@ (80006c8 <handle_input_wait+0xa4>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	00db      	lsls	r3, r3, #3
 800064e:	4413      	add	r3, r2
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d125      	bne.n	80006a2 <handle_input_wait+0x7e>
                show_led(i);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fe9a 	bl	8000394 <show_led>
                Delay_ms(diff_on_ms(g_difficulty) / 2);
 8000660:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <handle_input_wait+0xa8>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff fe27 	bl	80002b8 <diff_on_ms>
 800066a:	4603      	mov	r3, r0
 800066c:	085b      	lsrs	r3, r3, #1
 800066e:	b29b      	uxth	r3, r3
 8000670:	4618      	mov	r0, r3
 8000672:	f001 f90d 	bl	8001890 <Delay_ms>
                clear_leds();
 8000676:	f7ff fea3 	bl	80003c0 <clear_leds>
                if (i != g_pattern[g_input_index]) {
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <handle_input_wait+0x9c>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	461a      	mov	r2, r3
 8000680:	4b13      	ldr	r3, [pc, #76]	@ (80006d0 <handle_input_wait+0xac>)
 8000682:	5c9b      	ldrb	r3, [r3, r2]
 8000684:	461a      	mov	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4293      	cmp	r3, r2
 800068a:	d002      	beq.n	8000692 <handle_input_wait+0x6e>
                    g_input_correct = 0;
 800068c:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <handle_input_wait+0xb0>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
                }
                g_input_index++;
 8000692:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <handle_input_wait+0x9c>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	3301      	adds	r3, #1
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <handle_input_wait+0x9c>)
 800069c:	701a      	strb	r2, [r3, #0]
                break;
 800069e:	bf00      	nop
            }
        }
    } else {
        set_game_state(GAME_STATE_RESULT_PROCESS);
    }
}
 80006a0:	e009      	b.n	80006b6 <handle_input_wait+0x92>
        for (int i = 0; i < 4; i++) {
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	3301      	adds	r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b03      	cmp	r3, #3
 80006ac:	ddc6      	ble.n	800063c <handle_input_wait+0x18>
}
 80006ae:	e002      	b.n	80006b6 <handle_input_wait+0x92>
        set_game_state(GAME_STATE_RESULT_PROCESS);
 80006b0:	2005      	movs	r0, #5
 80006b2:	f7ff fe31 	bl	8000318 <set_game_state>
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200000b6 	.word	0x200000b6
 80006c4:	200000b4 	.word	0x200000b4
 80006c8:	200000c0 	.word	0x200000c0
 80006cc:	20000081 	.word	0x20000081
 80006d0:	20000094 	.word	0x20000094
 80006d4:	20000000 	.word	0x20000000

080006d8 <handle_result_process>:

static void handle_result_process(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
    if (g_input_correct) {
 80006dc:	4b22      	ldr	r3, [pc, #136]	@ (8000768 <handle_result_process+0x90>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d024      	beq.n	800072e <handle_result_process+0x56>
        g_score += 10 * g_level * g_difficulty;
 80006e4:	4b21      	ldr	r3, [pc, #132]	@ (800076c <handle_result_process+0x94>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b21      	ldr	r3, [pc, #132]	@ (8000770 <handle_result_process+0x98>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	fb03 f202 	mul.w	r2, r3, r2
 80006f2:	4613      	mov	r3, r2
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	4413      	add	r3, r2
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	461a      	mov	r2, r3
 80006fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <handle_result_process+0x9c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4413      	add	r3, r2
 8000702:	4a1c      	ldr	r2, [pc, #112]	@ (8000774 <handle_result_process+0x9c>)
 8000704:	6013      	str	r3, [r2, #0]
        g_level++;
 8000706:	4b19      	ldr	r3, [pc, #100]	@ (800076c <handle_result_process+0x94>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	3301      	adds	r3, #1
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4b17      	ldr	r3, [pc, #92]	@ (800076c <handle_result_process+0x94>)
 8000710:	701a      	strb	r2, [r3, #0]
        OLED_ShowStatus();
 8000712:	f000 ff69 	bl	80015e8 <OLED_ShowStatus>
        if (g_level > 9)
 8000716:	4b15      	ldr	r3, [pc, #84]	@ (800076c <handle_result_process+0x94>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b09      	cmp	r3, #9
 800071c:	d903      	bls.n	8000726 <handle_result_process+0x4e>
            set_game_state(GAME_STATE_VICTORY);
 800071e:	2006      	movs	r0, #6
 8000720:	f7ff fdfa 	bl	8000318 <set_game_state>
        else {
            Log_Print("Try again!\r\n");
            set_game_state(GAME_STATE_LEVEL_INTRO);
        }
    }
}
 8000724:	e01d      	b.n	8000762 <handle_result_process+0x8a>
            set_game_state(GAME_STATE_LEVEL_INTRO);
 8000726:	2002      	movs	r0, #2
 8000728:	f7ff fdf6 	bl	8000318 <set_game_state>
}
 800072c:	e019      	b.n	8000762 <handle_result_process+0x8a>
        if (g_lives > 0) g_lives--;
 800072e:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <handle_result_process+0xa0>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d005      	beq.n	8000742 <handle_result_process+0x6a>
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <handle_result_process+0xa0>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	3b01      	subs	r3, #1
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <handle_result_process+0xa0>)
 8000740:	701a      	strb	r2, [r3, #0]
        OLED_ShowStatus();
 8000742:	f000 ff51 	bl	80015e8 <OLED_ShowStatus>
        if (g_lives == 0)
 8000746:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <handle_result_process+0xa0>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d103      	bne.n	8000756 <handle_result_process+0x7e>
            set_game_state(GAME_STATE_GAME_DEATH);
 800074e:	2007      	movs	r0, #7
 8000750:	f7ff fde2 	bl	8000318 <set_game_state>
}
 8000754:	e005      	b.n	8000762 <handle_result_process+0x8a>
            Log_Print("Try again!\r\n");
 8000756:	4809      	ldr	r0, [pc, #36]	@ (800077c <handle_result_process+0xa4>)
 8000758:	f001 f8bc 	bl	80018d4 <Log_Print>
            set_game_state(GAME_STATE_LEVEL_INTRO);
 800075c:	2002      	movs	r0, #2
 800075e:	f7ff fddb 	bl	8000318 <set_game_state>
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000000 	.word	0x20000000
 800076c:	20000082 	.word	0x20000082
 8000770:	20000081 	.word	0x20000081
 8000774:	20000084 	.word	0x20000084
 8000778:	20000088 	.word	0x20000088
 800077c:	08002e18 	.word	0x08002e18

08000780 <handle_victory>:

static void handle_victory(void) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
    Log_Print("Congratulations! Final Score: %lu\r\n", g_score);
 8000786:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <handle_victory+0x6c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4619      	mov	r1, r3
 800078c:	4818      	ldr	r0, [pc, #96]	@ (80007f0 <handle_victory+0x70>)
 800078e:	f001 f8a1 	bl	80018d4 <Log_Print>
    OLED_ShowStatus();
 8000792:	f000 ff29 	bl	80015e8 <OLED_ShowStatus>

    for (int i = 0; i < 4; i++) {
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	e01f      	b.n	80007dc <handle_victory+0x5c>
        if (g_buttons[i].current_state == 1 && g_buttons[i].previous_state == 0) {
 800079c:	4a15      	ldr	r2, [pc, #84]	@ (80007f4 <handle_victory+0x74>)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d116      	bne.n	80007d6 <handle_victory+0x56>
 80007a8:	4a12      	ldr	r2, [pc, #72]	@ (80007f4 <handle_victory+0x74>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	00db      	lsls	r3, r3, #3
 80007ae:	4413      	add	r3, r2
 80007b0:	785b      	ldrb	r3, [r3, #1]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d10f      	bne.n	80007d6 <handle_victory+0x56>
            g_level = 1;
 80007b6:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <handle_victory+0x78>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
            g_score = 0;
 80007bc:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <handle_victory+0x6c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
            g_lives = INITIAL_LIVES;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <handle_victory+0x7c>)
 80007c4:	2204      	movs	r2, #4
 80007c6:	701a      	strb	r2, [r3, #0]
            g_difficulty_locked = 0;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000800 <handle_victory+0x80>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
            set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 80007ce:	2001      	movs	r0, #1
 80007d0:	f7ff fda2 	bl	8000318 <set_game_state>
            break;
 80007d4:	e006      	b.n	80007e4 <handle_victory+0x64>
    for (int i = 0; i < 4; i++) {
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	3301      	adds	r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b03      	cmp	r3, #3
 80007e0:	dddc      	ble.n	800079c <handle_victory+0x1c>
        }
    }
}
 80007e2:	bf00      	nop
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000084 	.word	0x20000084
 80007f0:	08002e28 	.word	0x08002e28
 80007f4:	200000c0 	.word	0x200000c0
 80007f8:	20000082 	.word	0x20000082
 80007fc:	20000088 	.word	0x20000088
 8000800:	20000090 	.word	0x20000090

08000804 <handle_game_death>:

static void handle_game_death(void) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
    static uint8_t animation_played = 0;

    // Play game over animation once upon entering this state
    if (!animation_played) {
 800080a:	4b3b      	ldr	r3, [pc, #236]	@ (80008f8 <handle_game_death+0xf4>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d144      	bne.n	800089c <handle_game_death+0x98>
        Log_Print("Game Over! Final Score: %lu\r\n", g_score);
 8000812:	4b3a      	ldr	r3, [pc, #232]	@ (80008fc <handle_game_death+0xf8>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4619      	mov	r1, r3
 8000818:	4839      	ldr	r0, [pc, #228]	@ (8000900 <handle_game_death+0xfc>)
 800081a:	f001 f85b 	bl	80018d4 <Log_Print>

        // Rapid blink: 3 cycles
        for (int cycle = 0; cycle < 3; cycle++) {
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	e00e      	b.n	8000842 <handle_game_death+0x3e>
            LED_SetPattern(0x0F);  // All LEDs on
 8000824:	200f      	movs	r0, #15
 8000826:	f000 faff 	bl	8000e28 <LED_SetPattern>
            Delay_ms(150);
 800082a:	2096      	movs	r0, #150	@ 0x96
 800082c:	f001 f830 	bl	8001890 <Delay_ms>
            LED_SetPattern(0x00);  // All LEDs off
 8000830:	2000      	movs	r0, #0
 8000832:	f000 faf9 	bl	8000e28 <LED_SetPattern>
            Delay_ms(150);
 8000836:	2096      	movs	r0, #150	@ 0x96
 8000838:	f001 f82a 	bl	8001890 <Delay_ms>
        for (int cycle = 0; cycle < 3; cycle++) {
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	3301      	adds	r3, #1
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	2b02      	cmp	r3, #2
 8000846:	dded      	ble.n	8000824 <handle_game_death+0x20>
        }

        // Gradual fade out simulation
        for (int brightness = 10; brightness > 0; brightness--) {
 8000848:	230a      	movs	r3, #10
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	e01b      	b.n	8000886 <handle_game_death+0x82>
            for (int pulse = 0; pulse < 20; pulse++) {
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	e012      	b.n	800087a <handle_game_death+0x76>
                LED_SetPattern(0x0F);
 8000854:	200f      	movs	r0, #15
 8000856:	f000 fae7 	bl	8000e28 <LED_SetPattern>
                Delay_ms(brightness);
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	4618      	mov	r0, r3
 800085e:	f001 f817 	bl	8001890 <Delay_ms>
                LED_SetPattern(0x00);
 8000862:	2000      	movs	r0, #0
 8000864:	f000 fae0 	bl	8000e28 <LED_SetPattern>
                Delay_ms(11 - brightness);
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	f1c3 030b 	rsb	r3, r3, #11
 800086e:	4618      	mov	r0, r3
 8000870:	f001 f80e 	bl	8001890 <Delay_ms>
            for (int pulse = 0; pulse < 20; pulse++) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3301      	adds	r3, #1
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b13      	cmp	r3, #19
 800087e:	dde9      	ble.n	8000854 <handle_game_death+0x50>
        for (int brightness = 10; brightness > 0; brightness--) {
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	3b01      	subs	r3, #1
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	2b00      	cmp	r3, #0
 800088a:	dce0      	bgt.n	800084e <handle_game_death+0x4a>
            }
        }

        LED_SetPattern(0x00);  // Ensure all off
 800088c:	2000      	movs	r0, #0
 800088e:	f000 facb 	bl	8000e28 <LED_SetPattern>
        OLED_ShowStatus();
 8000892:	f000 fea9 	bl	80015e8 <OLED_ShowStatus>
        animation_played = 1;
 8000896:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <handle_game_death+0xf4>)
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
    }

    // Wait for button press to restart
    for (int i = 0; i < 4; i++) {
 800089c:	2300      	movs	r3, #0
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	e022      	b.n	80008e8 <handle_game_death+0xe4>
        if (g_buttons[i].current_state == 1 && g_buttons[i].previous_state == 0) {
 80008a2:	4a18      	ldr	r2, [pc, #96]	@ (8000904 <handle_game_death+0x100>)
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d119      	bne.n	80008e2 <handle_game_death+0xde>
 80008ae:	4a15      	ldr	r2, [pc, #84]	@ (8000904 <handle_game_death+0x100>)
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	00db      	lsls	r3, r3, #3
 80008b4:	4413      	add	r3, r2
 80008b6:	785b      	ldrb	r3, [r3, #1]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d112      	bne.n	80008e2 <handle_game_death+0xde>
            g_level = 1;
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <handle_game_death+0x104>)
 80008be:	2201      	movs	r2, #1
 80008c0:	701a      	strb	r2, [r3, #0]
            g_score = 0;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <handle_game_death+0xf8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
            g_lives = INITIAL_LIVES;
 80008c8:	4b10      	ldr	r3, [pc, #64]	@ (800090c <handle_game_death+0x108>)
 80008ca:	2204      	movs	r2, #4
 80008cc:	701a      	strb	r2, [r3, #0]
            g_difficulty_locked = 0;
 80008ce:	4b10      	ldr	r3, [pc, #64]	@ (8000910 <handle_game_death+0x10c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
            animation_played = 0;  // Reset for next game over
 80008d4:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <handle_game_death+0xf4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
            set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 80008da:	2001      	movs	r0, #1
 80008dc:	f7ff fd1c 	bl	8000318 <set_game_state>
            break;
 80008e0:	e006      	b.n	80008f0 <handle_game_death+0xec>
    for (int i = 0; i < 4; i++) {
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	2b03      	cmp	r3, #3
 80008ec:	ddd9      	ble.n	80008a2 <handle_game_death+0x9e>
        }
    }
}
 80008ee:	bf00      	nop
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200000bc 	.word	0x200000bc
 80008fc:	20000084 	.word	0x20000084
 8000900:	08002e4c 	.word	0x08002e4c
 8000904:	200000c0 	.word	0x200000c0
 8000908:	20000082 	.word	0x20000082
 800090c:	20000088 	.word	0x20000088
 8000910:	20000090 	.word	0x20000090

08000914 <Game_Init>:

/* ============================================================================
 * Public Functions
 * ============================================================================ */
void Game_Init(void) {
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
    Log_Print("\r\n[GAME] Initializing Simon Game...\r\n");
 800091a:	480e      	ldr	r0, [pc, #56]	@ (8000954 <Game_Init+0x40>)
 800091c:	f000 ffda 	bl	80018d4 <Log_Print>
    uint32_t seed = g_adc_values[1] + g_adc_values[2] + GetTick();
 8000920:	4b0d      	ldr	r3, [pc, #52]	@ (8000958 <Game_Init+0x44>)
 8000922:	885b      	ldrh	r3, [r3, #2]
 8000924:	461a      	mov	r2, r3
 8000926:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <Game_Init+0x44>)
 8000928:	889b      	ldrh	r3, [r3, #4]
 800092a:	4413      	add	r3, r2
 800092c:	461c      	mov	r4, r3
 800092e:	f000 ffc5 	bl	80018bc <GetTick>
 8000932:	4603      	mov	r3, r0
 8000934:	4423      	add	r3, r4
 8000936:	607b      	str	r3, [r7, #4]
    srand(seed);
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f001 f845 	bl	80019c8 <srand>
    Log_Print("[GAME] Random seed set to: %lu\r\n", seed);
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	4806      	ldr	r0, [pc, #24]	@ (800095c <Game_Init+0x48>)
 8000942:	f000 ffc7 	bl	80018d4 <Log_Print>
    set_game_state(GAME_STATE_BOOT);
 8000946:	2000      	movs	r0, #0
 8000948:	f7ff fce6 	bl	8000318 <set_game_state>
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	08002e6c 	.word	0x08002e6c
 8000958:	200000e0 	.word	0x200000e0
 800095c:	08002e94 	.word	0x08002e94

08000960 <Game_Run>:

void Game_Run(void) {
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
    // Log state transitions
    if (g_last_state_logged != g_game_state) {
 8000964:	4b3e      	ldr	r3, [pc, #248]	@ (8000a60 <Game_Run+0x100>)
 8000966:	781a      	ldrb	r2, [r3, #0]
 8000968:	4b3e      	ldr	r3, [pc, #248]	@ (8000a64 <Game_Run+0x104>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	429a      	cmp	r2, r3
 800096e:	d03d      	beq.n	80009ec <Game_Run+0x8c>
        switch(g_game_state) {
 8000970:	4b3c      	ldr	r3, [pc, #240]	@ (8000a64 <Game_Run+0x104>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b07      	cmp	r3, #7
 8000976:	d833      	bhi.n	80009e0 <Game_Run+0x80>
 8000978:	a201      	add	r2, pc, #4	@ (adr r2, 8000980 <Game_Run+0x20>)
 800097a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097e:	bf00      	nop
 8000980:	080009a1 	.word	0x080009a1
 8000984:	080009a9 	.word	0x080009a9
 8000988:	080009b1 	.word	0x080009b1
 800098c:	080009b9 	.word	0x080009b9
 8000990:	080009c1 	.word	0x080009c1
 8000994:	080009c9 	.word	0x080009c9
 8000998:	080009d1 	.word	0x080009d1
 800099c:	080009d9 	.word	0x080009d9
            case GAME_STATE_BOOT:
                Log_Print("[STATE] -> BOOT\r\n");
 80009a0:	4831      	ldr	r0, [pc, #196]	@ (8000a68 <Game_Run+0x108>)
 80009a2:	f000 ff97 	bl	80018d4 <Log_Print>
                break;
 80009a6:	e01b      	b.n	80009e0 <Game_Run+0x80>
            case GAME_STATE_DIFFICULTY_SELECT:
                Log_Print("[STATE] -> DIFFICULTY_SELECT\r\n");
 80009a8:	4830      	ldr	r0, [pc, #192]	@ (8000a6c <Game_Run+0x10c>)
 80009aa:	f000 ff93 	bl	80018d4 <Log_Print>
                break;
 80009ae:	e017      	b.n	80009e0 <Game_Run+0x80>
            case GAME_STATE_LEVEL_INTRO:
                Log_Print("[STATE] -> LEVEL_INTRO\r\n");
 80009b0:	482f      	ldr	r0, [pc, #188]	@ (8000a70 <Game_Run+0x110>)
 80009b2:	f000 ff8f 	bl	80018d4 <Log_Print>
                break;
 80009b6:	e013      	b.n	80009e0 <Game_Run+0x80>
            case GAME_STATE_PATTERN_DISPLAY:
                Log_Print("[STATE] -> PATTERN_DISPLAY\r\n");
 80009b8:	482e      	ldr	r0, [pc, #184]	@ (8000a74 <Game_Run+0x114>)
 80009ba:	f000 ff8b 	bl	80018d4 <Log_Print>
                break;
 80009be:	e00f      	b.n	80009e0 <Game_Run+0x80>
            case GAME_STATE_INPUT_WAIT:
                Log_Print("[STATE] -> INPUT_WAIT\r\n");
 80009c0:	482d      	ldr	r0, [pc, #180]	@ (8000a78 <Game_Run+0x118>)
 80009c2:	f000 ff87 	bl	80018d4 <Log_Print>
                break;
 80009c6:	e00b      	b.n	80009e0 <Game_Run+0x80>
            case GAME_STATE_RESULT_PROCESS:
                Log_Print("[STATE] -> RESULT_PROCESS\r\n");
 80009c8:	482c      	ldr	r0, [pc, #176]	@ (8000a7c <Game_Run+0x11c>)
 80009ca:	f000 ff83 	bl	80018d4 <Log_Print>
                break;
 80009ce:	e007      	b.n	80009e0 <Game_Run+0x80>
            case GAME_STATE_VICTORY:
                Log_Print("[STATE] -> VICTORY\r\n");
 80009d0:	482b      	ldr	r0, [pc, #172]	@ (8000a80 <Game_Run+0x120>)
 80009d2:	f000 ff7f 	bl	80018d4 <Log_Print>
                break;
 80009d6:	e003      	b.n	80009e0 <Game_Run+0x80>
            case GAME_STATE_GAME_DEATH:
                Log_Print("[STATE] -> GAME_DEATH\r\n");
 80009d8:	482a      	ldr	r0, [pc, #168]	@ (8000a84 <Game_Run+0x124>)
 80009da:	f000 ff7b 	bl	80018d4 <Log_Print>
                break;
 80009de:	bf00      	nop
        }
        g_last_state_logged = g_game_state;
 80009e0:	4b20      	ldr	r3, [pc, #128]	@ (8000a64 <Game_Run+0x104>)
 80009e2:	781a      	ldrb	r2, [r3, #0]
 80009e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a60 <Game_Run+0x100>)
 80009e6:	701a      	strb	r2, [r3, #0]
        OLED_ShowStatus();
 80009e8:	f000 fdfe 	bl	80015e8 <OLED_ShowStatus>
    }

    // Execute current state handler
    switch(g_game_state) {
 80009ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000a64 <Game_Run+0x104>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b07      	cmp	r3, #7
 80009f2:	d82b      	bhi.n	8000a4c <Game_Run+0xec>
 80009f4:	a201      	add	r2, pc, #4	@ (adr r2, 80009fc <Game_Run+0x9c>)
 80009f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009fa:	bf00      	nop
 80009fc:	08000a1d 	.word	0x08000a1d
 8000a00:	08000a23 	.word	0x08000a23
 8000a04:	08000a29 	.word	0x08000a29
 8000a08:	08000a2f 	.word	0x08000a2f
 8000a0c:	08000a35 	.word	0x08000a35
 8000a10:	08000a3b 	.word	0x08000a3b
 8000a14:	08000a41 	.word	0x08000a41
 8000a18:	08000a47 	.word	0x08000a47
        case GAME_STATE_BOOT:
            handle_boot();
 8000a1c:	f7ff fcd8 	bl	80003d0 <handle_boot>
            break;
 8000a20:	e01c      	b.n	8000a5c <Game_Run+0xfc>
        case GAME_STATE_DIFFICULTY_SELECT:
            handle_difficulty_select();
 8000a22:	f7ff fceb 	bl	80003fc <handle_difficulty_select>
            break;
 8000a26:	e019      	b.n	8000a5c <Game_Run+0xfc>
        case GAME_STATE_LEVEL_INTRO:
            handle_level_intro();
 8000a28:	f7ff fd58 	bl	80004dc <handle_level_intro>
            break;
 8000a2c:	e016      	b.n	8000a5c <Game_Run+0xfc>
        case GAME_STATE_PATTERN_DISPLAY:
            handle_pattern_display();
 8000a2e:	f7ff fdad 	bl	800058c <handle_pattern_display>
            break;
 8000a32:	e013      	b.n	8000a5c <Game_Run+0xfc>
        case GAME_STATE_INPUT_WAIT:
            handle_input_wait();
 8000a34:	f7ff fdf6 	bl	8000624 <handle_input_wait>
            break;
 8000a38:	e010      	b.n	8000a5c <Game_Run+0xfc>
        case GAME_STATE_RESULT_PROCESS:
            handle_result_process();
 8000a3a:	f7ff fe4d 	bl	80006d8 <handle_result_process>
            break;
 8000a3e:	e00d      	b.n	8000a5c <Game_Run+0xfc>
        case GAME_STATE_VICTORY:
            handle_victory();
 8000a40:	f7ff fe9e 	bl	8000780 <handle_victory>
            break;
 8000a44:	e00a      	b.n	8000a5c <Game_Run+0xfc>
        case GAME_STATE_GAME_DEATH:
            handle_game_death();
 8000a46:	f7ff fedd 	bl	8000804 <handle_game_death>
            break;
 8000a4a:	e007      	b.n	8000a5c <Game_Run+0xfc>
        default:
            set_game_state(GAME_STATE_DIFFICULTY_SELECT);
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f7ff fc63 	bl	8000318 <set_game_state>
            Delay_ms(1000);
 8000a52:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a56:	f000 ff1b 	bl	8001890 <Delay_ms>
            break;
 8000a5a:	bf00      	nop
    }
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000001 	.word	0x20000001
 8000a64:	20000080 	.word	0x20000080
 8000a68:	08002eb8 	.word	0x08002eb8
 8000a6c:	08002ecc 	.word	0x08002ecc
 8000a70:	08002eec 	.word	0x08002eec
 8000a74:	08002f08 	.word	0x08002f08
 8000a78:	08002f28 	.word	0x08002f28
 8000a7c:	08002f40 	.word	0x08002f40
 8000a80:	08002f5c 	.word	0x08002f5c
 8000a84:	08002f74 	.word	0x08002f74

08000a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	db0b      	blt.n	8000ab2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	f003 021f 	and.w	r2, r3, #31
 8000aa0:	4907      	ldr	r1, [pc, #28]	@ (8000ac0 <__NVIC_EnableIRQ+0x38>)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	095b      	lsrs	r3, r3, #5
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000e100 	.word	0xe000e100

08000ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	6039      	str	r1, [r7, #0]
 8000ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db0a      	blt.n	8000aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	490c      	ldr	r1, [pc, #48]	@ (8000b10 <__NVIC_SetPriority+0x4c>)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	0112      	lsls	r2, r2, #4
 8000ae4:	b2d2      	uxtb	r2, r2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aec:	e00a      	b.n	8000b04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4908      	ldr	r1, [pc, #32]	@ (8000b14 <__NVIC_SetPriority+0x50>)
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	f003 030f 	and.w	r3, r3, #15
 8000afa:	3b04      	subs	r3, #4
 8000afc:	0112      	lsls	r2, r2, #4
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	440b      	add	r3, r1
 8000b02:	761a      	strb	r2, [r3, #24]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000e100 	.word	0xe000e100
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <SystemClock_Config>:
uint8_t g_current_adc_channel = 0;

/* ============================================================================
 * System Initialization
 * ============================================================================ */
void SystemClock_Config(void) {
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
    RCC->CR |= RCC_CR_HSION;
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b94 <SystemClock_Config+0x7c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a1c      	ldr	r2, [pc, #112]	@ (8000b94 <SystemClock_Config+0x7c>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_HSIRDY));
 8000b28:	bf00      	nop
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b94 <SystemClock_Config+0x7c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d0f9      	beq.n	8000b2a <SystemClock_Config+0x12>

    RCC->PLLCFGR = (RCC_PLLCFGR_PLLSRC_HSI) |
 8000b36:	4b17      	ldr	r3, [pc, #92]	@ (8000b94 <SystemClock_Config+0x7c>)
 8000b38:	f642 2210 	movw	r2, #10768	@ 0x2a10
 8000b3c:	605a      	str	r2, [r3, #4]
                   (16 << RCC_PLLCFGR_PLLM_Pos) |
                   (168 << RCC_PLLCFGR_PLLN_Pos) |
                   (0 << RCC_PLLCFGR_PLLP_Pos);

    RCC->CR |= RCC_CR_PLLON;
 8000b3e:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <SystemClock_Config+0x7c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a14      	ldr	r2, [pc, #80]	@ (8000b94 <SystemClock_Config+0x7c>)
 8000b44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000b48:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_PLLRDY));
 8000b4a:	bf00      	nop
 8000b4c:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <SystemClock_Config+0x7c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d0f9      	beq.n	8000b4c <SystemClock_Config+0x34>

    FLASH->ACR = FLASH_ACR_LATENCY_2WS;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <SystemClock_Config+0x80>)
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	601a      	str	r2, [r3, #0]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV2 | RCC_CFGR_PPRE2_DIV1;
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b94 <SystemClock_Config+0x7c>)
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	4a0c      	ldr	r2, [pc, #48]	@ (8000b94 <SystemClock_Config+0x7c>)
 8000b64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b68:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <SystemClock_Config+0x7c>)
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	4a09      	ldr	r2, [pc, #36]	@ (8000b94 <SystemClock_Config+0x7c>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	6093      	str	r3, [r2, #8]
    while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000b76:	bf00      	nop
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <SystemClock_Config+0x7c>)
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	f003 030c 	and.w	r3, r3, #12
 8000b80:	2b08      	cmp	r3, #8
 8000b82:	d1f9      	bne.n	8000b78 <SystemClock_Config+0x60>

    SystemCoreClock = 84000000;
 8000b84:	4b05      	ldr	r3, [pc, #20]	@ (8000b9c <SystemClock_Config+0x84>)
 8000b86:	4a06      	ldr	r2, [pc, #24]	@ (8000ba0 <SystemClock_Config+0x88>)
 8000b88:	601a      	str	r2, [r3, #0]
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40023c00 	.word	0x40023c00
 8000b9c:	20000004 	.word	0x20000004
 8000ba0:	0501bd00 	.word	0x0501bd00

08000ba4 <GPIO_Init>:

void GPIO_Init(void) {
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;
 8000ba8:	4b27      	ldr	r3, [pc, #156]	@ (8000c48 <GPIO_Init+0xa4>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bac:	4a26      	ldr	r2, [pc, #152]	@ (8000c48 <GPIO_Init+0xa4>)
 8000bae:	f043 0307 	orr.w	r3, r3, #7
 8000bb2:	6313      	str	r3, [r2, #48]	@ 0x30

    // LEDs as outputs
    GPIOA->MODER |= (1 << (LED1_PIN*2)) | (1 << (LED2_PIN*2)) | (1 << (LED3_PIN*2));
 8000bb4:	4b25      	ldr	r3, [pc, #148]	@ (8000c4c <GPIO_Init+0xa8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a24      	ldr	r2, [pc, #144]	@ (8000c4c <GPIO_Init+0xa8>)
 8000bba:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 8000bbe:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (1 << (LED4_PIN*2));
 8000bc0:	4b23      	ldr	r3, [pc, #140]	@ (8000c50 <GPIO_Init+0xac>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a22      	ldr	r2, [pc, #136]	@ (8000c50 <GPIO_Init+0xac>)
 8000bc6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bca:	6013      	str	r3, [r2, #0]

    // Buttons with pull-ups
    GPIOA->PUPDR |= (1 << (BTN0_PIN*2));
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c4c <GPIO_Init+0xa8>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	4a1e      	ldr	r2, [pc, #120]	@ (8000c4c <GPIO_Init+0xa8>)
 8000bd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000bd6:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (1 << (BTN1_PIN*2)) | (1 << (BTN2_PIN*2)) | (1 << (BTN3_PIN*2));
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <GPIO_Init+0xac>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8000c50 <GPIO_Init+0xac>)
 8000bde:	f443 63a8 	orr.w	r3, r3, #1344	@ 0x540
 8000be2:	60d3      	str	r3, [r2, #12]

    // ADC pins as analog
    GPIOA->MODER |= (3 << (POT_PIN*2)) | (3 << (TEMP_PIN*2)) | (3 << (LIGHT_PIN*2));
 8000be4:	4b19      	ldr	r3, [pc, #100]	@ (8000c4c <GPIO_Init+0xa8>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a18      	ldr	r2, [pc, #96]	@ (8000c4c <GPIO_Init+0xa8>)
 8000bea:	f443 7343 	orr.w	r3, r3, #780	@ 0x30c
 8000bee:	f043 0303 	orr.w	r3, r3, #3
 8000bf2:	6013      	str	r3, [r2, #0]

    // UART2: PA2, PA3 as AF7
    GPIOA->MODER |= (2 << (2*2)) | (2 << (3*2));
 8000bf4:	4b15      	ldr	r3, [pc, #84]	@ (8000c4c <GPIO_Init+0xa8>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a14      	ldr	r2, [pc, #80]	@ (8000c4c <GPIO_Init+0xa8>)
 8000bfa:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000bfe:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (7 << (2*4)) | (7 << (3*4));
 8000c00:	4b12      	ldr	r3, [pc, #72]	@ (8000c4c <GPIO_Init+0xa8>)
 8000c02:	6a1b      	ldr	r3, [r3, #32]
 8000c04:	4a11      	ldr	r2, [pc, #68]	@ (8000c4c <GPIO_Init+0xa8>)
 8000c06:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000c0a:	6213      	str	r3, [r2, #32]

    // 7-Segment BCD outputs
    GPIOC->MODER = (GPIOC->MODER & ~(3U << (BCD_2_0_PIN*2))) | (1U << (BCD_2_0_PIN*2));
 8000c0c:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <GPIO_Init+0xb0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c14:	4a0f      	ldr	r2, [pc, #60]	@ (8000c54 <GPIO_Init+0xb0>)
 8000c16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c1a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER = (GPIOA->MODER & ~((3U << (BCD_2_1_PIN*2)) | (3U << (BCD_2_3_PIN*2)))) |
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <GPIO_Init+0xa8>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000c24:	4a09      	ldr	r2, [pc, #36]	@ (8000c4c <GPIO_Init+0xa8>)
                   (1U << (BCD_2_1_PIN*2)) | (1U << (BCD_2_3_PIN*2));
 8000c26:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
    GPIOA->MODER = (GPIOA->MODER & ~((3U << (BCD_2_1_PIN*2)) | (3U << (BCD_2_3_PIN*2)))) |
 8000c2a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER = (GPIOB->MODER & ~(3U << (BCD_2_2_PIN*2))) | (1U << (BCD_2_2_PIN*2));
 8000c2c:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <GPIO_Init+0xac>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8000c34:	4a06      	ldr	r2, [pc, #24]	@ (8000c50 <GPIO_Init+0xac>)
 8000c36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000c3a:	6013      	str	r3, [r2, #0]
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	40020400 	.word	0x40020400
 8000c54:	40020800 	.word	0x40020800

08000c58 <ADC_Init>:

void ADC_Init(void) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000c5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <ADC_Init+0x50>)
 8000c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c60:	4a11      	ldr	r2, [pc, #68]	@ (8000ca8 <ADC_Init+0x50>)
 8000c62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c66:	6453      	str	r3, [r2, #68]	@ 0x44
    ADC1->CR2 |= ADC_CR2_ADON;
 8000c68:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <ADC_Init+0x54>)
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000cac <ADC_Init+0x54>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6093      	str	r3, [r2, #8]
    ADC1->CR1 |= ADC_CR1_EOCIE;
 8000c74:	4b0d      	ldr	r3, [pc, #52]	@ (8000cac <ADC_Init+0x54>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	4a0c      	ldr	r2, [pc, #48]	@ (8000cac <ADC_Init+0x54>)
 8000c7a:	f043 0320 	orr.w	r3, r3, #32
 8000c7e:	6053      	str	r3, [r2, #4]
    ADC1->CR1 |= (1 << ADC_CR1_RES_Pos); // 10-bit resolution
 8000c80:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <ADC_Init+0x54>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	4a09      	ldr	r2, [pc, #36]	@ (8000cac <ADC_Init+0x54>)
 8000c86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c8a:	6053      	str	r3, [r2, #4]
    ADC1->SMPR2 |= (7 << ADC_SMPR2_SMP0_Pos) |
 8000c8c:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <ADC_Init+0x54>)
 8000c8e:	691b      	ldr	r3, [r3, #16]
 8000c90:	4a06      	ldr	r2, [pc, #24]	@ (8000cac <ADC_Init+0x54>)
 8000c92:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000c96:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8000c9a:	6113      	str	r3, [r2, #16]
                   (7 << ADC_SMPR2_SMP1_Pos) |
                   (7 << ADC_SMPR2_SMP4_Pos);
    Delay_ms(2);
 8000c9c:	2002      	movs	r0, #2
 8000c9e:	f000 fdf7 	bl	8001890 <Delay_ms>
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40012000 	.word	0x40012000

08000cb0 <USART2_Init>:

void USART2_Init(void) {
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <USART2_Init+0x34>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce4 <USART2_Init+0x34>)
 8000cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cbe:	6413      	str	r3, [r2, #64]	@ 0x40
    USART2->BRR = 0x16C; // 115200 @ 42MHz
 8000cc0:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <USART2_Init+0x38>)
 8000cc2:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8000cc6:	609a      	str	r2, [r3, #8]
    USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000cc8:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <USART2_Init+0x38>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	4a06      	ldr	r2, [pc, #24]	@ (8000ce8 <USART2_Init+0x38>)
 8000cce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cd2:	f043 030c 	orr.w	r3, r3, #12
 8000cd6:	60d3      	str	r3, [r2, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40004400 	.word	0x40004400

08000cec <NVIC_Init>:

void NVIC_Init(void) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(ADC_IRQn);
 8000cf0:	2012      	movs	r0, #18
 8000cf2:	f7ff fec9 	bl	8000a88 <__NVIC_EnableIRQ>
    NVIC_SetPriority(ADC_IRQn, 1);
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	2012      	movs	r0, #18
 8000cfa:	f7ff fee3 	bl	8000ac4 <__NVIC_SetPriority>
    NVIC_SetPriority(SysTick_IRQn, 0);
 8000cfe:	2100      	movs	r1, #0
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f7ff fede 	bl	8000ac4 <__NVIC_SetPriority>
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <ADC_StartConversion>:

void ADC_StartConversion(void) {
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
    ADC1->SQR3 = (ADC1->SQR3 & ~ADC_SQR3_SQ1) | POT_PIN;
 8000d10:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <ADC_StartConversion+0x2c>)
 8000d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d14:	f023 031f 	bic.w	r3, r3, #31
 8000d18:	4a07      	ldr	r2, [pc, #28]	@ (8000d38 <ADC_StartConversion+0x2c>)
 8000d1a:	f043 0304 	orr.w	r3, r3, #4
 8000d1e:	6353      	str	r3, [r2, #52]	@ 0x34
    ADC1->CR2 |= ADC_CR2_SWSTART;
 8000d20:	4b05      	ldr	r3, [pc, #20]	@ (8000d38 <ADC_StartConversion+0x2c>)
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	4a04      	ldr	r2, [pc, #16]	@ (8000d38 <ADC_StartConversion+0x2c>)
 8000d26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000d2a:	6093      	str	r3, [r2, #8]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40012000 	.word	0x40012000

08000d3c <Monitor_Buttons>:

/* ============================================================================
 * Hardware Monitoring
 * ============================================================================ */
void Monitor_Buttons(void) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
    uint32_t current_time = GetTick();
 8000d42:	f000 fdbb 	bl	80018bc <GetTick>
 8000d46:	60b8      	str	r0, [r7, #8]
    uint8_t readings[4] = {
        !(BTN0_PORT->IDR & (1 << BTN0_PIN)),
 8000d48:	4b30      	ldr	r3, [pc, #192]	@ (8000e0c <Monitor_Buttons+0xd0>)
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	bf0c      	ite	eq
 8000d54:	2301      	moveq	r3, #1
 8000d56:	2300      	movne	r3, #0
 8000d58:	b2db      	uxtb	r3, r3
    uint8_t readings[4] = {
 8000d5a:	713b      	strb	r3, [r7, #4]
        !(BTN1_PORT->IDR & (1 << BTN1_PIN)),
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e10 <Monitor_Buttons+0xd4>)
 8000d5e:	691b      	ldr	r3, [r3, #16]
 8000d60:	f003 0308 	and.w	r3, r3, #8
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	bf0c      	ite	eq
 8000d68:	2301      	moveq	r3, #1
 8000d6a:	2300      	movne	r3, #0
 8000d6c:	b2db      	uxtb	r3, r3
    uint8_t readings[4] = {
 8000d6e:	717b      	strb	r3, [r7, #5]
        !(BTN2_PORT->IDR & (1 << BTN2_PIN)),
 8000d70:	4b27      	ldr	r3, [pc, #156]	@ (8000e10 <Monitor_Buttons+0xd4>)
 8000d72:	691b      	ldr	r3, [r3, #16]
 8000d74:	f003 0320 	and.w	r3, r3, #32
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	bf0c      	ite	eq
 8000d7c:	2301      	moveq	r3, #1
 8000d7e:	2300      	movne	r3, #0
 8000d80:	b2db      	uxtb	r3, r3
    uint8_t readings[4] = {
 8000d82:	71bb      	strb	r3, [r7, #6]
        !(BTN3_PORT->IDR & (1 << BTN3_PIN))
 8000d84:	4b22      	ldr	r3, [pc, #136]	@ (8000e10 <Monitor_Buttons+0xd4>)
 8000d86:	691b      	ldr	r3, [r3, #16]
 8000d88:	f003 0310 	and.w	r3, r3, #16
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	bf0c      	ite	eq
 8000d90:	2301      	moveq	r3, #1
 8000d92:	2300      	movne	r3, #0
 8000d94:	b2db      	uxtb	r3, r3
    uint8_t readings[4] = {
 8000d96:	71fb      	strb	r3, [r7, #7]
    };

    for(int i = 0; i < 4; i++) {
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	e02e      	b.n	8000dfc <Monitor_Buttons+0xc0>
        g_buttons[i].previous_state = g_buttons[i].current_state;
 8000d9e:	4a1d      	ldr	r2, [pc, #116]	@ (8000e14 <Monitor_Buttons+0xd8>)
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
 8000da6:	4a1b      	ldr	r2, [pc, #108]	@ (8000e14 <Monitor_Buttons+0xd8>)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	4413      	add	r3, r2
 8000dae:	460a      	mov	r2, r1
 8000db0:	705a      	strb	r2, [r3, #1]
        g_buttons[i].current_state = readings[i];
 8000db2:	1d3a      	adds	r2, r7, #4
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4413      	add	r3, r2
 8000db8:	7819      	ldrb	r1, [r3, #0]
 8000dba:	4a16      	ldr	r2, [pc, #88]	@ (8000e14 <Monitor_Buttons+0xd8>)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
        if(g_buttons[i].current_state != g_buttons[i].previous_state) {
 8000dc2:	4a14      	ldr	r2, [pc, #80]	@ (8000e14 <Monitor_Buttons+0xd8>)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8000dca:	4912      	ldr	r1, [pc, #72]	@ (8000e14 <Monitor_Buttons+0xd8>)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	00db      	lsls	r3, r3, #3
 8000dd0:	440b      	add	r3, r1
 8000dd2:	785b      	ldrb	r3, [r3, #1]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d00e      	beq.n	8000df6 <Monitor_Buttons+0xba>
            if((current_time - g_buttons[i].last_change_time) >= BUTTON_DEBOUNCE_MS) {
 8000dd8:	4a0e      	ldr	r2, [pc, #56]	@ (8000e14 <Monitor_Buttons+0xd8>)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	4413      	add	r3, r2
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b31      	cmp	r3, #49	@ 0x31
 8000de8:	d905      	bls.n	8000df6 <Monitor_Buttons+0xba>
                g_buttons[i].last_change_time = current_time;
 8000dea:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <Monitor_Buttons+0xd8>)
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	4413      	add	r3, r2
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	605a      	str	r2, [r3, #4]
    for(int i = 0; i < 4; i++) {
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	ddcd      	ble.n	8000d9e <Monitor_Buttons+0x62>
            }
        }
    }
}
 8000e02:	bf00      	nop
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40020000 	.word	0x40020000
 8000e10:	40020400 	.word	0x40020400
 8000e14:	200000c0 	.word	0x200000c0

08000e18 <Monitor_ADC>:

void Monitor_ADC(void) {
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
    /* ADC handled via interrupt */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <LED_SetPattern>:

/* ============================================================================
 * Hardware Control
 * ============================================================================ */
void LED_SetPattern(uint8_t pattern) {
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
    (pattern & 0x01) ? (LED1_PORT->BSRR = (1 << LED1_PIN)) :
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <LED_SetPattern+0x1c>
 8000e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea8 <LED_SetPattern+0x80>)
 8000e3e:	2220      	movs	r2, #32
 8000e40:	619a      	str	r2, [r3, #24]
 8000e42:	e003      	b.n	8000e4c <LED_SetPattern+0x24>
                       (LED1_PORT->BSRR = (1 << (LED1_PIN + 16)));
 8000e44:	4b18      	ldr	r3, [pc, #96]	@ (8000ea8 <LED_SetPattern+0x80>)
 8000e46:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000e4a:	619a      	str	r2, [r3, #24]
    (pattern & 0x02) ? (LED2_PORT->BSRR = (1 << LED2_PIN)) :
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <LED_SetPattern+0x36>
 8000e56:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <LED_SetPattern+0x80>)
 8000e58:	2240      	movs	r2, #64	@ 0x40
 8000e5a:	619a      	str	r2, [r3, #24]
 8000e5c:	e003      	b.n	8000e66 <LED_SetPattern+0x3e>
                       (LED2_PORT->BSRR = (1 << (LED2_PIN + 16)));
 8000e5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <LED_SetPattern+0x80>)
 8000e60:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e64:	619a      	str	r2, [r3, #24]
    (pattern & 0x04) ? (LED3_PORT->BSRR = (1 << LED3_PIN)) :
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d003      	beq.n	8000e78 <LED_SetPattern+0x50>
 8000e70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <LED_SetPattern+0x80>)
 8000e72:	2280      	movs	r2, #128	@ 0x80
 8000e74:	619a      	str	r2, [r3, #24]
 8000e76:	e003      	b.n	8000e80 <LED_SetPattern+0x58>
                       (LED3_PORT->BSRR = (1 << (LED3_PIN + 16)));
 8000e78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <LED_SetPattern+0x80>)
 8000e7a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e7e:	619a      	str	r2, [r3, #24]
    (pattern & 0x08) ? (LED4_PORT->BSRR = (1 << LED4_PIN)) :
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	f003 0308 	and.w	r3, r3, #8
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <LED_SetPattern+0x6a>
 8000e8a:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <LED_SetPattern+0x84>)
 8000e8c:	2240      	movs	r2, #64	@ 0x40
 8000e8e:	619a      	str	r2, [r3, #24]
                       (LED4_PORT->BSRR = (1 << (LED4_PIN + 16)));
}
 8000e90:	e003      	b.n	8000e9a <LED_SetPattern+0x72>
                       (LED4_PORT->BSRR = (1 << (LED4_PIN + 16)));
 8000e92:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <LED_SetPattern+0x84>)
 8000e94:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e98:	619a      	str	r2, [r3, #24]
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40020000 	.word	0x40020000
 8000eac:	40020400 	.word	0x40020400

08000eb0 <SevenSeg_Display>:

void SevenSeg_Display(uint8_t digit) {
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
    if(digit > 9) return;
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b09      	cmp	r3, #9
 8000ebe:	d837      	bhi.n	8000f30 <SevenSeg_Display+0x80>
    (digit & 0x01) ? (BCD_2_0_PORT->BSRR = (1 << BCD_2_0_PIN)) :
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <SevenSeg_Display+0x22>
 8000eca:	4b1c      	ldr	r3, [pc, #112]	@ (8000f3c <SevenSeg_Display+0x8c>)
 8000ecc:	2280      	movs	r2, #128	@ 0x80
 8000ece:	619a      	str	r2, [r3, #24]
 8000ed0:	e003      	b.n	8000eda <SevenSeg_Display+0x2a>
                     (BCD_2_0_PORT->BSRR = (1 << (BCD_2_0_PIN + 16)));
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f3c <SevenSeg_Display+0x8c>)
 8000ed4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ed8:	619a      	str	r2, [r3, #24]
    (digit & 0x02) ? (BCD_2_1_PORT->BSRR = (1 << BCD_2_1_PIN)) :
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d004      	beq.n	8000eee <SevenSeg_Display+0x3e>
 8000ee4:	4b16      	ldr	r3, [pc, #88]	@ (8000f40 <SevenSeg_Display+0x90>)
 8000ee6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000eea:	619a      	str	r2, [r3, #24]
 8000eec:	e003      	b.n	8000ef6 <SevenSeg_Display+0x46>
                     (BCD_2_1_PORT->BSRR = (1 << (BCD_2_1_PIN + 16)));
 8000eee:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <SevenSeg_Display+0x90>)
 8000ef0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000ef4:	619a      	str	r2, [r3, #24]
    (digit & 0x04) ? (BCD_2_2_PORT->BSRR = (1 << BCD_2_2_PIN)) :
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d004      	beq.n	8000f0a <SevenSeg_Display+0x5a>
 8000f00:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <SevenSeg_Display+0x94>)
 8000f02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f06:	619a      	str	r2, [r3, #24]
 8000f08:	e003      	b.n	8000f12 <SevenSeg_Display+0x62>
                     (BCD_2_2_PORT->BSRR = (1 << (BCD_2_2_PIN + 16)));
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <SevenSeg_Display+0x94>)
 8000f0c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f10:	619a      	str	r2, [r3, #24]
    (digit & 0x08) ? (BCD_2_3_PORT->BSRR = (1 << BCD_2_3_PIN)) :
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	f003 0308 	and.w	r3, r3, #8
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d004      	beq.n	8000f26 <SevenSeg_Display+0x76>
 8000f1c:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <SevenSeg_Display+0x90>)
 8000f1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f22:	619a      	str	r2, [r3, #24]
 8000f24:	e005      	b.n	8000f32 <SevenSeg_Display+0x82>
                     (BCD_2_3_PORT->BSRR = (1 << (BCD_2_3_PIN + 16)));
 8000f26:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <SevenSeg_Display+0x90>)
 8000f28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f2c:	619a      	str	r2, [r3, #24]
 8000f2e:	e000      	b.n	8000f32 <SevenSeg_Display+0x82>
    if(digit > 9) return;
 8000f30:	bf00      	nop
}
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	40020800 	.word	0x40020800
 8000f40:	40020000 	.word	0x40020000
 8000f44:	40020400 	.word	0x40020400

08000f48 <ADC_IRQHandler>:

/* ============================================================================
 * Interrupt Handler
 * ============================================================================ */
void ADC_IRQHandler(void) {
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
    if(ADC1->SR & ADC_SR_EOC) {
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc8 <ADC_IRQHandler+0x80>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d031      	beq.n	8000fbc <ADC_IRQHandler+0x74>
        g_adc_values[g_current_adc_channel] = ADC1->DR;
 8000f58:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <ADC_IRQHandler+0x80>)
 8000f5a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fcc <ADC_IRQHandler+0x84>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	b289      	uxth	r1, r1
 8000f64:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd0 <ADC_IRQHandler+0x88>)
 8000f66:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        g_current_adc_channel = (g_current_adc_channel + 1) % 3;
 8000f6a:	4b18      	ldr	r3, [pc, #96]	@ (8000fcc <ADC_IRQHandler+0x84>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <ADC_IRQHandler+0x8c>)
 8000f72:	fb83 3102 	smull	r3, r1, r3, r2
 8000f76:	17d3      	asrs	r3, r2, #31
 8000f78:	1ac9      	subs	r1, r1, r3
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	440b      	add	r3, r1
 8000f80:	1ad1      	subs	r1, r2, r3
 8000f82:	b2ca      	uxtb	r2, r1
 8000f84:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <ADC_IRQHandler+0x84>)
 8000f86:	701a      	strb	r2, [r3, #0]
        ADC1->SQR3 = (ADC1->SQR3 & ~ADC_SQR3_SQ1) |
 8000f88:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <ADC_IRQHandler+0x80>)
 8000f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f8c:	f023 021f 	bic.w	r2, r3, #31
                     (g_current_adc_channel == 0 ? POT_PIN :
 8000f90:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <ADC_IRQHandler+0x84>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d007      	beq.n	8000fa8 <ADC_IRQHandler+0x60>
                     (g_current_adc_channel == 1 ? TEMP_PIN : LIGHT_PIN));
 8000f98:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <ADC_IRQHandler+0x84>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
                     (g_current_adc_channel == 0 ? POT_PIN :
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d101      	bne.n	8000fa4 <ADC_IRQHandler+0x5c>
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e002      	b.n	8000faa <ADC_IRQHandler+0x62>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	e000      	b.n	8000faa <ADC_IRQHandler+0x62>
 8000fa8:	2304      	movs	r3, #4
        ADC1->SQR3 = (ADC1->SQR3 & ~ADC_SQR3_SQ1) |
 8000faa:	4907      	ldr	r1, [pc, #28]	@ (8000fc8 <ADC_IRQHandler+0x80>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	634b      	str	r3, [r1, #52]	@ 0x34
        ADC1->CR2 |= ADC_CR2_SWSTART;
 8000fb0:	4b05      	ldr	r3, [pc, #20]	@ (8000fc8 <ADC_IRQHandler+0x80>)
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	4a04      	ldr	r2, [pc, #16]	@ (8000fc8 <ADC_IRQHandler+0x80>)
 8000fb6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000fba:	6093      	str	r3, [r2, #8]
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40012000 	.word	0x40012000
 8000fcc:	200000e6 	.word	0x200000e6
 8000fd0:	200000e0 	.word	0x200000e0
 8000fd4:	55555556 	.word	0x55555556

08000fd8 <__NVIC_SetPriority>:
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db0a      	blt.n	8001002 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	490c      	ldr	r1, [pc, #48]	@ (8001024 <__NVIC_SetPriority+0x4c>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	0112      	lsls	r2, r2, #4
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001000:	e00a      	b.n	8001018 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4908      	ldr	r1, [pc, #32]	@ (8001028 <__NVIC_SetPriority+0x50>)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	3b04      	subs	r3, #4
 8001010:	0112      	lsls	r2, r2, #4
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	440b      	add	r3, r1
 8001016:	761a      	strb	r2, [r3, #24]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800103c:	d301      	bcc.n	8001042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103e:	2301      	movs	r3, #1
 8001040:	e00f      	b.n	8001062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001042:	4a0a      	ldr	r2, [pc, #40]	@ (800106c <SysTick_Config+0x40>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104a:	210f      	movs	r1, #15
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f7ff ffc2 	bl	8000fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001054:	4b05      	ldr	r3, [pc, #20]	@ (800106c <SysTick_Config+0x40>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105a:	4b04      	ldr	r3, [pc, #16]	@ (800106c <SysTick_Config+0x40>)
 800105c:	2207      	movs	r2, #7
 800105e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	e000e010 	.word	0xe000e010

08001070 <main>:
#include "utils.h"

/* ============================================================================
 * Main Function
 * ============================================================================ */
int main(void) {
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
    // Initialize hardware
    SystemClock_Config();
 8001074:	f7ff fd50 	bl	8000b18 <SystemClock_Config>
    GPIO_Init();
 8001078:	f7ff fd94 	bl	8000ba4 <GPIO_Init>
    USART2_Init();
 800107c:	f7ff fe18 	bl	8000cb0 <USART2_Init>
    SysTick_Config(SystemCoreClock / 1000); // 1ms ticks
 8001080:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <main+0x5c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a12      	ldr	r2, [pc, #72]	@ (80010d0 <main+0x60>)
 8001086:	fba2 2303 	umull	r2, r3, r2, r3
 800108a:	099b      	lsrs	r3, r3, #6
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ffcd 	bl	800102c <SysTick_Config>
    NVIC_Init();
 8001092:	f7ff fe2b 	bl	8000cec <NVIC_Init>
    ADC_Init();
 8001096:	f7ff fddf 	bl	8000c58 <ADC_Init>

    // Initialize OLED display
    oled_init();
 800109a:	f000 fa51 	bl	8001540 <oled_init>
    oled_clear();
 800109e:	f000 fa29 	bl	80014f4 <oled_clear>

    // Mark system as initialized
    g_system_initialized = 1;
 80010a2:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <main+0x64>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]

    // Start ADC conversions
    ADC_StartConversion();
 80010a8:	f7ff fe30 	bl	8000d0c <ADC_StartConversion>
    Delay_ms(10);
 80010ac:	200a      	movs	r0, #10
 80010ae:	f000 fbef 	bl	8001890 <Delay_ms>

    // Initialize game
    Game_Init();
 80010b2:	f7ff fc2f 	bl	8000914 <Game_Init>

    // Main loop
    while(1) {
        Monitor_Buttons();
 80010b6:	f7ff fe41 	bl	8000d3c <Monitor_Buttons>
        Monitor_ADC();
 80010ba:	f7ff fead 	bl	8000e18 <Monitor_ADC>
        Game_Run();
 80010be:	f7ff fc4f 	bl	8000960 <Game_Run>
        Delay_ms(5);
 80010c2:	2005      	movs	r0, #5
 80010c4:	f000 fbe4 	bl	8001890 <Delay_ms>
        Monitor_Buttons();
 80010c8:	bf00      	nop
 80010ca:	e7f4      	b.n	80010b6 <main+0x46>
 80010cc:	20000004 	.word	0x20000004
 80010d0:	10624dd3 	.word	0x10624dd3
 80010d4:	200000f0 	.word	0x200000f0

080010d8 <I2C1_Init_OLED>:
#include "stm32f4xx.h"

/* ============================================================================
 * I2C Low-Level Functions
 * ============================================================================ */
static void I2C1_Init_OLED(void) {
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80010dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001194 <I2C1_Init_OLED+0xbc>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e0:	4a2c      	ldr	r2, [pc, #176]	@ (8001194 <I2C1_Init_OLED+0xbc>)
 80010e2:	f043 0302 	orr.w	r3, r3, #2
 80010e6:	6313      	str	r3, [r2, #48]	@ 0x30

    // PB8, PB9 AF4, Open-Drain, Pull-Up, High speed
    GPIOB->MODER &= ~((3u<<(8*2))|(3u<<(9*2)));
 80010e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a2a      	ldr	r2, [pc, #168]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 80010ee:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80010f2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  ((2u<<(8*2))|(2u<<(9*2)));
 80010f4:	4b28      	ldr	r3, [pc, #160]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a27      	ldr	r2, [pc, #156]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 80010fa:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 80010fe:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |=  (1u<<8)|(1u<<9);
 8001100:	4b25      	ldr	r3, [pc, #148]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	4a24      	ldr	r2, [pc, #144]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 8001106:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800110a:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR|=  (3u<<(8*2))|(3u<<(9*2));
 800110c:	4b22      	ldr	r3, [pc, #136]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	4a21      	ldr	r2, [pc, #132]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 8001112:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8001116:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR  &= ~((3u<<(8*2))|(3u<<(9*2)));
 8001118:	4b1f      	ldr	r3, [pc, #124]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	4a1e      	ldr	r2, [pc, #120]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 800111e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8001122:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR  |=  ((1u<<(8*2))|(1u<<(9*2)));
 8001124:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	4a1b      	ldr	r2, [pc, #108]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 800112a:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 800112e:	60d3      	str	r3, [r2, #12]
    GPIOB->AFR[1] &= ~((0xFu<<0)|(0xFu<<4));
 8001130:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 8001132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001134:	4a18      	ldr	r2, [pc, #96]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 8001136:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800113a:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->AFR[1] |=  ((4u<<0) |(4u<<4));
 800113c:	4b16      	ldr	r3, [pc, #88]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 800113e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001140:	4a15      	ldr	r2, [pc, #84]	@ (8001198 <I2C1_Init_OLED+0xc0>)
 8001142:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8001146:	6253      	str	r3, [r2, #36]	@ 0x24

    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8001148:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <I2C1_Init_OLED+0xbc>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114c:	4a11      	ldr	r2, [pc, #68]	@ (8001194 <I2C1_Init_OLED+0xbc>)
 800114e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001152:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->APB1RSTR |= RCC_APB1RSTR_I2C1RST;
 8001154:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <I2C1_Init_OLED+0xbc>)
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	4a0e      	ldr	r2, [pc, #56]	@ (8001194 <I2C1_Init_OLED+0xbc>)
 800115a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800115e:	6213      	str	r3, [r2, #32]
    RCC->APB1RSTR &= ~RCC_APB1RSTR_I2C1RST;
 8001160:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <I2C1_Init_OLED+0xbc>)
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	4a0b      	ldr	r2, [pc, #44]	@ (8001194 <I2C1_Init_OLED+0xbc>)
 8001166:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800116a:	6213      	str	r3, [r2, #32]

    I2C1->CR1 = 0;
 800116c:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <I2C1_Init_OLED+0xc4>)
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
    I2C1->CR2 = 42;          // APB1=42MHz
 8001172:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <I2C1_Init_OLED+0xc4>)
 8001174:	222a      	movs	r2, #42	@ 0x2a
 8001176:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 210;         // 100kHz
 8001178:	4b08      	ldr	r3, [pc, #32]	@ (800119c <I2C1_Init_OLED+0xc4>)
 800117a:	22d2      	movs	r2, #210	@ 0xd2
 800117c:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 43;
 800117e:	4b07      	ldr	r3, [pc, #28]	@ (800119c <I2C1_Init_OLED+0xc4>)
 8001180:	222b      	movs	r2, #43	@ 0x2b
 8001182:	621a      	str	r2, [r3, #32]
    I2C1->CR1 = I2C_CR1_PE;
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <I2C1_Init_OLED+0xc4>)
 8001186:	2201      	movs	r2, #1
 8001188:	601a      	str	r2, [r3, #0]
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	40023800 	.word	0x40023800
 8001198:	40020400 	.word	0x40020400
 800119c:	40005400 	.word	0x40005400

080011a0 <i2c_start>:

static void i2c_start(uint8_t addr) {
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
    I2C1->CR1 |= I2C_CR1_START;
 80011aa:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <i2c_start+0x54>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a11      	ldr	r2, [pc, #68]	@ (80011f4 <i2c_start+0x54>)
 80011b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b4:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));
 80011b6:	bf00      	nop
 80011b8:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <i2c_start+0x54>)
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f9      	beq.n	80011b8 <i2c_start+0x18>
    (void)I2C1->SR1;
 80011c4:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <i2c_start+0x54>)
 80011c6:	695b      	ldr	r3, [r3, #20]
    I2C1->DR = addr<<1;
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	4a0a      	ldr	r2, [pc, #40]	@ (80011f4 <i2c_start+0x54>)
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	6113      	str	r3, [r2, #16]
    while(!(I2C1->SR1 & I2C_SR1_ADDR));
 80011d0:	bf00      	nop
 80011d2:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <i2c_start+0x54>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f9      	beq.n	80011d2 <i2c_start+0x32>
    (void)I2C1->SR1;
 80011de:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <i2c_start+0x54>)
 80011e0:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 80011e2:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <i2c_start+0x54>)
 80011e4:	699b      	ldr	r3, [r3, #24]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40005400 	.word	0x40005400

080011f8 <i2c_w>:

static void i2c_w(uint8_t b) {
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
    while(!(I2C1->SR1 & I2C_SR1_TXE));
 8001202:	bf00      	nop
 8001204:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <i2c_w+0x3c>)
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0f9      	beq.n	8001204 <i2c_w+0xc>
    I2C1->DR = b;
 8001210:	4a08      	ldr	r2, [pc, #32]	@ (8001234 <i2c_w+0x3c>)
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	6113      	str	r3, [r2, #16]
    while(!(I2C1->SR1 & I2C_SR1_BTF));
 8001216:	bf00      	nop
 8001218:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <i2c_w+0x3c>)
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0f9      	beq.n	8001218 <i2c_w+0x20>
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40005400 	.word	0x40005400

08001238 <i2c_stop>:

static void i2c_stop(void) {
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 800123c:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <i2c_stop+0x1c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a04      	ldr	r2, [pc, #16]	@ (8001254 <i2c_stop+0x1c>)
 8001242:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001246:	6013      	str	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40005400 	.word	0x40005400

08001258 <oled_cmd>:

/* ============================================================================
 * OLED Command/Data Functions
 * ============================================================================ */
static void oled_cmd(uint8_t c) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
    i2c_start(OLED_ADDR);
 8001262:	203c      	movs	r0, #60	@ 0x3c
 8001264:	f7ff ff9c 	bl	80011a0 <i2c_start>
    i2c_w(0x00);
 8001268:	2000      	movs	r0, #0
 800126a:	f7ff ffc5 	bl	80011f8 <i2c_w>
    i2c_w(c);
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ffc1 	bl	80011f8 <i2c_w>
    i2c_stop();
 8001276:	f7ff ffdf 	bl	8001238 <i2c_stop>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <oled_data>:

static void oled_data(const uint8_t* p, uint16_t n) {
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	460b      	mov	r3, r1
 800128c:	807b      	strh	r3, [r7, #2]
    i2c_start(OLED_ADDR);
 800128e:	203c      	movs	r0, #60	@ 0x3c
 8001290:	f7ff ff86 	bl	80011a0 <i2c_start>
    i2c_w(0x40);
 8001294:	2040      	movs	r0, #64	@ 0x40
 8001296:	f7ff ffaf 	bl	80011f8 <i2c_w>
    while(n--) i2c_w(*p++);
 800129a:	e006      	b.n	80012aa <oled_data+0x28>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ffa7 	bl	80011f8 <i2c_w>
 80012aa:	887b      	ldrh	r3, [r7, #2]
 80012ac:	1e5a      	subs	r2, r3, #1
 80012ae:	807a      	strh	r2, [r7, #2]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1f3      	bne.n	800129c <oled_data+0x1a>
    i2c_stop();
 80012b4:	f7ff ffc0 	bl	8001238 <i2c_stop>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <oled_setpos>:

static void oled_setpos(uint8_t page, uint8_t col) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	460a      	mov	r2, r1
 80012ca:	71fb      	strb	r3, [r7, #7]
 80012cc:	4613      	mov	r3, r2
 80012ce:	71bb      	strb	r3, [r7, #6]
    col += OLED_COL_OFFSET;
 80012d0:	79bb      	ldrb	r3, [r7, #6]
 80012d2:	3302      	adds	r3, #2
 80012d4:	71bb      	strb	r3, [r7, #6]
    oled_cmd(0xB0 | (page & 7));
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	b25b      	sxtb	r3, r3
 80012e0:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80012e4:	b25b      	sxtb	r3, r3
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ffb5 	bl	8001258 <oled_cmd>
    oled_cmd(0x00 | (col & 0x0F));
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ffae 	bl	8001258 <oled_cmd>
    oled_cmd(0x10 | (col >> 4));
 80012fc:	79bb      	ldrb	r3, [r7, #6]
 80012fe:	091b      	lsrs	r3, r3, #4
 8001300:	b2db      	uxtb	r3, r3
 8001302:	f043 0310 	orr.w	r3, r3, #16
 8001306:	b2db      	uxtb	r3, r3
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ffa5 	bl	8001258 <oled_cmd>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <oled_draw_digit>:
static const uint8_t FONT5x7_MINUS[6] = {0x08,0x08,0x08,0x08,0x08,0x00};

/* ============================================================================
 * Text Drawing Functions
 * ============================================================================ */
static void oled_draw_digit(uint8_t x, uint8_t page, int d) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	603a      	str	r2, [r7, #0]
 8001322:	71fb      	strb	r3, [r7, #7]
 8001324:	460b      	mov	r3, r1
 8001326:	71bb      	strb	r3, [r7, #6]
    if(d >= 0 && d <= 9) {
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	db13      	blt.n	8001356 <oled_draw_digit+0x3e>
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	2b09      	cmp	r3, #9
 8001332:	dc10      	bgt.n	8001356 <oled_draw_digit+0x3e>
        oled_setpos(page, x);
 8001334:	79fa      	ldrb	r2, [r7, #7]
 8001336:	79bb      	ldrb	r3, [r7, #6]
 8001338:	4611      	mov	r1, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ffc0 	bl	80012c0 <oled_setpos>
        oled_data(FONT5x7_DIGIT[d], 6);
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	4a05      	ldr	r2, [pc, #20]	@ (8001360 <oled_draw_digit+0x48>)
 800134c:	4413      	add	r3, r2
 800134e:	2106      	movs	r1, #6
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff96 	bl	8001282 <oled_data>
    }
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	08003004 	.word	0x08003004

08001364 <oled_draw_letter>:

static void oled_draw_letter(uint8_t x, uint8_t page, char c) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
 800136e:	460b      	mov	r3, r1
 8001370:	71bb      	strb	r3, [r7, #6]
 8001372:	4613      	mov	r3, r2
 8001374:	717b      	strb	r3, [r7, #5]
    const uint8_t* g = FONT5x7_SPACE;
 8001376:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <oled_draw_letter+0x80>)
 8001378:	60fb      	str	r3, [r7, #12]
    if(c >= 'A' && c <= 'Z') g = FONT5x7_LET[c-'A'];
 800137a:	797b      	ldrb	r3, [r7, #5]
 800137c:	2b40      	cmp	r3, #64	@ 0x40
 800137e:	d90d      	bls.n	800139c <oled_draw_letter+0x38>
 8001380:	797b      	ldrb	r3, [r7, #5]
 8001382:	2b5a      	cmp	r3, #90	@ 0x5a
 8001384:	d80a      	bhi.n	800139c <oled_draw_letter+0x38>
 8001386:	797b      	ldrb	r3, [r7, #5]
 8001388:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800138c:	4613      	mov	r3, r2
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	4413      	add	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4a14      	ldr	r2, [pc, #80]	@ (80013e8 <oled_draw_letter+0x84>)
 8001396:	4413      	add	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	e015      	b.n	80013c8 <oled_draw_letter+0x64>
    else if(c >= '0' && c <= '9') g = FONT5x7_DIGIT[c-'0'];
 800139c:	797b      	ldrb	r3, [r7, #5]
 800139e:	2b2f      	cmp	r3, #47	@ 0x2f
 80013a0:	d90d      	bls.n	80013be <oled_draw_letter+0x5a>
 80013a2:	797b      	ldrb	r3, [r7, #5]
 80013a4:	2b39      	cmp	r3, #57	@ 0x39
 80013a6:	d80a      	bhi.n	80013be <oled_draw_letter+0x5a>
 80013a8:	797b      	ldrb	r3, [r7, #5]
 80013aa:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80013ae:	4613      	mov	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4a0d      	ldr	r2, [pc, #52]	@ (80013ec <oled_draw_letter+0x88>)
 80013b8:	4413      	add	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	e004      	b.n	80013c8 <oled_draw_letter+0x64>
    else if(c == '-') g = FONT5x7_MINUS;
 80013be:	797b      	ldrb	r3, [r7, #5]
 80013c0:	2b2d      	cmp	r3, #45	@ 0x2d
 80013c2:	d101      	bne.n	80013c8 <oled_draw_letter+0x64>
 80013c4:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <oled_draw_letter+0x8c>)
 80013c6:	60fb      	str	r3, [r7, #12]
    oled_setpos(page, x);
 80013c8:	79fa      	ldrb	r2, [r7, #7]
 80013ca:	79bb      	ldrb	r3, [r7, #6]
 80013cc:	4611      	mov	r1, r2
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ff76 	bl	80012c0 <oled_setpos>
    oled_data(g, 6);
 80013d4:	2106      	movs	r1, #6
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f7ff ff53 	bl	8001282 <oled_data>
}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	080030dc 	.word	0x080030dc
 80013e8:	08003040 	.word	0x08003040
 80013ec:	08003004 	.word	0x08003004
 80013f0:	080030e4 	.word	0x080030e4

080013f4 <oled_print_text>:

static void oled_print_text(uint8_t x, uint8_t page, const char* s) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	603a      	str	r2, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
 8001400:	460b      	mov	r3, r1
 8001402:	71bb      	strb	r3, [r7, #6]
    while(*s) {
 8001404:	e01b      	b.n	800143e <oled_print_text+0x4a>
        char c = (*s >= 'a' && *s <= 'z') ? (*s - 32) : *s;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b60      	cmp	r3, #96	@ 0x60
 800140c:	d908      	bls.n	8001420 <oled_print_text+0x2c>
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b7a      	cmp	r3, #122	@ 0x7a
 8001414:	d804      	bhi.n	8001420 <oled_print_text+0x2c>
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	3b20      	subs	r3, #32
 800141c:	b2db      	uxtb	r3, r3
 800141e:	e001      	b.n	8001424 <oled_print_text+0x30>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	73fb      	strb	r3, [r7, #15]
        oled_draw_letter(x, page, c);
 8001426:	7bfa      	ldrb	r2, [r7, #15]
 8001428:	79b9      	ldrb	r1, [r7, #6]
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff99 	bl	8001364 <oled_draw_letter>
        x += 6;
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	3306      	adds	r3, #6
 8001436:	71fb      	strb	r3, [r7, #7]
        s++;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	3301      	adds	r3, #1
 800143c:	603b      	str	r3, [r7, #0]
    while(*s) {
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1df      	bne.n	8001406 <oled_print_text+0x12>
    }
}
 8001446:	bf00      	nop
 8001448:	bf00      	nop
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <oled_print_uint>:

static void oled_print_uint(uint8_t x, uint8_t page, unsigned v) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	603a      	str	r2, [r7, #0]
 800145a:	71fb      	strb	r3, [r7, #7]
 800145c:	460b      	mov	r3, r1
 800145e:	71bb      	strb	r3, [r7, #6]
    char buf[10];
    int n = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]

    if(v == 0) {
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d120      	bne.n	80014ac <oled_print_uint+0x5c>
        oled_draw_digit(x, page, 0);
 800146a:	79b9      	ldrb	r1, [r7, #6]
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	2200      	movs	r2, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff51 	bl	8001318 <oled_draw_digit>
 8001476:	e038      	b.n	80014ea <oled_print_uint+0x9a>
        return;
    }

    while(v && n < 10) {
        buf[n++] = '0' + (v % 10);
 8001478:	6839      	ldr	r1, [r7, #0]
 800147a:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <oled_print_uint+0xa0>)
 800147c:	fba3 2301 	umull	r2, r3, r3, r1
 8001480:	08da      	lsrs	r2, r3, #3
 8001482:	4613      	mov	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	1aca      	subs	r2, r1, r3
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	1c59      	adds	r1, r3, #1
 8001492:	61f9      	str	r1, [r7, #28]
 8001494:	3230      	adds	r2, #48	@ 0x30
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	3320      	adds	r3, #32
 800149a:	443b      	add	r3, r7
 800149c:	f803 2c14 	strb.w	r2, [r3, #-20]
        v /= 10;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	4a13      	ldr	r2, [pc, #76]	@ (80014f0 <oled_print_uint+0xa0>)
 80014a4:	fba2 2303 	umull	r2, r3, r2, r3
 80014a8:	08db      	lsrs	r3, r3, #3
 80014aa:	603b      	str	r3, [r7, #0]
    while(v && n < 10) {
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d002      	beq.n	80014b8 <oled_print_uint+0x68>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	2b09      	cmp	r3, #9
 80014b6:	dddf      	ble.n	8001478 <oled_print_uint+0x28>
    }

    for(int i = n - 1; i >= 0; i--, x += 6) {
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	61bb      	str	r3, [r7, #24]
 80014be:	e011      	b.n	80014e4 <oled_print_uint+0x94>
        oled_draw_digit(x, page, buf[i] - '0');
 80014c0:	f107 020c 	add.w	r2, r7, #12
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	4413      	add	r3, r2
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80014ce:	79b9      	ldrb	r1, [r7, #6]
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff20 	bl	8001318 <oled_draw_digit>
    for(int i = n - 1; i >= 0; i--, x += 6) {
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	3b01      	subs	r3, #1
 80014dc:	61bb      	str	r3, [r7, #24]
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	3306      	adds	r3, #6
 80014e2:	71fb      	strb	r3, [r7, #7]
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	daea      	bge.n	80014c0 <oled_print_uint+0x70>
    }
}
 80014ea:	3720      	adds	r7, #32
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	cccccccd 	.word	0xcccccccd

080014f4 <oled_clear>:

/* ============================================================================
 * Public Functions
 * ============================================================================ */
void oled_clear(void) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b0a2      	sub	sp, #136	@ 0x88
 80014f8:	af00      	add	r7, sp, #0
    uint8_t z[128] = {0};
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	2280      	movs	r2, #128	@ 0x80
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f000 fc0f 	bl	8001d24 <memset>
    for(uint8_t p = 0; p < 8; p++) {
 8001506:	2300      	movs	r3, #0
 8001508:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800150c:	e00f      	b.n	800152e <oled_clear+0x3a>
        oled_setpos(p, 0);
 800150e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001512:	2100      	movs	r1, #0
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fed3 	bl	80012c0 <oled_setpos>
        oled_data(z, 128);
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2180      	movs	r1, #128	@ 0x80
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff feaf 	bl	8001282 <oled_data>
    for(uint8_t p = 0; p < 8; p++) {
 8001524:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001528:	3301      	adds	r3, #1
 800152a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800152e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001532:	2b07      	cmp	r3, #7
 8001534:	d9eb      	bls.n	800150e <oled_clear+0x1a>
    }
}
 8001536:	bf00      	nop
 8001538:	bf00      	nop
 800153a:	3788      	adds	r7, #136	@ 0x88
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <oled_init>:

void oled_init(void) {
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
    I2C1_Init_OLED();
 8001544:	f7ff fdc8 	bl	80010d8 <I2C1_Init_OLED>

    // Initialization sequence
    oled_cmd(0xAE); oled_cmd(0xD5); oled_cmd(0x80);
 8001548:	20ae      	movs	r0, #174	@ 0xae
 800154a:	f7ff fe85 	bl	8001258 <oled_cmd>
 800154e:	20d5      	movs	r0, #213	@ 0xd5
 8001550:	f7ff fe82 	bl	8001258 <oled_cmd>
 8001554:	2080      	movs	r0, #128	@ 0x80
 8001556:	f7ff fe7f 	bl	8001258 <oled_cmd>
    oled_cmd(0xA8); oled_cmd(0x3F); oled_cmd(0xD3); oled_cmd(0x00);
 800155a:	20a8      	movs	r0, #168	@ 0xa8
 800155c:	f7ff fe7c 	bl	8001258 <oled_cmd>
 8001560:	203f      	movs	r0, #63	@ 0x3f
 8001562:	f7ff fe79 	bl	8001258 <oled_cmd>
 8001566:	20d3      	movs	r0, #211	@ 0xd3
 8001568:	f7ff fe76 	bl	8001258 <oled_cmd>
 800156c:	2000      	movs	r0, #0
 800156e:	f7ff fe73 	bl	8001258 <oled_cmd>
    oled_cmd(0x40); oled_cmd(0x8D); oled_cmd(0x14);
 8001572:	2040      	movs	r0, #64	@ 0x40
 8001574:	f7ff fe70 	bl	8001258 <oled_cmd>
 8001578:	208d      	movs	r0, #141	@ 0x8d
 800157a:	f7ff fe6d 	bl	8001258 <oled_cmd>
 800157e:	2014      	movs	r0, #20
 8001580:	f7ff fe6a 	bl	8001258 <oled_cmd>
    oled_cmd(0x20); oled_cmd(0x00); oled_cmd(0xA1); oled_cmd(0xC8);
 8001584:	2020      	movs	r0, #32
 8001586:	f7ff fe67 	bl	8001258 <oled_cmd>
 800158a:	2000      	movs	r0, #0
 800158c:	f7ff fe64 	bl	8001258 <oled_cmd>
 8001590:	20a1      	movs	r0, #161	@ 0xa1
 8001592:	f7ff fe61 	bl	8001258 <oled_cmd>
 8001596:	20c8      	movs	r0, #200	@ 0xc8
 8001598:	f7ff fe5e 	bl	8001258 <oled_cmd>
    oled_cmd(0xDA); oled_cmd(0x12); oled_cmd(0x81); oled_cmd(0x7F);
 800159c:	20da      	movs	r0, #218	@ 0xda
 800159e:	f7ff fe5b 	bl	8001258 <oled_cmd>
 80015a2:	2012      	movs	r0, #18
 80015a4:	f7ff fe58 	bl	8001258 <oled_cmd>
 80015a8:	2081      	movs	r0, #129	@ 0x81
 80015aa:	f7ff fe55 	bl	8001258 <oled_cmd>
 80015ae:	207f      	movs	r0, #127	@ 0x7f
 80015b0:	f7ff fe52 	bl	8001258 <oled_cmd>
    oled_cmd(0xD9); oled_cmd(0xF1); oled_cmd(0xDB); oled_cmd(0x40);
 80015b4:	20d9      	movs	r0, #217	@ 0xd9
 80015b6:	f7ff fe4f 	bl	8001258 <oled_cmd>
 80015ba:	20f1      	movs	r0, #241	@ 0xf1
 80015bc:	f7ff fe4c 	bl	8001258 <oled_cmd>
 80015c0:	20db      	movs	r0, #219	@ 0xdb
 80015c2:	f7ff fe49 	bl	8001258 <oled_cmd>
 80015c6:	2040      	movs	r0, #64	@ 0x40
 80015c8:	f7ff fe46 	bl	8001258 <oled_cmd>
    oled_cmd(0xA4); oled_cmd(0xA6); oled_cmd(0xAF);
 80015cc:	20a4      	movs	r0, #164	@ 0xa4
 80015ce:	f7ff fe43 	bl	8001258 <oled_cmd>
 80015d2:	20a6      	movs	r0, #166	@ 0xa6
 80015d4:	f7ff fe40 	bl	8001258 <oled_cmd>
 80015d8:	20af      	movs	r0, #175	@ 0xaf
 80015da:	f7ff fe3d 	bl	8001258 <oled_cmd>

    oled_clear();
 80015de:	f7ff ff89 	bl	80014f4 <oled_clear>
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <OLED_ShowStatus>:

void OLED_ShowStatus(void) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
    oled_clear();
 80015ec:	f7ff ff82 	bl	80014f4 <oled_clear>

    // LEVEL
    oled_print_text(0, 0, "LEVEL");
 80015f0:	4a35      	ldr	r2, [pc, #212]	@ (80016c8 <OLED_ShowStatus+0xe0>)
 80015f2:	2100      	movs	r1, #0
 80015f4:	2000      	movs	r0, #0
 80015f6:	f7ff fefd 	bl	80013f4 <oled_print_text>
    oled_print_uint(6*6, 0, g_level);
 80015fa:	4b34      	ldr	r3, [pc, #208]	@ (80016cc <OLED_ShowStatus+0xe4>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	2100      	movs	r1, #0
 8001602:	2024      	movs	r0, #36	@ 0x24
 8001604:	f7ff ff24 	bl	8001450 <oled_print_uint>

    // LIVES
    oled_print_text(0, 2, "LIVES");
 8001608:	4a31      	ldr	r2, [pc, #196]	@ (80016d0 <OLED_ShowStatus+0xe8>)
 800160a:	2102      	movs	r1, #2
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff fef1 	bl	80013f4 <oled_print_text>
    oled_print_uint(6*6, 2, g_lives);
 8001612:	4b30      	ldr	r3, [pc, #192]	@ (80016d4 <OLED_ShowStatus+0xec>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	2102      	movs	r1, #2
 800161a:	2024      	movs	r0, #36	@ 0x24
 800161c:	f7ff ff18 	bl	8001450 <oled_print_uint>

    // SCORE
    oled_print_text(0, 4, "SCORE");
 8001620:	4a2d      	ldr	r2, [pc, #180]	@ (80016d8 <OLED_ShowStatus+0xf0>)
 8001622:	2104      	movs	r1, #4
 8001624:	2000      	movs	r0, #0
 8001626:	f7ff fee5 	bl	80013f4 <oled_print_text>
    oled_print_uint(6*6, 4, g_score);
 800162a:	4b2c      	ldr	r3, [pc, #176]	@ (80016dc <OLED_ShowStatus+0xf4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	2104      	movs	r1, #4
 8001632:	2024      	movs	r0, #36	@ 0x24
 8001634:	f7ff ff0c 	bl	8001450 <oled_print_uint>

    // DIFF
    oled_print_text(0, 6, "SPEED");
 8001638:	4a29      	ldr	r2, [pc, #164]	@ (80016e0 <OLED_ShowStatus+0xf8>)
 800163a:	2106      	movs	r1, #6
 800163c:	2000      	movs	r0, #0
 800163e:	f7ff fed9 	bl	80013f4 <oled_print_text>
    oled_print_uint(6*6, 6, g_difficulty);
 8001642:	4b28      	ldr	r3, [pc, #160]	@ (80016e4 <OLED_ShowStatus+0xfc>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	2106      	movs	r1, #6
 800164a:	2024      	movs	r0, #36	@ 0x24
 800164c:	f7ff ff00 	bl	8001450 <oled_print_uint>

    // STATE
    switch(g_game_state) {
 8001650:	4b25      	ldr	r3, [pc, #148]	@ (80016e8 <OLED_ShowStatus+0x100>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	3b01      	subs	r3, #1
 8001656:	2b06      	cmp	r3, #6
 8001658:	d82e      	bhi.n	80016b8 <OLED_ShowStatus+0xd0>
 800165a:	a201      	add	r2, pc, #4	@ (adr r2, 8001660 <OLED_ShowStatus+0x78>)
 800165c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001660:	080016ad 	.word	0x080016ad
 8001664:	080016b9 	.word	0x080016b9
 8001668:	08001695 	.word	0x08001695
 800166c:	080016a1 	.word	0x080016a1
 8001670:	080016b9 	.word	0x080016b9
 8001674:	0800167d 	.word	0x0800167d
 8001678:	08001689 	.word	0x08001689
        case GAME_STATE_VICTORY:
            oled_print_text(0, 7, "VICTORY");
 800167c:	4a1b      	ldr	r2, [pc, #108]	@ (80016ec <OLED_ShowStatus+0x104>)
 800167e:	2107      	movs	r1, #7
 8001680:	2000      	movs	r0, #0
 8001682:	f7ff feb7 	bl	80013f4 <oled_print_text>
            break;
 8001686:	e01d      	b.n	80016c4 <OLED_ShowStatus+0xdc>
        case GAME_STATE_GAME_DEATH:
            oled_print_text(0, 7, "GAME-OVER");
 8001688:	4a19      	ldr	r2, [pc, #100]	@ (80016f0 <OLED_ShowStatus+0x108>)
 800168a:	2107      	movs	r1, #7
 800168c:	2000      	movs	r0, #0
 800168e:	f7ff feb1 	bl	80013f4 <oled_print_text>
            break;
 8001692:	e017      	b.n	80016c4 <OLED_ShowStatus+0xdc>
        case GAME_STATE_PATTERN_DISPLAY:
            oled_print_text(0, 7, "SHOW");
 8001694:	4a17      	ldr	r2, [pc, #92]	@ (80016f4 <OLED_ShowStatus+0x10c>)
 8001696:	2107      	movs	r1, #7
 8001698:	2000      	movs	r0, #0
 800169a:	f7ff feab 	bl	80013f4 <oled_print_text>
            break;
 800169e:	e011      	b.n	80016c4 <OLED_ShowStatus+0xdc>
        case GAME_STATE_INPUT_WAIT:
            oled_print_text(0, 7, "INPUT");
 80016a0:	4a15      	ldr	r2, [pc, #84]	@ (80016f8 <OLED_ShowStatus+0x110>)
 80016a2:	2107      	movs	r1, #7
 80016a4:	2000      	movs	r0, #0
 80016a6:	f7ff fea5 	bl	80013f4 <oled_print_text>
            break;
 80016aa:	e00b      	b.n	80016c4 <OLED_ShowStatus+0xdc>
        case GAME_STATE_DIFFICULTY_SELECT:
            oled_print_text(0, 7, "SPEED-SELECT");
 80016ac:	4a13      	ldr	r2, [pc, #76]	@ (80016fc <OLED_ShowStatus+0x114>)
 80016ae:	2107      	movs	r1, #7
 80016b0:	2000      	movs	r0, #0
 80016b2:	f7ff fe9f 	bl	80013f4 <oled_print_text>
            break;
 80016b6:	e005      	b.n	80016c4 <OLED_ShowStatus+0xdc>
        default:
            oled_print_text(0, 7, "PLAY");
 80016b8:	4a11      	ldr	r2, [pc, #68]	@ (8001700 <OLED_ShowStatus+0x118>)
 80016ba:	2107      	movs	r1, #7
 80016bc:	2000      	movs	r0, #0
 80016be:	f7ff fe99 	bl	80013f4 <oled_print_text>
            break;
 80016c2:	bf00      	nop
    }
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	08002f8c 	.word	0x08002f8c
 80016cc:	20000082 	.word	0x20000082
 80016d0:	08002f94 	.word	0x08002f94
 80016d4:	20000088 	.word	0x20000088
 80016d8:	08002f9c 	.word	0x08002f9c
 80016dc:	20000084 	.word	0x20000084
 80016e0:	08002fa4 	.word	0x08002fa4
 80016e4:	20000081 	.word	0x20000081
 80016e8:	20000080 	.word	0x20000080
 80016ec:	08002fac 	.word	0x08002fac
 80016f0:	08002fb4 	.word	0x08002fb4
 80016f4:	08002fc0 	.word	0x08002fc0
 80016f8:	08002fc8 	.word	0x08002fc8
 80016fc:	08002fd0 	.word	0x08002fd0
 8001700:	08002fe0 	.word	0x08002fe0

08001704 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return 1;
 8001708:	2301      	movs	r3, #1
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <_kill>:

int _kill(int pid, int sig)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800171e:	f000 fb4f 	bl	8001dc0 <__errno>
 8001722:	4603      	mov	r3, r0
 8001724:	2216      	movs	r2, #22
 8001726:	601a      	str	r2, [r3, #0]
  return -1;
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <_exit>:

void _exit (int status)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800173c:	f04f 31ff 	mov.w	r1, #4294967295
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ffe7 	bl	8001714 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001746:	bf00      	nop
 8001748:	e7fd      	b.n	8001746 <_exit+0x12>

0800174a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	e00a      	b.n	8001772 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800175c:	f3af 8000 	nop.w
 8001760:	4601      	mov	r1, r0
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	1c5a      	adds	r2, r3, #1
 8001766:	60ba      	str	r2, [r7, #8]
 8001768:	b2ca      	uxtb	r2, r1
 800176a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3301      	adds	r3, #1
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	429a      	cmp	r2, r3
 8001778:	dbf0      	blt.n	800175c <_read+0x12>
  }

  return len;
 800177a:	687b      	ldr	r3, [r7, #4]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	e009      	b.n	80017aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	1c5a      	adds	r2, r3, #1
 800179a:	60ba      	str	r2, [r7, #8]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	3301      	adds	r3, #1
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	dbf1      	blt.n	8001796 <_write+0x12>
  }
  return len;
 80017b2:	687b      	ldr	r3, [r7, #4]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <_close>:

int _close(int file)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017e4:	605a      	str	r2, [r3, #4]
  return 0;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <_isatty>:

int _isatty(int file)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017fc:	2301      	movs	r3, #1
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800180a:	b480      	push	{r7}
 800180c:	b085      	sub	sp, #20
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800182c:	4a14      	ldr	r2, [pc, #80]	@ (8001880 <_sbrk+0x5c>)
 800182e:	4b15      	ldr	r3, [pc, #84]	@ (8001884 <_sbrk+0x60>)
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001838:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <_sbrk+0x64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d102      	bne.n	8001846 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001840:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <_sbrk+0x64>)
 8001842:	4a12      	ldr	r2, [pc, #72]	@ (800188c <_sbrk+0x68>)
 8001844:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001846:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <_sbrk+0x64>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	429a      	cmp	r2, r3
 8001852:	d207      	bcs.n	8001864 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001854:	f000 fab4 	bl	8001dc0 <__errno>
 8001858:	4603      	mov	r3, r0
 800185a:	220c      	movs	r2, #12
 800185c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295
 8001862:	e009      	b.n	8001878 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001864:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800186a:	4b07      	ldr	r3, [pc, #28]	@ (8001888 <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	4a05      	ldr	r2, [pc, #20]	@ (8001888 <_sbrk+0x64>)
 8001874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001876:	68fb      	ldr	r3, [r7, #12]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20020000 	.word	0x20020000
 8001884:	00000400 	.word	0x00000400
 8001888:	200000e8 	.word	0x200000e8
 800188c:	20000240 	.word	0x20000240

08001890 <Delay_ms>:
uint8_t g_system_initialized = 0;

/* ============================================================================
 * Timing Functions
 * ============================================================================ */
void Delay_ms(uint32_t ms) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
    uint32_t start = GetTick();
 8001898:	f000 f810 	bl	80018bc <GetTick>
 800189c:	60f8      	str	r0, [r7, #12]
    while((GetTick() - start) < ms);
 800189e:	bf00      	nop
 80018a0:	f000 f80c 	bl	80018bc <GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d8f7      	bhi.n	80018a0 <Delay_ms+0x10>
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <GetTick>:

uint32_t GetTick(void) {
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
    return g_tick_counter;
 80018c0:	4b03      	ldr	r3, [pc, #12]	@ (80018d0 <GetTick+0x14>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	200000ec 	.word	0x200000ec

080018d4 <Log_Print>:

/* ============================================================================
 * Logging Functions
 * ============================================================================ */
void Log_Print(const char* format, ...) {
 80018d4:	b40f      	push	{r0, r1, r2, r3}
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b0c2      	sub	sp, #264	@ 0x108
 80018da:	af00      	add	r7, sp, #0
    if(!g_system_initialized) return;
 80018dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001950 <Log_Print+0x7c>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d02d      	beq.n	8001940 <Log_Print+0x6c>
    char buffer[256];
    va_list args;
    va_start(args, format);
 80018e4:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80018e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80018ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80018f0:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80018f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80018f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80018fa:	1d38      	adds	r0, r7, #4
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001902:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001906:	f000 f9ff 	bl	8001d08 <vsniprintf>
    va_end(args);
    for(char* p = buffer; *p; p++) {
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001910:	e010      	b.n	8001934 <Log_Print+0x60>
        while(!(USART2->SR & USART_SR_TXE));
 8001912:	bf00      	nop
 8001914:	4b0f      	ldr	r3, [pc, #60]	@ (8001954 <Log_Print+0x80>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f9      	beq.n	8001914 <Log_Print+0x40>
        USART2->DR = *p;
 8001920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001924:	781a      	ldrb	r2, [r3, #0]
 8001926:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <Log_Print+0x80>)
 8001928:	605a      	str	r2, [r3, #4]
    for(char* p = buffer; *p; p++) {
 800192a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800192e:	3301      	adds	r3, #1
 8001930:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1e9      	bne.n	8001912 <Log_Print+0x3e>
 800193e:	e000      	b.n	8001942 <Log_Print+0x6e>
    if(!g_system_initialized) return;
 8001940:	bf00      	nop
    }
}
 8001942:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001946:	46bd      	mov	sp, r7
 8001948:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800194c:	b004      	add	sp, #16
 800194e:	4770      	bx	lr
 8001950:	200000f0 	.word	0x200000f0
 8001954:	40004400 	.word	0x40004400

08001958 <SysTick_Handler>:

/* ============================================================================
 * Interrupt Handler
 * ============================================================================ */
void SysTick_Handler(void) {
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
    g_tick_counter++;
 800195c:	4b04      	ldr	r3, [pc, #16]	@ (8001970 <SysTick_Handler+0x18>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	3301      	adds	r3, #1
 8001962:	4a03      	ldr	r2, [pc, #12]	@ (8001970 <SysTick_Handler+0x18>)
 8001964:	6013      	str	r3, [r2, #0]
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	200000ec 	.word	0x200000ec

08001974 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001974:	480d      	ldr	r0, [pc, #52]	@ (80019ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001976:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001978:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800197c:	480c      	ldr	r0, [pc, #48]	@ (80019b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800197e:	490d      	ldr	r1, [pc, #52]	@ (80019b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001980:	4a0d      	ldr	r2, [pc, #52]	@ (80019b8 <LoopForever+0xe>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001984:	e002      	b.n	800198c <LoopCopyDataInit>

08001986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198a:	3304      	adds	r3, #4

0800198c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800198c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001990:	d3f9      	bcc.n	8001986 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001992:	4a0a      	ldr	r2, [pc, #40]	@ (80019bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001994:	4c0a      	ldr	r4, [pc, #40]	@ (80019c0 <LoopForever+0x16>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001998:	e001      	b.n	800199e <LoopFillZerobss>

0800199a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800199c:	3204      	adds	r2, #4

0800199e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a0:	d3fb      	bcc.n	800199a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80019a2:	f000 fa13 	bl	8001dcc <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 80019a6:	f7ff fb63 	bl	8001070 <main>

080019aa <LoopForever>:

LoopForever:
  b LoopForever
 80019aa:	e7fe      	b.n	80019aa <LoopForever>
  ldr   r0, =_estack
 80019ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80019b8:	080031d8 	.word	0x080031d8
  ldr r2, =_sbss
 80019bc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80019c0:	20000240 	.word	0x20000240

080019c4 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019c4:	e7fe      	b.n	80019c4 <BusFault_Handler>
	...

080019c8 <srand>:
 80019c8:	b538      	push	{r3, r4, r5, lr}
 80019ca:	4b10      	ldr	r3, [pc, #64]	@ (8001a0c <srand+0x44>)
 80019cc:	681d      	ldr	r5, [r3, #0]
 80019ce:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80019d0:	4604      	mov	r4, r0
 80019d2:	b9b3      	cbnz	r3, 8001a02 <srand+0x3a>
 80019d4:	2018      	movs	r0, #24
 80019d6:	f000 fa89 	bl	8001eec <malloc>
 80019da:	4602      	mov	r2, r0
 80019dc:	6328      	str	r0, [r5, #48]	@ 0x30
 80019de:	b920      	cbnz	r0, 80019ea <srand+0x22>
 80019e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <srand+0x48>)
 80019e2:	480c      	ldr	r0, [pc, #48]	@ (8001a14 <srand+0x4c>)
 80019e4:	2146      	movs	r1, #70	@ 0x46
 80019e6:	f000 fa19 	bl	8001e1c <__assert_func>
 80019ea:	490b      	ldr	r1, [pc, #44]	@ (8001a18 <srand+0x50>)
 80019ec:	4b0b      	ldr	r3, [pc, #44]	@ (8001a1c <srand+0x54>)
 80019ee:	e9c0 1300 	strd	r1, r3, [r0]
 80019f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a20 <srand+0x58>)
 80019f4:	6083      	str	r3, [r0, #8]
 80019f6:	230b      	movs	r3, #11
 80019f8:	8183      	strh	r3, [r0, #12]
 80019fa:	2100      	movs	r1, #0
 80019fc:	2001      	movs	r0, #1
 80019fe:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001a02:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001a04:	2200      	movs	r2, #0
 8001a06:	611c      	str	r4, [r3, #16]
 8001a08:	615a      	str	r2, [r3, #20]
 8001a0a:	bd38      	pop	{r3, r4, r5, pc}
 8001a0c:	20000014 	.word	0x20000014
 8001a10:	080030ea 	.word	0x080030ea
 8001a14:	08003101 	.word	0x08003101
 8001a18:	abcd330e 	.word	0xabcd330e
 8001a1c:	e66d1234 	.word	0xe66d1234
 8001a20:	0005deec 	.word	0x0005deec

08001a24 <rand>:
 8001a24:	4b16      	ldr	r3, [pc, #88]	@ (8001a80 <rand+0x5c>)
 8001a26:	b510      	push	{r4, lr}
 8001a28:	681c      	ldr	r4, [r3, #0]
 8001a2a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001a2c:	b9b3      	cbnz	r3, 8001a5c <rand+0x38>
 8001a2e:	2018      	movs	r0, #24
 8001a30:	f000 fa5c 	bl	8001eec <malloc>
 8001a34:	4602      	mov	r2, r0
 8001a36:	6320      	str	r0, [r4, #48]	@ 0x30
 8001a38:	b920      	cbnz	r0, 8001a44 <rand+0x20>
 8001a3a:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <rand+0x60>)
 8001a3c:	4812      	ldr	r0, [pc, #72]	@ (8001a88 <rand+0x64>)
 8001a3e:	2152      	movs	r1, #82	@ 0x52
 8001a40:	f000 f9ec 	bl	8001e1c <__assert_func>
 8001a44:	4911      	ldr	r1, [pc, #68]	@ (8001a8c <rand+0x68>)
 8001a46:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <rand+0x6c>)
 8001a48:	e9c0 1300 	strd	r1, r3, [r0]
 8001a4c:	4b11      	ldr	r3, [pc, #68]	@ (8001a94 <rand+0x70>)
 8001a4e:	6083      	str	r3, [r0, #8]
 8001a50:	230b      	movs	r3, #11
 8001a52:	8183      	strh	r3, [r0, #12]
 8001a54:	2100      	movs	r1, #0
 8001a56:	2001      	movs	r0, #1
 8001a58:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001a5c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001a5e:	480e      	ldr	r0, [pc, #56]	@ (8001a98 <rand+0x74>)
 8001a60:	690b      	ldr	r3, [r1, #16]
 8001a62:	694c      	ldr	r4, [r1, #20]
 8001a64:	4a0d      	ldr	r2, [pc, #52]	@ (8001a9c <rand+0x78>)
 8001a66:	4358      	muls	r0, r3
 8001a68:	fb02 0004 	mla	r0, r2, r4, r0
 8001a6c:	fba3 3202 	umull	r3, r2, r3, r2
 8001a70:	3301      	adds	r3, #1
 8001a72:	eb40 0002 	adc.w	r0, r0, r2
 8001a76:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8001a7a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001a7e:	bd10      	pop	{r4, pc}
 8001a80:	20000014 	.word	0x20000014
 8001a84:	080030ea 	.word	0x080030ea
 8001a88:	08003101 	.word	0x08003101
 8001a8c:	abcd330e 	.word	0xabcd330e
 8001a90:	e66d1234 	.word	0xe66d1234
 8001a94:	0005deec 	.word	0x0005deec
 8001a98:	5851f42d 	.word	0x5851f42d
 8001a9c:	4c957f2d 	.word	0x4c957f2d

08001aa0 <std>:
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	b510      	push	{r4, lr}
 8001aa4:	4604      	mov	r4, r0
 8001aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8001aaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001aae:	6083      	str	r3, [r0, #8]
 8001ab0:	8181      	strh	r1, [r0, #12]
 8001ab2:	6643      	str	r3, [r0, #100]	@ 0x64
 8001ab4:	81c2      	strh	r2, [r0, #14]
 8001ab6:	6183      	str	r3, [r0, #24]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	2208      	movs	r2, #8
 8001abc:	305c      	adds	r0, #92	@ 0x5c
 8001abe:	f000 f931 	bl	8001d24 <memset>
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8001af8 <std+0x58>)
 8001ac4:	6263      	str	r3, [r4, #36]	@ 0x24
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8001afc <std+0x5c>)
 8001ac8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001aca:	4b0d      	ldr	r3, [pc, #52]	@ (8001b00 <std+0x60>)
 8001acc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001ace:	4b0d      	ldr	r3, [pc, #52]	@ (8001b04 <std+0x64>)
 8001ad0:	6323      	str	r3, [r4, #48]	@ 0x30
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8001b08 <std+0x68>)
 8001ad4:	6224      	str	r4, [r4, #32]
 8001ad6:	429c      	cmp	r4, r3
 8001ad8:	d006      	beq.n	8001ae8 <std+0x48>
 8001ada:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001ade:	4294      	cmp	r4, r2
 8001ae0:	d002      	beq.n	8001ae8 <std+0x48>
 8001ae2:	33d0      	adds	r3, #208	@ 0xd0
 8001ae4:	429c      	cmp	r4, r3
 8001ae6:	d105      	bne.n	8001af4 <std+0x54>
 8001ae8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001af0:	f000 b990 	b.w	8001e14 <__retarget_lock_init_recursive>
 8001af4:	bd10      	pop	{r4, pc}
 8001af6:	bf00      	nop
 8001af8:	08001c25 	.word	0x08001c25
 8001afc:	08001c47 	.word	0x08001c47
 8001b00:	08001c7f 	.word	0x08001c7f
 8001b04:	08001ca3 	.word	0x08001ca3
 8001b08:	200000f4 	.word	0x200000f4

08001b0c <stdio_exit_handler>:
 8001b0c:	4a02      	ldr	r2, [pc, #8]	@ (8001b18 <stdio_exit_handler+0xc>)
 8001b0e:	4903      	ldr	r1, [pc, #12]	@ (8001b1c <stdio_exit_handler+0x10>)
 8001b10:	4803      	ldr	r0, [pc, #12]	@ (8001b20 <stdio_exit_handler+0x14>)
 8001b12:	f000 b869 	b.w	8001be8 <_fwalk_sglue>
 8001b16:	bf00      	nop
 8001b18:	20000008 	.word	0x20000008
 8001b1c:	08002729 	.word	0x08002729
 8001b20:	20000018 	.word	0x20000018

08001b24 <cleanup_stdio>:
 8001b24:	6841      	ldr	r1, [r0, #4]
 8001b26:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <cleanup_stdio+0x34>)
 8001b28:	4299      	cmp	r1, r3
 8001b2a:	b510      	push	{r4, lr}
 8001b2c:	4604      	mov	r4, r0
 8001b2e:	d001      	beq.n	8001b34 <cleanup_stdio+0x10>
 8001b30:	f000 fdfa 	bl	8002728 <_fflush_r>
 8001b34:	68a1      	ldr	r1, [r4, #8]
 8001b36:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <cleanup_stdio+0x38>)
 8001b38:	4299      	cmp	r1, r3
 8001b3a:	d002      	beq.n	8001b42 <cleanup_stdio+0x1e>
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f000 fdf3 	bl	8002728 <_fflush_r>
 8001b42:	68e1      	ldr	r1, [r4, #12]
 8001b44:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <cleanup_stdio+0x3c>)
 8001b46:	4299      	cmp	r1, r3
 8001b48:	d004      	beq.n	8001b54 <cleanup_stdio+0x30>
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b50:	f000 bdea 	b.w	8002728 <_fflush_r>
 8001b54:	bd10      	pop	{r4, pc}
 8001b56:	bf00      	nop
 8001b58:	200000f4 	.word	0x200000f4
 8001b5c:	2000015c 	.word	0x2000015c
 8001b60:	200001c4 	.word	0x200001c4

08001b64 <global_stdio_init.part.0>:
 8001b64:	b510      	push	{r4, lr}
 8001b66:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <global_stdio_init.part.0+0x30>)
 8001b68:	4c0b      	ldr	r4, [pc, #44]	@ (8001b98 <global_stdio_init.part.0+0x34>)
 8001b6a:	4a0c      	ldr	r2, [pc, #48]	@ (8001b9c <global_stdio_init.part.0+0x38>)
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	4620      	mov	r0, r4
 8001b70:	2200      	movs	r2, #0
 8001b72:	2104      	movs	r1, #4
 8001b74:	f7ff ff94 	bl	8001aa0 <std>
 8001b78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	2109      	movs	r1, #9
 8001b80:	f7ff ff8e 	bl	8001aa0 <std>
 8001b84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001b88:	2202      	movs	r2, #2
 8001b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b8e:	2112      	movs	r1, #18
 8001b90:	f7ff bf86 	b.w	8001aa0 <std>
 8001b94:	2000022c 	.word	0x2000022c
 8001b98:	200000f4 	.word	0x200000f4
 8001b9c:	08001b0d 	.word	0x08001b0d

08001ba0 <__sfp_lock_acquire>:
 8001ba0:	4801      	ldr	r0, [pc, #4]	@ (8001ba8 <__sfp_lock_acquire+0x8>)
 8001ba2:	f000 b938 	b.w	8001e16 <__retarget_lock_acquire_recursive>
 8001ba6:	bf00      	nop
 8001ba8:	20000235 	.word	0x20000235

08001bac <__sfp_lock_release>:
 8001bac:	4801      	ldr	r0, [pc, #4]	@ (8001bb4 <__sfp_lock_release+0x8>)
 8001bae:	f000 b933 	b.w	8001e18 <__retarget_lock_release_recursive>
 8001bb2:	bf00      	nop
 8001bb4:	20000235 	.word	0x20000235

08001bb8 <__sinit>:
 8001bb8:	b510      	push	{r4, lr}
 8001bba:	4604      	mov	r4, r0
 8001bbc:	f7ff fff0 	bl	8001ba0 <__sfp_lock_acquire>
 8001bc0:	6a23      	ldr	r3, [r4, #32]
 8001bc2:	b11b      	cbz	r3, 8001bcc <__sinit+0x14>
 8001bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bc8:	f7ff bff0 	b.w	8001bac <__sfp_lock_release>
 8001bcc:	4b04      	ldr	r3, [pc, #16]	@ (8001be0 <__sinit+0x28>)
 8001bce:	6223      	str	r3, [r4, #32]
 8001bd0:	4b04      	ldr	r3, [pc, #16]	@ (8001be4 <__sinit+0x2c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1f5      	bne.n	8001bc4 <__sinit+0xc>
 8001bd8:	f7ff ffc4 	bl	8001b64 <global_stdio_init.part.0>
 8001bdc:	e7f2      	b.n	8001bc4 <__sinit+0xc>
 8001bde:	bf00      	nop
 8001be0:	08001b25 	.word	0x08001b25
 8001be4:	2000022c 	.word	0x2000022c

08001be8 <_fwalk_sglue>:
 8001be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bec:	4607      	mov	r7, r0
 8001bee:	4688      	mov	r8, r1
 8001bf0:	4614      	mov	r4, r2
 8001bf2:	2600      	movs	r6, #0
 8001bf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001bf8:	f1b9 0901 	subs.w	r9, r9, #1
 8001bfc:	d505      	bpl.n	8001c0a <_fwalk_sglue+0x22>
 8001bfe:	6824      	ldr	r4, [r4, #0]
 8001c00:	2c00      	cmp	r4, #0
 8001c02:	d1f7      	bne.n	8001bf4 <_fwalk_sglue+0xc>
 8001c04:	4630      	mov	r0, r6
 8001c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c0a:	89ab      	ldrh	r3, [r5, #12]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d907      	bls.n	8001c20 <_fwalk_sglue+0x38>
 8001c10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001c14:	3301      	adds	r3, #1
 8001c16:	d003      	beq.n	8001c20 <_fwalk_sglue+0x38>
 8001c18:	4629      	mov	r1, r5
 8001c1a:	4638      	mov	r0, r7
 8001c1c:	47c0      	blx	r8
 8001c1e:	4306      	orrs	r6, r0
 8001c20:	3568      	adds	r5, #104	@ 0x68
 8001c22:	e7e9      	b.n	8001bf8 <_fwalk_sglue+0x10>

08001c24 <__sread>:
 8001c24:	b510      	push	{r4, lr}
 8001c26:	460c      	mov	r4, r1
 8001c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c2c:	f000 f8a4 	bl	8001d78 <_read_r>
 8001c30:	2800      	cmp	r0, #0
 8001c32:	bfab      	itete	ge
 8001c34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001c36:	89a3      	ldrhlt	r3, [r4, #12]
 8001c38:	181b      	addge	r3, r3, r0
 8001c3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001c3e:	bfac      	ite	ge
 8001c40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001c42:	81a3      	strhlt	r3, [r4, #12]
 8001c44:	bd10      	pop	{r4, pc}

08001c46 <__swrite>:
 8001c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c4a:	461f      	mov	r7, r3
 8001c4c:	898b      	ldrh	r3, [r1, #12]
 8001c4e:	05db      	lsls	r3, r3, #23
 8001c50:	4605      	mov	r5, r0
 8001c52:	460c      	mov	r4, r1
 8001c54:	4616      	mov	r6, r2
 8001c56:	d505      	bpl.n	8001c64 <__swrite+0x1e>
 8001c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f000 f878 	bl	8001d54 <_lseek_r>
 8001c64:	89a3      	ldrh	r3, [r4, #12]
 8001c66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c6e:	81a3      	strh	r3, [r4, #12]
 8001c70:	4632      	mov	r2, r6
 8001c72:	463b      	mov	r3, r7
 8001c74:	4628      	mov	r0, r5
 8001c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c7a:	f000 b88f 	b.w	8001d9c <_write_r>

08001c7e <__sseek>:
 8001c7e:	b510      	push	{r4, lr}
 8001c80:	460c      	mov	r4, r1
 8001c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c86:	f000 f865 	bl	8001d54 <_lseek_r>
 8001c8a:	1c43      	adds	r3, r0, #1
 8001c8c:	89a3      	ldrh	r3, [r4, #12]
 8001c8e:	bf15      	itete	ne
 8001c90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001c92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001c96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001c9a:	81a3      	strheq	r3, [r4, #12]
 8001c9c:	bf18      	it	ne
 8001c9e:	81a3      	strhne	r3, [r4, #12]
 8001ca0:	bd10      	pop	{r4, pc}

08001ca2 <__sclose>:
 8001ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ca6:	f000 b845 	b.w	8001d34 <_close_r>

08001caa <_vsniprintf_r>:
 8001caa:	b530      	push	{r4, r5, lr}
 8001cac:	4614      	mov	r4, r2
 8001cae:	2c00      	cmp	r4, #0
 8001cb0:	b09b      	sub	sp, #108	@ 0x6c
 8001cb2:	4605      	mov	r5, r0
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	da05      	bge.n	8001cc4 <_vsniprintf_r+0x1a>
 8001cb8:	238b      	movs	r3, #139	@ 0x8b
 8001cba:	6003      	str	r3, [r0, #0]
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc0:	b01b      	add	sp, #108	@ 0x6c
 8001cc2:	bd30      	pop	{r4, r5, pc}
 8001cc4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8001cc8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8001ccc:	f04f 0300 	mov.w	r3, #0
 8001cd0:	9319      	str	r3, [sp, #100]	@ 0x64
 8001cd2:	bf14      	ite	ne
 8001cd4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001cd8:	4623      	moveq	r3, r4
 8001cda:	9302      	str	r3, [sp, #8]
 8001cdc:	9305      	str	r3, [sp, #20]
 8001cde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ce2:	9100      	str	r1, [sp, #0]
 8001ce4:	9104      	str	r1, [sp, #16]
 8001ce6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8001cea:	4669      	mov	r1, sp
 8001cec:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8001cee:	f000 fa0f 	bl	8002110 <_svfiprintf_r>
 8001cf2:	1c43      	adds	r3, r0, #1
 8001cf4:	bfbc      	itt	lt
 8001cf6:	238b      	movlt	r3, #139	@ 0x8b
 8001cf8:	602b      	strlt	r3, [r5, #0]
 8001cfa:	2c00      	cmp	r4, #0
 8001cfc:	d0e0      	beq.n	8001cc0 <_vsniprintf_r+0x16>
 8001cfe:	9b00      	ldr	r3, [sp, #0]
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	e7dc      	b.n	8001cc0 <_vsniprintf_r+0x16>
	...

08001d08 <vsniprintf>:
 8001d08:	b507      	push	{r0, r1, r2, lr}
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	460a      	mov	r2, r1
 8001d10:	4601      	mov	r1, r0
 8001d12:	4803      	ldr	r0, [pc, #12]	@ (8001d20 <vsniprintf+0x18>)
 8001d14:	6800      	ldr	r0, [r0, #0]
 8001d16:	f7ff ffc8 	bl	8001caa <_vsniprintf_r>
 8001d1a:	b003      	add	sp, #12
 8001d1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d20:	20000014 	.word	0x20000014

08001d24 <memset>:
 8001d24:	4402      	add	r2, r0
 8001d26:	4603      	mov	r3, r0
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d100      	bne.n	8001d2e <memset+0xa>
 8001d2c:	4770      	bx	lr
 8001d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8001d32:	e7f9      	b.n	8001d28 <memset+0x4>

08001d34 <_close_r>:
 8001d34:	b538      	push	{r3, r4, r5, lr}
 8001d36:	4d06      	ldr	r5, [pc, #24]	@ (8001d50 <_close_r+0x1c>)
 8001d38:	2300      	movs	r3, #0
 8001d3a:	4604      	mov	r4, r0
 8001d3c:	4608      	mov	r0, r1
 8001d3e:	602b      	str	r3, [r5, #0]
 8001d40:	f7ff fd3c 	bl	80017bc <_close>
 8001d44:	1c43      	adds	r3, r0, #1
 8001d46:	d102      	bne.n	8001d4e <_close_r+0x1a>
 8001d48:	682b      	ldr	r3, [r5, #0]
 8001d4a:	b103      	cbz	r3, 8001d4e <_close_r+0x1a>
 8001d4c:	6023      	str	r3, [r4, #0]
 8001d4e:	bd38      	pop	{r3, r4, r5, pc}
 8001d50:	20000230 	.word	0x20000230

08001d54 <_lseek_r>:
 8001d54:	b538      	push	{r3, r4, r5, lr}
 8001d56:	4d07      	ldr	r5, [pc, #28]	@ (8001d74 <_lseek_r+0x20>)
 8001d58:	4604      	mov	r4, r0
 8001d5a:	4608      	mov	r0, r1
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	2200      	movs	r2, #0
 8001d60:	602a      	str	r2, [r5, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	f7ff fd51 	bl	800180a <_lseek>
 8001d68:	1c43      	adds	r3, r0, #1
 8001d6a:	d102      	bne.n	8001d72 <_lseek_r+0x1e>
 8001d6c:	682b      	ldr	r3, [r5, #0]
 8001d6e:	b103      	cbz	r3, 8001d72 <_lseek_r+0x1e>
 8001d70:	6023      	str	r3, [r4, #0]
 8001d72:	bd38      	pop	{r3, r4, r5, pc}
 8001d74:	20000230 	.word	0x20000230

08001d78 <_read_r>:
 8001d78:	b538      	push	{r3, r4, r5, lr}
 8001d7a:	4d07      	ldr	r5, [pc, #28]	@ (8001d98 <_read_r+0x20>)
 8001d7c:	4604      	mov	r4, r0
 8001d7e:	4608      	mov	r0, r1
 8001d80:	4611      	mov	r1, r2
 8001d82:	2200      	movs	r2, #0
 8001d84:	602a      	str	r2, [r5, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	f7ff fcdf 	bl	800174a <_read>
 8001d8c:	1c43      	adds	r3, r0, #1
 8001d8e:	d102      	bne.n	8001d96 <_read_r+0x1e>
 8001d90:	682b      	ldr	r3, [r5, #0]
 8001d92:	b103      	cbz	r3, 8001d96 <_read_r+0x1e>
 8001d94:	6023      	str	r3, [r4, #0]
 8001d96:	bd38      	pop	{r3, r4, r5, pc}
 8001d98:	20000230 	.word	0x20000230

08001d9c <_write_r>:
 8001d9c:	b538      	push	{r3, r4, r5, lr}
 8001d9e:	4d07      	ldr	r5, [pc, #28]	@ (8001dbc <_write_r+0x20>)
 8001da0:	4604      	mov	r4, r0
 8001da2:	4608      	mov	r0, r1
 8001da4:	4611      	mov	r1, r2
 8001da6:	2200      	movs	r2, #0
 8001da8:	602a      	str	r2, [r5, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	f7ff fcea 	bl	8001784 <_write>
 8001db0:	1c43      	adds	r3, r0, #1
 8001db2:	d102      	bne.n	8001dba <_write_r+0x1e>
 8001db4:	682b      	ldr	r3, [r5, #0]
 8001db6:	b103      	cbz	r3, 8001dba <_write_r+0x1e>
 8001db8:	6023      	str	r3, [r4, #0]
 8001dba:	bd38      	pop	{r3, r4, r5, pc}
 8001dbc:	20000230 	.word	0x20000230

08001dc0 <__errno>:
 8001dc0:	4b01      	ldr	r3, [pc, #4]	@ (8001dc8 <__errno+0x8>)
 8001dc2:	6818      	ldr	r0, [r3, #0]
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000014 	.word	0x20000014

08001dcc <__libc_init_array>:
 8001dcc:	b570      	push	{r4, r5, r6, lr}
 8001dce:	4d0d      	ldr	r5, [pc, #52]	@ (8001e04 <__libc_init_array+0x38>)
 8001dd0:	4c0d      	ldr	r4, [pc, #52]	@ (8001e08 <__libc_init_array+0x3c>)
 8001dd2:	1b64      	subs	r4, r4, r5
 8001dd4:	10a4      	asrs	r4, r4, #2
 8001dd6:	2600      	movs	r6, #0
 8001dd8:	42a6      	cmp	r6, r4
 8001dda:	d109      	bne.n	8001df0 <__libc_init_array+0x24>
 8001ddc:	4d0b      	ldr	r5, [pc, #44]	@ (8001e0c <__libc_init_array+0x40>)
 8001dde:	4c0c      	ldr	r4, [pc, #48]	@ (8001e10 <__libc_init_array+0x44>)
 8001de0:	f000 ffee 	bl	8002dc0 <_init>
 8001de4:	1b64      	subs	r4, r4, r5
 8001de6:	10a4      	asrs	r4, r4, #2
 8001de8:	2600      	movs	r6, #0
 8001dea:	42a6      	cmp	r6, r4
 8001dec:	d105      	bne.n	8001dfa <__libc_init_array+0x2e>
 8001dee:	bd70      	pop	{r4, r5, r6, pc}
 8001df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001df4:	4798      	blx	r3
 8001df6:	3601      	adds	r6, #1
 8001df8:	e7ee      	b.n	8001dd8 <__libc_init_array+0xc>
 8001dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dfe:	4798      	blx	r3
 8001e00:	3601      	adds	r6, #1
 8001e02:	e7f2      	b.n	8001dea <__libc_init_array+0x1e>
 8001e04:	080031d0 	.word	0x080031d0
 8001e08:	080031d0 	.word	0x080031d0
 8001e0c:	080031d0 	.word	0x080031d0
 8001e10:	080031d4 	.word	0x080031d4

08001e14 <__retarget_lock_init_recursive>:
 8001e14:	4770      	bx	lr

08001e16 <__retarget_lock_acquire_recursive>:
 8001e16:	4770      	bx	lr

08001e18 <__retarget_lock_release_recursive>:
 8001e18:	4770      	bx	lr
	...

08001e1c <__assert_func>:
 8001e1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001e1e:	4614      	mov	r4, r2
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b09      	ldr	r3, [pc, #36]	@ (8001e48 <__assert_func+0x2c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4605      	mov	r5, r0
 8001e28:	68d8      	ldr	r0, [r3, #12]
 8001e2a:	b14c      	cbz	r4, 8001e40 <__assert_func+0x24>
 8001e2c:	4b07      	ldr	r3, [pc, #28]	@ (8001e4c <__assert_func+0x30>)
 8001e2e:	9100      	str	r1, [sp, #0]
 8001e30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001e34:	4906      	ldr	r1, [pc, #24]	@ (8001e50 <__assert_func+0x34>)
 8001e36:	462b      	mov	r3, r5
 8001e38:	f000 fc9e 	bl	8002778 <fiprintf>
 8001e3c:	f000 fce6 	bl	800280c <abort>
 8001e40:	4b04      	ldr	r3, [pc, #16]	@ (8001e54 <__assert_func+0x38>)
 8001e42:	461c      	mov	r4, r3
 8001e44:	e7f3      	b.n	8001e2e <__assert_func+0x12>
 8001e46:	bf00      	nop
 8001e48:	20000014 	.word	0x20000014
 8001e4c:	08003159 	.word	0x08003159
 8001e50:	08003166 	.word	0x08003166
 8001e54:	08003194 	.word	0x08003194

08001e58 <_free_r>:
 8001e58:	b538      	push	{r3, r4, r5, lr}
 8001e5a:	4605      	mov	r5, r0
 8001e5c:	2900      	cmp	r1, #0
 8001e5e:	d041      	beq.n	8001ee4 <_free_r+0x8c>
 8001e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e64:	1f0c      	subs	r4, r1, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	bfb8      	it	lt
 8001e6a:	18e4      	addlt	r4, r4, r3
 8001e6c:	f000 f8e8 	bl	8002040 <__malloc_lock>
 8001e70:	4a1d      	ldr	r2, [pc, #116]	@ (8001ee8 <_free_r+0x90>)
 8001e72:	6813      	ldr	r3, [r2, #0]
 8001e74:	b933      	cbnz	r3, 8001e84 <_free_r+0x2c>
 8001e76:	6063      	str	r3, [r4, #4]
 8001e78:	6014      	str	r4, [r2, #0]
 8001e7a:	4628      	mov	r0, r5
 8001e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e80:	f000 b8e4 	b.w	800204c <__malloc_unlock>
 8001e84:	42a3      	cmp	r3, r4
 8001e86:	d908      	bls.n	8001e9a <_free_r+0x42>
 8001e88:	6820      	ldr	r0, [r4, #0]
 8001e8a:	1821      	adds	r1, r4, r0
 8001e8c:	428b      	cmp	r3, r1
 8001e8e:	bf01      	itttt	eq
 8001e90:	6819      	ldreq	r1, [r3, #0]
 8001e92:	685b      	ldreq	r3, [r3, #4]
 8001e94:	1809      	addeq	r1, r1, r0
 8001e96:	6021      	streq	r1, [r4, #0]
 8001e98:	e7ed      	b.n	8001e76 <_free_r+0x1e>
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	b10b      	cbz	r3, 8001ea4 <_free_r+0x4c>
 8001ea0:	42a3      	cmp	r3, r4
 8001ea2:	d9fa      	bls.n	8001e9a <_free_r+0x42>
 8001ea4:	6811      	ldr	r1, [r2, #0]
 8001ea6:	1850      	adds	r0, r2, r1
 8001ea8:	42a0      	cmp	r0, r4
 8001eaa:	d10b      	bne.n	8001ec4 <_free_r+0x6c>
 8001eac:	6820      	ldr	r0, [r4, #0]
 8001eae:	4401      	add	r1, r0
 8001eb0:	1850      	adds	r0, r2, r1
 8001eb2:	4283      	cmp	r3, r0
 8001eb4:	6011      	str	r1, [r2, #0]
 8001eb6:	d1e0      	bne.n	8001e7a <_free_r+0x22>
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	6053      	str	r3, [r2, #4]
 8001ebe:	4408      	add	r0, r1
 8001ec0:	6010      	str	r0, [r2, #0]
 8001ec2:	e7da      	b.n	8001e7a <_free_r+0x22>
 8001ec4:	d902      	bls.n	8001ecc <_free_r+0x74>
 8001ec6:	230c      	movs	r3, #12
 8001ec8:	602b      	str	r3, [r5, #0]
 8001eca:	e7d6      	b.n	8001e7a <_free_r+0x22>
 8001ecc:	6820      	ldr	r0, [r4, #0]
 8001ece:	1821      	adds	r1, r4, r0
 8001ed0:	428b      	cmp	r3, r1
 8001ed2:	bf04      	itt	eq
 8001ed4:	6819      	ldreq	r1, [r3, #0]
 8001ed6:	685b      	ldreq	r3, [r3, #4]
 8001ed8:	6063      	str	r3, [r4, #4]
 8001eda:	bf04      	itt	eq
 8001edc:	1809      	addeq	r1, r1, r0
 8001ede:	6021      	streq	r1, [r4, #0]
 8001ee0:	6054      	str	r4, [r2, #4]
 8001ee2:	e7ca      	b.n	8001e7a <_free_r+0x22>
 8001ee4:	bd38      	pop	{r3, r4, r5, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000023c 	.word	0x2000023c

08001eec <malloc>:
 8001eec:	4b02      	ldr	r3, [pc, #8]	@ (8001ef8 <malloc+0xc>)
 8001eee:	4601      	mov	r1, r0
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	f000 b825 	b.w	8001f40 <_malloc_r>
 8001ef6:	bf00      	nop
 8001ef8:	20000014 	.word	0x20000014

08001efc <sbrk_aligned>:
 8001efc:	b570      	push	{r4, r5, r6, lr}
 8001efe:	4e0f      	ldr	r6, [pc, #60]	@ (8001f3c <sbrk_aligned+0x40>)
 8001f00:	460c      	mov	r4, r1
 8001f02:	6831      	ldr	r1, [r6, #0]
 8001f04:	4605      	mov	r5, r0
 8001f06:	b911      	cbnz	r1, 8001f0e <sbrk_aligned+0x12>
 8001f08:	f000 fc62 	bl	80027d0 <_sbrk_r>
 8001f0c:	6030      	str	r0, [r6, #0]
 8001f0e:	4621      	mov	r1, r4
 8001f10:	4628      	mov	r0, r5
 8001f12:	f000 fc5d 	bl	80027d0 <_sbrk_r>
 8001f16:	1c43      	adds	r3, r0, #1
 8001f18:	d103      	bne.n	8001f22 <sbrk_aligned+0x26>
 8001f1a:	f04f 34ff 	mov.w	r4, #4294967295
 8001f1e:	4620      	mov	r0, r4
 8001f20:	bd70      	pop	{r4, r5, r6, pc}
 8001f22:	1cc4      	adds	r4, r0, #3
 8001f24:	f024 0403 	bic.w	r4, r4, #3
 8001f28:	42a0      	cmp	r0, r4
 8001f2a:	d0f8      	beq.n	8001f1e <sbrk_aligned+0x22>
 8001f2c:	1a21      	subs	r1, r4, r0
 8001f2e:	4628      	mov	r0, r5
 8001f30:	f000 fc4e 	bl	80027d0 <_sbrk_r>
 8001f34:	3001      	adds	r0, #1
 8001f36:	d1f2      	bne.n	8001f1e <sbrk_aligned+0x22>
 8001f38:	e7ef      	b.n	8001f1a <sbrk_aligned+0x1e>
 8001f3a:	bf00      	nop
 8001f3c:	20000238 	.word	0x20000238

08001f40 <_malloc_r>:
 8001f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f44:	1ccd      	adds	r5, r1, #3
 8001f46:	f025 0503 	bic.w	r5, r5, #3
 8001f4a:	3508      	adds	r5, #8
 8001f4c:	2d0c      	cmp	r5, #12
 8001f4e:	bf38      	it	cc
 8001f50:	250c      	movcc	r5, #12
 8001f52:	2d00      	cmp	r5, #0
 8001f54:	4606      	mov	r6, r0
 8001f56:	db01      	blt.n	8001f5c <_malloc_r+0x1c>
 8001f58:	42a9      	cmp	r1, r5
 8001f5a:	d904      	bls.n	8001f66 <_malloc_r+0x26>
 8001f5c:	230c      	movs	r3, #12
 8001f5e:	6033      	str	r3, [r6, #0]
 8001f60:	2000      	movs	r0, #0
 8001f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800203c <_malloc_r+0xfc>
 8001f6a:	f000 f869 	bl	8002040 <__malloc_lock>
 8001f6e:	f8d8 3000 	ldr.w	r3, [r8]
 8001f72:	461c      	mov	r4, r3
 8001f74:	bb44      	cbnz	r4, 8001fc8 <_malloc_r+0x88>
 8001f76:	4629      	mov	r1, r5
 8001f78:	4630      	mov	r0, r6
 8001f7a:	f7ff ffbf 	bl	8001efc <sbrk_aligned>
 8001f7e:	1c43      	adds	r3, r0, #1
 8001f80:	4604      	mov	r4, r0
 8001f82:	d158      	bne.n	8002036 <_malloc_r+0xf6>
 8001f84:	f8d8 4000 	ldr.w	r4, [r8]
 8001f88:	4627      	mov	r7, r4
 8001f8a:	2f00      	cmp	r7, #0
 8001f8c:	d143      	bne.n	8002016 <_malloc_r+0xd6>
 8001f8e:	2c00      	cmp	r4, #0
 8001f90:	d04b      	beq.n	800202a <_malloc_r+0xea>
 8001f92:	6823      	ldr	r3, [r4, #0]
 8001f94:	4639      	mov	r1, r7
 8001f96:	4630      	mov	r0, r6
 8001f98:	eb04 0903 	add.w	r9, r4, r3
 8001f9c:	f000 fc18 	bl	80027d0 <_sbrk_r>
 8001fa0:	4581      	cmp	r9, r0
 8001fa2:	d142      	bne.n	800202a <_malloc_r+0xea>
 8001fa4:	6821      	ldr	r1, [r4, #0]
 8001fa6:	1a6d      	subs	r5, r5, r1
 8001fa8:	4629      	mov	r1, r5
 8001faa:	4630      	mov	r0, r6
 8001fac:	f7ff ffa6 	bl	8001efc <sbrk_aligned>
 8001fb0:	3001      	adds	r0, #1
 8001fb2:	d03a      	beq.n	800202a <_malloc_r+0xea>
 8001fb4:	6823      	ldr	r3, [r4, #0]
 8001fb6:	442b      	add	r3, r5
 8001fb8:	6023      	str	r3, [r4, #0]
 8001fba:	f8d8 3000 	ldr.w	r3, [r8]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	bb62      	cbnz	r2, 800201c <_malloc_r+0xdc>
 8001fc2:	f8c8 7000 	str.w	r7, [r8]
 8001fc6:	e00f      	b.n	8001fe8 <_malloc_r+0xa8>
 8001fc8:	6822      	ldr	r2, [r4, #0]
 8001fca:	1b52      	subs	r2, r2, r5
 8001fcc:	d420      	bmi.n	8002010 <_malloc_r+0xd0>
 8001fce:	2a0b      	cmp	r2, #11
 8001fd0:	d917      	bls.n	8002002 <_malloc_r+0xc2>
 8001fd2:	1961      	adds	r1, r4, r5
 8001fd4:	42a3      	cmp	r3, r4
 8001fd6:	6025      	str	r5, [r4, #0]
 8001fd8:	bf18      	it	ne
 8001fda:	6059      	strne	r1, [r3, #4]
 8001fdc:	6863      	ldr	r3, [r4, #4]
 8001fde:	bf08      	it	eq
 8001fe0:	f8c8 1000 	streq.w	r1, [r8]
 8001fe4:	5162      	str	r2, [r4, r5]
 8001fe6:	604b      	str	r3, [r1, #4]
 8001fe8:	4630      	mov	r0, r6
 8001fea:	f000 f82f 	bl	800204c <__malloc_unlock>
 8001fee:	f104 000b 	add.w	r0, r4, #11
 8001ff2:	1d23      	adds	r3, r4, #4
 8001ff4:	f020 0007 	bic.w	r0, r0, #7
 8001ff8:	1ac2      	subs	r2, r0, r3
 8001ffa:	bf1c      	itt	ne
 8001ffc:	1a1b      	subne	r3, r3, r0
 8001ffe:	50a3      	strne	r3, [r4, r2]
 8002000:	e7af      	b.n	8001f62 <_malloc_r+0x22>
 8002002:	6862      	ldr	r2, [r4, #4]
 8002004:	42a3      	cmp	r3, r4
 8002006:	bf0c      	ite	eq
 8002008:	f8c8 2000 	streq.w	r2, [r8]
 800200c:	605a      	strne	r2, [r3, #4]
 800200e:	e7eb      	b.n	8001fe8 <_malloc_r+0xa8>
 8002010:	4623      	mov	r3, r4
 8002012:	6864      	ldr	r4, [r4, #4]
 8002014:	e7ae      	b.n	8001f74 <_malloc_r+0x34>
 8002016:	463c      	mov	r4, r7
 8002018:	687f      	ldr	r7, [r7, #4]
 800201a:	e7b6      	b.n	8001f8a <_malloc_r+0x4a>
 800201c:	461a      	mov	r2, r3
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	42a3      	cmp	r3, r4
 8002022:	d1fb      	bne.n	800201c <_malloc_r+0xdc>
 8002024:	2300      	movs	r3, #0
 8002026:	6053      	str	r3, [r2, #4]
 8002028:	e7de      	b.n	8001fe8 <_malloc_r+0xa8>
 800202a:	230c      	movs	r3, #12
 800202c:	6033      	str	r3, [r6, #0]
 800202e:	4630      	mov	r0, r6
 8002030:	f000 f80c 	bl	800204c <__malloc_unlock>
 8002034:	e794      	b.n	8001f60 <_malloc_r+0x20>
 8002036:	6005      	str	r5, [r0, #0]
 8002038:	e7d6      	b.n	8001fe8 <_malloc_r+0xa8>
 800203a:	bf00      	nop
 800203c:	2000023c 	.word	0x2000023c

08002040 <__malloc_lock>:
 8002040:	4801      	ldr	r0, [pc, #4]	@ (8002048 <__malloc_lock+0x8>)
 8002042:	f7ff bee8 	b.w	8001e16 <__retarget_lock_acquire_recursive>
 8002046:	bf00      	nop
 8002048:	20000234 	.word	0x20000234

0800204c <__malloc_unlock>:
 800204c:	4801      	ldr	r0, [pc, #4]	@ (8002054 <__malloc_unlock+0x8>)
 800204e:	f7ff bee3 	b.w	8001e18 <__retarget_lock_release_recursive>
 8002052:	bf00      	nop
 8002054:	20000234 	.word	0x20000234

08002058 <__ssputs_r>:
 8002058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800205c:	688e      	ldr	r6, [r1, #8]
 800205e:	461f      	mov	r7, r3
 8002060:	42be      	cmp	r6, r7
 8002062:	680b      	ldr	r3, [r1, #0]
 8002064:	4682      	mov	sl, r0
 8002066:	460c      	mov	r4, r1
 8002068:	4690      	mov	r8, r2
 800206a:	d82d      	bhi.n	80020c8 <__ssputs_r+0x70>
 800206c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002070:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002074:	d026      	beq.n	80020c4 <__ssputs_r+0x6c>
 8002076:	6965      	ldr	r5, [r4, #20]
 8002078:	6909      	ldr	r1, [r1, #16]
 800207a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800207e:	eba3 0901 	sub.w	r9, r3, r1
 8002082:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002086:	1c7b      	adds	r3, r7, #1
 8002088:	444b      	add	r3, r9
 800208a:	106d      	asrs	r5, r5, #1
 800208c:	429d      	cmp	r5, r3
 800208e:	bf38      	it	cc
 8002090:	461d      	movcc	r5, r3
 8002092:	0553      	lsls	r3, r2, #21
 8002094:	d527      	bpl.n	80020e6 <__ssputs_r+0x8e>
 8002096:	4629      	mov	r1, r5
 8002098:	f7ff ff52 	bl	8001f40 <_malloc_r>
 800209c:	4606      	mov	r6, r0
 800209e:	b360      	cbz	r0, 80020fa <__ssputs_r+0xa2>
 80020a0:	6921      	ldr	r1, [r4, #16]
 80020a2:	464a      	mov	r2, r9
 80020a4:	f000 fba4 	bl	80027f0 <memcpy>
 80020a8:	89a3      	ldrh	r3, [r4, #12]
 80020aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80020ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020b2:	81a3      	strh	r3, [r4, #12]
 80020b4:	6126      	str	r6, [r4, #16]
 80020b6:	6165      	str	r5, [r4, #20]
 80020b8:	444e      	add	r6, r9
 80020ba:	eba5 0509 	sub.w	r5, r5, r9
 80020be:	6026      	str	r6, [r4, #0]
 80020c0:	60a5      	str	r5, [r4, #8]
 80020c2:	463e      	mov	r6, r7
 80020c4:	42be      	cmp	r6, r7
 80020c6:	d900      	bls.n	80020ca <__ssputs_r+0x72>
 80020c8:	463e      	mov	r6, r7
 80020ca:	6820      	ldr	r0, [r4, #0]
 80020cc:	4632      	mov	r2, r6
 80020ce:	4641      	mov	r1, r8
 80020d0:	f000 fb64 	bl	800279c <memmove>
 80020d4:	68a3      	ldr	r3, [r4, #8]
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	60a3      	str	r3, [r4, #8]
 80020da:	6823      	ldr	r3, [r4, #0]
 80020dc:	4433      	add	r3, r6
 80020de:	6023      	str	r3, [r4, #0]
 80020e0:	2000      	movs	r0, #0
 80020e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020e6:	462a      	mov	r2, r5
 80020e8:	f000 fb97 	bl	800281a <_realloc_r>
 80020ec:	4606      	mov	r6, r0
 80020ee:	2800      	cmp	r0, #0
 80020f0:	d1e0      	bne.n	80020b4 <__ssputs_r+0x5c>
 80020f2:	6921      	ldr	r1, [r4, #16]
 80020f4:	4650      	mov	r0, sl
 80020f6:	f7ff feaf 	bl	8001e58 <_free_r>
 80020fa:	230c      	movs	r3, #12
 80020fc:	f8ca 3000 	str.w	r3, [sl]
 8002100:	89a3      	ldrh	r3, [r4, #12]
 8002102:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002106:	81a3      	strh	r3, [r4, #12]
 8002108:	f04f 30ff 	mov.w	r0, #4294967295
 800210c:	e7e9      	b.n	80020e2 <__ssputs_r+0x8a>
	...

08002110 <_svfiprintf_r>:
 8002110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002114:	4698      	mov	r8, r3
 8002116:	898b      	ldrh	r3, [r1, #12]
 8002118:	061b      	lsls	r3, r3, #24
 800211a:	b09d      	sub	sp, #116	@ 0x74
 800211c:	4607      	mov	r7, r0
 800211e:	460d      	mov	r5, r1
 8002120:	4614      	mov	r4, r2
 8002122:	d510      	bpl.n	8002146 <_svfiprintf_r+0x36>
 8002124:	690b      	ldr	r3, [r1, #16]
 8002126:	b973      	cbnz	r3, 8002146 <_svfiprintf_r+0x36>
 8002128:	2140      	movs	r1, #64	@ 0x40
 800212a:	f7ff ff09 	bl	8001f40 <_malloc_r>
 800212e:	6028      	str	r0, [r5, #0]
 8002130:	6128      	str	r0, [r5, #16]
 8002132:	b930      	cbnz	r0, 8002142 <_svfiprintf_r+0x32>
 8002134:	230c      	movs	r3, #12
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	f04f 30ff 	mov.w	r0, #4294967295
 800213c:	b01d      	add	sp, #116	@ 0x74
 800213e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002142:	2340      	movs	r3, #64	@ 0x40
 8002144:	616b      	str	r3, [r5, #20]
 8002146:	2300      	movs	r3, #0
 8002148:	9309      	str	r3, [sp, #36]	@ 0x24
 800214a:	2320      	movs	r3, #32
 800214c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002150:	f8cd 800c 	str.w	r8, [sp, #12]
 8002154:	2330      	movs	r3, #48	@ 0x30
 8002156:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80022f4 <_svfiprintf_r+0x1e4>
 800215a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800215e:	f04f 0901 	mov.w	r9, #1
 8002162:	4623      	mov	r3, r4
 8002164:	469a      	mov	sl, r3
 8002166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800216a:	b10a      	cbz	r2, 8002170 <_svfiprintf_r+0x60>
 800216c:	2a25      	cmp	r2, #37	@ 0x25
 800216e:	d1f9      	bne.n	8002164 <_svfiprintf_r+0x54>
 8002170:	ebba 0b04 	subs.w	fp, sl, r4
 8002174:	d00b      	beq.n	800218e <_svfiprintf_r+0x7e>
 8002176:	465b      	mov	r3, fp
 8002178:	4622      	mov	r2, r4
 800217a:	4629      	mov	r1, r5
 800217c:	4638      	mov	r0, r7
 800217e:	f7ff ff6b 	bl	8002058 <__ssputs_r>
 8002182:	3001      	adds	r0, #1
 8002184:	f000 80a7 	beq.w	80022d6 <_svfiprintf_r+0x1c6>
 8002188:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800218a:	445a      	add	r2, fp
 800218c:	9209      	str	r2, [sp, #36]	@ 0x24
 800218e:	f89a 3000 	ldrb.w	r3, [sl]
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 809f 	beq.w	80022d6 <_svfiprintf_r+0x1c6>
 8002198:	2300      	movs	r3, #0
 800219a:	f04f 32ff 	mov.w	r2, #4294967295
 800219e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80021a2:	f10a 0a01 	add.w	sl, sl, #1
 80021a6:	9304      	str	r3, [sp, #16]
 80021a8:	9307      	str	r3, [sp, #28]
 80021aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80021ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80021b0:	4654      	mov	r4, sl
 80021b2:	2205      	movs	r2, #5
 80021b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021b8:	484e      	ldr	r0, [pc, #312]	@ (80022f4 <_svfiprintf_r+0x1e4>)
 80021ba:	f7fe f811 	bl	80001e0 <memchr>
 80021be:	9a04      	ldr	r2, [sp, #16]
 80021c0:	b9d8      	cbnz	r0, 80021fa <_svfiprintf_r+0xea>
 80021c2:	06d0      	lsls	r0, r2, #27
 80021c4:	bf44      	itt	mi
 80021c6:	2320      	movmi	r3, #32
 80021c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80021cc:	0711      	lsls	r1, r2, #28
 80021ce:	bf44      	itt	mi
 80021d0:	232b      	movmi	r3, #43	@ 0x2b
 80021d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80021d6:	f89a 3000 	ldrb.w	r3, [sl]
 80021da:	2b2a      	cmp	r3, #42	@ 0x2a
 80021dc:	d015      	beq.n	800220a <_svfiprintf_r+0xfa>
 80021de:	9a07      	ldr	r2, [sp, #28]
 80021e0:	4654      	mov	r4, sl
 80021e2:	2000      	movs	r0, #0
 80021e4:	f04f 0c0a 	mov.w	ip, #10
 80021e8:	4621      	mov	r1, r4
 80021ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80021ee:	3b30      	subs	r3, #48	@ 0x30
 80021f0:	2b09      	cmp	r3, #9
 80021f2:	d94b      	bls.n	800228c <_svfiprintf_r+0x17c>
 80021f4:	b1b0      	cbz	r0, 8002224 <_svfiprintf_r+0x114>
 80021f6:	9207      	str	r2, [sp, #28]
 80021f8:	e014      	b.n	8002224 <_svfiprintf_r+0x114>
 80021fa:	eba0 0308 	sub.w	r3, r0, r8
 80021fe:	fa09 f303 	lsl.w	r3, r9, r3
 8002202:	4313      	orrs	r3, r2
 8002204:	9304      	str	r3, [sp, #16]
 8002206:	46a2      	mov	sl, r4
 8002208:	e7d2      	b.n	80021b0 <_svfiprintf_r+0xa0>
 800220a:	9b03      	ldr	r3, [sp, #12]
 800220c:	1d19      	adds	r1, r3, #4
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	9103      	str	r1, [sp, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	bfbb      	ittet	lt
 8002216:	425b      	neglt	r3, r3
 8002218:	f042 0202 	orrlt.w	r2, r2, #2
 800221c:	9307      	strge	r3, [sp, #28]
 800221e:	9307      	strlt	r3, [sp, #28]
 8002220:	bfb8      	it	lt
 8002222:	9204      	strlt	r2, [sp, #16]
 8002224:	7823      	ldrb	r3, [r4, #0]
 8002226:	2b2e      	cmp	r3, #46	@ 0x2e
 8002228:	d10a      	bne.n	8002240 <_svfiprintf_r+0x130>
 800222a:	7863      	ldrb	r3, [r4, #1]
 800222c:	2b2a      	cmp	r3, #42	@ 0x2a
 800222e:	d132      	bne.n	8002296 <_svfiprintf_r+0x186>
 8002230:	9b03      	ldr	r3, [sp, #12]
 8002232:	1d1a      	adds	r2, r3, #4
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	9203      	str	r2, [sp, #12]
 8002238:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800223c:	3402      	adds	r4, #2
 800223e:	9305      	str	r3, [sp, #20]
 8002240:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002304 <_svfiprintf_r+0x1f4>
 8002244:	7821      	ldrb	r1, [r4, #0]
 8002246:	2203      	movs	r2, #3
 8002248:	4650      	mov	r0, sl
 800224a:	f7fd ffc9 	bl	80001e0 <memchr>
 800224e:	b138      	cbz	r0, 8002260 <_svfiprintf_r+0x150>
 8002250:	9b04      	ldr	r3, [sp, #16]
 8002252:	eba0 000a 	sub.w	r0, r0, sl
 8002256:	2240      	movs	r2, #64	@ 0x40
 8002258:	4082      	lsls	r2, r0
 800225a:	4313      	orrs	r3, r2
 800225c:	3401      	adds	r4, #1
 800225e:	9304      	str	r3, [sp, #16]
 8002260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002264:	4824      	ldr	r0, [pc, #144]	@ (80022f8 <_svfiprintf_r+0x1e8>)
 8002266:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800226a:	2206      	movs	r2, #6
 800226c:	f7fd ffb8 	bl	80001e0 <memchr>
 8002270:	2800      	cmp	r0, #0
 8002272:	d036      	beq.n	80022e2 <_svfiprintf_r+0x1d2>
 8002274:	4b21      	ldr	r3, [pc, #132]	@ (80022fc <_svfiprintf_r+0x1ec>)
 8002276:	bb1b      	cbnz	r3, 80022c0 <_svfiprintf_r+0x1b0>
 8002278:	9b03      	ldr	r3, [sp, #12]
 800227a:	3307      	adds	r3, #7
 800227c:	f023 0307 	bic.w	r3, r3, #7
 8002280:	3308      	adds	r3, #8
 8002282:	9303      	str	r3, [sp, #12]
 8002284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002286:	4433      	add	r3, r6
 8002288:	9309      	str	r3, [sp, #36]	@ 0x24
 800228a:	e76a      	b.n	8002162 <_svfiprintf_r+0x52>
 800228c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002290:	460c      	mov	r4, r1
 8002292:	2001      	movs	r0, #1
 8002294:	e7a8      	b.n	80021e8 <_svfiprintf_r+0xd8>
 8002296:	2300      	movs	r3, #0
 8002298:	3401      	adds	r4, #1
 800229a:	9305      	str	r3, [sp, #20]
 800229c:	4619      	mov	r1, r3
 800229e:	f04f 0c0a 	mov.w	ip, #10
 80022a2:	4620      	mov	r0, r4
 80022a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80022a8:	3a30      	subs	r2, #48	@ 0x30
 80022aa:	2a09      	cmp	r2, #9
 80022ac:	d903      	bls.n	80022b6 <_svfiprintf_r+0x1a6>
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0c6      	beq.n	8002240 <_svfiprintf_r+0x130>
 80022b2:	9105      	str	r1, [sp, #20]
 80022b4:	e7c4      	b.n	8002240 <_svfiprintf_r+0x130>
 80022b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80022ba:	4604      	mov	r4, r0
 80022bc:	2301      	movs	r3, #1
 80022be:	e7f0      	b.n	80022a2 <_svfiprintf_r+0x192>
 80022c0:	ab03      	add	r3, sp, #12
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	462a      	mov	r2, r5
 80022c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002300 <_svfiprintf_r+0x1f0>)
 80022c8:	a904      	add	r1, sp, #16
 80022ca:	4638      	mov	r0, r7
 80022cc:	f3af 8000 	nop.w
 80022d0:	1c42      	adds	r2, r0, #1
 80022d2:	4606      	mov	r6, r0
 80022d4:	d1d6      	bne.n	8002284 <_svfiprintf_r+0x174>
 80022d6:	89ab      	ldrh	r3, [r5, #12]
 80022d8:	065b      	lsls	r3, r3, #25
 80022da:	f53f af2d 	bmi.w	8002138 <_svfiprintf_r+0x28>
 80022de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80022e0:	e72c      	b.n	800213c <_svfiprintf_r+0x2c>
 80022e2:	ab03      	add	r3, sp, #12
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	462a      	mov	r2, r5
 80022e8:	4b05      	ldr	r3, [pc, #20]	@ (8002300 <_svfiprintf_r+0x1f0>)
 80022ea:	a904      	add	r1, sp, #16
 80022ec:	4638      	mov	r0, r7
 80022ee:	f000 f879 	bl	80023e4 <_printf_i>
 80022f2:	e7ed      	b.n	80022d0 <_svfiprintf_r+0x1c0>
 80022f4:	08003195 	.word	0x08003195
 80022f8:	0800319f 	.word	0x0800319f
 80022fc:	00000000 	.word	0x00000000
 8002300:	08002059 	.word	0x08002059
 8002304:	0800319b 	.word	0x0800319b

08002308 <_printf_common>:
 8002308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800230c:	4616      	mov	r6, r2
 800230e:	4698      	mov	r8, r3
 8002310:	688a      	ldr	r2, [r1, #8]
 8002312:	690b      	ldr	r3, [r1, #16]
 8002314:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002318:	4293      	cmp	r3, r2
 800231a:	bfb8      	it	lt
 800231c:	4613      	movlt	r3, r2
 800231e:	6033      	str	r3, [r6, #0]
 8002320:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002324:	4607      	mov	r7, r0
 8002326:	460c      	mov	r4, r1
 8002328:	b10a      	cbz	r2, 800232e <_printf_common+0x26>
 800232a:	3301      	adds	r3, #1
 800232c:	6033      	str	r3, [r6, #0]
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	0699      	lsls	r1, r3, #26
 8002332:	bf42      	ittt	mi
 8002334:	6833      	ldrmi	r3, [r6, #0]
 8002336:	3302      	addmi	r3, #2
 8002338:	6033      	strmi	r3, [r6, #0]
 800233a:	6825      	ldr	r5, [r4, #0]
 800233c:	f015 0506 	ands.w	r5, r5, #6
 8002340:	d106      	bne.n	8002350 <_printf_common+0x48>
 8002342:	f104 0a19 	add.w	sl, r4, #25
 8002346:	68e3      	ldr	r3, [r4, #12]
 8002348:	6832      	ldr	r2, [r6, #0]
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	42ab      	cmp	r3, r5
 800234e:	dc26      	bgt.n	800239e <_printf_common+0x96>
 8002350:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002354:	6822      	ldr	r2, [r4, #0]
 8002356:	3b00      	subs	r3, #0
 8002358:	bf18      	it	ne
 800235a:	2301      	movne	r3, #1
 800235c:	0692      	lsls	r2, r2, #26
 800235e:	d42b      	bmi.n	80023b8 <_printf_common+0xb0>
 8002360:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002364:	4641      	mov	r1, r8
 8002366:	4638      	mov	r0, r7
 8002368:	47c8      	blx	r9
 800236a:	3001      	adds	r0, #1
 800236c:	d01e      	beq.n	80023ac <_printf_common+0xa4>
 800236e:	6823      	ldr	r3, [r4, #0]
 8002370:	6922      	ldr	r2, [r4, #16]
 8002372:	f003 0306 	and.w	r3, r3, #6
 8002376:	2b04      	cmp	r3, #4
 8002378:	bf02      	ittt	eq
 800237a:	68e5      	ldreq	r5, [r4, #12]
 800237c:	6833      	ldreq	r3, [r6, #0]
 800237e:	1aed      	subeq	r5, r5, r3
 8002380:	68a3      	ldr	r3, [r4, #8]
 8002382:	bf0c      	ite	eq
 8002384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002388:	2500      	movne	r5, #0
 800238a:	4293      	cmp	r3, r2
 800238c:	bfc4      	itt	gt
 800238e:	1a9b      	subgt	r3, r3, r2
 8002390:	18ed      	addgt	r5, r5, r3
 8002392:	2600      	movs	r6, #0
 8002394:	341a      	adds	r4, #26
 8002396:	42b5      	cmp	r5, r6
 8002398:	d11a      	bne.n	80023d0 <_printf_common+0xc8>
 800239a:	2000      	movs	r0, #0
 800239c:	e008      	b.n	80023b0 <_printf_common+0xa8>
 800239e:	2301      	movs	r3, #1
 80023a0:	4652      	mov	r2, sl
 80023a2:	4641      	mov	r1, r8
 80023a4:	4638      	mov	r0, r7
 80023a6:	47c8      	blx	r9
 80023a8:	3001      	adds	r0, #1
 80023aa:	d103      	bne.n	80023b4 <_printf_common+0xac>
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295
 80023b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023b4:	3501      	adds	r5, #1
 80023b6:	e7c6      	b.n	8002346 <_printf_common+0x3e>
 80023b8:	18e1      	adds	r1, r4, r3
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	2030      	movs	r0, #48	@ 0x30
 80023be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80023c2:	4422      	add	r2, r4
 80023c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80023c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80023cc:	3302      	adds	r3, #2
 80023ce:	e7c7      	b.n	8002360 <_printf_common+0x58>
 80023d0:	2301      	movs	r3, #1
 80023d2:	4622      	mov	r2, r4
 80023d4:	4641      	mov	r1, r8
 80023d6:	4638      	mov	r0, r7
 80023d8:	47c8      	blx	r9
 80023da:	3001      	adds	r0, #1
 80023dc:	d0e6      	beq.n	80023ac <_printf_common+0xa4>
 80023de:	3601      	adds	r6, #1
 80023e0:	e7d9      	b.n	8002396 <_printf_common+0x8e>
	...

080023e4 <_printf_i>:
 80023e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80023e8:	7e0f      	ldrb	r7, [r1, #24]
 80023ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80023ec:	2f78      	cmp	r7, #120	@ 0x78
 80023ee:	4691      	mov	r9, r2
 80023f0:	4680      	mov	r8, r0
 80023f2:	460c      	mov	r4, r1
 80023f4:	469a      	mov	sl, r3
 80023f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80023fa:	d807      	bhi.n	800240c <_printf_i+0x28>
 80023fc:	2f62      	cmp	r7, #98	@ 0x62
 80023fe:	d80a      	bhi.n	8002416 <_printf_i+0x32>
 8002400:	2f00      	cmp	r7, #0
 8002402:	f000 80d1 	beq.w	80025a8 <_printf_i+0x1c4>
 8002406:	2f58      	cmp	r7, #88	@ 0x58
 8002408:	f000 80b8 	beq.w	800257c <_printf_i+0x198>
 800240c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002410:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002414:	e03a      	b.n	800248c <_printf_i+0xa8>
 8002416:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800241a:	2b15      	cmp	r3, #21
 800241c:	d8f6      	bhi.n	800240c <_printf_i+0x28>
 800241e:	a101      	add	r1, pc, #4	@ (adr r1, 8002424 <_printf_i+0x40>)
 8002420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002424:	0800247d 	.word	0x0800247d
 8002428:	08002491 	.word	0x08002491
 800242c:	0800240d 	.word	0x0800240d
 8002430:	0800240d 	.word	0x0800240d
 8002434:	0800240d 	.word	0x0800240d
 8002438:	0800240d 	.word	0x0800240d
 800243c:	08002491 	.word	0x08002491
 8002440:	0800240d 	.word	0x0800240d
 8002444:	0800240d 	.word	0x0800240d
 8002448:	0800240d 	.word	0x0800240d
 800244c:	0800240d 	.word	0x0800240d
 8002450:	0800258f 	.word	0x0800258f
 8002454:	080024bb 	.word	0x080024bb
 8002458:	08002549 	.word	0x08002549
 800245c:	0800240d 	.word	0x0800240d
 8002460:	0800240d 	.word	0x0800240d
 8002464:	080025b1 	.word	0x080025b1
 8002468:	0800240d 	.word	0x0800240d
 800246c:	080024bb 	.word	0x080024bb
 8002470:	0800240d 	.word	0x0800240d
 8002474:	0800240d 	.word	0x0800240d
 8002478:	08002551 	.word	0x08002551
 800247c:	6833      	ldr	r3, [r6, #0]
 800247e:	1d1a      	adds	r2, r3, #4
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6032      	str	r2, [r6, #0]
 8002484:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002488:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800248c:	2301      	movs	r3, #1
 800248e:	e09c      	b.n	80025ca <_printf_i+0x1e6>
 8002490:	6833      	ldr	r3, [r6, #0]
 8002492:	6820      	ldr	r0, [r4, #0]
 8002494:	1d19      	adds	r1, r3, #4
 8002496:	6031      	str	r1, [r6, #0]
 8002498:	0606      	lsls	r6, r0, #24
 800249a:	d501      	bpl.n	80024a0 <_printf_i+0xbc>
 800249c:	681d      	ldr	r5, [r3, #0]
 800249e:	e003      	b.n	80024a8 <_printf_i+0xc4>
 80024a0:	0645      	lsls	r5, r0, #25
 80024a2:	d5fb      	bpl.n	800249c <_printf_i+0xb8>
 80024a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80024a8:	2d00      	cmp	r5, #0
 80024aa:	da03      	bge.n	80024b4 <_printf_i+0xd0>
 80024ac:	232d      	movs	r3, #45	@ 0x2d
 80024ae:	426d      	negs	r5, r5
 80024b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80024b4:	4858      	ldr	r0, [pc, #352]	@ (8002618 <_printf_i+0x234>)
 80024b6:	230a      	movs	r3, #10
 80024b8:	e011      	b.n	80024de <_printf_i+0xfa>
 80024ba:	6821      	ldr	r1, [r4, #0]
 80024bc:	6833      	ldr	r3, [r6, #0]
 80024be:	0608      	lsls	r0, r1, #24
 80024c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80024c4:	d402      	bmi.n	80024cc <_printf_i+0xe8>
 80024c6:	0649      	lsls	r1, r1, #25
 80024c8:	bf48      	it	mi
 80024ca:	b2ad      	uxthmi	r5, r5
 80024cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80024ce:	4852      	ldr	r0, [pc, #328]	@ (8002618 <_printf_i+0x234>)
 80024d0:	6033      	str	r3, [r6, #0]
 80024d2:	bf14      	ite	ne
 80024d4:	230a      	movne	r3, #10
 80024d6:	2308      	moveq	r3, #8
 80024d8:	2100      	movs	r1, #0
 80024da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80024de:	6866      	ldr	r6, [r4, #4]
 80024e0:	60a6      	str	r6, [r4, #8]
 80024e2:	2e00      	cmp	r6, #0
 80024e4:	db05      	blt.n	80024f2 <_printf_i+0x10e>
 80024e6:	6821      	ldr	r1, [r4, #0]
 80024e8:	432e      	orrs	r6, r5
 80024ea:	f021 0104 	bic.w	r1, r1, #4
 80024ee:	6021      	str	r1, [r4, #0]
 80024f0:	d04b      	beq.n	800258a <_printf_i+0x1a6>
 80024f2:	4616      	mov	r6, r2
 80024f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80024f8:	fb03 5711 	mls	r7, r3, r1, r5
 80024fc:	5dc7      	ldrb	r7, [r0, r7]
 80024fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002502:	462f      	mov	r7, r5
 8002504:	42bb      	cmp	r3, r7
 8002506:	460d      	mov	r5, r1
 8002508:	d9f4      	bls.n	80024f4 <_printf_i+0x110>
 800250a:	2b08      	cmp	r3, #8
 800250c:	d10b      	bne.n	8002526 <_printf_i+0x142>
 800250e:	6823      	ldr	r3, [r4, #0]
 8002510:	07df      	lsls	r7, r3, #31
 8002512:	d508      	bpl.n	8002526 <_printf_i+0x142>
 8002514:	6923      	ldr	r3, [r4, #16]
 8002516:	6861      	ldr	r1, [r4, #4]
 8002518:	4299      	cmp	r1, r3
 800251a:	bfde      	ittt	le
 800251c:	2330      	movle	r3, #48	@ 0x30
 800251e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002522:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002526:	1b92      	subs	r2, r2, r6
 8002528:	6122      	str	r2, [r4, #16]
 800252a:	f8cd a000 	str.w	sl, [sp]
 800252e:	464b      	mov	r3, r9
 8002530:	aa03      	add	r2, sp, #12
 8002532:	4621      	mov	r1, r4
 8002534:	4640      	mov	r0, r8
 8002536:	f7ff fee7 	bl	8002308 <_printf_common>
 800253a:	3001      	adds	r0, #1
 800253c:	d14a      	bne.n	80025d4 <_printf_i+0x1f0>
 800253e:	f04f 30ff 	mov.w	r0, #4294967295
 8002542:	b004      	add	sp, #16
 8002544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002548:	6823      	ldr	r3, [r4, #0]
 800254a:	f043 0320 	orr.w	r3, r3, #32
 800254e:	6023      	str	r3, [r4, #0]
 8002550:	4832      	ldr	r0, [pc, #200]	@ (800261c <_printf_i+0x238>)
 8002552:	2778      	movs	r7, #120	@ 0x78
 8002554:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002558:	6823      	ldr	r3, [r4, #0]
 800255a:	6831      	ldr	r1, [r6, #0]
 800255c:	061f      	lsls	r7, r3, #24
 800255e:	f851 5b04 	ldr.w	r5, [r1], #4
 8002562:	d402      	bmi.n	800256a <_printf_i+0x186>
 8002564:	065f      	lsls	r7, r3, #25
 8002566:	bf48      	it	mi
 8002568:	b2ad      	uxthmi	r5, r5
 800256a:	6031      	str	r1, [r6, #0]
 800256c:	07d9      	lsls	r1, r3, #31
 800256e:	bf44      	itt	mi
 8002570:	f043 0320 	orrmi.w	r3, r3, #32
 8002574:	6023      	strmi	r3, [r4, #0]
 8002576:	b11d      	cbz	r5, 8002580 <_printf_i+0x19c>
 8002578:	2310      	movs	r3, #16
 800257a:	e7ad      	b.n	80024d8 <_printf_i+0xf4>
 800257c:	4826      	ldr	r0, [pc, #152]	@ (8002618 <_printf_i+0x234>)
 800257e:	e7e9      	b.n	8002554 <_printf_i+0x170>
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	f023 0320 	bic.w	r3, r3, #32
 8002586:	6023      	str	r3, [r4, #0]
 8002588:	e7f6      	b.n	8002578 <_printf_i+0x194>
 800258a:	4616      	mov	r6, r2
 800258c:	e7bd      	b.n	800250a <_printf_i+0x126>
 800258e:	6833      	ldr	r3, [r6, #0]
 8002590:	6825      	ldr	r5, [r4, #0]
 8002592:	6961      	ldr	r1, [r4, #20]
 8002594:	1d18      	adds	r0, r3, #4
 8002596:	6030      	str	r0, [r6, #0]
 8002598:	062e      	lsls	r6, r5, #24
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	d501      	bpl.n	80025a2 <_printf_i+0x1be>
 800259e:	6019      	str	r1, [r3, #0]
 80025a0:	e002      	b.n	80025a8 <_printf_i+0x1c4>
 80025a2:	0668      	lsls	r0, r5, #25
 80025a4:	d5fb      	bpl.n	800259e <_printf_i+0x1ba>
 80025a6:	8019      	strh	r1, [r3, #0]
 80025a8:	2300      	movs	r3, #0
 80025aa:	6123      	str	r3, [r4, #16]
 80025ac:	4616      	mov	r6, r2
 80025ae:	e7bc      	b.n	800252a <_printf_i+0x146>
 80025b0:	6833      	ldr	r3, [r6, #0]
 80025b2:	1d1a      	adds	r2, r3, #4
 80025b4:	6032      	str	r2, [r6, #0]
 80025b6:	681e      	ldr	r6, [r3, #0]
 80025b8:	6862      	ldr	r2, [r4, #4]
 80025ba:	2100      	movs	r1, #0
 80025bc:	4630      	mov	r0, r6
 80025be:	f7fd fe0f 	bl	80001e0 <memchr>
 80025c2:	b108      	cbz	r0, 80025c8 <_printf_i+0x1e4>
 80025c4:	1b80      	subs	r0, r0, r6
 80025c6:	6060      	str	r0, [r4, #4]
 80025c8:	6863      	ldr	r3, [r4, #4]
 80025ca:	6123      	str	r3, [r4, #16]
 80025cc:	2300      	movs	r3, #0
 80025ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80025d2:	e7aa      	b.n	800252a <_printf_i+0x146>
 80025d4:	6923      	ldr	r3, [r4, #16]
 80025d6:	4632      	mov	r2, r6
 80025d8:	4649      	mov	r1, r9
 80025da:	4640      	mov	r0, r8
 80025dc:	47d0      	blx	sl
 80025de:	3001      	adds	r0, #1
 80025e0:	d0ad      	beq.n	800253e <_printf_i+0x15a>
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	079b      	lsls	r3, r3, #30
 80025e6:	d413      	bmi.n	8002610 <_printf_i+0x22c>
 80025e8:	68e0      	ldr	r0, [r4, #12]
 80025ea:	9b03      	ldr	r3, [sp, #12]
 80025ec:	4298      	cmp	r0, r3
 80025ee:	bfb8      	it	lt
 80025f0:	4618      	movlt	r0, r3
 80025f2:	e7a6      	b.n	8002542 <_printf_i+0x15e>
 80025f4:	2301      	movs	r3, #1
 80025f6:	4632      	mov	r2, r6
 80025f8:	4649      	mov	r1, r9
 80025fa:	4640      	mov	r0, r8
 80025fc:	47d0      	blx	sl
 80025fe:	3001      	adds	r0, #1
 8002600:	d09d      	beq.n	800253e <_printf_i+0x15a>
 8002602:	3501      	adds	r5, #1
 8002604:	68e3      	ldr	r3, [r4, #12]
 8002606:	9903      	ldr	r1, [sp, #12]
 8002608:	1a5b      	subs	r3, r3, r1
 800260a:	42ab      	cmp	r3, r5
 800260c:	dcf2      	bgt.n	80025f4 <_printf_i+0x210>
 800260e:	e7eb      	b.n	80025e8 <_printf_i+0x204>
 8002610:	2500      	movs	r5, #0
 8002612:	f104 0619 	add.w	r6, r4, #25
 8002616:	e7f5      	b.n	8002604 <_printf_i+0x220>
 8002618:	080031a6 	.word	0x080031a6
 800261c:	080031b7 	.word	0x080031b7

08002620 <__sflush_r>:
 8002620:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002628:	0716      	lsls	r6, r2, #28
 800262a:	4605      	mov	r5, r0
 800262c:	460c      	mov	r4, r1
 800262e:	d454      	bmi.n	80026da <__sflush_r+0xba>
 8002630:	684b      	ldr	r3, [r1, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	dc02      	bgt.n	800263c <__sflush_r+0x1c>
 8002636:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002638:	2b00      	cmp	r3, #0
 800263a:	dd48      	ble.n	80026ce <__sflush_r+0xae>
 800263c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800263e:	2e00      	cmp	r6, #0
 8002640:	d045      	beq.n	80026ce <__sflush_r+0xae>
 8002642:	2300      	movs	r3, #0
 8002644:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002648:	682f      	ldr	r7, [r5, #0]
 800264a:	6a21      	ldr	r1, [r4, #32]
 800264c:	602b      	str	r3, [r5, #0]
 800264e:	d030      	beq.n	80026b2 <__sflush_r+0x92>
 8002650:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002652:	89a3      	ldrh	r3, [r4, #12]
 8002654:	0759      	lsls	r1, r3, #29
 8002656:	d505      	bpl.n	8002664 <__sflush_r+0x44>
 8002658:	6863      	ldr	r3, [r4, #4]
 800265a:	1ad2      	subs	r2, r2, r3
 800265c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800265e:	b10b      	cbz	r3, 8002664 <__sflush_r+0x44>
 8002660:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002662:	1ad2      	subs	r2, r2, r3
 8002664:	2300      	movs	r3, #0
 8002666:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002668:	6a21      	ldr	r1, [r4, #32]
 800266a:	4628      	mov	r0, r5
 800266c:	47b0      	blx	r6
 800266e:	1c43      	adds	r3, r0, #1
 8002670:	89a3      	ldrh	r3, [r4, #12]
 8002672:	d106      	bne.n	8002682 <__sflush_r+0x62>
 8002674:	6829      	ldr	r1, [r5, #0]
 8002676:	291d      	cmp	r1, #29
 8002678:	d82b      	bhi.n	80026d2 <__sflush_r+0xb2>
 800267a:	4a2a      	ldr	r2, [pc, #168]	@ (8002724 <__sflush_r+0x104>)
 800267c:	40ca      	lsrs	r2, r1
 800267e:	07d6      	lsls	r6, r2, #31
 8002680:	d527      	bpl.n	80026d2 <__sflush_r+0xb2>
 8002682:	2200      	movs	r2, #0
 8002684:	6062      	str	r2, [r4, #4]
 8002686:	04d9      	lsls	r1, r3, #19
 8002688:	6922      	ldr	r2, [r4, #16]
 800268a:	6022      	str	r2, [r4, #0]
 800268c:	d504      	bpl.n	8002698 <__sflush_r+0x78>
 800268e:	1c42      	adds	r2, r0, #1
 8002690:	d101      	bne.n	8002696 <__sflush_r+0x76>
 8002692:	682b      	ldr	r3, [r5, #0]
 8002694:	b903      	cbnz	r3, 8002698 <__sflush_r+0x78>
 8002696:	6560      	str	r0, [r4, #84]	@ 0x54
 8002698:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800269a:	602f      	str	r7, [r5, #0]
 800269c:	b1b9      	cbz	r1, 80026ce <__sflush_r+0xae>
 800269e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80026a2:	4299      	cmp	r1, r3
 80026a4:	d002      	beq.n	80026ac <__sflush_r+0x8c>
 80026a6:	4628      	mov	r0, r5
 80026a8:	f7ff fbd6 	bl	8001e58 <_free_r>
 80026ac:	2300      	movs	r3, #0
 80026ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80026b0:	e00d      	b.n	80026ce <__sflush_r+0xae>
 80026b2:	2301      	movs	r3, #1
 80026b4:	4628      	mov	r0, r5
 80026b6:	47b0      	blx	r6
 80026b8:	4602      	mov	r2, r0
 80026ba:	1c50      	adds	r0, r2, #1
 80026bc:	d1c9      	bne.n	8002652 <__sflush_r+0x32>
 80026be:	682b      	ldr	r3, [r5, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0c6      	beq.n	8002652 <__sflush_r+0x32>
 80026c4:	2b1d      	cmp	r3, #29
 80026c6:	d001      	beq.n	80026cc <__sflush_r+0xac>
 80026c8:	2b16      	cmp	r3, #22
 80026ca:	d11e      	bne.n	800270a <__sflush_r+0xea>
 80026cc:	602f      	str	r7, [r5, #0]
 80026ce:	2000      	movs	r0, #0
 80026d0:	e022      	b.n	8002718 <__sflush_r+0xf8>
 80026d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026d6:	b21b      	sxth	r3, r3
 80026d8:	e01b      	b.n	8002712 <__sflush_r+0xf2>
 80026da:	690f      	ldr	r7, [r1, #16]
 80026dc:	2f00      	cmp	r7, #0
 80026de:	d0f6      	beq.n	80026ce <__sflush_r+0xae>
 80026e0:	0793      	lsls	r3, r2, #30
 80026e2:	680e      	ldr	r6, [r1, #0]
 80026e4:	bf08      	it	eq
 80026e6:	694b      	ldreq	r3, [r1, #20]
 80026e8:	600f      	str	r7, [r1, #0]
 80026ea:	bf18      	it	ne
 80026ec:	2300      	movne	r3, #0
 80026ee:	eba6 0807 	sub.w	r8, r6, r7
 80026f2:	608b      	str	r3, [r1, #8]
 80026f4:	f1b8 0f00 	cmp.w	r8, #0
 80026f8:	dde9      	ble.n	80026ce <__sflush_r+0xae>
 80026fa:	6a21      	ldr	r1, [r4, #32]
 80026fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80026fe:	4643      	mov	r3, r8
 8002700:	463a      	mov	r2, r7
 8002702:	4628      	mov	r0, r5
 8002704:	47b0      	blx	r6
 8002706:	2800      	cmp	r0, #0
 8002708:	dc08      	bgt.n	800271c <__sflush_r+0xfc>
 800270a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800270e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002712:	81a3      	strh	r3, [r4, #12]
 8002714:	f04f 30ff 	mov.w	r0, #4294967295
 8002718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800271c:	4407      	add	r7, r0
 800271e:	eba8 0800 	sub.w	r8, r8, r0
 8002722:	e7e7      	b.n	80026f4 <__sflush_r+0xd4>
 8002724:	20400001 	.word	0x20400001

08002728 <_fflush_r>:
 8002728:	b538      	push	{r3, r4, r5, lr}
 800272a:	690b      	ldr	r3, [r1, #16]
 800272c:	4605      	mov	r5, r0
 800272e:	460c      	mov	r4, r1
 8002730:	b913      	cbnz	r3, 8002738 <_fflush_r+0x10>
 8002732:	2500      	movs	r5, #0
 8002734:	4628      	mov	r0, r5
 8002736:	bd38      	pop	{r3, r4, r5, pc}
 8002738:	b118      	cbz	r0, 8002742 <_fflush_r+0x1a>
 800273a:	6a03      	ldr	r3, [r0, #32]
 800273c:	b90b      	cbnz	r3, 8002742 <_fflush_r+0x1a>
 800273e:	f7ff fa3b 	bl	8001bb8 <__sinit>
 8002742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f3      	beq.n	8002732 <_fflush_r+0xa>
 800274a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800274c:	07d0      	lsls	r0, r2, #31
 800274e:	d404      	bmi.n	800275a <_fflush_r+0x32>
 8002750:	0599      	lsls	r1, r3, #22
 8002752:	d402      	bmi.n	800275a <_fflush_r+0x32>
 8002754:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002756:	f7ff fb5e 	bl	8001e16 <__retarget_lock_acquire_recursive>
 800275a:	4628      	mov	r0, r5
 800275c:	4621      	mov	r1, r4
 800275e:	f7ff ff5f 	bl	8002620 <__sflush_r>
 8002762:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002764:	07da      	lsls	r2, r3, #31
 8002766:	4605      	mov	r5, r0
 8002768:	d4e4      	bmi.n	8002734 <_fflush_r+0xc>
 800276a:	89a3      	ldrh	r3, [r4, #12]
 800276c:	059b      	lsls	r3, r3, #22
 800276e:	d4e1      	bmi.n	8002734 <_fflush_r+0xc>
 8002770:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002772:	f7ff fb51 	bl	8001e18 <__retarget_lock_release_recursive>
 8002776:	e7dd      	b.n	8002734 <_fflush_r+0xc>

08002778 <fiprintf>:
 8002778:	b40e      	push	{r1, r2, r3}
 800277a:	b503      	push	{r0, r1, lr}
 800277c:	4601      	mov	r1, r0
 800277e:	ab03      	add	r3, sp, #12
 8002780:	4805      	ldr	r0, [pc, #20]	@ (8002798 <fiprintf+0x20>)
 8002782:	f853 2b04 	ldr.w	r2, [r3], #4
 8002786:	6800      	ldr	r0, [r0, #0]
 8002788:	9301      	str	r3, [sp, #4]
 800278a:	f000 f89d 	bl	80028c8 <_vfiprintf_r>
 800278e:	b002      	add	sp, #8
 8002790:	f85d eb04 	ldr.w	lr, [sp], #4
 8002794:	b003      	add	sp, #12
 8002796:	4770      	bx	lr
 8002798:	20000014 	.word	0x20000014

0800279c <memmove>:
 800279c:	4288      	cmp	r0, r1
 800279e:	b510      	push	{r4, lr}
 80027a0:	eb01 0402 	add.w	r4, r1, r2
 80027a4:	d902      	bls.n	80027ac <memmove+0x10>
 80027a6:	4284      	cmp	r4, r0
 80027a8:	4623      	mov	r3, r4
 80027aa:	d807      	bhi.n	80027bc <memmove+0x20>
 80027ac:	1e43      	subs	r3, r0, #1
 80027ae:	42a1      	cmp	r1, r4
 80027b0:	d008      	beq.n	80027c4 <memmove+0x28>
 80027b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80027b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80027ba:	e7f8      	b.n	80027ae <memmove+0x12>
 80027bc:	4402      	add	r2, r0
 80027be:	4601      	mov	r1, r0
 80027c0:	428a      	cmp	r2, r1
 80027c2:	d100      	bne.n	80027c6 <memmove+0x2a>
 80027c4:	bd10      	pop	{r4, pc}
 80027c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80027ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80027ce:	e7f7      	b.n	80027c0 <memmove+0x24>

080027d0 <_sbrk_r>:
 80027d0:	b538      	push	{r3, r4, r5, lr}
 80027d2:	4d06      	ldr	r5, [pc, #24]	@ (80027ec <_sbrk_r+0x1c>)
 80027d4:	2300      	movs	r3, #0
 80027d6:	4604      	mov	r4, r0
 80027d8:	4608      	mov	r0, r1
 80027da:	602b      	str	r3, [r5, #0]
 80027dc:	f7ff f822 	bl	8001824 <_sbrk>
 80027e0:	1c43      	adds	r3, r0, #1
 80027e2:	d102      	bne.n	80027ea <_sbrk_r+0x1a>
 80027e4:	682b      	ldr	r3, [r5, #0]
 80027e6:	b103      	cbz	r3, 80027ea <_sbrk_r+0x1a>
 80027e8:	6023      	str	r3, [r4, #0]
 80027ea:	bd38      	pop	{r3, r4, r5, pc}
 80027ec:	20000230 	.word	0x20000230

080027f0 <memcpy>:
 80027f0:	440a      	add	r2, r1
 80027f2:	4291      	cmp	r1, r2
 80027f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80027f8:	d100      	bne.n	80027fc <memcpy+0xc>
 80027fa:	4770      	bx	lr
 80027fc:	b510      	push	{r4, lr}
 80027fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002802:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002806:	4291      	cmp	r1, r2
 8002808:	d1f9      	bne.n	80027fe <memcpy+0xe>
 800280a:	bd10      	pop	{r4, pc}

0800280c <abort>:
 800280c:	b508      	push	{r3, lr}
 800280e:	2006      	movs	r0, #6
 8002810:	f000 fa2e 	bl	8002c70 <raise>
 8002814:	2001      	movs	r0, #1
 8002816:	f7fe ff8d 	bl	8001734 <_exit>

0800281a <_realloc_r>:
 800281a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800281e:	4607      	mov	r7, r0
 8002820:	4614      	mov	r4, r2
 8002822:	460d      	mov	r5, r1
 8002824:	b921      	cbnz	r1, 8002830 <_realloc_r+0x16>
 8002826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800282a:	4611      	mov	r1, r2
 800282c:	f7ff bb88 	b.w	8001f40 <_malloc_r>
 8002830:	b92a      	cbnz	r2, 800283e <_realloc_r+0x24>
 8002832:	f7ff fb11 	bl	8001e58 <_free_r>
 8002836:	4625      	mov	r5, r4
 8002838:	4628      	mov	r0, r5
 800283a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800283e:	f000 fa33 	bl	8002ca8 <_malloc_usable_size_r>
 8002842:	4284      	cmp	r4, r0
 8002844:	4606      	mov	r6, r0
 8002846:	d802      	bhi.n	800284e <_realloc_r+0x34>
 8002848:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800284c:	d8f4      	bhi.n	8002838 <_realloc_r+0x1e>
 800284e:	4621      	mov	r1, r4
 8002850:	4638      	mov	r0, r7
 8002852:	f7ff fb75 	bl	8001f40 <_malloc_r>
 8002856:	4680      	mov	r8, r0
 8002858:	b908      	cbnz	r0, 800285e <_realloc_r+0x44>
 800285a:	4645      	mov	r5, r8
 800285c:	e7ec      	b.n	8002838 <_realloc_r+0x1e>
 800285e:	42b4      	cmp	r4, r6
 8002860:	4622      	mov	r2, r4
 8002862:	4629      	mov	r1, r5
 8002864:	bf28      	it	cs
 8002866:	4632      	movcs	r2, r6
 8002868:	f7ff ffc2 	bl	80027f0 <memcpy>
 800286c:	4629      	mov	r1, r5
 800286e:	4638      	mov	r0, r7
 8002870:	f7ff faf2 	bl	8001e58 <_free_r>
 8002874:	e7f1      	b.n	800285a <_realloc_r+0x40>

08002876 <__sfputc_r>:
 8002876:	6893      	ldr	r3, [r2, #8]
 8002878:	3b01      	subs	r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	b410      	push	{r4}
 800287e:	6093      	str	r3, [r2, #8]
 8002880:	da08      	bge.n	8002894 <__sfputc_r+0x1e>
 8002882:	6994      	ldr	r4, [r2, #24]
 8002884:	42a3      	cmp	r3, r4
 8002886:	db01      	blt.n	800288c <__sfputc_r+0x16>
 8002888:	290a      	cmp	r1, #10
 800288a:	d103      	bne.n	8002894 <__sfputc_r+0x1e>
 800288c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002890:	f000 b932 	b.w	8002af8 <__swbuf_r>
 8002894:	6813      	ldr	r3, [r2, #0]
 8002896:	1c58      	adds	r0, r3, #1
 8002898:	6010      	str	r0, [r2, #0]
 800289a:	7019      	strb	r1, [r3, #0]
 800289c:	4608      	mov	r0, r1
 800289e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <__sfputs_r>:
 80028a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a6:	4606      	mov	r6, r0
 80028a8:	460f      	mov	r7, r1
 80028aa:	4614      	mov	r4, r2
 80028ac:	18d5      	adds	r5, r2, r3
 80028ae:	42ac      	cmp	r4, r5
 80028b0:	d101      	bne.n	80028b6 <__sfputs_r+0x12>
 80028b2:	2000      	movs	r0, #0
 80028b4:	e007      	b.n	80028c6 <__sfputs_r+0x22>
 80028b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028ba:	463a      	mov	r2, r7
 80028bc:	4630      	mov	r0, r6
 80028be:	f7ff ffda 	bl	8002876 <__sfputc_r>
 80028c2:	1c43      	adds	r3, r0, #1
 80028c4:	d1f3      	bne.n	80028ae <__sfputs_r+0xa>
 80028c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080028c8 <_vfiprintf_r>:
 80028c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028cc:	460d      	mov	r5, r1
 80028ce:	b09d      	sub	sp, #116	@ 0x74
 80028d0:	4614      	mov	r4, r2
 80028d2:	4698      	mov	r8, r3
 80028d4:	4606      	mov	r6, r0
 80028d6:	b118      	cbz	r0, 80028e0 <_vfiprintf_r+0x18>
 80028d8:	6a03      	ldr	r3, [r0, #32]
 80028da:	b90b      	cbnz	r3, 80028e0 <_vfiprintf_r+0x18>
 80028dc:	f7ff f96c 	bl	8001bb8 <__sinit>
 80028e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80028e2:	07d9      	lsls	r1, r3, #31
 80028e4:	d405      	bmi.n	80028f2 <_vfiprintf_r+0x2a>
 80028e6:	89ab      	ldrh	r3, [r5, #12]
 80028e8:	059a      	lsls	r2, r3, #22
 80028ea:	d402      	bmi.n	80028f2 <_vfiprintf_r+0x2a>
 80028ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80028ee:	f7ff fa92 	bl	8001e16 <__retarget_lock_acquire_recursive>
 80028f2:	89ab      	ldrh	r3, [r5, #12]
 80028f4:	071b      	lsls	r3, r3, #28
 80028f6:	d501      	bpl.n	80028fc <_vfiprintf_r+0x34>
 80028f8:	692b      	ldr	r3, [r5, #16]
 80028fa:	b99b      	cbnz	r3, 8002924 <_vfiprintf_r+0x5c>
 80028fc:	4629      	mov	r1, r5
 80028fe:	4630      	mov	r0, r6
 8002900:	f000 f938 	bl	8002b74 <__swsetup_r>
 8002904:	b170      	cbz	r0, 8002924 <_vfiprintf_r+0x5c>
 8002906:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002908:	07dc      	lsls	r4, r3, #31
 800290a:	d504      	bpl.n	8002916 <_vfiprintf_r+0x4e>
 800290c:	f04f 30ff 	mov.w	r0, #4294967295
 8002910:	b01d      	add	sp, #116	@ 0x74
 8002912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002916:	89ab      	ldrh	r3, [r5, #12]
 8002918:	0598      	lsls	r0, r3, #22
 800291a:	d4f7      	bmi.n	800290c <_vfiprintf_r+0x44>
 800291c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800291e:	f7ff fa7b 	bl	8001e18 <__retarget_lock_release_recursive>
 8002922:	e7f3      	b.n	800290c <_vfiprintf_r+0x44>
 8002924:	2300      	movs	r3, #0
 8002926:	9309      	str	r3, [sp, #36]	@ 0x24
 8002928:	2320      	movs	r3, #32
 800292a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800292e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002932:	2330      	movs	r3, #48	@ 0x30
 8002934:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002ae4 <_vfiprintf_r+0x21c>
 8002938:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800293c:	f04f 0901 	mov.w	r9, #1
 8002940:	4623      	mov	r3, r4
 8002942:	469a      	mov	sl, r3
 8002944:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002948:	b10a      	cbz	r2, 800294e <_vfiprintf_r+0x86>
 800294a:	2a25      	cmp	r2, #37	@ 0x25
 800294c:	d1f9      	bne.n	8002942 <_vfiprintf_r+0x7a>
 800294e:	ebba 0b04 	subs.w	fp, sl, r4
 8002952:	d00b      	beq.n	800296c <_vfiprintf_r+0xa4>
 8002954:	465b      	mov	r3, fp
 8002956:	4622      	mov	r2, r4
 8002958:	4629      	mov	r1, r5
 800295a:	4630      	mov	r0, r6
 800295c:	f7ff ffa2 	bl	80028a4 <__sfputs_r>
 8002960:	3001      	adds	r0, #1
 8002962:	f000 80a7 	beq.w	8002ab4 <_vfiprintf_r+0x1ec>
 8002966:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002968:	445a      	add	r2, fp
 800296a:	9209      	str	r2, [sp, #36]	@ 0x24
 800296c:	f89a 3000 	ldrb.w	r3, [sl]
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 809f 	beq.w	8002ab4 <_vfiprintf_r+0x1ec>
 8002976:	2300      	movs	r3, #0
 8002978:	f04f 32ff 	mov.w	r2, #4294967295
 800297c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002980:	f10a 0a01 	add.w	sl, sl, #1
 8002984:	9304      	str	r3, [sp, #16]
 8002986:	9307      	str	r3, [sp, #28]
 8002988:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800298c:	931a      	str	r3, [sp, #104]	@ 0x68
 800298e:	4654      	mov	r4, sl
 8002990:	2205      	movs	r2, #5
 8002992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002996:	4853      	ldr	r0, [pc, #332]	@ (8002ae4 <_vfiprintf_r+0x21c>)
 8002998:	f7fd fc22 	bl	80001e0 <memchr>
 800299c:	9a04      	ldr	r2, [sp, #16]
 800299e:	b9d8      	cbnz	r0, 80029d8 <_vfiprintf_r+0x110>
 80029a0:	06d1      	lsls	r1, r2, #27
 80029a2:	bf44      	itt	mi
 80029a4:	2320      	movmi	r3, #32
 80029a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80029aa:	0713      	lsls	r3, r2, #28
 80029ac:	bf44      	itt	mi
 80029ae:	232b      	movmi	r3, #43	@ 0x2b
 80029b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80029b4:	f89a 3000 	ldrb.w	r3, [sl]
 80029b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80029ba:	d015      	beq.n	80029e8 <_vfiprintf_r+0x120>
 80029bc:	9a07      	ldr	r2, [sp, #28]
 80029be:	4654      	mov	r4, sl
 80029c0:	2000      	movs	r0, #0
 80029c2:	f04f 0c0a 	mov.w	ip, #10
 80029c6:	4621      	mov	r1, r4
 80029c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029cc:	3b30      	subs	r3, #48	@ 0x30
 80029ce:	2b09      	cmp	r3, #9
 80029d0:	d94b      	bls.n	8002a6a <_vfiprintf_r+0x1a2>
 80029d2:	b1b0      	cbz	r0, 8002a02 <_vfiprintf_r+0x13a>
 80029d4:	9207      	str	r2, [sp, #28]
 80029d6:	e014      	b.n	8002a02 <_vfiprintf_r+0x13a>
 80029d8:	eba0 0308 	sub.w	r3, r0, r8
 80029dc:	fa09 f303 	lsl.w	r3, r9, r3
 80029e0:	4313      	orrs	r3, r2
 80029e2:	9304      	str	r3, [sp, #16]
 80029e4:	46a2      	mov	sl, r4
 80029e6:	e7d2      	b.n	800298e <_vfiprintf_r+0xc6>
 80029e8:	9b03      	ldr	r3, [sp, #12]
 80029ea:	1d19      	adds	r1, r3, #4
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	9103      	str	r1, [sp, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bfbb      	ittet	lt
 80029f4:	425b      	neglt	r3, r3
 80029f6:	f042 0202 	orrlt.w	r2, r2, #2
 80029fa:	9307      	strge	r3, [sp, #28]
 80029fc:	9307      	strlt	r3, [sp, #28]
 80029fe:	bfb8      	it	lt
 8002a00:	9204      	strlt	r2, [sp, #16]
 8002a02:	7823      	ldrb	r3, [r4, #0]
 8002a04:	2b2e      	cmp	r3, #46	@ 0x2e
 8002a06:	d10a      	bne.n	8002a1e <_vfiprintf_r+0x156>
 8002a08:	7863      	ldrb	r3, [r4, #1]
 8002a0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a0c:	d132      	bne.n	8002a74 <_vfiprintf_r+0x1ac>
 8002a0e:	9b03      	ldr	r3, [sp, #12]
 8002a10:	1d1a      	adds	r2, r3, #4
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	9203      	str	r2, [sp, #12]
 8002a16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002a1a:	3402      	adds	r4, #2
 8002a1c:	9305      	str	r3, [sp, #20]
 8002a1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002af4 <_vfiprintf_r+0x22c>
 8002a22:	7821      	ldrb	r1, [r4, #0]
 8002a24:	2203      	movs	r2, #3
 8002a26:	4650      	mov	r0, sl
 8002a28:	f7fd fbda 	bl	80001e0 <memchr>
 8002a2c:	b138      	cbz	r0, 8002a3e <_vfiprintf_r+0x176>
 8002a2e:	9b04      	ldr	r3, [sp, #16]
 8002a30:	eba0 000a 	sub.w	r0, r0, sl
 8002a34:	2240      	movs	r2, #64	@ 0x40
 8002a36:	4082      	lsls	r2, r0
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	3401      	adds	r4, #1
 8002a3c:	9304      	str	r3, [sp, #16]
 8002a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a42:	4829      	ldr	r0, [pc, #164]	@ (8002ae8 <_vfiprintf_r+0x220>)
 8002a44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002a48:	2206      	movs	r2, #6
 8002a4a:	f7fd fbc9 	bl	80001e0 <memchr>
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d03f      	beq.n	8002ad2 <_vfiprintf_r+0x20a>
 8002a52:	4b26      	ldr	r3, [pc, #152]	@ (8002aec <_vfiprintf_r+0x224>)
 8002a54:	bb1b      	cbnz	r3, 8002a9e <_vfiprintf_r+0x1d6>
 8002a56:	9b03      	ldr	r3, [sp, #12]
 8002a58:	3307      	adds	r3, #7
 8002a5a:	f023 0307 	bic.w	r3, r3, #7
 8002a5e:	3308      	adds	r3, #8
 8002a60:	9303      	str	r3, [sp, #12]
 8002a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002a64:	443b      	add	r3, r7
 8002a66:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a68:	e76a      	b.n	8002940 <_vfiprintf_r+0x78>
 8002a6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a6e:	460c      	mov	r4, r1
 8002a70:	2001      	movs	r0, #1
 8002a72:	e7a8      	b.n	80029c6 <_vfiprintf_r+0xfe>
 8002a74:	2300      	movs	r3, #0
 8002a76:	3401      	adds	r4, #1
 8002a78:	9305      	str	r3, [sp, #20]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f04f 0c0a 	mov.w	ip, #10
 8002a80:	4620      	mov	r0, r4
 8002a82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a86:	3a30      	subs	r2, #48	@ 0x30
 8002a88:	2a09      	cmp	r2, #9
 8002a8a:	d903      	bls.n	8002a94 <_vfiprintf_r+0x1cc>
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0c6      	beq.n	8002a1e <_vfiprintf_r+0x156>
 8002a90:	9105      	str	r1, [sp, #20]
 8002a92:	e7c4      	b.n	8002a1e <_vfiprintf_r+0x156>
 8002a94:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a98:	4604      	mov	r4, r0
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e7f0      	b.n	8002a80 <_vfiprintf_r+0x1b8>
 8002a9e:	ab03      	add	r3, sp, #12
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	462a      	mov	r2, r5
 8002aa4:	4b12      	ldr	r3, [pc, #72]	@ (8002af0 <_vfiprintf_r+0x228>)
 8002aa6:	a904      	add	r1, sp, #16
 8002aa8:	4630      	mov	r0, r6
 8002aaa:	f3af 8000 	nop.w
 8002aae:	4607      	mov	r7, r0
 8002ab0:	1c78      	adds	r0, r7, #1
 8002ab2:	d1d6      	bne.n	8002a62 <_vfiprintf_r+0x19a>
 8002ab4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002ab6:	07d9      	lsls	r1, r3, #31
 8002ab8:	d405      	bmi.n	8002ac6 <_vfiprintf_r+0x1fe>
 8002aba:	89ab      	ldrh	r3, [r5, #12]
 8002abc:	059a      	lsls	r2, r3, #22
 8002abe:	d402      	bmi.n	8002ac6 <_vfiprintf_r+0x1fe>
 8002ac0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002ac2:	f7ff f9a9 	bl	8001e18 <__retarget_lock_release_recursive>
 8002ac6:	89ab      	ldrh	r3, [r5, #12]
 8002ac8:	065b      	lsls	r3, r3, #25
 8002aca:	f53f af1f 	bmi.w	800290c <_vfiprintf_r+0x44>
 8002ace:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002ad0:	e71e      	b.n	8002910 <_vfiprintf_r+0x48>
 8002ad2:	ab03      	add	r3, sp, #12
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	462a      	mov	r2, r5
 8002ad8:	4b05      	ldr	r3, [pc, #20]	@ (8002af0 <_vfiprintf_r+0x228>)
 8002ada:	a904      	add	r1, sp, #16
 8002adc:	4630      	mov	r0, r6
 8002ade:	f7ff fc81 	bl	80023e4 <_printf_i>
 8002ae2:	e7e4      	b.n	8002aae <_vfiprintf_r+0x1e6>
 8002ae4:	08003195 	.word	0x08003195
 8002ae8:	0800319f 	.word	0x0800319f
 8002aec:	00000000 	.word	0x00000000
 8002af0:	080028a5 	.word	0x080028a5
 8002af4:	0800319b 	.word	0x0800319b

08002af8 <__swbuf_r>:
 8002af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afa:	460e      	mov	r6, r1
 8002afc:	4614      	mov	r4, r2
 8002afe:	4605      	mov	r5, r0
 8002b00:	b118      	cbz	r0, 8002b0a <__swbuf_r+0x12>
 8002b02:	6a03      	ldr	r3, [r0, #32]
 8002b04:	b90b      	cbnz	r3, 8002b0a <__swbuf_r+0x12>
 8002b06:	f7ff f857 	bl	8001bb8 <__sinit>
 8002b0a:	69a3      	ldr	r3, [r4, #24]
 8002b0c:	60a3      	str	r3, [r4, #8]
 8002b0e:	89a3      	ldrh	r3, [r4, #12]
 8002b10:	071a      	lsls	r2, r3, #28
 8002b12:	d501      	bpl.n	8002b18 <__swbuf_r+0x20>
 8002b14:	6923      	ldr	r3, [r4, #16]
 8002b16:	b943      	cbnz	r3, 8002b2a <__swbuf_r+0x32>
 8002b18:	4621      	mov	r1, r4
 8002b1a:	4628      	mov	r0, r5
 8002b1c:	f000 f82a 	bl	8002b74 <__swsetup_r>
 8002b20:	b118      	cbz	r0, 8002b2a <__swbuf_r+0x32>
 8002b22:	f04f 37ff 	mov.w	r7, #4294967295
 8002b26:	4638      	mov	r0, r7
 8002b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b2a:	6823      	ldr	r3, [r4, #0]
 8002b2c:	6922      	ldr	r2, [r4, #16]
 8002b2e:	1a98      	subs	r0, r3, r2
 8002b30:	6963      	ldr	r3, [r4, #20]
 8002b32:	b2f6      	uxtb	r6, r6
 8002b34:	4283      	cmp	r3, r0
 8002b36:	4637      	mov	r7, r6
 8002b38:	dc05      	bgt.n	8002b46 <__swbuf_r+0x4e>
 8002b3a:	4621      	mov	r1, r4
 8002b3c:	4628      	mov	r0, r5
 8002b3e:	f7ff fdf3 	bl	8002728 <_fflush_r>
 8002b42:	2800      	cmp	r0, #0
 8002b44:	d1ed      	bne.n	8002b22 <__swbuf_r+0x2a>
 8002b46:	68a3      	ldr	r3, [r4, #8]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	60a3      	str	r3, [r4, #8]
 8002b4c:	6823      	ldr	r3, [r4, #0]
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	6022      	str	r2, [r4, #0]
 8002b52:	701e      	strb	r6, [r3, #0]
 8002b54:	6962      	ldr	r2, [r4, #20]
 8002b56:	1c43      	adds	r3, r0, #1
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d004      	beq.n	8002b66 <__swbuf_r+0x6e>
 8002b5c:	89a3      	ldrh	r3, [r4, #12]
 8002b5e:	07db      	lsls	r3, r3, #31
 8002b60:	d5e1      	bpl.n	8002b26 <__swbuf_r+0x2e>
 8002b62:	2e0a      	cmp	r6, #10
 8002b64:	d1df      	bne.n	8002b26 <__swbuf_r+0x2e>
 8002b66:	4621      	mov	r1, r4
 8002b68:	4628      	mov	r0, r5
 8002b6a:	f7ff fddd 	bl	8002728 <_fflush_r>
 8002b6e:	2800      	cmp	r0, #0
 8002b70:	d0d9      	beq.n	8002b26 <__swbuf_r+0x2e>
 8002b72:	e7d6      	b.n	8002b22 <__swbuf_r+0x2a>

08002b74 <__swsetup_r>:
 8002b74:	b538      	push	{r3, r4, r5, lr}
 8002b76:	4b29      	ldr	r3, [pc, #164]	@ (8002c1c <__swsetup_r+0xa8>)
 8002b78:	4605      	mov	r5, r0
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	460c      	mov	r4, r1
 8002b7e:	b118      	cbz	r0, 8002b88 <__swsetup_r+0x14>
 8002b80:	6a03      	ldr	r3, [r0, #32]
 8002b82:	b90b      	cbnz	r3, 8002b88 <__swsetup_r+0x14>
 8002b84:	f7ff f818 	bl	8001bb8 <__sinit>
 8002b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b8c:	0719      	lsls	r1, r3, #28
 8002b8e:	d422      	bmi.n	8002bd6 <__swsetup_r+0x62>
 8002b90:	06da      	lsls	r2, r3, #27
 8002b92:	d407      	bmi.n	8002ba4 <__swsetup_r+0x30>
 8002b94:	2209      	movs	r2, #9
 8002b96:	602a      	str	r2, [r5, #0]
 8002b98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b9c:	81a3      	strh	r3, [r4, #12]
 8002b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba2:	e033      	b.n	8002c0c <__swsetup_r+0x98>
 8002ba4:	0758      	lsls	r0, r3, #29
 8002ba6:	d512      	bpl.n	8002bce <__swsetup_r+0x5a>
 8002ba8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002baa:	b141      	cbz	r1, 8002bbe <__swsetup_r+0x4a>
 8002bac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002bb0:	4299      	cmp	r1, r3
 8002bb2:	d002      	beq.n	8002bba <__swsetup_r+0x46>
 8002bb4:	4628      	mov	r0, r5
 8002bb6:	f7ff f94f 	bl	8001e58 <_free_r>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8002bbe:	89a3      	ldrh	r3, [r4, #12]
 8002bc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002bc4:	81a3      	strh	r3, [r4, #12]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	6063      	str	r3, [r4, #4]
 8002bca:	6923      	ldr	r3, [r4, #16]
 8002bcc:	6023      	str	r3, [r4, #0]
 8002bce:	89a3      	ldrh	r3, [r4, #12]
 8002bd0:	f043 0308 	orr.w	r3, r3, #8
 8002bd4:	81a3      	strh	r3, [r4, #12]
 8002bd6:	6923      	ldr	r3, [r4, #16]
 8002bd8:	b94b      	cbnz	r3, 8002bee <__swsetup_r+0x7a>
 8002bda:	89a3      	ldrh	r3, [r4, #12]
 8002bdc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002be0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002be4:	d003      	beq.n	8002bee <__swsetup_r+0x7a>
 8002be6:	4621      	mov	r1, r4
 8002be8:	4628      	mov	r0, r5
 8002bea:	f000 f88b 	bl	8002d04 <__smakebuf_r>
 8002bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bf2:	f013 0201 	ands.w	r2, r3, #1
 8002bf6:	d00a      	beq.n	8002c0e <__swsetup_r+0x9a>
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	60a2      	str	r2, [r4, #8]
 8002bfc:	6962      	ldr	r2, [r4, #20]
 8002bfe:	4252      	negs	r2, r2
 8002c00:	61a2      	str	r2, [r4, #24]
 8002c02:	6922      	ldr	r2, [r4, #16]
 8002c04:	b942      	cbnz	r2, 8002c18 <__swsetup_r+0xa4>
 8002c06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002c0a:	d1c5      	bne.n	8002b98 <__swsetup_r+0x24>
 8002c0c:	bd38      	pop	{r3, r4, r5, pc}
 8002c0e:	0799      	lsls	r1, r3, #30
 8002c10:	bf58      	it	pl
 8002c12:	6962      	ldrpl	r2, [r4, #20]
 8002c14:	60a2      	str	r2, [r4, #8]
 8002c16:	e7f4      	b.n	8002c02 <__swsetup_r+0x8e>
 8002c18:	2000      	movs	r0, #0
 8002c1a:	e7f7      	b.n	8002c0c <__swsetup_r+0x98>
 8002c1c:	20000014 	.word	0x20000014

08002c20 <_raise_r>:
 8002c20:	291f      	cmp	r1, #31
 8002c22:	b538      	push	{r3, r4, r5, lr}
 8002c24:	4605      	mov	r5, r0
 8002c26:	460c      	mov	r4, r1
 8002c28:	d904      	bls.n	8002c34 <_raise_r+0x14>
 8002c2a:	2316      	movs	r3, #22
 8002c2c:	6003      	str	r3, [r0, #0]
 8002c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c32:	bd38      	pop	{r3, r4, r5, pc}
 8002c34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8002c36:	b112      	cbz	r2, 8002c3e <_raise_r+0x1e>
 8002c38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002c3c:	b94b      	cbnz	r3, 8002c52 <_raise_r+0x32>
 8002c3e:	4628      	mov	r0, r5
 8002c40:	f000 f830 	bl	8002ca4 <_getpid_r>
 8002c44:	4622      	mov	r2, r4
 8002c46:	4601      	mov	r1, r0
 8002c48:	4628      	mov	r0, r5
 8002c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c4e:	f000 b817 	b.w	8002c80 <_kill_r>
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d00a      	beq.n	8002c6c <_raise_r+0x4c>
 8002c56:	1c59      	adds	r1, r3, #1
 8002c58:	d103      	bne.n	8002c62 <_raise_r+0x42>
 8002c5a:	2316      	movs	r3, #22
 8002c5c:	6003      	str	r3, [r0, #0]
 8002c5e:	2001      	movs	r0, #1
 8002c60:	e7e7      	b.n	8002c32 <_raise_r+0x12>
 8002c62:	2100      	movs	r1, #0
 8002c64:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8002c68:	4620      	mov	r0, r4
 8002c6a:	4798      	blx	r3
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	e7e0      	b.n	8002c32 <_raise_r+0x12>

08002c70 <raise>:
 8002c70:	4b02      	ldr	r3, [pc, #8]	@ (8002c7c <raise+0xc>)
 8002c72:	4601      	mov	r1, r0
 8002c74:	6818      	ldr	r0, [r3, #0]
 8002c76:	f7ff bfd3 	b.w	8002c20 <_raise_r>
 8002c7a:	bf00      	nop
 8002c7c:	20000014 	.word	0x20000014

08002c80 <_kill_r>:
 8002c80:	b538      	push	{r3, r4, r5, lr}
 8002c82:	4d07      	ldr	r5, [pc, #28]	@ (8002ca0 <_kill_r+0x20>)
 8002c84:	2300      	movs	r3, #0
 8002c86:	4604      	mov	r4, r0
 8002c88:	4608      	mov	r0, r1
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	602b      	str	r3, [r5, #0]
 8002c8e:	f7fe fd41 	bl	8001714 <_kill>
 8002c92:	1c43      	adds	r3, r0, #1
 8002c94:	d102      	bne.n	8002c9c <_kill_r+0x1c>
 8002c96:	682b      	ldr	r3, [r5, #0]
 8002c98:	b103      	cbz	r3, 8002c9c <_kill_r+0x1c>
 8002c9a:	6023      	str	r3, [r4, #0]
 8002c9c:	bd38      	pop	{r3, r4, r5, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000230 	.word	0x20000230

08002ca4 <_getpid_r>:
 8002ca4:	f7fe bd2e 	b.w	8001704 <_getpid>

08002ca8 <_malloc_usable_size_r>:
 8002ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cac:	1f18      	subs	r0, r3, #4
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	bfbc      	itt	lt
 8002cb2:	580b      	ldrlt	r3, [r1, r0]
 8002cb4:	18c0      	addlt	r0, r0, r3
 8002cb6:	4770      	bx	lr

08002cb8 <__swhatbuf_r>:
 8002cb8:	b570      	push	{r4, r5, r6, lr}
 8002cba:	460c      	mov	r4, r1
 8002cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cc0:	2900      	cmp	r1, #0
 8002cc2:	b096      	sub	sp, #88	@ 0x58
 8002cc4:	4615      	mov	r5, r2
 8002cc6:	461e      	mov	r6, r3
 8002cc8:	da0d      	bge.n	8002ce6 <__swhatbuf_r+0x2e>
 8002cca:	89a3      	ldrh	r3, [r4, #12]
 8002ccc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002cd0:	f04f 0100 	mov.w	r1, #0
 8002cd4:	bf14      	ite	ne
 8002cd6:	2340      	movne	r3, #64	@ 0x40
 8002cd8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002cdc:	2000      	movs	r0, #0
 8002cde:	6031      	str	r1, [r6, #0]
 8002ce0:	602b      	str	r3, [r5, #0]
 8002ce2:	b016      	add	sp, #88	@ 0x58
 8002ce4:	bd70      	pop	{r4, r5, r6, pc}
 8002ce6:	466a      	mov	r2, sp
 8002ce8:	f000 f848 	bl	8002d7c <_fstat_r>
 8002cec:	2800      	cmp	r0, #0
 8002cee:	dbec      	blt.n	8002cca <__swhatbuf_r+0x12>
 8002cf0:	9901      	ldr	r1, [sp, #4]
 8002cf2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002cf6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002cfa:	4259      	negs	r1, r3
 8002cfc:	4159      	adcs	r1, r3
 8002cfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d02:	e7eb      	b.n	8002cdc <__swhatbuf_r+0x24>

08002d04 <__smakebuf_r>:
 8002d04:	898b      	ldrh	r3, [r1, #12]
 8002d06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d08:	079d      	lsls	r5, r3, #30
 8002d0a:	4606      	mov	r6, r0
 8002d0c:	460c      	mov	r4, r1
 8002d0e:	d507      	bpl.n	8002d20 <__smakebuf_r+0x1c>
 8002d10:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002d14:	6023      	str	r3, [r4, #0]
 8002d16:	6123      	str	r3, [r4, #16]
 8002d18:	2301      	movs	r3, #1
 8002d1a:	6163      	str	r3, [r4, #20]
 8002d1c:	b003      	add	sp, #12
 8002d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d20:	ab01      	add	r3, sp, #4
 8002d22:	466a      	mov	r2, sp
 8002d24:	f7ff ffc8 	bl	8002cb8 <__swhatbuf_r>
 8002d28:	9f00      	ldr	r7, [sp, #0]
 8002d2a:	4605      	mov	r5, r0
 8002d2c:	4639      	mov	r1, r7
 8002d2e:	4630      	mov	r0, r6
 8002d30:	f7ff f906 	bl	8001f40 <_malloc_r>
 8002d34:	b948      	cbnz	r0, 8002d4a <__smakebuf_r+0x46>
 8002d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d3a:	059a      	lsls	r2, r3, #22
 8002d3c:	d4ee      	bmi.n	8002d1c <__smakebuf_r+0x18>
 8002d3e:	f023 0303 	bic.w	r3, r3, #3
 8002d42:	f043 0302 	orr.w	r3, r3, #2
 8002d46:	81a3      	strh	r3, [r4, #12]
 8002d48:	e7e2      	b.n	8002d10 <__smakebuf_r+0xc>
 8002d4a:	89a3      	ldrh	r3, [r4, #12]
 8002d4c:	6020      	str	r0, [r4, #0]
 8002d4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d52:	81a3      	strh	r3, [r4, #12]
 8002d54:	9b01      	ldr	r3, [sp, #4]
 8002d56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002d5a:	b15b      	cbz	r3, 8002d74 <__smakebuf_r+0x70>
 8002d5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d60:	4630      	mov	r0, r6
 8002d62:	f000 f81d 	bl	8002da0 <_isatty_r>
 8002d66:	b128      	cbz	r0, 8002d74 <__smakebuf_r+0x70>
 8002d68:	89a3      	ldrh	r3, [r4, #12]
 8002d6a:	f023 0303 	bic.w	r3, r3, #3
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	81a3      	strh	r3, [r4, #12]
 8002d74:	89a3      	ldrh	r3, [r4, #12]
 8002d76:	431d      	orrs	r5, r3
 8002d78:	81a5      	strh	r5, [r4, #12]
 8002d7a:	e7cf      	b.n	8002d1c <__smakebuf_r+0x18>

08002d7c <_fstat_r>:
 8002d7c:	b538      	push	{r3, r4, r5, lr}
 8002d7e:	4d07      	ldr	r5, [pc, #28]	@ (8002d9c <_fstat_r+0x20>)
 8002d80:	2300      	movs	r3, #0
 8002d82:	4604      	mov	r4, r0
 8002d84:	4608      	mov	r0, r1
 8002d86:	4611      	mov	r1, r2
 8002d88:	602b      	str	r3, [r5, #0]
 8002d8a:	f7fe fd23 	bl	80017d4 <_fstat>
 8002d8e:	1c43      	adds	r3, r0, #1
 8002d90:	d102      	bne.n	8002d98 <_fstat_r+0x1c>
 8002d92:	682b      	ldr	r3, [r5, #0]
 8002d94:	b103      	cbz	r3, 8002d98 <_fstat_r+0x1c>
 8002d96:	6023      	str	r3, [r4, #0]
 8002d98:	bd38      	pop	{r3, r4, r5, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000230 	.word	0x20000230

08002da0 <_isatty_r>:
 8002da0:	b538      	push	{r3, r4, r5, lr}
 8002da2:	4d06      	ldr	r5, [pc, #24]	@ (8002dbc <_isatty_r+0x1c>)
 8002da4:	2300      	movs	r3, #0
 8002da6:	4604      	mov	r4, r0
 8002da8:	4608      	mov	r0, r1
 8002daa:	602b      	str	r3, [r5, #0]
 8002dac:	f7fe fd22 	bl	80017f4 <_isatty>
 8002db0:	1c43      	adds	r3, r0, #1
 8002db2:	d102      	bne.n	8002dba <_isatty_r+0x1a>
 8002db4:	682b      	ldr	r3, [r5, #0]
 8002db6:	b103      	cbz	r3, 8002dba <_isatty_r+0x1a>
 8002db8:	6023      	str	r3, [r4, #0]
 8002dba:	bd38      	pop	{r3, r4, r5, pc}
 8002dbc:	20000230 	.word	0x20000230

08002dc0 <_init>:
 8002dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc2:	bf00      	nop
 8002dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dc6:	bc08      	pop	{r3}
 8002dc8:	469e      	mov	lr, r3
 8002dca:	4770      	bx	lr

08002dcc <_fini>:
 8002dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dce:	bf00      	nop
 8002dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dd2:	bc08      	pop	{r3}
 8002dd4:	469e      	mov	lr, r3
 8002dd6:	4770      	bx	lr
